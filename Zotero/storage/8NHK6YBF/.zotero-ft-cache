Illumination 101
Tuesday, July 23, 13

Pixar Animation Studios

MU ILLUMINATION 101

LECTURE OUTLINE

- Ryusuke Villemin - MU Lighting System Overview - Direct Lighting Solution
- Christophe Hery - Luminaire examples - Beckmann BRDF
Tuesday, July 23, 13

Tuesday, July 23, 13

Tuesday, July 23, 13

Tuesday, July 23, 13

MU ILLUMINATION 101

BEFORE PHYSICALLY BASED LIGHTING

- REYES with prman - simple point lights, no energy, no falloff - non physical, non normalized BRDFs - deep shadow maps
- it was fine because there was no secondary effect
Tuesday, July 23, 13
no concept of energy, just color and intensity light 100, albedo 1 or light 1, albedo 100, same thing!

MU ILLUMINATION 101

PHYSICALLY BASED LIGHTING

- Solving the rendering equation

Z

( )= (

) ( ) ()

L x, !o

f x, !i, !o L x, !i cos ✓ d!

⌦

- L(x, ωo) : outgoing radiance

ωo

- L(x, ωi) : incoming radiance

- f(x, ωi, ωo) : BRDF

ωi θ
Ω

Tuesday, July 23, 13
recursion means conditions on L and f not to diverge to inﬁnity

MU ILLUMINATION 101

PHYSICALLY BASED LIGHTING

- 2 parts working in tandem: - physically correct lights emitting energy in the scene - physically correct BRDFs bouncing energy in the scene
Tuesday, July 23, 13
we can’t and shouldn’t decouple those 2 keep the same results between a rect area light and a glowing wall with same intensity

MU ILLUMINATION 101

PHYSICALLY BASED LIGHTING

- Break down the rendering equation, each part will be solved by different coshaders called integrators

Z

( )= (

)

( ) ()

L x, !o

f x, !i, !o Ldirect x, !i cos ✓ d!

Z⌦

+

(

)

( ) ()

fdiffuse x, !i, !o Lindirect x, !i cos ✓ d!

Z⌦

+

(

)

( ) ()

fspecular x, !i, !o Lindirect x, !i cos ✓ d!

⌦

Tuesday, July 23, 13
direct <-> indirect to get rid of the “recursion” diffuse spec because we use different method of integration taking advantage of the renderer

MU ILLUMINATION 101

PHYSICALLY BASED LIGHTING

E D
Tuesday, July 23, 13
using heckbert’s notation

L

D

S

MU ILLUMINATION 101

PHYSICALLY BASED LIGHTING

- directLighting integrator solves L{D,S}E path

Tuesday, July 23, 13

MU ILLUMINATION 101

PHYSICALLY BASED LIGHTING

- indirectLighting integrator solves LDD*E path

Tuesday, July 23, 13

MU ILLUMINATION 101

PHYSICALLY BASED LIGHTING

- reflection integrator solves LS{S*,D*}E path

Tuesday, July 23, 13

MU ILLUMINATION 101

PHYSICALLY BASED LIGHTING

- indirectDiffuse integrator uses - irradiance caching - radiosity cache - photon cache
- reflection integrator uses - caustic cache - radiosity cache (optional, in that case we give up secondary specular effects)
Tuesday, July 23, 13
no caustic path radiosity cache is prman speciﬁc

MU ILLUMINATION 101

DIRECT LIGHTING INTEGRATOR

- has 3 main parts - Light coshader - BRDF coshader - Integrator coshader
Tuesday, July 23, 13

MU ILLUMINATION 101

EFFICIENCY

- Multiple importance sampling - Filtered importance sampling - Importance resampling to reduce number of
shadow rays - Control variates
Tuesday, July 23, 13
brute force is good, always work but we want to speedup the process principal piece -> MIS

MU ILLUMINATION 101

DIRECT LIGHTING INTEGRATOR

BSDFSampleStruct
sample()
BRDF
valueAndPDF()

Integrator

BSDFValueStruct

LightEmissionStruct

LightSampleStruct

sample()
Light
emissionAndPDF()

Tuesday, July 23, 13

MU ILLUMINATION 101

BEFORE THE LIGHT LOOP: BRDF INTEGRATION

- Call sample() for each BRDF coshaders - Create a pruned BSDFSampleStruct using the
arealight BVH - Pass the original and the pruned
BSDFSampleStruct
Tuesday, July 23, 13

MU ILLUMINATION 101

BEFORE THE LIGHT LOOP: BRDF INTEGRATION

- The original struct contains all directions
- The pruned struct only contains samples hitting a light

Tuesday, July 23, 13

MU ILLUMINATION 101

BEFORE THE LIGHT LOOP: BRDF INTEGRATION

void integrateBRDF(output BSDFSampleStruct bs, output BSDFSampleStruct bsbvh, output int numSpecLobes, output int numSpecSamples)
{ numSpecLobes = bsdf->getNumSpecSamples(numLobeSamples); if (numSpecLobes) { bs = bsdf->sample(facingRatio, w_in); numSpecSamples = bs->getNumSamples();
bsbvh = BVHReduce(P, bs); } }
Tuesday, July 23, 13

MU ILLUMINATION 101
Tuesday, July 23, 13
brdf samples around the reﬂection direction

BRDF SAMPLING
BRDF Samples

MU ILLUMINATION 101
- Call sample() on the light coshader
- Call valueAndPDF() on each BRDF coshader
- Call emissionAndPDF() on the light coshader
- ComputeMIS() - ComputeShadows()
Tuesday, July 23, 13

LIGHT LOOP

MU ILLUMINATION 101

LIGHT LOOP

void integrateLight(shader li, output color diffPerLight, output color specPerLight)
{ li->emissionandPDF(bs, lightValues);
li->sample(ls); bsdf->valueandPDF(facingRatio, w_in, w_outs, diffValues);
computeMIS(ls, diffValues, specValues, bs, lightValues, Cdiff, Cspec, CspecBRDF);
computeShadows(Cdiff, Cspec, diffPerLight, specPerLight); computeBRDFShadows(CspecBRDF, specPerLight); }
Tuesday, July 23, 13

MU ILLUMINATION 101

LIGHT SAMPLING

Light Samples

Tuesday, July 23, 13
light samples on the light

MU ILLUMINATION 101

DIRECT LIGHTING INTEGRATOR

- Sample from lobes using BRDF coshaders - Sample from lights using light coshaders - Combine samples using Multiple Importance
Sampling
Tuesday, July 23, 13

MU ILLUMINATION 101

DIRECT LIGHTING INTEGRATOR

color integrate() {
integrateBRDF(bs, bsbvh, numSpecLobes, numSpecSamples);
for (l=0; l<lightCount; l+=1) { integrateLight(lights[l], bs, numSpecLobes, numSpecSamples, diff, spec);
resultDiff += diff; resultSpec += spec; result += diff+spec; }
return result; }
Tuesday, July 23, 13

MU ILLUMINATION 101
Light Samples
Tuesday, July 23, 13

LIGHT LOOP
BRDF Samples

MU ILLUMINATION 101
- BRDF sampling only - good sampling everywhere except in the highlights where BRDF sampled directions miss bright spots - fuzzy shadows
Tuesday, July 23, 13

BRDF INTEGRATION

MU ILLUMINATION 101
- Light Sampling Only - good sampling in the highlights, well defined shadows - noise in low brightness region where the sample directions don't match the BRDF peak
Tuesday, July 23, 13

LIGHT INTEGRATION

MU ILLUMINATION 101

MULTIPLE IMPORTANCE SAMPLING

- Best of both worlds!
Tuesday, July 23, 13

MU ILLUMINATION 101

SHADOWING

- Happens after MIS - can optimize shadow computation using the final weights of each sample (cutoff, russian roulette) - can perform a resampling step to reduce the number of shadow rays
Tuesday, July 23, 13

MU ILLUMINATION 101

SHADOWING

void computeLightShadows() {
avgVis = AreashadowRays(ls->P, ls->pdf, Lvis);
for(i=0; i<lightSamples; i+=1) { diffPerLight += Lvis[i] * Cdiff[i]; diffPerLightNoshad += Cdiff[i]; specPerLight += Lvis[i] * Cspec[i];
}
if (li->diffuConvolution(diffConv)) { diffConv *= bsdf->albedo(); diffPerLight += avgVis * (diffConv -diffPerLightNoshad); diffPerLightNoShad = diffConv;
} }
Tuesday, July 23, 13

MU ILLUMINATION 101

SHADOWING

Tuesday, July 23, 13

MU ILLUMINATION 101

SHADOWING

- Can use multiple techniques as long as they don't overlap and create double shadowing
- shadowmaps for hair - SH for large terrain vegetation
Tuesday, July 23, 13

MU ILLUMINATION 101

+

=

Tuesday, July 23, 13

SHADOWING

MU ILLUMINATION 101

RESAMPLING MULTIPLE IMPORTANCE SAMPLING

Tuesday, July 23, 13

MU ILLUMINATION 101

CONTROL VARIATES

- Use of average visibility to further reduce variance
- the lobe must be completely view independent to be computed before rendering
- the light must be able to provide such answer
Tuesday, July 23, 13
Control variates is a classic Monte Carlo technique. Here we rely on the lights providing an analytical integral (usually of their diffuse contribution).

MU ILLUMINATION 101

CONTROL VARIATES

- Sphere: sub-hemispherical light source integration
- Rect, Disk: polygonal light source analytical integration
- Dome: image space convolution
Tuesday, July 23, 13
Details and references are in the course notes.

MU ILLUMINATION 101

CONTROL VARIATES

Pre-computed convolution for a dome light texture

Tuesday, July 23, 13

MU ILLUMINATION 101

CONTROL VARIATES

Tuesday, July 23, 13

MU ILLUMINATION 101

PHYSICALLY PLAUSIBLE MATERIALS

- try to be energy conserving - reflections are handled through the BRDFs
Tuesday, July 23, 13

MU ILLUMINATION 101

NEW MATERIALS... CONSEQUENCES

- no distinction between “planar reflections” and “planar area lights”
- no distinction between “spherical environments” and “dome area lights”
- not only true for specular: diffuse and bounce are also interchangeable
Tuesday, July 23, 13

MU ILLUMINATION 101

LOOK DEVELOPMENT: IBL1

Tuesday, July 23, 13
My friend Arkell Rasiah and I shot a series of IBLs, which we initially used to calibrate materials.

MU ILLUMINATION 101

LOOK DEVELOPMENT: IBL2

Tuesday, July 23, 13

MU ILLUMINATION 101

LOOK DEVELOPMENT: IBL1

Tuesday, July 23, 13

MU ILLUMINATION 101

LOOK DEVELOPMENT: IBL2

Tuesday, July 23, 13

MU ILLUMINATION 101

PHYSICAL LIGHTS

- various shapes: rect, disk, sphere - infinite dome light (IBL) - all can be textured, provide diffuse and
specular and produce soft shadows - only one point light: sun
Tuesday, July 23, 13

Tuesday, July 23, 13

MU ILLUMINATION 101

EXAMPLE: RECT AREA LIGHT

Tuesday, July 23, 13

MU ILLUMINATION 101

EXAMPLE: RECT AREA LIGHT

Tuesday, July 23, 13

MU ILLUMINATION 101

EXAMPLE: DOME LIGHT

Tuesday, July 23, 13

MU ILLUMINATION 101

DOME IMPORTANCE SAMPLING

Tuesday, July 23, 13

MU ILLUMINATION 101

DOME IMPORTANCE SAMPLING

Tuesday, July 23, 13

MU ILLUMINATION 101

DOME IMPORTANCE SAMPLING

Tuesday, July 23, 13

MU ILLUMINATION 101

DOME IMPORTANCE SAMPLING

Tuesday, July 23, 13

Tuesday, July 23, 13

MU ILLUMINATION 101

BRDF SPECIFICATION

- must be energy conserving (normalized) - must “substitute” to our trusted old Cook-
Torrance - should be anisotropy aware (brushed metals) - can be efficiently computed (sampling)
Tuesday, July 23, 13

MU ILLUMINATION 101

“OUR” SOLUTION: D-BRDF

based on Beckmann distribution:

Db

mDb(m) ( )=

e
=
⇡

etatna2n(2✓(✓mm))//↵↵22
↵⇡2↵2cocoss44((✓✓mm))

(n·(mn)·2m)12 1
e e↵2(↵n2·m (n)2·m)2 ==⇡⇡↵2↵(2n ·nm·)4m 4
()

Tuesday, July 23, 13

MU ILLUMINATION 101

“OUR” SOLUTION: D-BRDF

fµ(l, v)

=

F (l, h) Db(h) (n · 4 (n · l) (v · h)

h)

ppddff == DDbb44((hh((vv))((··nnhh·)·)hh))
Tuesday, July 23, 13
We imposed a strict energy conservation to the model and worked backwards to derive it. The details are in the course notes. We importance sample the main exponential term in the Beckmann distribution, similarly to what Walter proposed, and thus the pdf is the following.

MU ILLUMINATION 101

ANISOTROPY

split roughness α into 2 distinct coefficients along 2 surface directions

( ) ( ) u1·h ↵1

2 +

u2 ·h ↵2

2

e

(n·h)2

Db(h) = ⇡ ↵1 ↵2 (n · h)4

Tuesday, July 23, 13
Anisotropy is a very simple extension.

MU ILLUMINATION 101

BECKMANN BRDF RESULTS

Tuesday, July 23, 13

MU ILLUMINATION 101

REFERENCES

- Eric Veach’s paper: http:// graphics.stanford.edu/papers/combine
- D-BRDF: http://www.cs.utah.edu/~premoze/dbrdf/ dBRDF.pdf
- Siggraph2012 Monte-Carlo Course: https:// sites.google.com/site/qmcrendering/
Tuesday, July 23, 13

Tuesday, July 23, 13

Tuesday, July 23, 13

Tuesday, July 23, 13
Like in the story, many people gave us a helping hand in this work.

Tuesday, July 23, 13
So thank you

Tuesday, July 23, 13
.. to the folks in the GI team (Bill Reeves, Jean-Claude Kalache, Davide Pesare, Jacob Kunzel, Farhez Rayani and Guido Quaroni), the lighters and shading artists on Monsters University and The Blue Umbrella.

