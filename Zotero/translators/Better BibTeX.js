{
	"translatorID": "ca65189f-8815-4afe-8c8b-8c7c15f0edca",
	"label": "Better BibTeX",
	"description": "exports items in BibTeX format",
	"creator": "Simon Kornblith, Richard Karnesky and Emiliano heyns",
	"target": "bib",
	"minVersion": "4.0.27",
	"maxVersion": "",
	"configOptions": {
		"async": true,
		"getCollections": true,
		"hash": "43e048a31bf6232094486d17fc2389a9489b504c12631f6c5a21dc57d6c883c6"
	},
	"displayOptions": {
		"exportNotes": false,
		"exportFileData": false,
		"useJournalAbbreviation": false,
		"keepUpdated": false,
		"worker": true
	},
	"translatorType": 3,
	"browserSupport": "gcsv",
	"priority": 199,
	"inRepository": false,
	"lastUpdated": "2022-09-03"
}

ZOTERO_CONFIG = {"GUID":"zotero@chnm.gmu.edu","ID":"zotero","CLIENT_NAME":"Zotero","DOMAIN_NAME":"zotero.org","PRODUCER":"Digital Scholar","PRODUCER_URL":"https://digitalscholar.org","REPOSITORY_URL":"https://repo.zotero.org/repo/","BASE_URI":"http://zotero.org/","WWW_BASE_URL":"https://www.zotero.org/","PROXY_AUTH_URL":"https://zoteroproxycheck.s3.amazonaws.com/test","API_URL":"https://api.zotero.org/","STREAMING_URL":"wss://stream.zotero.org/","SERVICES_URL":"https://services.zotero.org/","API_VERSION":3,"CONNECTOR_MIN_VERSION":"5.0.39","PREF_BRANCH":"extensions.zotero.","BOOKMARKLET_ORIGIN":"https://www.zotero.org","BOOKMARKLET_URL":"https://www.zotero.org/bookmarklet/","START_URL":"https://www.zotero.org/start","QUICK_START_URL":"https://www.zotero.org/support/quick_start_guide","PDF_TOOLS_URL":"https://www.zotero.org/download/xpdf/","SUPPORT_URL":"https://www.zotero.org/support/","SYNC_INFO_URL":"https://www.zotero.org/support/sync","TROUBLESHOOTING_URL":"https://www.zotero.org/support/getting_help","FEEDBACK_URL":"https://forums.zotero.org/","CONNECTORS_URL":"https://www.zotero.org/download/connectors","CHANGELOG_URL":"https://www.zotero.org/support/changelog","CREDITS_URL":"https://www.zotero.org/support/credits_and_acknowledgments","LICENSING_URL":"https://www.zotero.org/support/licensing","GET_INVOLVED_URL":"https://www.zotero.org/getinvolved","DICTIONARIES_URL":"https://download.zotero.org/dictionaries/"}

        if (typeof ZOTERO_TRANSLATOR_INFO === 'undefined') var ZOTERO_TRANSLATOR_INFO = {}; // declare if not declared
        Object.assign(ZOTERO_TRANSLATOR_INFO, {"translatorID":"ca65189f-8815-4afe-8c8b-8c7c15f0edca","label":"Better BibTeX","description":"exports items in BibTeX format","creator":"Simon Kornblith, Richard Karnesky and Emiliano heyns","target":"bib","minVersion":"4.0.27","maxVersion":"","configOptions":{"async":true,"getCollections":true},"displayOptions":{"exportNotes":false,"exportFileData":false,"useJournalAbbreviation":false,"keepUpdated":false,"worker":true},"translatorType":3,"browserSupport":"gcsv","priority":199,"inRepository":false}); // assign new data
      
var Translator___detectImport___doExport___doImport = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/process/browser.js"(exports, module) {
      init_globals();
      var process2 = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process2.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process2.title = "browser";
      process2.browser = true;
      process2.env = {};
      process2.argv = [];
      process2.version = "";
      process2.versions = {};
      function noop2() {
      }
      process2.on = noop2;
      process2.addListener = noop2;
      process2.once = noop2;
      process2.off = noop2;
      process2.removeListener = noop2;
      process2.removeAllListeners = noop2;
      process2.emit = noop2;
      process2.prependListener = noop2;
      process2.prependOnceListener = noop2;
      process2.listeners = function(name) {
        return [];
      };
      process2.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process2.cwd = function() {
        return "/";
      };
      process2.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process2.umask = function() {
        return 0;
      };
    }
  });

  // setup/loaders/globals.js
  var process, global;
  var init_globals = __esm({
    "setup/loaders/globals.js"() {
      process = require_browser();
      global = Function("return this")();
    }
  });

  // node_modules/fast-safe-stringify/index.js
  var require_fast_safe_stringify = __commonJS({
    "node_modules/fast-safe-stringify/index.js"(exports, module) {
      init_globals();
      module.exports = stringify;
      stringify.default = stringify;
      stringify.stable = deterministicStringify;
      stringify.stableStringify = deterministicStringify;
      var LIMIT_REPLACE_NODE = "[...]";
      var CIRCULAR_REPLACE_NODE = "[Circular]";
      var arr = [];
      var replacerStack = [];
      function defaultOptions() {
        return {
          depthLimit: Number.MAX_SAFE_INTEGER,
          edgesLimit: Number.MAX_SAFE_INTEGER
        };
      }
      function stringify(obj, replacer, spacer, options2) {
        if (typeof options2 === "undefined") {
          options2 = defaultOptions();
        }
        decirc(obj, "", 0, [], void 0, 0, options2);
        var res;
        try {
          if (replacerStack.length === 0) {
            res = JSON.stringify(obj, replacer, spacer);
          } else {
            res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
          }
        } catch (_) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          while (arr.length !== 0) {
            var part = arr.pop();
            if (part.length === 4) {
              Object.defineProperty(part[0], part[1], part[3]);
            } else {
              part[0][part[1]] = part[2];
            }
          }
        }
        return res;
      }
      function setReplace(replace, val, k, parent) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
        if (propertyDescriptor.get !== void 0) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, { value: replace });
            arr.push([parent, k, val, propertyDescriptor]);
          } else {
            replacerStack.push([val, k, replace]);
          }
        } else {
          parent[k] = replace;
          arr.push([parent, k, val]);
        }
      }
      function decirc(val, k, edgeIndex, stack, parent, depth, options2) {
        depth += 1;
        var i;
        if (typeof val === "object" && val !== null) {
          for (i = 0; i < stack.length; i++) {
            if (stack[i] === val) {
              setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
              return;
            }
          }
          if (typeof options2.depthLimit !== "undefined" && depth > options2.depthLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          if (typeof options2.edgesLimit !== "undefined" && edgeIndex + 1 > options2.edgesLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          stack.push(val);
          if (Array.isArray(val)) {
            for (i = 0; i < val.length; i++) {
              decirc(val[i], i, i, stack, val, depth, options2);
            }
          } else {
            var keys = Object.keys(val);
            for (i = 0; i < keys.length; i++) {
              var key = keys[i];
              decirc(val[key], key, i, stack, val, depth, options2);
            }
          }
          stack.pop();
        }
      }
      function compareFunction(a, b) {
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        return 0;
      }
      function deterministicStringify(obj, replacer, spacer, options2) {
        if (typeof options2 === "undefined") {
          options2 = defaultOptions();
        }
        var tmp = deterministicDecirc(obj, "", 0, [], void 0, 0, options2) || obj;
        var res;
        try {
          if (replacerStack.length === 0) {
            res = JSON.stringify(tmp, replacer, spacer);
          } else {
            res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
          }
        } catch (_) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          while (arr.length !== 0) {
            var part = arr.pop();
            if (part.length === 4) {
              Object.defineProperty(part[0], part[1], part[3]);
            } else {
              part[0][part[1]] = part[2];
            }
          }
        }
        return res;
      }
      function deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options2) {
        depth += 1;
        var i;
        if (typeof val === "object" && val !== null) {
          for (i = 0; i < stack.length; i++) {
            if (stack[i] === val) {
              setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
              return;
            }
          }
          try {
            if (typeof val.toJSON === "function") {
              return;
            }
          } catch (_) {
            return;
          }
          if (typeof options2.depthLimit !== "undefined" && depth > options2.depthLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          if (typeof options2.edgesLimit !== "undefined" && edgeIndex + 1 > options2.edgesLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          stack.push(val);
          if (Array.isArray(val)) {
            for (i = 0; i < val.length; i++) {
              deterministicDecirc(val[i], i, i, stack, val, depth, options2);
            }
          } else {
            var tmp = {};
            var keys = Object.keys(val).sort(compareFunction);
            for (i = 0; i < keys.length; i++) {
              var key = keys[i];
              deterministicDecirc(val[key], key, i, stack, val, depth, options2);
              tmp[key] = val[key];
            }
            if (typeof parent !== "undefined") {
              arr.push([parent, k, val]);
              parent[k] = tmp;
            } else {
              return tmp;
            }
          }
          stack.pop();
        }
      }
      function replaceGetterValues(replacer) {
        replacer = typeof replacer !== "undefined" ? replacer : function(k, v) {
          return v;
        };
        return function(key, val) {
          if (replacerStack.length > 0) {
            for (var i = 0; i < replacerStack.length; i++) {
              var part = replacerStack[i];
              if (part[1] === key && part[0] === val) {
                val = part[2];
                replacerStack.splice(i, 1);
                break;
              }
            }
          }
          return replacer.call(this, key, val);
        };
      }
    }
  });

  // node_modules/has-symbols/shams.js
  var require_shams = __commonJS({
    "node_modules/has-symbols/shams.js"(exports, module) {
      init_globals();
      module.exports = function hasSymbols() {
        if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
          return false;
        }
        if (typeof Symbol.iterator === "symbol") {
          return true;
        }
        var obj = {};
        var sym = Symbol("test");
        var symObj = Object(sym);
        if (typeof sym === "string") {
          return false;
        }
        if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
          return false;
        }
        if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
          return false;
        }
        var symVal = 42;
        obj[sym] = symVal;
        for (sym in obj) {
          return false;
        }
        if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
          return false;
        }
        if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
          return false;
        }
        var syms = Object.getOwnPropertySymbols(obj);
        if (syms.length !== 1 || syms[0] !== sym) {
          return false;
        }
        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
          return false;
        }
        if (typeof Object.getOwnPropertyDescriptor === "function") {
          var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
          if (descriptor.value !== symVal || descriptor.enumerable !== true) {
            return false;
          }
        }
        return true;
      };
    }
  });

  // node_modules/has-tostringtag/shams.js
  var require_shams2 = __commonJS({
    "node_modules/has-tostringtag/shams.js"(exports, module) {
      init_globals();
      var hasSymbols = require_shams();
      module.exports = function hasToStringTagShams() {
        return hasSymbols() && !!Symbol.toStringTag;
      };
    }
  });

  // node_modules/has-symbols/index.js
  var require_has_symbols = __commonJS({
    "node_modules/has-symbols/index.js"(exports, module) {
      init_globals();
      var origSymbol = typeof Symbol !== "undefined" && Symbol;
      var hasSymbolSham = require_shams();
      module.exports = function hasNativeSymbols() {
        if (typeof origSymbol !== "function") {
          return false;
        }
        if (typeof Symbol !== "function") {
          return false;
        }
        if (typeof origSymbol("foo") !== "symbol") {
          return false;
        }
        if (typeof Symbol("bar") !== "symbol") {
          return false;
        }
        return hasSymbolSham();
      };
    }
  });

  // node_modules/function-bind/implementation.js
  var require_implementation = __commonJS({
    "node_modules/function-bind/implementation.js"(exports, module) {
      init_globals();
      var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
      var slice = Array.prototype.slice;
      var toStr = Object.prototype.toString;
      var funcType = "[object Function]";
      module.exports = function bind(that) {
        var target = this;
        if (typeof target !== "function" || toStr.call(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice.call(arguments, 1);
        var bound;
        var binder = function() {
          if (this instanceof bound) {
            var result = target.apply(
              this,
              args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
              return result;
            }
            return this;
          } else {
            return target.apply(
              that,
              args.concat(slice.call(arguments))
            );
          }
        };
        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
          boundArgs.push("$" + i);
        }
        bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
        if (target.prototype) {
          var Empty = function Empty2() {
          };
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
        }
        return bound;
      };
    }
  });

  // node_modules/function-bind/index.js
  var require_function_bind = __commonJS({
    "node_modules/function-bind/index.js"(exports, module) {
      init_globals();
      var implementation = require_implementation();
      module.exports = Function.prototype.bind || implementation;
    }
  });

  // node_modules/has/src/index.js
  var require_src = __commonJS({
    "node_modules/has/src/index.js"(exports, module) {
      init_globals();
      var bind = require_function_bind();
      module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/get-intrinsic/index.js
  var require_get_intrinsic = __commonJS({
    "node_modules/get-intrinsic/index.js"(exports, module) {
      init_globals();
      var undefined2;
      var $SyntaxError = SyntaxError;
      var $Function = Function;
      var $TypeError = TypeError;
      var getEvalledConstructor = function(expressionSyntax) {
        try {
          return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
        } catch (e) {
        }
      };
      var $gOPD = Object.getOwnPropertyDescriptor;
      if ($gOPD) {
        try {
          $gOPD({}, "");
        } catch (e) {
          $gOPD = null;
        }
      }
      var throwTypeError = function() {
        throw new $TypeError();
      };
      var ThrowTypeError = $gOPD ? function() {
        try {
          arguments.callee;
          return throwTypeError;
        } catch (calleeThrows) {
          try {
            return $gOPD(arguments, "callee").get;
          } catch (gOPDthrows) {
            return throwTypeError;
          }
        }
      }() : throwTypeError;
      var hasSymbols = require_has_symbols()();
      var getProto = Object.getPrototypeOf || function(x) {
        return x.__proto__;
      };
      var needsEval = {};
      var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
      var INTRINSICS = {
        "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
        "%Array%": Array,
        "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
        "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
        "%AsyncFromSyncIteratorPrototype%": undefined2,
        "%AsyncFunction%": needsEval,
        "%AsyncGenerator%": needsEval,
        "%AsyncGeneratorFunction%": needsEval,
        "%AsyncIteratorPrototype%": needsEval,
        "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
        "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
        "%Boolean%": Boolean,
        "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
        "%Date%": Date,
        "%decodeURI%": decodeURI,
        "%decodeURIComponent%": decodeURIComponent,
        "%encodeURI%": encodeURI,
        "%encodeURIComponent%": encodeURIComponent,
        "%Error%": Error,
        "%eval%": eval,
        "%EvalError%": EvalError,
        "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
        "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
        "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
        "%Function%": $Function,
        "%GeneratorFunction%": needsEval,
        "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
        "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
        "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
        "%isFinite%": isFinite,
        "%isNaN%": isNaN,
        "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
        "%JSON%": typeof JSON === "object" ? JSON : undefined2,
        "%Map%": typeof Map === "undefined" ? undefined2 : Map,
        "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
        "%Math%": Math,
        "%Number%": Number,
        "%Object%": Object,
        "%parseFloat%": parseFloat,
        "%parseInt%": parseInt,
        "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
        "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
        "%RangeError%": RangeError,
        "%ReferenceError%": ReferenceError,
        "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
        "%RegExp%": RegExp,
        "%Set%": typeof Set === "undefined" ? undefined2 : Set,
        "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
        "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
        "%String%": String,
        "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
        "%Symbol%": hasSymbols ? Symbol : undefined2,
        "%SyntaxError%": $SyntaxError,
        "%ThrowTypeError%": ThrowTypeError,
        "%TypedArray%": TypedArray,
        "%TypeError%": $TypeError,
        "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
        "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
        "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
        "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
        "%URIError%": URIError,
        "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
        "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
        "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
      };
      var doEval = function doEval2(name) {
        var value;
        if (name === "%AsyncFunction%") {
          value = getEvalledConstructor("async function () {}");
        } else if (name === "%GeneratorFunction%") {
          value = getEvalledConstructor("function* () {}");
        } else if (name === "%AsyncGeneratorFunction%") {
          value = getEvalledConstructor("async function* () {}");
        } else if (name === "%AsyncGenerator%") {
          var fn = doEval2("%AsyncGeneratorFunction%");
          if (fn) {
            value = fn.prototype;
          }
        } else if (name === "%AsyncIteratorPrototype%") {
          var gen = doEval2("%AsyncGenerator%");
          if (gen) {
            value = getProto(gen.prototype);
          }
        }
        INTRINSICS[name] = value;
        return value;
      };
      var LEGACY_ALIASES = {
        "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
        "%ArrayPrototype%": ["Array", "prototype"],
        "%ArrayProto_entries%": ["Array", "prototype", "entries"],
        "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
        "%ArrayProto_keys%": ["Array", "prototype", "keys"],
        "%ArrayProto_values%": ["Array", "prototype", "values"],
        "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
        "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
        "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
        "%BooleanPrototype%": ["Boolean", "prototype"],
        "%DataViewPrototype%": ["DataView", "prototype"],
        "%DatePrototype%": ["Date", "prototype"],
        "%ErrorPrototype%": ["Error", "prototype"],
        "%EvalErrorPrototype%": ["EvalError", "prototype"],
        "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
        "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
        "%FunctionPrototype%": ["Function", "prototype"],
        "%Generator%": ["GeneratorFunction", "prototype"],
        "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
        "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
        "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
        "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
        "%JSONParse%": ["JSON", "parse"],
        "%JSONStringify%": ["JSON", "stringify"],
        "%MapPrototype%": ["Map", "prototype"],
        "%NumberPrototype%": ["Number", "prototype"],
        "%ObjectPrototype%": ["Object", "prototype"],
        "%ObjProto_toString%": ["Object", "prototype", "toString"],
        "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
        "%PromisePrototype%": ["Promise", "prototype"],
        "%PromiseProto_then%": ["Promise", "prototype", "then"],
        "%Promise_all%": ["Promise", "all"],
        "%Promise_reject%": ["Promise", "reject"],
        "%Promise_resolve%": ["Promise", "resolve"],
        "%RangeErrorPrototype%": ["RangeError", "prototype"],
        "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
        "%RegExpPrototype%": ["RegExp", "prototype"],
        "%SetPrototype%": ["Set", "prototype"],
        "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
        "%StringPrototype%": ["String", "prototype"],
        "%SymbolPrototype%": ["Symbol", "prototype"],
        "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
        "%TypedArrayPrototype%": ["TypedArray", "prototype"],
        "%TypeErrorPrototype%": ["TypeError", "prototype"],
        "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
        "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
        "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
        "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
        "%URIErrorPrototype%": ["URIError", "prototype"],
        "%WeakMapPrototype%": ["WeakMap", "prototype"],
        "%WeakSetPrototype%": ["WeakSet", "prototype"]
      };
      var bind = require_function_bind();
      var hasOwn = require_src();
      var $concat = bind.call(Function.call, Array.prototype.concat);
      var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
      var $replace = bind.call(Function.call, String.prototype.replace);
      var $strSlice = bind.call(Function.call, String.prototype.slice);
      var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = function stringToPath2(string) {
        var first = $strSlice(string, 0, 1);
        var last = $strSlice(string, -1);
        if (first === "%" && last !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
        } else if (last === "%" && first !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
        }
        var result = [];
        $replace(string, rePropName, function(match, number2, quote, subString) {
          result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number2 || match;
        });
        return result;
      };
      var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
        var intrinsicName = name;
        var alias;
        if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
          alias = LEGACY_ALIASES[intrinsicName];
          intrinsicName = "%" + alias[0] + "%";
        }
        if (hasOwn(INTRINSICS, intrinsicName)) {
          var value = INTRINSICS[intrinsicName];
          if (value === needsEval) {
            value = doEval(intrinsicName);
          }
          if (typeof value === "undefined" && !allowMissing) {
            throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
          }
          return {
            alias,
            name: intrinsicName,
            value
          };
        }
        throw new $SyntaxError("intrinsic " + name + " does not exist!");
      };
      module.exports = function GetIntrinsic(name, allowMissing) {
        if (typeof name !== "string" || name.length === 0) {
          throw new $TypeError("intrinsic name must be a non-empty string");
        }
        if (arguments.length > 1 && typeof allowMissing !== "boolean") {
          throw new $TypeError('"allowMissing" argument must be a boolean');
        }
        var parts = stringToPath(name);
        var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
        var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
        var intrinsicRealName = intrinsic.name;
        var value = intrinsic.value;
        var skipFurtherCaching = false;
        var alias = intrinsic.alias;
        if (alias) {
          intrinsicBaseName = alias[0];
          $spliceApply(parts, $concat([0, 1], alias));
        }
        for (var i = 1, isOwn = true; i < parts.length; i += 1) {
          var part = parts[i];
          var first = $strSlice(part, 0, 1);
          var last = $strSlice(part, -1);
          if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
            throw new $SyntaxError("property names with quotes must have matching quotes");
          }
          if (part === "constructor" || !isOwn) {
            skipFurtherCaching = true;
          }
          intrinsicBaseName += "." + part;
          intrinsicRealName = "%" + intrinsicBaseName + "%";
          if (hasOwn(INTRINSICS, intrinsicRealName)) {
            value = INTRINSICS[intrinsicRealName];
          } else if (value != null) {
            if (!(part in value)) {
              if (!allowMissing) {
                throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
              }
              return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
              var desc = $gOPD(value, part);
              isOwn = !!desc;
              if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
                value = desc.get;
              } else {
                value = value[part];
              }
            } else {
              isOwn = hasOwn(value, part);
              value = value[part];
            }
            if (isOwn && !skipFurtherCaching) {
              INTRINSICS[intrinsicRealName] = value;
            }
          }
        }
        return value;
      };
    }
  });

  // node_modules/call-bind/index.js
  var require_call_bind = __commonJS({
    "node_modules/call-bind/index.js"(exports, module) {
      init_globals();
      var bind = require_function_bind();
      var GetIntrinsic = require_get_intrinsic();
      var $apply = GetIntrinsic("%Function.prototype.apply%");
      var $call = GetIntrinsic("%Function.prototype.call%");
      var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
      var $max = GetIntrinsic("%Math.max%");
      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
        } catch (e) {
          $defineProperty = null;
        }
      }
      module.exports = function callBind(originalFunction) {
        var func = $reflectApply(bind, $call, arguments);
        if ($gOPD && $defineProperty) {
          var desc = $gOPD(func, "length");
          if (desc.configurable) {
            $defineProperty(
              func,
              "length",
              { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
            );
          }
        }
        return func;
      };
      var applyBind = function applyBind2() {
        return $reflectApply(bind, $apply, arguments);
      };
      if ($defineProperty) {
        $defineProperty(module.exports, "apply", { value: applyBind });
      } else {
        module.exports.apply = applyBind;
      }
    }
  });

  // node_modules/call-bind/callBound.js
  var require_callBound = __commonJS({
    "node_modules/call-bind/callBound.js"(exports, module) {
      init_globals();
      var GetIntrinsic = require_get_intrinsic();
      var callBind = require_call_bind();
      var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
      module.exports = function callBoundIntrinsic(name, allowMissing) {
        var intrinsic = GetIntrinsic(name, !!allowMissing);
        if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
          return callBind(intrinsic);
        }
        return intrinsic;
      };
    }
  });

  // node_modules/is-arguments/index.js
  var require_is_arguments = __commonJS({
    "node_modules/is-arguments/index.js"(exports, module) {
      init_globals();
      var hasToStringTag = require_shams2()();
      var callBound = require_callBound();
      var $toString = callBound("Object.prototype.toString");
      var isStandardArguments = function isArguments(value) {
        if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
          return false;
        }
        return $toString(value) === "[object Arguments]";
      };
      var isLegacyArguments = function isArguments(value) {
        if (isStandardArguments(value)) {
          return true;
        }
        return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
      };
      var supportsStandardArguments = function() {
        return isStandardArguments(arguments);
      }();
      isStandardArguments.isLegacyArguments = isLegacyArguments;
      module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
    }
  });

  // node_modules/is-generator-function/index.js
  var require_is_generator_function = __commonJS({
    "node_modules/is-generator-function/index.js"(exports, module) {
      init_globals();
      var toStr = Object.prototype.toString;
      var fnToStr = Function.prototype.toString;
      var isFnRegex = /^\s*(?:function)?\*/;
      var hasToStringTag = require_shams2()();
      var getProto = Object.getPrototypeOf;
      var getGeneratorFunc = function() {
        if (!hasToStringTag) {
          return false;
        }
        try {
          return Function("return function*() {}")();
        } catch (e) {
        }
      };
      var GeneratorFunction;
      module.exports = function isGeneratorFunction(fn) {
        if (typeof fn !== "function") {
          return false;
        }
        if (isFnRegex.test(fnToStr.call(fn))) {
          return true;
        }
        if (!hasToStringTag) {
          var str = toStr.call(fn);
          return str === "[object GeneratorFunction]";
        }
        if (!getProto) {
          return false;
        }
        if (typeof GeneratorFunction === "undefined") {
          var generatorFunc = getGeneratorFunc();
          GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
        }
        return getProto(fn) === GeneratorFunction;
      };
    }
  });

  // node_modules/foreach/index.js
  var require_foreach = __commonJS({
    "node_modules/foreach/index.js"(exports, module) {
      init_globals();
      var hasOwn = Object.prototype.hasOwnProperty;
      var toString = Object.prototype.toString;
      module.exports = function forEach(obj, fn, ctx2) {
        if (toString.call(fn) !== "[object Function]") {
          throw new TypeError("iterator must be a function");
        }
        var l = obj.length;
        if (l === +l) {
          for (var i = 0; i < l; i++) {
            fn.call(ctx2, obj[i], i, obj);
          }
        } else {
          for (var k in obj) {
            if (hasOwn.call(obj, k)) {
              fn.call(ctx2, obj[k], k, obj);
            }
          }
        }
      };
    }
  });

  // node_modules/available-typed-arrays/index.js
  var require_available_typed_arrays = __commonJS({
    "node_modules/available-typed-arrays/index.js"(exports, module) {
      init_globals();
      var possibleNames = [
        "BigInt64Array",
        "BigUint64Array",
        "Float32Array",
        "Float64Array",
        "Int16Array",
        "Int32Array",
        "Int8Array",
        "Uint16Array",
        "Uint32Array",
        "Uint8Array",
        "Uint8ClampedArray"
      ];
      var g = typeof globalThis === "undefined" ? global : globalThis;
      module.exports = function availableTypedArrays() {
        var out = [];
        for (var i = 0; i < possibleNames.length; i++) {
          if (typeof g[possibleNames[i]] === "function") {
            out[out.length] = possibleNames[i];
          }
        }
        return out;
      };
    }
  });

  // node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js
  var require_getOwnPropertyDescriptor = __commonJS({
    "node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js"(exports, module) {
      init_globals();
      var GetIntrinsic = require_get_intrinsic();
      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      if ($gOPD) {
        try {
          $gOPD([], "length");
        } catch (e) {
          $gOPD = null;
        }
      }
      module.exports = $gOPD;
    }
  });

  // node_modules/is-typed-array/index.js
  var require_is_typed_array = __commonJS({
    "node_modules/is-typed-array/index.js"(exports, module) {
      init_globals();
      var forEach = require_foreach();
      var availableTypedArrays = require_available_typed_arrays();
      var callBound = require_callBound();
      var $toString = callBound("Object.prototype.toString");
      var hasToStringTag = require_shams2()();
      var g = typeof globalThis === "undefined" ? global : globalThis;
      var typedArrays = availableTypedArrays();
      var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
        for (var i = 0; i < array.length; i += 1) {
          if (array[i] === value) {
            return i;
          }
        }
        return -1;
      };
      var $slice = callBound("String.prototype.slice");
      var toStrTags = {};
      var gOPD = require_getOwnPropertyDescriptor();
      var getPrototypeOf = Object.getPrototypeOf;
      if (hasToStringTag && gOPD && getPrototypeOf) {
        forEach(typedArrays, function(typedArray) {
          var arr = new g[typedArray]();
          if (Symbol.toStringTag in arr) {
            var proto = getPrototypeOf(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor) {
              var superProto = getPrototypeOf(proto);
              descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            toStrTags[typedArray] = descriptor.get;
          }
        });
      }
      var tryTypedArrays = function tryAllTypedArrays(value) {
        var anyTrue = false;
        forEach(toStrTags, function(getter, typedArray) {
          if (!anyTrue) {
            try {
              anyTrue = getter.call(value) === typedArray;
            } catch (e) {
            }
          }
        });
        return anyTrue;
      };
      module.exports = function isTypedArray(value) {
        if (!value || typeof value !== "object") {
          return false;
        }
        if (!hasToStringTag || !(Symbol.toStringTag in value)) {
          var tag = $slice($toString(value), 8, -1);
          return $indexOf(typedArrays, tag) > -1;
        }
        if (!gOPD) {
          return false;
        }
        return tryTypedArrays(value);
      };
    }
  });

  // node_modules/which-typed-array/index.js
  var require_which_typed_array = __commonJS({
    "node_modules/which-typed-array/index.js"(exports, module) {
      init_globals();
      var forEach = require_foreach();
      var availableTypedArrays = require_available_typed_arrays();
      var callBound = require_callBound();
      var $toString = callBound("Object.prototype.toString");
      var hasToStringTag = require_shams2()();
      var g = typeof globalThis === "undefined" ? global : globalThis;
      var typedArrays = availableTypedArrays();
      var $slice = callBound("String.prototype.slice");
      var toStrTags = {};
      var gOPD = require_getOwnPropertyDescriptor();
      var getPrototypeOf = Object.getPrototypeOf;
      if (hasToStringTag && gOPD && getPrototypeOf) {
        forEach(typedArrays, function(typedArray) {
          if (typeof g[typedArray] === "function") {
            var arr = new g[typedArray]();
            if (Symbol.toStringTag in arr) {
              var proto = getPrototypeOf(arr);
              var descriptor = gOPD(proto, Symbol.toStringTag);
              if (!descriptor) {
                var superProto = getPrototypeOf(proto);
                descriptor = gOPD(superProto, Symbol.toStringTag);
              }
              toStrTags[typedArray] = descriptor.get;
            }
          }
        });
      }
      var tryTypedArrays = function tryAllTypedArrays(value) {
        var foundName = false;
        forEach(toStrTags, function(getter, typedArray) {
          if (!foundName) {
            try {
              var name = getter.call(value);
              if (name === typedArray) {
                foundName = name;
              }
            } catch (e) {
            }
          }
        });
        return foundName;
      };
      var isTypedArray = require_is_typed_array();
      module.exports = function whichTypedArray(value) {
        if (!isTypedArray(value)) {
          return false;
        }
        if (!hasToStringTag || !(Symbol.toStringTag in value)) {
          return $slice($toString(value), 8, -1);
        }
        return tryTypedArrays(value);
      };
    }
  });

  // node_modules/util/support/types.js
  var require_types = __commonJS({
    "node_modules/util/support/types.js"(exports) {
      init_globals();
      var isArgumentsObject = require_is_arguments();
      var isGeneratorFunction = require_is_generator_function();
      var whichTypedArray = require_which_typed_array();
      var isTypedArray = require_is_typed_array();
      function uncurryThis(f) {
        return f.call.bind(f);
      }
      var BigIntSupported = typeof BigInt !== "undefined";
      var SymbolSupported = typeof Symbol !== "undefined";
      var ObjectToString = uncurryThis(Object.prototype.toString);
      var numberValue = uncurryThis(Number.prototype.valueOf);
      var stringValue = uncurryThis(String.prototype.valueOf);
      var booleanValue = uncurryThis(Boolean.prototype.valueOf);
      if (BigIntSupported) {
        bigIntValue = uncurryThis(BigInt.prototype.valueOf);
      }
      var bigIntValue;
      if (SymbolSupported) {
        symbolValue = uncurryThis(Symbol.prototype.valueOf);
      }
      var symbolValue;
      function checkBoxedPrimitive(value, prototypeValueOf) {
        if (typeof value !== "object") {
          return false;
        }
        try {
          prototypeValueOf(value);
          return true;
        } catch (e) {
          return false;
        }
      }
      exports.isArgumentsObject = isArgumentsObject;
      exports.isGeneratorFunction = isGeneratorFunction;
      exports.isTypedArray = isTypedArray;
      function isPromise(input) {
        return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
      }
      exports.isPromise = isPromise;
      function isArrayBufferView(value) {
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          return ArrayBuffer.isView(value);
        }
        return isTypedArray(value) || isDataView(value);
      }
      exports.isArrayBufferView = isArrayBufferView;
      function isUint8Array(value) {
        return whichTypedArray(value) === "Uint8Array";
      }
      exports.isUint8Array = isUint8Array;
      function isUint8ClampedArray(value) {
        return whichTypedArray(value) === "Uint8ClampedArray";
      }
      exports.isUint8ClampedArray = isUint8ClampedArray;
      function isUint16Array(value) {
        return whichTypedArray(value) === "Uint16Array";
      }
      exports.isUint16Array = isUint16Array;
      function isUint32Array(value) {
        return whichTypedArray(value) === "Uint32Array";
      }
      exports.isUint32Array = isUint32Array;
      function isInt8Array(value) {
        return whichTypedArray(value) === "Int8Array";
      }
      exports.isInt8Array = isInt8Array;
      function isInt16Array(value) {
        return whichTypedArray(value) === "Int16Array";
      }
      exports.isInt16Array = isInt16Array;
      function isInt32Array(value) {
        return whichTypedArray(value) === "Int32Array";
      }
      exports.isInt32Array = isInt32Array;
      function isFloat32Array(value) {
        return whichTypedArray(value) === "Float32Array";
      }
      exports.isFloat32Array = isFloat32Array;
      function isFloat64Array(value) {
        return whichTypedArray(value) === "Float64Array";
      }
      exports.isFloat64Array = isFloat64Array;
      function isBigInt64Array(value) {
        return whichTypedArray(value) === "BigInt64Array";
      }
      exports.isBigInt64Array = isBigInt64Array;
      function isBigUint64Array(value) {
        return whichTypedArray(value) === "BigUint64Array";
      }
      exports.isBigUint64Array = isBigUint64Array;
      function isMapToString(value) {
        return ObjectToString(value) === "[object Map]";
      }
      isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
      function isMap(value) {
        if (typeof Map === "undefined") {
          return false;
        }
        return isMapToString.working ? isMapToString(value) : value instanceof Map;
      }
      exports.isMap = isMap;
      function isSetToString(value) {
        return ObjectToString(value) === "[object Set]";
      }
      isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
      function isSet(value) {
        if (typeof Set === "undefined") {
          return false;
        }
        return isSetToString.working ? isSetToString(value) : value instanceof Set;
      }
      exports.isSet = isSet;
      function isWeakMapToString(value) {
        return ObjectToString(value) === "[object WeakMap]";
      }
      isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
      function isWeakMap(value) {
        if (typeof WeakMap === "undefined") {
          return false;
        }
        return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
      }
      exports.isWeakMap = isWeakMap;
      function isWeakSetToString(value) {
        return ObjectToString(value) === "[object WeakSet]";
      }
      isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
      function isWeakSet(value) {
        return isWeakSetToString(value);
      }
      exports.isWeakSet = isWeakSet;
      function isArrayBufferToString(value) {
        return ObjectToString(value) === "[object ArrayBuffer]";
      }
      isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
      function isArrayBuffer(value) {
        if (typeof ArrayBuffer === "undefined") {
          return false;
        }
        return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
      }
      exports.isArrayBuffer = isArrayBuffer;
      function isDataViewToString(value) {
        return ObjectToString(value) === "[object DataView]";
      }
      isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
      function isDataView(value) {
        if (typeof DataView === "undefined") {
          return false;
        }
        return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
      }
      exports.isDataView = isDataView;
      var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
      function isSharedArrayBufferToString(value) {
        return ObjectToString(value) === "[object SharedArrayBuffer]";
      }
      function isSharedArrayBuffer(value) {
        if (typeof SharedArrayBufferCopy === "undefined") {
          return false;
        }
        if (typeof isSharedArrayBufferToString.working === "undefined") {
          isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
        }
        return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
      }
      exports.isSharedArrayBuffer = isSharedArrayBuffer;
      function isAsyncFunction(value) {
        return ObjectToString(value) === "[object AsyncFunction]";
      }
      exports.isAsyncFunction = isAsyncFunction;
      function isMapIterator(value) {
        return ObjectToString(value) === "[object Map Iterator]";
      }
      exports.isMapIterator = isMapIterator;
      function isSetIterator(value) {
        return ObjectToString(value) === "[object Set Iterator]";
      }
      exports.isSetIterator = isSetIterator;
      function isGeneratorObject(value) {
        return ObjectToString(value) === "[object Generator]";
      }
      exports.isGeneratorObject = isGeneratorObject;
      function isWebAssemblyCompiledModule(value) {
        return ObjectToString(value) === "[object WebAssembly.Module]";
      }
      exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
      function isNumberObject(value) {
        return checkBoxedPrimitive(value, numberValue);
      }
      exports.isNumberObject = isNumberObject;
      function isStringObject(value) {
        return checkBoxedPrimitive(value, stringValue);
      }
      exports.isStringObject = isStringObject;
      function isBooleanObject(value) {
        return checkBoxedPrimitive(value, booleanValue);
      }
      exports.isBooleanObject = isBooleanObject;
      function isBigIntObject(value) {
        return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
      }
      exports.isBigIntObject = isBigIntObject;
      function isSymbolObject(value) {
        return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
      }
      exports.isSymbolObject = isSymbolObject;
      function isBoxedPrimitive(value) {
        return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
      }
      exports.isBoxedPrimitive = isBoxedPrimitive;
      function isAnyArrayBuffer(value) {
        return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
      }
      exports.isAnyArrayBuffer = isAnyArrayBuffer;
      ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
        Object.defineProperty(exports, method, {
          enumerable: false,
          value: function() {
            throw new Error(method + " is not supported in userland");
          }
        });
      });
    }
  });

  // node_modules/util/support/isBufferBrowser.js
  var require_isBufferBrowser = __commonJS({
    "node_modules/util/support/isBufferBrowser.js"(exports, module) {
      init_globals();
      module.exports = function isBuffer(arg) {
        return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
      };
    }
  });

  // node_modules/inherits/inherits_browser.js
  var require_inherits_browser = __commonJS({
    "node_modules/inherits/inherits_browser.js"(exports, module) {
      init_globals();
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    }
  });

  // (disabled):node_modules/util/util.js
  var require_util = __commonJS({
    "(disabled):node_modules/util/util.js"(exports) {
      init_globals();
      var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
        var keys = Object.keys(obj);
        var descriptors = {};
        for (var i = 0; i < keys.length; i++) {
          descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
        }
        return descriptors;
      };
      var formatRegExp = /%[sdj%]/g;
      exports.format = function(f) {
        if (!isString(f)) {
          var objects = [];
          for (var i = 0; i < arguments.length; i++) {
            objects.push(inspect2(arguments[i]));
          }
          return objects.join(" ");
        }
        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function(x2) {
          if (x2 === "%%")
            return "%";
          if (i >= len)
            return x2;
          switch (x2) {
            case "%s":
              return String(args[i++]);
            case "%d":
              return Number(args[i++]);
            case "%j":
              try {
                return JSON.stringify(args[i++]);
              } catch (_) {
                return "[Circular]";
              }
            default:
              return x2;
          }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
          if (isNull(x) || !isObject(x)) {
            str += " " + x;
          } else {
            str += " " + inspect2(x);
          }
        }
        return str;
      };
      exports.deprecate = function(fn, msg) {
        if (typeof process !== "undefined" && process.noDeprecation === true) {
          return fn;
        }
        if (typeof process === "undefined") {
          return function() {
            return exports.deprecate(fn, msg).apply(this, arguments);
          };
        }
        var warned = false;
        function deprecated() {
          if (!warned) {
            if (process.throwDeprecation) {
              throw new Error(msg);
            } else if (process.traceDeprecation) {
              console.trace(msg);
            } else {
              console.error(msg);
            }
            warned = true;
          }
          return fn.apply(this, arguments);
        }
        return deprecated;
      };
      var debugs = {};
      var debugEnvRegex = /^$/;
      if (process.env.NODE_DEBUG) {
        debugEnv = process.env.NODE_DEBUG;
        debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
        debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
      }
      var debugEnv;
      exports.debuglog = function(set) {
        set = set.toUpperCase();
        if (!debugs[set]) {
          if (debugEnvRegex.test(set)) {
            var pid = process.pid;
            debugs[set] = function() {
              var msg = exports.format.apply(exports, arguments);
              console.error("%s %d: %s", set, pid, msg);
            };
          } else {
            debugs[set] = function() {
            };
          }
        }
        return debugs[set];
      };
      function inspect2(obj, opts) {
        var ctx2 = {
          seen: [],
          stylize: stylizeNoColor
        };
        if (arguments.length >= 3)
          ctx2.depth = arguments[2];
        if (arguments.length >= 4)
          ctx2.colors = arguments[3];
        if (isBoolean(opts)) {
          ctx2.showHidden = opts;
        } else if (opts) {
          exports._extend(ctx2, opts);
        }
        if (isUndefined(ctx2.showHidden))
          ctx2.showHidden = false;
        if (isUndefined(ctx2.depth))
          ctx2.depth = 2;
        if (isUndefined(ctx2.colors))
          ctx2.colors = false;
        if (isUndefined(ctx2.customInspect))
          ctx2.customInspect = true;
        if (ctx2.colors)
          ctx2.stylize = stylizeWithColor;
        return formatValue(ctx2, obj, ctx2.depth);
      }
      exports.inspect = inspect2;
      inspect2.colors = {
        "bold": [1, 22],
        "italic": [3, 23],
        "underline": [4, 24],
        "inverse": [7, 27],
        "white": [37, 39],
        "grey": [90, 39],
        "black": [30, 39],
        "blue": [34, 39],
        "cyan": [36, 39],
        "green": [32, 39],
        "magenta": [35, 39],
        "red": [31, 39],
        "yellow": [33, 39]
      };
      inspect2.styles = {
        "special": "cyan",
        "number": "yellow",
        "boolean": "yellow",
        "undefined": "grey",
        "null": "bold",
        "string": "green",
        "date": "magenta",
        "regexp": "red"
      };
      function stylizeWithColor(str, styleType) {
        var style = inspect2.styles[styleType];
        if (style) {
          return "\x1B[" + inspect2.colors[style][0] + "m" + str + "\x1B[" + inspect2.colors[style][1] + "m";
        } else {
          return str;
        }
      }
      function stylizeNoColor(str, styleType) {
        return str;
      }
      function arrayToHash(array) {
        var hash = {};
        array.forEach(function(val, idx) {
          hash[val] = true;
        });
        return hash;
      }
      function formatValue(ctx2, value, recurseTimes) {
        if (ctx2.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
          var ret = value.inspect(recurseTimes, ctx2);
          if (!isString(ret)) {
            ret = formatValue(ctx2, ret, recurseTimes);
          }
          return ret;
        }
        var primitive = formatPrimitive(ctx2, value);
        if (primitive) {
          return primitive;
        }
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);
        if (ctx2.showHidden) {
          keys = Object.getOwnPropertyNames(value);
        }
        if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
          return formatError(value);
        }
        if (keys.length === 0) {
          if (isFunction(value)) {
            var name = value.name ? ": " + value.name : "";
            return ctx2.stylize("[Function" + name + "]", "special");
          }
          if (isRegExp(value)) {
            return ctx2.stylize(RegExp.prototype.toString.call(value), "regexp");
          }
          if (isDate(value)) {
            return ctx2.stylize(Date.prototype.toString.call(value), "date");
          }
          if (isError(value)) {
            return formatError(value);
          }
        }
        var base = "", array = false, braces = ["{", "}"];
        if (isArray(value)) {
          array = true;
          braces = ["[", "]"];
        }
        if (isFunction(value)) {
          var n = value.name ? ": " + value.name : "";
          base = " [Function" + n + "]";
        }
        if (isRegExp(value)) {
          base = " " + RegExp.prototype.toString.call(value);
        }
        if (isDate(value)) {
          base = " " + Date.prototype.toUTCString.call(value);
        }
        if (isError(value)) {
          base = " " + formatError(value);
        }
        if (keys.length === 0 && (!array || value.length == 0)) {
          return braces[0] + base + braces[1];
        }
        if (recurseTimes < 0) {
          if (isRegExp(value)) {
            return ctx2.stylize(RegExp.prototype.toString.call(value), "regexp");
          } else {
            return ctx2.stylize("[Object]", "special");
          }
        }
        ctx2.seen.push(value);
        var output;
        if (array) {
          output = formatArray(ctx2, value, recurseTimes, visibleKeys, keys);
        } else {
          output = keys.map(function(key) {
            return formatProperty(ctx2, value, recurseTimes, visibleKeys, key, array);
          });
        }
        ctx2.seen.pop();
        return reduceToSingleString(output, base, braces);
      }
      function formatPrimitive(ctx2, value) {
        if (isUndefined(value))
          return ctx2.stylize("undefined", "undefined");
        if (isString(value)) {
          var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
          return ctx2.stylize(simple, "string");
        }
        if (isNumber(value))
          return ctx2.stylize("" + value, "number");
        if (isBoolean(value))
          return ctx2.stylize("" + value, "boolean");
        if (isNull(value))
          return ctx2.stylize("null", "null");
      }
      function formatError(value) {
        return "[" + Error.prototype.toString.call(value) + "]";
      }
      function formatArray(ctx2, value, recurseTimes, visibleKeys, keys) {
        var output = [];
        for (var i = 0, l = value.length; i < l; ++i) {
          if (hasOwnProperty(value, String(i))) {
            output.push(formatProperty(
              ctx2,
              value,
              recurseTimes,
              visibleKeys,
              String(i),
              true
            ));
          } else {
            output.push("");
          }
        }
        keys.forEach(function(key) {
          if (!key.match(/^\d+$/)) {
            output.push(formatProperty(
              ctx2,
              value,
              recurseTimes,
              visibleKeys,
              key,
              true
            ));
          }
        });
        return output;
      }
      function formatProperty(ctx2, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
        if (desc.get) {
          if (desc.set) {
            str = ctx2.stylize("[Getter/Setter]", "special");
          } else {
            str = ctx2.stylize("[Getter]", "special");
          }
        } else {
          if (desc.set) {
            str = ctx2.stylize("[Setter]", "special");
          }
        }
        if (!hasOwnProperty(visibleKeys, key)) {
          name = "[" + key + "]";
        }
        if (!str) {
          if (ctx2.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) {
              str = formatValue(ctx2, desc.value, null);
            } else {
              str = formatValue(ctx2, desc.value, recurseTimes - 1);
            }
            if (str.indexOf("\n") > -1) {
              if (array) {
                str = str.split("\n").map(function(line) {
                  return "  " + line;
                }).join("\n").substr(2);
              } else {
                str = "\n" + str.split("\n").map(function(line) {
                  return "   " + line;
                }).join("\n");
              }
            }
          } else {
            str = ctx2.stylize("[Circular]", "special");
          }
        }
        if (isUndefined(name)) {
          if (array && key.match(/^\d+$/)) {
            return str;
          }
          name = JSON.stringify("" + key);
          if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx2.stylize(name, "name");
          } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx2.stylize(name, "string");
          }
        }
        return name + ": " + str;
      }
      function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0;
        var length = output.reduce(function(prev, cur) {
          numLinesEst++;
          if (cur.indexOf("\n") >= 0)
            numLinesEst++;
          return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
        }, 0);
        if (length > 60) {
          return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
        }
        return braces[0] + base + " " + output.join(", ") + " " + braces[1];
      }
      exports.types = require_types();
      function isArray(ar) {
        return Array.isArray(ar);
      }
      exports.isArray = isArray;
      function isBoolean(arg) {
        return typeof arg === "boolean";
      }
      exports.isBoolean = isBoolean;
      function isNull(arg) {
        return arg === null;
      }
      exports.isNull = isNull;
      function isNullOrUndefined(arg) {
        return arg == null;
      }
      exports.isNullOrUndefined = isNullOrUndefined;
      function isNumber(arg) {
        return typeof arg === "number";
      }
      exports.isNumber = isNumber;
      function isString(arg) {
        return typeof arg === "string";
      }
      exports.isString = isString;
      function isSymbol(arg) {
        return typeof arg === "symbol";
      }
      exports.isSymbol = isSymbol;
      function isUndefined(arg) {
        return arg === void 0;
      }
      exports.isUndefined = isUndefined;
      function isRegExp(re4) {
        return isObject(re4) && objectToString(re4) === "[object RegExp]";
      }
      exports.isRegExp = isRegExp;
      exports.types.isRegExp = isRegExp;
      function isObject(arg) {
        return typeof arg === "object" && arg !== null;
      }
      exports.isObject = isObject;
      function isDate(d) {
        return isObject(d) && objectToString(d) === "[object Date]";
      }
      exports.isDate = isDate;
      exports.types.isDate = isDate;
      function isError(e) {
        return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
      }
      exports.isError = isError;
      exports.types.isNativeError = isError;
      function isFunction(arg) {
        return typeof arg === "function";
      }
      exports.isFunction = isFunction;
      function isPrimitive(arg) {
        return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
      }
      exports.isPrimitive = isPrimitive;
      exports.isBuffer = require_isBufferBrowser();
      function objectToString(o) {
        return Object.prototype.toString.call(o);
      }
      function pad2(n) {
        return n < 10 ? "0" + n.toString(10) : n.toString(10);
      }
      var months2 = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      function timestamp() {
        var d = new Date();
        var time = [
          pad2(d.getHours()),
          pad2(d.getMinutes()),
          pad2(d.getSeconds())
        ].join(":");
        return [d.getDate(), months2[d.getMonth()], time].join(" ");
      }
      exports.log = function() {
        console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
      };
      exports.inherits = require_inherits_browser();
      exports._extend = function(origin, add) {
        if (!add || !isObject(add))
          return origin;
        var keys = Object.keys(add);
        var i = keys.length;
        while (i--) {
          origin[keys[i]] = add[keys[i]];
        }
        return origin;
      };
      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
      var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
      exports.promisify = function promisify(original) {
        if (typeof original !== "function")
          throw new TypeError('The "original" argument must be of type Function');
        if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
          var fn = original[kCustomPromisifiedSymbol];
          if (typeof fn !== "function") {
            throw new TypeError('The "util.promisify.custom" argument must be of type Function');
          }
          Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
          });
          return fn;
        }
        function fn() {
          var promiseResolve, promiseReject;
          var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
          });
          var args = [];
          for (var i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }
          args.push(function(err, value) {
            if (err) {
              promiseReject(err);
            } else {
              promiseResolve(value);
            }
          });
          try {
            original.apply(this, args);
          } catch (err) {
            promiseReject(err);
          }
          return promise;
        }
        Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
        if (kCustomPromisifiedSymbol)
          Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
          });
        return Object.defineProperties(
          fn,
          getOwnPropertyDescriptors(original)
        );
      };
      exports.promisify.custom = kCustomPromisifiedSymbol;
      function callbackifyOnRejected(reason, cb) {
        if (!reason) {
          var newReason = new Error("Promise was rejected with a falsy value");
          newReason.reason = reason;
          reason = newReason;
        }
        return cb(reason);
      }
      function callbackify(original) {
        if (typeof original !== "function") {
          throw new TypeError('The "original" argument must be of type Function');
        }
        function callbackified() {
          var args = [];
          for (var i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }
          var maybeCb = args.pop();
          if (typeof maybeCb !== "function") {
            throw new TypeError("The last argument must be of type Function");
          }
          var self2 = this;
          var cb = function() {
            return maybeCb.apply(self2, arguments);
          };
          original.apply(this, args).then(
            function(ret) {
              process.nextTick(cb.bind(null, null, ret));
            },
            function(rej) {
              process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
            }
          );
        }
        Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
        Object.defineProperties(
          callbackified,
          getOwnPropertyDescriptors(original)
        );
        return callbackified;
      }
      exports.callbackify = callbackify;
    }
  });

  // node_modules/loupe/loupe.js
  var require_loupe = __commonJS({
    "node_modules/loupe/loupe.js"(exports, module) {
      init_globals();
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.loupe = {}));
      })(exports, function(exports2) {
        "use strict";
        function _typeof(obj) {
          "@babel/helpers - typeof";
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function(obj2) {
              return typeof obj2;
            };
          } else {
            _typeof = function(obj2) {
              return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
            };
          }
          return _typeof(obj);
        }
        function _slicedToArray(arr, i) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr))
            return arr;
        }
        function _iterableToArrayLimit(arr, i) {
          if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
            return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = void 0;
          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i && _arr.length === i)
                break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null)
                _i["return"]();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
        function _unsupportedIterableToArray(o, minLen) {
          if (!o)
            return;
          if (typeof o === "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor)
            n = o.constructor.name;
          if (n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++)
            arr2[i] = arr[i];
          return arr2;
        }
        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var ansiColors = {
          bold: ["1", "22"],
          dim: ["2", "22"],
          italic: ["3", "23"],
          underline: ["4", "24"],
          inverse: ["7", "27"],
          hidden: ["8", "28"],
          strike: ["9", "29"],
          black: ["30", "39"],
          red: ["31", "39"],
          green: ["32", "39"],
          yellow: ["33", "39"],
          blue: ["34", "39"],
          magenta: ["35", "39"],
          cyan: ["36", "39"],
          white: ["37", "39"],
          brightblack: ["30;1", "39"],
          brightred: ["31;1", "39"],
          brightgreen: ["32;1", "39"],
          brightyellow: ["33;1", "39"],
          brightblue: ["34;1", "39"],
          brightmagenta: ["35;1", "39"],
          brightcyan: ["36;1", "39"],
          brightwhite: ["37;1", "39"],
          grey: ["90", "39"]
        };
        var styles = {
          special: "cyan",
          number: "yellow",
          bigint: "yellow",
          boolean: "yellow",
          undefined: "grey",
          null: "bold",
          string: "green",
          symbol: "green",
          date: "magenta",
          regexp: "red"
        };
        var truncator = "\u2026";
        function colorise(value, styleType) {
          var color = ansiColors[styles[styleType]] || ansiColors[styleType];
          if (!color) {
            return String(value);
          }
          return "\x1B[".concat(color[0], "m").concat(String(value), "\x1B[").concat(color[1], "m");
        }
        function normaliseOptions() {
          var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$showHidden = _ref.showHidden, showHidden = _ref$showHidden === void 0 ? false : _ref$showHidden, _ref$depth = _ref.depth, depth = _ref$depth === void 0 ? 2 : _ref$depth, _ref$colors = _ref.colors, colors = _ref$colors === void 0 ? false : _ref$colors, _ref$customInspect = _ref.customInspect, customInspect = _ref$customInspect === void 0 ? true : _ref$customInspect, _ref$showProxy = _ref.showProxy, showProxy = _ref$showProxy === void 0 ? false : _ref$showProxy, _ref$maxArrayLength = _ref.maxArrayLength, maxArrayLength = _ref$maxArrayLength === void 0 ? Infinity : _ref$maxArrayLength, _ref$breakLength = _ref.breakLength, breakLength = _ref$breakLength === void 0 ? Infinity : _ref$breakLength, _ref$seen = _ref.seen, seen = _ref$seen === void 0 ? [] : _ref$seen, _ref$truncate = _ref.truncate, truncate2 = _ref$truncate === void 0 ? Infinity : _ref$truncate, _ref$stylize = _ref.stylize, stylize = _ref$stylize === void 0 ? String : _ref$stylize;
          var options2 = {
            showHidden: Boolean(showHidden),
            depth: Number(depth),
            colors: Boolean(colors),
            customInspect: Boolean(customInspect),
            showProxy: Boolean(showProxy),
            maxArrayLength: Number(maxArrayLength),
            breakLength: Number(breakLength),
            truncate: Number(truncate2),
            seen,
            stylize
          };
          if (options2.colors) {
            options2.stylize = colorise;
          }
          return options2;
        }
        function truncate(string, length) {
          var tail = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : truncator;
          string = String(string);
          var tailLength = tail.length;
          var stringLength = string.length;
          if (tailLength > length && stringLength > tailLength) {
            return tail;
          }
          if (stringLength > length && stringLength > tailLength) {
            return "".concat(string.slice(0, length - tailLength)).concat(tail);
          }
          return string;
        }
        function inspectList(list, options2, inspectItem) {
          var separator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ", ";
          inspectItem = inspectItem || options2.inspect;
          var size = list.length;
          if (size === 0)
            return "";
          var originalLength = options2.truncate;
          var output = "";
          var peek = "";
          var truncated = "";
          for (var i = 0; i < size; i += 1) {
            var last = i + 1 === list.length;
            var secondToLast = i + 2 === list.length;
            truncated = "".concat(truncator, "(").concat(list.length - i, ")");
            var value = list[i];
            options2.truncate = originalLength - output.length - (last ? 0 : separator.length);
            var string = peek || inspectItem(value, options2) + (last ? "" : separator);
            var nextLength = output.length + string.length;
            var truncatedLength = nextLength + truncated.length;
            if (last && nextLength > originalLength && output.length + truncated.length <= originalLength) {
              break;
            }
            if (!last && !secondToLast && truncatedLength > originalLength) {
              break;
            }
            peek = last ? "" : inspectItem(list[i + 1], options2) + (secondToLast ? "" : separator);
            if (!last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength) {
              break;
            }
            output += string;
            if (!last && !secondToLast && nextLength + peek.length >= originalLength) {
              truncated = "".concat(truncator, "(").concat(list.length - i - 1, ")");
              break;
            }
            truncated = "";
          }
          return "".concat(output).concat(truncated);
        }
        function quoteComplexKey(key) {
          if (key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {
            return key;
          }
          return JSON.stringify(key).replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        }
        function inspectProperty(_ref2, options2) {
          var _ref3 = _slicedToArray(_ref2, 2), key = _ref3[0], value = _ref3[1];
          options2.truncate -= 2;
          if (typeof key === "string") {
            key = quoteComplexKey(key);
          } else if (typeof key !== "number") {
            key = "[".concat(options2.inspect(key, options2), "]");
          }
          options2.truncate -= key.length;
          value = options2.inspect(value, options2);
          return "".concat(key, ": ").concat(value);
        }
        function inspectArray(array, options2) {
          var nonIndexProperties = Object.keys(array).slice(array.length);
          if (!array.length && !nonIndexProperties.length)
            return "[]";
          options2.truncate -= 4;
          var listContents = inspectList(array, options2);
          options2.truncate -= listContents.length;
          var propertyContents = "";
          if (nonIndexProperties.length) {
            propertyContents = inspectList(nonIndexProperties.map(function(key) {
              return [key, array[key]];
            }), options2, inspectProperty);
          }
          return "[ ".concat(listContents).concat(propertyContents ? ", ".concat(propertyContents) : "", " ]");
        }
        var toString = Function.prototype.toString;
        var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
        function getFuncName(aFunc) {
          if (typeof aFunc !== "function") {
            return null;
          }
          var name = "";
          if (typeof Function.prototype.name === "undefined" && typeof aFunc.name === "undefined") {
            var match = toString.call(aFunc).match(functionNameMatch);
            if (match) {
              name = match[1];
            }
          } else {
            name = aFunc.name;
          }
          return name;
        }
        var getFuncName_1 = getFuncName;
        var getArrayName = function getArrayName2(array) {
          if (typeof Buffer === "function" && array instanceof Buffer) {
            return "Buffer";
          }
          if (array[Symbol.toStringTag]) {
            return array[Symbol.toStringTag];
          }
          return getFuncName_1(array.constructor);
        };
        function inspectTypedArray(array, options2) {
          var name = getArrayName(array);
          options2.truncate -= name.length + 4;
          var nonIndexProperties = Object.keys(array).slice(array.length);
          if (!array.length && !nonIndexProperties.length)
            return "".concat(name, "[]");
          var output = "";
          for (var i = 0; i < array.length; i++) {
            var string = "".concat(options2.stylize(truncate(array[i], options2.truncate), "number")).concat(i === array.length - 1 ? "" : ", ");
            options2.truncate -= string.length;
            if (array[i] !== array.length && options2.truncate <= 3) {
              output += "".concat(truncator, "(").concat(array.length - array[i] + 1, ")");
              break;
            }
            output += string;
          }
          var propertyContents = "";
          if (nonIndexProperties.length) {
            propertyContents = inspectList(nonIndexProperties.map(function(key) {
              return [key, array[key]];
            }), options2, inspectProperty);
          }
          return "".concat(name, "[ ").concat(output).concat(propertyContents ? ", ".concat(propertyContents) : "", " ]");
        }
        function inspectDate(dateObject, options2) {
          var split = dateObject.toJSON().split("T");
          var date2 = split[0];
          return options2.stylize("".concat(date2, "T").concat(truncate(split[1], options2.truncate - date2.length - 1)), "date");
        }
        function inspectFunction(func, options2) {
          var name = getFuncName_1(func);
          if (!name) {
            return options2.stylize("[Function]", "special");
          }
          return options2.stylize("[Function ".concat(truncate(name, options2.truncate - 11), "]"), "special");
        }
        function inspectMapEntry(_ref, options2) {
          var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
          options2.truncate -= 4;
          key = options2.inspect(key, options2);
          options2.truncate -= key.length;
          value = options2.inspect(value, options2);
          return "".concat(key, " => ").concat(value);
        }
        function mapToEntries(map) {
          var entries = [];
          map.forEach(function(value, key) {
            entries.push([key, value]);
          });
          return entries;
        }
        function inspectMap(map, options2) {
          var size = map.size - 1;
          if (size <= 0) {
            return "Map{}";
          }
          options2.truncate -= 7;
          return "Map{ ".concat(inspectList(mapToEntries(map), options2, inspectMapEntry), " }");
        }
        var isNaN2 = Number.isNaN || function(i) {
          return i !== i;
        };
        function inspectNumber(number2, options2) {
          if (isNaN2(number2)) {
            return options2.stylize("NaN", "number");
          }
          if (number2 === Infinity) {
            return options2.stylize("Infinity", "number");
          }
          if (number2 === -Infinity) {
            return options2.stylize("-Infinity", "number");
          }
          if (number2 === 0) {
            return options2.stylize(1 / number2 === Infinity ? "+0" : "-0", "number");
          }
          return options2.stylize(truncate(number2, options2.truncate), "number");
        }
        function inspectBigInt(number2, options2) {
          var nums = truncate(number2.toString(), options2.truncate - 1);
          if (nums !== truncator)
            nums += "n";
          return options2.stylize(nums, "bigint");
        }
        function inspectRegExp(value, options2) {
          var flags = value.toString().split("/")[2];
          var sourceLength = options2.truncate - (2 + flags.length);
          var source2 = value.source;
          return options2.stylize("/".concat(truncate(source2, sourceLength), "/").concat(flags), "regexp");
        }
        function arrayFromSet(set) {
          var values = [];
          set.forEach(function(value) {
            values.push(value);
          });
          return values;
        }
        function inspectSet(set, options2) {
          if (set.size === 0)
            return "Set{}";
          options2.truncate -= 7;
          return "Set{ ".concat(inspectList(arrayFromSet(set), options2), " }");
        }
        var stringEscapeChars = new RegExp("['\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]", "g");
        var escapeCharacters = {
          "\b": "\\b",
          "	": "\\t",
          "\n": "\\n",
          "\f": "\\f",
          "\r": "\\r",
          "'": "\\'",
          "\\": "\\\\"
        };
        var hex = 16;
        var unicodeLength = 4;
        function escape(char) {
          return escapeCharacters[char] || "\\u".concat("0000".concat(char.charCodeAt(0).toString(hex)).slice(-unicodeLength));
        }
        function inspectString(string, options2) {
          if (stringEscapeChars.test(string)) {
            string = string.replace(stringEscapeChars, escape);
          }
          return options2.stylize("'".concat(truncate(string, options2.truncate - 2), "'"), "string");
        }
        function inspectSymbol(value) {
          if ("description" in Symbol.prototype) {
            return value.description ? "Symbol(".concat(value.description, ")") : "Symbol()";
          }
          return value.toString();
        }
        var getPromiseValue = function getPromiseValue2() {
          return "Promise{\u2026}";
        };
        try {
          var _process$binding = process.binding("util"), getPromiseDetails = _process$binding.getPromiseDetails, kPending = _process$binding.kPending, kRejected = _process$binding.kRejected;
          if (Array.isArray(getPromiseDetails(Promise.resolve()))) {
            getPromiseValue = function getPromiseValue2(value, options2) {
              var _getPromiseDetails = getPromiseDetails(value), _getPromiseDetails2 = _slicedToArray(_getPromiseDetails, 2), state = _getPromiseDetails2[0], innerValue = _getPromiseDetails2[1];
              if (state === kPending) {
                return "Promise{<pending>}";
              }
              return "Promise".concat(state === kRejected ? "!" : "", "{").concat(options2.inspect(innerValue, options2), "}");
            };
          }
        } catch (notNode) {
        }
        var inspectPromise = getPromiseValue;
        function inspectObject(object, options2) {
          var properties = Object.getOwnPropertyNames(object);
          var symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];
          if (properties.length === 0 && symbols.length === 0) {
            return "{}";
          }
          options2.truncate -= 4;
          options2.seen = options2.seen || [];
          if (options2.seen.indexOf(object) >= 0) {
            return "[Circular]";
          }
          options2.seen.push(object);
          var propertyContents = inspectList(properties.map(function(key) {
            return [key, object[key]];
          }), options2, inspectProperty);
          var symbolContents = inspectList(symbols.map(function(key) {
            return [key, object[key]];
          }), options2, inspectProperty);
          options2.seen.pop();
          var sep = "";
          if (propertyContents && symbolContents) {
            sep = ", ";
          }
          return "{ ".concat(propertyContents).concat(sep).concat(symbolContents, " }");
        }
        var toStringTag = typeof Symbol !== "undefined" && Symbol.toStringTag ? Symbol.toStringTag : false;
        function inspectClass(value, options2) {
          var name = "";
          if (toStringTag && toStringTag in value) {
            name = value[toStringTag];
          }
          name = name || getFuncName_1(value.constructor);
          if (!name || name === "_class") {
            name = "<Anonymous Class>";
          }
          options2.truncate -= name.length;
          return "".concat(name).concat(inspectObject(value, options2));
        }
        function inspectArguments(args, options2) {
          if (args.length === 0)
            return "Arguments[]";
          options2.truncate -= 13;
          return "Arguments[ ".concat(inspectList(args, options2), " ]");
        }
        var errorKeys = ["stack", "line", "column", "name", "message", "fileName", "lineNumber", "columnNumber", "number", "description"];
        function inspectObject$1(error, options2) {
          var properties = Object.getOwnPropertyNames(error).filter(function(key) {
            return errorKeys.indexOf(key) === -1;
          });
          var name = error.name;
          options2.truncate -= name.length;
          var message = "";
          if (typeof error.message === "string") {
            message = truncate(error.message, options2.truncate);
          } else {
            properties.unshift("message");
          }
          message = message ? ": ".concat(message) : "";
          options2.truncate -= message.length + 5;
          var propertyContents = inspectList(properties.map(function(key) {
            return [key, error[key]];
          }), options2, inspectProperty);
          return "".concat(name).concat(message).concat(propertyContents ? " { ".concat(propertyContents, " }") : "");
        }
        function inspectAttribute(_ref, options2) {
          var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
          options2.truncate -= 3;
          if (!value) {
            return "".concat(options2.stylize(key, "yellow"));
          }
          return "".concat(options2.stylize(key, "yellow"), "=").concat(options2.stylize('"'.concat(value, '"'), "string"));
        }
        function inspectHTMLCollection(collection, options2) {
          return inspectList(collection, options2, inspectHTML, "\n");
        }
        function inspectHTML(element, options2) {
          var properties = element.getAttributeNames();
          var name = element.tagName.toLowerCase();
          var head = options2.stylize("<".concat(name), "special");
          var headClose = options2.stylize(">", "special");
          var tail = options2.stylize("</".concat(name, ">"), "special");
          options2.truncate -= name.length * 2 + 5;
          var propertyContents = "";
          if (properties.length > 0) {
            propertyContents += " ";
            propertyContents += inspectList(properties.map(function(key) {
              return [key, element.getAttribute(key)];
            }), options2, inspectAttribute, " ");
          }
          options2.truncate -= propertyContents.length;
          var truncate2 = options2.truncate;
          var children = inspectHTMLCollection(element.children, options2);
          if (children && children.length > truncate2) {
            children = "".concat(truncator, "(").concat(element.children.length, ")");
          }
          return "".concat(head).concat(propertyContents).concat(headClose).concat(children).concat(tail);
        }
        var symbolsSupported = typeof Symbol === "function" && typeof Symbol.for === "function";
        var chaiInspect = symbolsSupported ? Symbol.for("chai/inspect") : "@@chai/inspect";
        var nodeInspect = false;
        try {
          var nodeUtil = require_util();
          nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;
        } catch (noNodeInspect) {
          nodeInspect = false;
        }
        var constructorMap = /* @__PURE__ */ new WeakMap();
        var stringTagMap = {};
        var baseTypesMap = {
          undefined: function undefined$1(value, options2) {
            return options2.stylize("undefined", "undefined");
          },
          null: function _null(value, options2) {
            return options2.stylize(null, "null");
          },
          boolean: function boolean(value, options2) {
            return options2.stylize(value, "boolean");
          },
          Boolean: function Boolean2(value, options2) {
            return options2.stylize(value, "boolean");
          },
          number: inspectNumber,
          Number: inspectNumber,
          bigint: inspectBigInt,
          BigInt: inspectBigInt,
          string: inspectString,
          String: inspectString,
          function: inspectFunction,
          Function: inspectFunction,
          symbol: inspectSymbol,
          Symbol: inspectSymbol,
          Array: inspectArray,
          Date: inspectDate,
          Map: inspectMap,
          Set: inspectSet,
          RegExp: inspectRegExp,
          Promise: inspectPromise,
          WeakSet: function WeakSet2(value, options2) {
            return options2.stylize("WeakSet{\u2026}", "special");
          },
          WeakMap: function WeakMap2(value, options2) {
            return options2.stylize("WeakMap{\u2026}", "special");
          },
          Arguments: inspectArguments,
          Int8Array: inspectTypedArray,
          Uint8Array: inspectTypedArray,
          Uint8ClampedArray: inspectTypedArray,
          Int16Array: inspectTypedArray,
          Uint16Array: inspectTypedArray,
          Int32Array: inspectTypedArray,
          Uint32Array: inspectTypedArray,
          Float32Array: inspectTypedArray,
          Float64Array: inspectTypedArray,
          Generator: function Generator() {
            return "";
          },
          DataView: function DataView2() {
            return "";
          },
          ArrayBuffer: function ArrayBuffer2() {
            return "";
          },
          Error: inspectObject$1,
          HTMLCollection: inspectHTMLCollection,
          NodeList: inspectHTMLCollection
        };
        var inspectCustom = function inspectCustom2(value, options2, type2) {
          if (chaiInspect in value && typeof value[chaiInspect] === "function") {
            return value[chaiInspect](options2);
          }
          if (nodeInspect && nodeInspect in value && typeof value[nodeInspect] === "function") {
            return value[nodeInspect](options2.depth, options2);
          }
          if ("inspect" in value && typeof value.inspect === "function") {
            return value.inspect(options2.depth, options2);
          }
          if ("constructor" in value && constructorMap.has(value.constructor)) {
            return constructorMap.get(value.constructor)(value, options2);
          }
          if (stringTagMap[type2]) {
            return stringTagMap[type2](value, options2);
          }
          return "";
        };
        var toString$1 = Object.prototype.toString;
        function inspect2(value, options2) {
          options2 = normaliseOptions(options2);
          options2.inspect = inspect2;
          var _options = options2, customInspect = _options.customInspect;
          var type2 = value === null ? "null" : _typeof(value);
          if (type2 === "object") {
            type2 = toString$1.call(value).slice(8, -1);
          }
          if (baseTypesMap[type2]) {
            return baseTypesMap[type2](value, options2);
          }
          if (customInspect && value) {
            var output = inspectCustom(value, options2, type2);
            if (output) {
              if (typeof output === "string")
                return output;
              return inspect2(output, options2);
            }
          }
          var proto = value ? Object.getPrototypeOf(value) : false;
          if (proto === Object.prototype || proto === null) {
            return inspectObject(value, options2);
          }
          if (value && typeof HTMLElement === "function" && value instanceof HTMLElement) {
            return inspectHTML(value, options2);
          }
          if ("constructor" in value) {
            if (value.constructor !== Object) {
              return inspectClass(value, options2);
            }
            return inspectObject(value, options2);
          }
          if (value === Object(value)) {
            return inspectObject(value, options2);
          }
          return options2.stylize(String(value), type2);
        }
        function registerConstructor(constructor, inspector) {
          if (constructorMap.has(constructor)) {
            return false;
          }
          constructorMap.add(constructor, inspector);
          return true;
        }
        function registerStringTag(stringTag, inspector) {
          if (stringTag in stringTagMap) {
            return false;
          }
          stringTagMap[stringTag] = inspector;
          return true;
        }
        var custom = chaiInspect;
        exports2.custom = custom;
        exports2.default = inspect2;
        exports2.inspect = inspect2;
        exports2.registerConstructor = registerConstructor;
        exports2.registerStringTag = registerStringTag;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/core-js/library/modules/_global.js
  var require_global = __commonJS({
    "node_modules/core-js/library/modules/_global.js"(exports, module) {
      init_globals();
      var global2 = module.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
      if (typeof __g == "number")
        __g = global2;
    }
  });

  // node_modules/core-js/library/modules/_core.js
  var require_core = __commonJS({
    "node_modules/core-js/library/modules/_core.js"(exports, module) {
      init_globals();
      var core = module.exports = { version: "2.6.12" };
      if (typeof __e == "number")
        __e = core;
    }
  });

  // node_modules/core-js/library/modules/_a-function.js
  var require_a_function = __commonJS({
    "node_modules/core-js/library/modules/_a-function.js"(exports, module) {
      init_globals();
      module.exports = function(it) {
        if (typeof it != "function")
          throw TypeError(it + " is not a function!");
        return it;
      };
    }
  });

  // node_modules/core-js/library/modules/_ctx.js
  var require_ctx = __commonJS({
    "node_modules/core-js/library/modules/_ctx.js"(exports, module) {
      init_globals();
      var aFunction = require_a_function();
      module.exports = function(fn, that, length) {
        aFunction(fn);
        if (that === void 0)
          return fn;
        switch (length) {
          case 1:
            return function(a) {
              return fn.call(that, a);
            };
          case 2:
            return function(a, b) {
              return fn.call(that, a, b);
            };
          case 3:
            return function(a, b, c) {
              return fn.call(that, a, b, c);
            };
        }
        return function() {
          return fn.apply(that, arguments);
        };
      };
    }
  });

  // node_modules/core-js/library/modules/_is-object.js
  var require_is_object = __commonJS({
    "node_modules/core-js/library/modules/_is-object.js"(exports, module) {
      init_globals();
      module.exports = function(it) {
        return typeof it === "object" ? it !== null : typeof it === "function";
      };
    }
  });

  // node_modules/core-js/library/modules/_an-object.js
  var require_an_object = __commonJS({
    "node_modules/core-js/library/modules/_an-object.js"(exports, module) {
      init_globals();
      var isObject = require_is_object();
      module.exports = function(it) {
        if (!isObject(it))
          throw TypeError(it + " is not an object!");
        return it;
      };
    }
  });

  // node_modules/core-js/library/modules/_fails.js
  var require_fails = __commonJS({
    "node_modules/core-js/library/modules/_fails.js"(exports, module) {
      init_globals();
      module.exports = function(exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };
    }
  });

  // node_modules/core-js/library/modules/_descriptors.js
  var require_descriptors = __commonJS({
    "node_modules/core-js/library/modules/_descriptors.js"(exports, module) {
      init_globals();
      module.exports = !require_fails()(function() {
        return Object.defineProperty({}, "a", { get: function() {
          return 7;
        } }).a != 7;
      });
    }
  });

  // node_modules/core-js/library/modules/_dom-create.js
  var require_dom_create = __commonJS({
    "node_modules/core-js/library/modules/_dom-create.js"(exports, module) {
      init_globals();
      var isObject = require_is_object();
      var document2 = require_global().document;
      var is = isObject(document2) && isObject(document2.createElement);
      module.exports = function(it) {
        return is ? document2.createElement(it) : {};
      };
    }
  });

  // node_modules/core-js/library/modules/_ie8-dom-define.js
  var require_ie8_dom_define = __commonJS({
    "node_modules/core-js/library/modules/_ie8-dom-define.js"(exports, module) {
      init_globals();
      module.exports = !require_descriptors() && !require_fails()(function() {
        return Object.defineProperty(require_dom_create()("div"), "a", { get: function() {
          return 7;
        } }).a != 7;
      });
    }
  });

  // node_modules/core-js/library/modules/_to-primitive.js
  var require_to_primitive = __commonJS({
    "node_modules/core-js/library/modules/_to-primitive.js"(exports, module) {
      init_globals();
      var isObject = require_is_object();
      module.exports = function(it, S) {
        if (!isObject(it))
          return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == "function" && !isObject(val = fn.call(it)))
          return val;
        if (typeof (fn = it.valueOf) == "function" && !isObject(val = fn.call(it)))
          return val;
        if (!S && typeof (fn = it.toString) == "function" && !isObject(val = fn.call(it)))
          return val;
        throw TypeError("Can't convert object to primitive value");
      };
    }
  });

  // node_modules/core-js/library/modules/_object-dp.js
  var require_object_dp = __commonJS({
    "node_modules/core-js/library/modules/_object-dp.js"(exports) {
      init_globals();
      var anObject = require_an_object();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var toPrimitive = require_to_primitive();
      var dP = Object.defineProperty;
      exports.f = require_descriptors() ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE)
          try {
            return dP(O, P, Attributes);
          } catch (e) {
          }
        if ("get" in Attributes || "set" in Attributes)
          throw TypeError("Accessors not supported!");
        if ("value" in Attributes)
          O[P] = Attributes.value;
        return O;
      };
    }
  });

  // node_modules/core-js/library/modules/_property-desc.js
  var require_property_desc = __commonJS({
    "node_modules/core-js/library/modules/_property-desc.js"(exports, module) {
      init_globals();
      module.exports = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
    }
  });

  // node_modules/core-js/library/modules/_hide.js
  var require_hide = __commonJS({
    "node_modules/core-js/library/modules/_hide.js"(exports, module) {
      init_globals();
      var dP = require_object_dp();
      var createDesc = require_property_desc();
      module.exports = require_descriptors() ? function(object, key, value) {
        return dP.f(object, key, createDesc(1, value));
      } : function(object, key, value) {
        object[key] = value;
        return object;
      };
    }
  });

  // node_modules/core-js/library/modules/_has.js
  var require_has = __commonJS({
    "node_modules/core-js/library/modules/_has.js"(exports, module) {
      init_globals();
      var hasOwnProperty = {}.hasOwnProperty;
      module.exports = function(it, key) {
        return hasOwnProperty.call(it, key);
      };
    }
  });

  // node_modules/core-js/library/modules/_export.js
  var require_export = __commonJS({
    "node_modules/core-js/library/modules/_export.js"(exports, module) {
      init_globals();
      var global2 = require_global();
      var core = require_core();
      var ctx2 = require_ctx();
      var hide = require_hide();
      var has = require_has();
      var PROTOTYPE = "prototype";
      var $export = function(type2, name, source2) {
        var IS_FORCED = type2 & $export.F;
        var IS_GLOBAL = type2 & $export.G;
        var IS_STATIC = type2 & $export.S;
        var IS_PROTO = type2 & $export.P;
        var IS_BIND = type2 & $export.B;
        var IS_WRAP = type2 & $export.W;
        var exports2 = IS_GLOBAL ? core : core[name] || (core[name] = {});
        var expProto = exports2[PROTOTYPE];
        var target = IS_GLOBAL ? global2 : IS_STATIC ? global2[name] : (global2[name] || {})[PROTOTYPE];
        var key, own, out;
        if (IS_GLOBAL)
          source2 = name;
        for (key in source2) {
          own = !IS_FORCED && target && target[key] !== void 0;
          if (own && has(exports2, key))
            continue;
          out = own ? target[key] : source2[key];
          exports2[key] = IS_GLOBAL && typeof target[key] != "function" ? source2[key] : IS_BIND && own ? ctx2(out, global2) : IS_WRAP && target[key] == out ? function(C) {
            var F = function(a, b, c) {
              if (this instanceof C) {
                switch (arguments.length) {
                  case 0:
                    return new C();
                  case 1:
                    return new C(a);
                  case 2:
                    return new C(a, b);
                }
                return new C(a, b, c);
              }
              return C.apply(this, arguments);
            };
            F[PROTOTYPE] = C[PROTOTYPE];
            return F;
          }(out) : IS_PROTO && typeof out == "function" ? ctx2(Function.call, out) : out;
          if (IS_PROTO) {
            (exports2.virtual || (exports2.virtual = {}))[key] = out;
            if (type2 & $export.R && expProto && !expProto[key])
              hide(expProto, key, out);
          }
        }
      };
      $export.F = 1;
      $export.G = 2;
      $export.S = 4;
      $export.P = 8;
      $export.B = 16;
      $export.W = 32;
      $export.U = 64;
      $export.R = 128;
      module.exports = $export;
    }
  });

  // node_modules/core-js/library/modules/_cof.js
  var require_cof = __commonJS({
    "node_modules/core-js/library/modules/_cof.js"(exports, module) {
      init_globals();
      var toString = {}.toString;
      module.exports = function(it) {
        return toString.call(it).slice(8, -1);
      };
    }
  });

  // node_modules/core-js/library/modules/_iobject.js
  var require_iobject = __commonJS({
    "node_modules/core-js/library/modules/_iobject.js"(exports, module) {
      init_globals();
      var cof = require_cof();
      module.exports = Object("z").propertyIsEnumerable(0) ? Object : function(it) {
        return cof(it) == "String" ? it.split("") : Object(it);
      };
    }
  });

  // node_modules/core-js/library/modules/_defined.js
  var require_defined = __commonJS({
    "node_modules/core-js/library/modules/_defined.js"(exports, module) {
      init_globals();
      module.exports = function(it) {
        if (it == void 0)
          throw TypeError("Can't call method on  " + it);
        return it;
      };
    }
  });

  // node_modules/core-js/library/modules/_to-iobject.js
  var require_to_iobject = __commonJS({
    "node_modules/core-js/library/modules/_to-iobject.js"(exports, module) {
      init_globals();
      var IObject = require_iobject();
      var defined = require_defined();
      module.exports = function(it) {
        return IObject(defined(it));
      };
    }
  });

  // node_modules/core-js/library/modules/_to-integer.js
  var require_to_integer = __commonJS({
    "node_modules/core-js/library/modules/_to-integer.js"(exports, module) {
      init_globals();
      var ceil = Math.ceil;
      var floor = Math.floor;
      module.exports = function(it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
      };
    }
  });

  // node_modules/core-js/library/modules/_to-length.js
  var require_to_length = __commonJS({
    "node_modules/core-js/library/modules/_to-length.js"(exports, module) {
      init_globals();
      var toInteger = require_to_integer();
      var min = Math.min;
      module.exports = function(it) {
        return it > 0 ? min(toInteger(it), 9007199254740991) : 0;
      };
    }
  });

  // node_modules/core-js/library/modules/_to-absolute-index.js
  var require_to_absolute_index = __commonJS({
    "node_modules/core-js/library/modules/_to-absolute-index.js"(exports, module) {
      init_globals();
      var toInteger = require_to_integer();
      var max = Math.max;
      var min = Math.min;
      module.exports = function(index, length) {
        index = toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
      };
    }
  });

  // node_modules/core-js/library/modules/_array-includes.js
  var require_array_includes = __commonJS({
    "node_modules/core-js/library/modules/_array-includes.js"(exports, module) {
      init_globals();
      var toIObject = require_to_iobject();
      var toLength = require_to_length();
      var toAbsoluteIndex = require_to_absolute_index();
      module.exports = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
          var O = toIObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          if (IS_INCLUDES && el != el)
            while (length > index) {
              value = O[index++];
              if (value != value)
                return true;
            }
          else
            for (; length > index; index++)
              if (IS_INCLUDES || index in O) {
                if (O[index] === el)
                  return IS_INCLUDES || index || 0;
              }
          return !IS_INCLUDES && -1;
        };
      };
    }
  });

  // node_modules/core-js/library/modules/_library.js
  var require_library = __commonJS({
    "node_modules/core-js/library/modules/_library.js"(exports, module) {
      init_globals();
      module.exports = true;
    }
  });

  // node_modules/core-js/library/modules/_shared.js
  var require_shared = __commonJS({
    "node_modules/core-js/library/modules/_shared.js"(exports, module) {
      init_globals();
      var core = require_core();
      var global2 = require_global();
      var SHARED = "__core-js_shared__";
      var store = global2[SHARED] || (global2[SHARED] = {});
      (module.exports = function(key, value) {
        return store[key] || (store[key] = value !== void 0 ? value : {});
      })("versions", []).push({
        version: core.version,
        mode: require_library() ? "pure" : "global",
        copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)"
      });
    }
  });

  // node_modules/core-js/library/modules/_uid.js
  var require_uid = __commonJS({
    "node_modules/core-js/library/modules/_uid.js"(exports, module) {
      init_globals();
      var id = 0;
      var px = Math.random();
      module.exports = function(key) {
        return "Symbol(".concat(key === void 0 ? "" : key, ")_", (++id + px).toString(36));
      };
    }
  });

  // node_modules/core-js/library/modules/_shared-key.js
  var require_shared_key = __commonJS({
    "node_modules/core-js/library/modules/_shared-key.js"(exports, module) {
      init_globals();
      var shared = require_shared()("keys");
      var uid = require_uid();
      module.exports = function(key) {
        return shared[key] || (shared[key] = uid(key));
      };
    }
  });

  // node_modules/core-js/library/modules/_object-keys-internal.js
  var require_object_keys_internal = __commonJS({
    "node_modules/core-js/library/modules/_object-keys-internal.js"(exports, module) {
      init_globals();
      var has = require_has();
      var toIObject = require_to_iobject();
      var arrayIndexOf = require_array_includes()(false);
      var IE_PROTO = require_shared_key()("IE_PROTO");
      module.exports = function(object, names2) {
        var O = toIObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O)
          if (key != IE_PROTO)
            has(O, key) && result.push(key);
        while (names2.length > i)
          if (has(O, key = names2[i++])) {
            ~arrayIndexOf(result, key) || result.push(key);
          }
        return result;
      };
    }
  });

  // node_modules/core-js/library/modules/_enum-bug-keys.js
  var require_enum_bug_keys = __commonJS({
    "node_modules/core-js/library/modules/_enum-bug-keys.js"(exports, module) {
      init_globals();
      module.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
    }
  });

  // node_modules/core-js/library/modules/_object-keys.js
  var require_object_keys = __commonJS({
    "node_modules/core-js/library/modules/_object-keys.js"(exports, module) {
      init_globals();
      var $keys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      module.exports = Object.keys || function keys(O) {
        return $keys(O, enumBugKeys);
      };
    }
  });

  // node_modules/core-js/library/modules/_object-gops.js
  var require_object_gops = __commonJS({
    "node_modules/core-js/library/modules/_object-gops.js"(exports) {
      init_globals();
      exports.f = Object.getOwnPropertySymbols;
    }
  });

  // node_modules/core-js/library/modules/_object-pie.js
  var require_object_pie = __commonJS({
    "node_modules/core-js/library/modules/_object-pie.js"(exports) {
      init_globals();
      exports.f = {}.propertyIsEnumerable;
    }
  });

  // node_modules/core-js/library/modules/_to-object.js
  var require_to_object = __commonJS({
    "node_modules/core-js/library/modules/_to-object.js"(exports, module) {
      init_globals();
      var defined = require_defined();
      module.exports = function(it) {
        return Object(defined(it));
      };
    }
  });

  // node_modules/core-js/library/modules/_object-assign.js
  var require_object_assign = __commonJS({
    "node_modules/core-js/library/modules/_object-assign.js"(exports, module) {
      init_globals();
      var DESCRIPTORS = require_descriptors();
      var getKeys = require_object_keys();
      var gOPS = require_object_gops();
      var pIE = require_object_pie();
      var toObject = require_to_object();
      var IObject = require_iobject();
      var $assign = Object.assign;
      module.exports = !$assign || require_fails()(function() {
        var A = {};
        var B = {};
        var S = Symbol();
        var K = "abcdefghijklmnopqrst";
        A[S] = 7;
        K.split("").forEach(function(k) {
          B[k] = k;
        });
        return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join("") != K;
      }) ? function assign(target, source2) {
        var T = toObject(target);
        var aLen = arguments.length;
        var index = 1;
        var getSymbols = gOPS.f;
        var isEnum = pIE.f;
        while (aLen > index) {
          var S = IObject(arguments[index++]);
          var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
          var length = keys.length;
          var j = 0;
          var key;
          while (length > j) {
            key = keys[j++];
            if (!DESCRIPTORS || isEnum.call(S, key))
              T[key] = S[key];
          }
        }
        return T;
      } : $assign;
    }
  });

  // node_modules/core-js/library/modules/es6.object.assign.js
  var require_es6_object_assign = __commonJS({
    "node_modules/core-js/library/modules/es6.object.assign.js"() {
      init_globals();
      var $export = require_export();
      $export($export.S + $export.F, "Object", { assign: require_object_assign() });
    }
  });

  // node_modules/core-js/library/fn/object/assign.js
  var require_assign = __commonJS({
    "node_modules/core-js/library/fn/object/assign.js"(exports, module) {
      init_globals();
      require_es6_object_assign();
      module.exports = require_core().Object.assign;
    }
  });

  // node_modules/babel-runtime/core-js/object/assign.js
  var require_assign2 = __commonJS({
    "node_modules/babel-runtime/core-js/object/assign.js"(exports, module) {
      init_globals();
      module.exports = { "default": require_assign(), __esModule: true };
    }
  });

  // node_modules/babel-runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/babel-runtime/helpers/extends.js"(exports) {
      init_globals();
      exports.__esModule = true;
      var _assign = require_assign2();
      var _assign2 = _interopRequireDefault(_assign);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports.default = _assign2.default || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = arguments[i];
          for (var key in source2) {
            if (Object.prototype.hasOwnProperty.call(source2, key)) {
              target[key] = source2[key];
            }
          }
        }
        return target;
      };
    }
  });

  // node_modules/core-js/library/modules/_string-at.js
  var require_string_at = __commonJS({
    "node_modules/core-js/library/modules/_string-at.js"(exports, module) {
      init_globals();
      var toInteger = require_to_integer();
      var defined = require_defined();
      module.exports = function(TO_STRING) {
        return function(that, pos) {
          var s = String(defined(that));
          var i = toInteger(pos);
          var l = s.length;
          var a, b;
          if (i < 0 || i >= l)
            return TO_STRING ? "" : void 0;
          a = s.charCodeAt(i);
          return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
        };
      };
    }
  });

  // node_modules/core-js/library/modules/_redefine.js
  var require_redefine = __commonJS({
    "node_modules/core-js/library/modules/_redefine.js"(exports, module) {
      init_globals();
      module.exports = require_hide();
    }
  });

  // node_modules/core-js/library/modules/_iterators.js
  var require_iterators = __commonJS({
    "node_modules/core-js/library/modules/_iterators.js"(exports, module) {
      init_globals();
      module.exports = {};
    }
  });

  // node_modules/core-js/library/modules/_object-dps.js
  var require_object_dps = __commonJS({
    "node_modules/core-js/library/modules/_object-dps.js"(exports, module) {
      init_globals();
      var dP = require_object_dp();
      var anObject = require_an_object();
      var getKeys = require_object_keys();
      module.exports = require_descriptors() ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = getKeys(Properties);
        var length = keys.length;
        var i = 0;
        var P;
        while (length > i)
          dP.f(O, P = keys[i++], Properties[P]);
        return O;
      };
    }
  });

  // node_modules/core-js/library/modules/_html.js
  var require_html = __commonJS({
    "node_modules/core-js/library/modules/_html.js"(exports, module) {
      init_globals();
      var document2 = require_global().document;
      module.exports = document2 && document2.documentElement;
    }
  });

  // node_modules/core-js/library/modules/_object-create.js
  var require_object_create = __commonJS({
    "node_modules/core-js/library/modules/_object-create.js"(exports, module) {
      init_globals();
      var anObject = require_an_object();
      var dPs = require_object_dps();
      var enumBugKeys = require_enum_bug_keys();
      var IE_PROTO = require_shared_key()("IE_PROTO");
      var Empty = function() {
      };
      var PROTOTYPE = "prototype";
      var createDict = function() {
        var iframe = require_dom_create()("iframe");
        var i = enumBugKeys.length;
        var lt = "<";
        var gt = ">";
        var iframeDocument;
        iframe.style.display = "none";
        require_html().appendChild(iframe);
        iframe.src = "javascript:";
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(lt + "script" + gt + "document.F=Object" + lt + "/script" + gt);
        iframeDocument.close();
        createDict = iframeDocument.F;
        while (i--)
          delete createDict[PROTOTYPE][enumBugKeys[i]];
        return createDict();
      };
      module.exports = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          Empty[PROTOTYPE] = anObject(O);
          result = new Empty();
          Empty[PROTOTYPE] = null;
          result[IE_PROTO] = O;
        } else
          result = createDict();
        return Properties === void 0 ? result : dPs(result, Properties);
      };
    }
  });

  // node_modules/core-js/library/modules/_wks.js
  var require_wks = __commonJS({
    "node_modules/core-js/library/modules/_wks.js"(exports, module) {
      init_globals();
      var store = require_shared()("wks");
      var uid = require_uid();
      var Symbol2 = require_global().Symbol;
      var USE_SYMBOL = typeof Symbol2 == "function";
      var $exports = module.exports = function(name) {
        return store[name] || (store[name] = USE_SYMBOL && Symbol2[name] || (USE_SYMBOL ? Symbol2 : uid)("Symbol." + name));
      };
      $exports.store = store;
    }
  });

  // node_modules/core-js/library/modules/_set-to-string-tag.js
  var require_set_to_string_tag = __commonJS({
    "node_modules/core-js/library/modules/_set-to-string-tag.js"(exports, module) {
      init_globals();
      var def = require_object_dp().f;
      var has = require_has();
      var TAG = require_wks()("toStringTag");
      module.exports = function(it, tag, stat) {
        if (it && !has(it = stat ? it : it.prototype, TAG))
          def(it, TAG, { configurable: true, value: tag });
      };
    }
  });

  // node_modules/core-js/library/modules/_iter-create.js
  var require_iter_create = __commonJS({
    "node_modules/core-js/library/modules/_iter-create.js"(exports, module) {
      init_globals();
      var create = require_object_create();
      var descriptor = require_property_desc();
      var setToStringTag = require_set_to_string_tag();
      var IteratorPrototype = {};
      require_hide()(IteratorPrototype, require_wks()("iterator"), function() {
        return this;
      });
      module.exports = function(Constructor, NAME, next) {
        Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
        setToStringTag(Constructor, NAME + " Iterator");
      };
    }
  });

  // node_modules/core-js/library/modules/_object-gpo.js
  var require_object_gpo = __commonJS({
    "node_modules/core-js/library/modules/_object-gpo.js"(exports, module) {
      init_globals();
      var has = require_has();
      var toObject = require_to_object();
      var IE_PROTO = require_shared_key()("IE_PROTO");
      var ObjectProto = Object.prototype;
      module.exports = Object.getPrototypeOf || function(O) {
        O = toObject(O);
        if (has(O, IE_PROTO))
          return O[IE_PROTO];
        if (typeof O.constructor == "function" && O instanceof O.constructor) {
          return O.constructor.prototype;
        }
        return O instanceof Object ? ObjectProto : null;
      };
    }
  });

  // node_modules/core-js/library/modules/_iter-define.js
  var require_iter_define = __commonJS({
    "node_modules/core-js/library/modules/_iter-define.js"(exports, module) {
      init_globals();
      var LIBRARY = require_library();
      var $export = require_export();
      var redefine = require_redefine();
      var hide = require_hide();
      var Iterators = require_iterators();
      var $iterCreate = require_iter_create();
      var setToStringTag = require_set_to_string_tag();
      var getPrototypeOf = require_object_gpo();
      var ITERATOR = require_wks()("iterator");
      var BUGGY = !([].keys && "next" in [].keys());
      var FF_ITERATOR = "@@iterator";
      var KEYS = "keys";
      var VALUES = "values";
      var returnThis = function() {
        return this;
      };
      module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
        $iterCreate(Constructor, NAME, next);
        var getMethod = function(kind) {
          if (!BUGGY && kind in proto)
            return proto[kind];
          switch (kind) {
            case KEYS:
              return function keys() {
                return new Constructor(this, kind);
              };
            case VALUES:
              return function values() {
                return new Constructor(this, kind);
              };
          }
          return function entries() {
            return new Constructor(this, kind);
          };
        };
        var TAG = NAME + " Iterator";
        var DEF_VALUES = DEFAULT == VALUES;
        var VALUES_BUG = false;
        var proto = Base.prototype;
        var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
        var $default = $native || getMethod(DEFAULT);
        var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod("entries") : void 0;
        var $anyNative = NAME == "Array" ? proto.entries || $native : $native;
        var methods, key, IteratorPrototype;
        if ($anyNative) {
          IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
          if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
            setToStringTag(IteratorPrototype, TAG, true);
            if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != "function")
              hide(IteratorPrototype, ITERATOR, returnThis);
          }
        }
        if (DEF_VALUES && $native && $native.name !== VALUES) {
          VALUES_BUG = true;
          $default = function values() {
            return $native.call(this);
          };
        }
        if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
          hide(proto, ITERATOR, $default);
        }
        Iterators[NAME] = $default;
        Iterators[TAG] = returnThis;
        if (DEFAULT) {
          methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: $entries
          };
          if (FORCED)
            for (key in methods) {
              if (!(key in proto))
                redefine(proto, key, methods[key]);
            }
          else
            $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
        }
        return methods;
      };
    }
  });

  // node_modules/core-js/library/modules/es6.string.iterator.js
  var require_es6_string_iterator = __commonJS({
    "node_modules/core-js/library/modules/es6.string.iterator.js"() {
      init_globals();
      var $at = require_string_at()(true);
      require_iter_define()(String, "String", function(iterated) {
        this._t = String(iterated);
        this._i = 0;
      }, function() {
        var O = this._t;
        var index = this._i;
        var point;
        if (index >= O.length)
          return { value: void 0, done: true };
        point = $at(O, index);
        this._i += point.length;
        return { value: point, done: false };
      });
    }
  });

  // node_modules/core-js/library/modules/_iter-call.js
  var require_iter_call = __commonJS({
    "node_modules/core-js/library/modules/_iter-call.js"(exports, module) {
      init_globals();
      var anObject = require_an_object();
      module.exports = function(iterator, fn, value, entries) {
        try {
          return entries ? fn(anObject(value)[0], value[1]) : fn(value);
        } catch (e) {
          var ret = iterator["return"];
          if (ret !== void 0)
            anObject(ret.call(iterator));
          throw e;
        }
      };
    }
  });

  // node_modules/core-js/library/modules/_is-array-iter.js
  var require_is_array_iter = __commonJS({
    "node_modules/core-js/library/modules/_is-array-iter.js"(exports, module) {
      init_globals();
      var Iterators = require_iterators();
      var ITERATOR = require_wks()("iterator");
      var ArrayProto = Array.prototype;
      module.exports = function(it) {
        return it !== void 0 && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
      };
    }
  });

  // node_modules/core-js/library/modules/_create-property.js
  var require_create_property = __commonJS({
    "node_modules/core-js/library/modules/_create-property.js"(exports, module) {
      init_globals();
      var $defineProperty = require_object_dp();
      var createDesc = require_property_desc();
      module.exports = function(object, index, value) {
        if (index in object)
          $defineProperty.f(object, index, createDesc(0, value));
        else
          object[index] = value;
      };
    }
  });

  // node_modules/core-js/library/modules/_classof.js
  var require_classof = __commonJS({
    "node_modules/core-js/library/modules/_classof.js"(exports, module) {
      init_globals();
      var cof = require_cof();
      var TAG = require_wks()("toStringTag");
      var ARG = cof(function() {
        return arguments;
      }()) == "Arguments";
      var tryGet = function(it, key) {
        try {
          return it[key];
        } catch (e) {
        }
      };
      module.exports = function(it) {
        var O, T, B;
        return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (T = tryGet(O = Object(it), TAG)) == "string" ? T : ARG ? cof(O) : (B = cof(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : B;
      };
    }
  });

  // node_modules/core-js/library/modules/core.get-iterator-method.js
  var require_core_get_iterator_method = __commonJS({
    "node_modules/core-js/library/modules/core.get-iterator-method.js"(exports, module) {
      init_globals();
      var classof = require_classof();
      var ITERATOR = require_wks()("iterator");
      var Iterators = require_iterators();
      module.exports = require_core().getIteratorMethod = function(it) {
        if (it != void 0)
          return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
      };
    }
  });

  // node_modules/core-js/library/modules/_iter-detect.js
  var require_iter_detect = __commonJS({
    "node_modules/core-js/library/modules/_iter-detect.js"(exports, module) {
      init_globals();
      var ITERATOR = require_wks()("iterator");
      var SAFE_CLOSING = false;
      try {
        riter = [7][ITERATOR]();
        riter["return"] = function() {
          SAFE_CLOSING = true;
        };
        Array.from(riter, function() {
          throw 2;
        });
      } catch (e) {
      }
      var riter;
      module.exports = function(exec, skipClosing) {
        if (!skipClosing && !SAFE_CLOSING)
          return false;
        var safe = false;
        try {
          var arr = [7];
          var iter = arr[ITERATOR]();
          iter.next = function() {
            return { done: safe = true };
          };
          arr[ITERATOR] = function() {
            return iter;
          };
          exec(arr);
        } catch (e) {
        }
        return safe;
      };
    }
  });

  // node_modules/core-js/library/modules/es6.array.from.js
  var require_es6_array_from = __commonJS({
    "node_modules/core-js/library/modules/es6.array.from.js"() {
      init_globals();
      var ctx2 = require_ctx();
      var $export = require_export();
      var toObject = require_to_object();
      var call = require_iter_call();
      var isArrayIter = require_is_array_iter();
      var toLength = require_to_length();
      var createProperty = require_create_property();
      var getIterFn = require_core_get_iterator_method();
      $export($export.S + $export.F * !require_iter_detect()(function(iter) {
        Array.from(iter);
      }), "Array", {
        from: function from(arrayLike) {
          var O = toObject(arrayLike);
          var C = typeof this == "function" ? this : Array;
          var aLen = arguments.length;
          var mapfn = aLen > 1 ? arguments[1] : void 0;
          var mapping = mapfn !== void 0;
          var index = 0;
          var iterFn = getIterFn(O);
          var length, result, step, iterator;
          if (mapping)
            mapfn = ctx2(mapfn, aLen > 2 ? arguments[2] : void 0, 2);
          if (iterFn != void 0 && !(C == Array && isArrayIter(iterFn))) {
            for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
              createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
            }
          } else {
            length = toLength(O.length);
            for (result = new C(length); length > index; index++) {
              createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
            }
          }
          result.length = index;
          return result;
        }
      });
    }
  });

  // node_modules/core-js/library/fn/array/from.js
  var require_from = __commonJS({
    "node_modules/core-js/library/fn/array/from.js"(exports, module) {
      init_globals();
      require_es6_string_iterator();
      require_es6_array_from();
      module.exports = require_core().Array.from;
    }
  });

  // node_modules/babel-runtime/core-js/array/from.js
  var require_from2 = __commonJS({
    "node_modules/babel-runtime/core-js/array/from.js"(exports, module) {
      init_globals();
      module.exports = { "default": require_from(), __esModule: true };
    }
  });

  // node_modules/babel-runtime/helpers/toConsumableArray.js
  var require_toConsumableArray = __commonJS({
    "node_modules/babel-runtime/helpers/toConsumableArray.js"(exports) {
      init_globals();
      exports.__esModule = true;
      var _from = require_from2();
      var _from2 = _interopRequireDefault(_from);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports.default = function(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }
          return arr2;
        } else {
          return (0, _from2.default)(arr);
        }
      };
    }
  });

  // node_modules/core-js/library/modules/_object-sap.js
  var require_object_sap = __commonJS({
    "node_modules/core-js/library/modules/_object-sap.js"(exports, module) {
      init_globals();
      var $export = require_export();
      var core = require_core();
      var fails = require_fails();
      module.exports = function(KEY, exec) {
        var fn = (core.Object || {})[KEY] || Object[KEY];
        var exp = {};
        exp[KEY] = exec(fn);
        $export($export.S + $export.F * fails(function() {
          fn(1);
        }), "Object", exp);
      };
    }
  });

  // node_modules/core-js/library/modules/es6.object.keys.js
  var require_es6_object_keys = __commonJS({
    "node_modules/core-js/library/modules/es6.object.keys.js"() {
      init_globals();
      var toObject = require_to_object();
      var $keys = require_object_keys();
      require_object_sap()("keys", function() {
        return function keys(it) {
          return $keys(toObject(it));
        };
      });
    }
  });

  // node_modules/core-js/library/fn/object/keys.js
  var require_keys = __commonJS({
    "node_modules/core-js/library/fn/object/keys.js"(exports, module) {
      init_globals();
      require_es6_object_keys();
      module.exports = require_core().Object.keys;
    }
  });

  // node_modules/babel-runtime/core-js/object/keys.js
  var require_keys2 = __commonJS({
    "node_modules/babel-runtime/core-js/object/keys.js"(exports, module) {
      init_globals();
      module.exports = { "default": require_keys(), __esModule: true };
    }
  });

  // node_modules/words-to-numbers/dist/constants.js
  var require_constants = __commonJS({
    "node_modules/words-to-numbers/dist/constants.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.BLACKLIST_SINGULAR_WORDS = exports.ALL_WORDS = exports.TOKEN_TYPE = exports.PUNCTUATION = exports.DECIMALS = exports.JOINERS = exports.NUMBER_WORDS = exports.MAGNITUDE_KEYS = exports.TEN_KEYS = exports.UNIT_KEYS = exports.NUMBER = exports.MAGNITUDE = exports.TEN = exports.UNIT = void 0;
      var _toConsumableArray2 = require_toConsumableArray();
      var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
      var _keys = require_keys2();
      var _keys2 = _interopRequireDefault(_keys);
      var _extends2 = require_extends();
      var _extends3 = _interopRequireDefault(_extends2);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var UNIT = exports.UNIT = {
        zero: 0,
        first: 1,
        one: 1,
        second: 2,
        two: 2,
        third: 3,
        thirteenth: 13,
        thirteen: 13,
        three: 3,
        fourth: 4,
        fourteenth: 14,
        fourteen: 14,
        four: 4,
        fifteenth: 15,
        fifteen: 15,
        fifth: 5,
        five: 5,
        sixth: 6,
        sixteenth: 16,
        sixteen: 16,
        six: 6,
        seventeenth: 17,
        seventeen: 17,
        seventh: 7,
        seven: 7,
        eighteenth: 18,
        eighteen: 18,
        eighth: 8,
        eight: 8,
        nineteenth: 19,
        nineteen: 19,
        ninth: 9,
        nine: 9,
        tenth: 10,
        ten: 10,
        eleventh: 11,
        eleven: 11,
        twelfth: 12,
        twelve: 12,
        a: 1
      };
      var TEN = exports.TEN = {
        twenty: 20,
        twentieth: 20,
        thirty: 30,
        thirtieth: 30,
        forty: 40,
        fortieth: 40,
        fifty: 50,
        fiftieth: 50,
        sixty: 60,
        sixtieth: 60,
        seventy: 70,
        seventieth: 70,
        eighty: 80,
        eightieth: 80,
        ninety: 90,
        ninetieth: 90
      };
      var MAGNITUDE = exports.MAGNITUDE = {
        hundred: 100,
        hundredth: 100,
        thousand: 1e3,
        million: 1e6,
        billion: 1e9,
        trillion: 1e12,
        quadrillion: 1e15,
        quintillion: 1e18,
        sextillion: 1e21,
        septillion: 1e24,
        octillion: 1e27,
        nonillion: 1e30,
        decillion: 1e33
      };
      var NUMBER = exports.NUMBER = (0, _extends3.default)({}, UNIT, TEN, MAGNITUDE);
      var UNIT_KEYS = exports.UNIT_KEYS = (0, _keys2.default)(UNIT);
      var TEN_KEYS = exports.TEN_KEYS = (0, _keys2.default)(TEN);
      var MAGNITUDE_KEYS = exports.MAGNITUDE_KEYS = (0, _keys2.default)(MAGNITUDE);
      var NUMBER_WORDS = exports.NUMBER_WORDS = [].concat((0, _toConsumableArray3.default)(UNIT_KEYS), (0, _toConsumableArray3.default)(TEN_KEYS), (0, _toConsumableArray3.default)(MAGNITUDE_KEYS));
      var JOINERS = exports.JOINERS = ["and"];
      var DECIMALS = exports.DECIMALS = ["point", "dot"];
      var PUNCTUATION = exports.PUNCTUATION = [".", ",", "\\", "#", "!", "$", "%", "^", "&", "/", "*", ";", ":", "{", "}", "=", "-", "_", "`", "~", "(", ")", " "];
      var TOKEN_TYPE = exports.TOKEN_TYPE = {
        UNIT: 0,
        TEN: 1,
        MAGNITUDE: 2,
        DECIMAL: 3,
        HUNDRED: 4
      };
      var ALL_WORDS = exports.ALL_WORDS = [].concat((0, _toConsumableArray3.default)(NUMBER_WORDS), JOINERS, DECIMALS);
      var BLACKLIST_SINGULAR_WORDS = exports.BLACKLIST_SINGULAR_WORDS = ["a"];
    }
  });

  // node_modules/clj-fuzzy/src-js/clj-fuzzy.js
  var require_clj_fuzzy = __commonJS({
    "node_modules/clj-fuzzy/src-js/clj-fuzzy.js"(exports, module) {
      init_globals();
      if (typeof Math.imul == "undefined" || Math.imul(4294967295, 5) == 0) {
        Math.imul = function(a, b) {
          var ah = a >>> 16 & 65535;
          var al = a & 65535;
          var bh = b >>> 16 & 65535;
          var bl = b & 65535;
          return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
        };
      }
      (function() {
        var f, ba = this;
        function l(a) {
          var b = typeof a;
          if ("object" == b) {
            if (a) {
              if (a instanceof Array) {
                return "array";
              }
              if (a instanceof Object) {
                return b;
              }
              var c = Object.prototype.toString.call(a);
              if ("[object Window]" == c) {
                return "object";
              }
              if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) {
                return "array";
              }
              if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) {
                return "function";
              }
            } else {
              return "null";
            }
          } else {
            if ("function" == b && "undefined" == typeof a.call) {
              return "object";
            }
          }
          return b;
        }
        var ca = "closure_uid_" + (1e9 * Math.random() >>> 0), da = 0;
        function ea(a, b) {
          var c = a.split("."), d = ba;
          c[0] in d || !d.execScript || d.execScript("var " + c[0]);
          for (var e; c.length && (e = c.shift()); ) {
            c.length || void 0 === b ? d = d[e] ? d[e] : d[e] = {} : d[e] = b;
          }
        }
        var fa = String.prototype.trim ? function(a) {
          return a.trim();
        } : function(a) {
          return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
        };
        function ga(a) {
          return Array.prototype.join.call(arguments, "");
        }
        function ha(a, b) {
          for (var c in a) {
            b.call(void 0, a[c], c, a);
          }
        }
        function ia(a, b) {
          null != a && this.append.apply(this, arguments);
        }
        f = ia.prototype;
        f.Ha = "";
        f.set = function(a) {
          this.Ha = "" + a;
        };
        f.append = function(a, b, c) {
          this.Ha += a;
          if (null != b) {
            for (var d = 1; d < arguments.length; d++) {
              this.Ha += arguments[d];
            }
          }
          return this;
        };
        f.clear = function() {
          this.Ha = "";
        };
        f.toString = function() {
          return this.Ha;
        };
        if ("undefined" === typeof ja) {
          var ja = function() {
            throw Error("No *print-fn* fn set for evaluation environment");
          };
        }
        var ka = null;
        if ("undefined" === typeof la) {
          var la = null;
        }
        function ma() {
          return new pa(null, 5, [qa, true, ra, true, ua, false, va, false, wa, null], null);
        }
        function n(a) {
          return null != a && false !== a;
        }
        function xa(a) {
          return null == a;
        }
        function Ba(a) {
          return a instanceof Array;
        }
        function Ca(a) {
          return n(a) ? false : true;
        }
        function r(a, b) {
          return a[l(null == b ? null : b)] ? true : a._ ? true : false;
        }
        function t(a, b) {
          var c = null == b ? null : b.constructor, c = n(n(c) ? c.Jb : c) ? c.Ib : l(b);
          return Error(["No protocol method ", a, " defined for type ", c, ": ", b].join(""));
        }
        function Da(a) {
          var b = a.Ib;
          return n(b) ? b : "" + u(a);
        }
        var Ga = "undefined" !== typeof Symbol && "function" === l(Symbol) ? Symbol.iterator : "@@iterator";
        function Ha(a) {
          for (var b = a.length, c = Array(b), d = 0; ; ) {
            if (d < b) {
              c[d] = a[d], d += 1;
            } else {
              break;
            }
          }
          return c;
        }
        function Ia(a) {
          function b(a2, b2) {
            a2.push(b2);
            return a2;
          }
          var c = [];
          return Ka ? Ka(b, c, a) : La.call(null, b, c, a);
        }
        var Ma = {}, Na = {}, Oa = function Oa2(b) {
          if (b ? b.L : b) {
            return b.L(b);
          }
          var c;
          c = Oa2[l(null == b ? null : b)];
          if (!c && (c = Oa2._, !c)) {
            throw t("ICounted.-count", b);
          }
          return c.call(null, b);
        }, Qa = function Qa2(b) {
          if (b ? b.M : b) {
            return b.M(b);
          }
          var c;
          c = Qa2[l(null == b ? null : b)];
          if (!c && (c = Qa2._, !c)) {
            throw t("IEmptyableCollection.-empty", b);
          }
          return c.call(null, b);
        }, Ra = {}, Sa = function Sa2(b, c) {
          if (b ? b.J : b) {
            return b.J(b, c);
          }
          var d;
          d = Sa2[l(null == b ? null : b)];
          if (!d && (d = Sa2._, !d)) {
            throw t("ICollection.-conj", b);
          }
          return d.call(null, b, c);
        }, Va = {}, v = function v2() {
          switch (arguments.length) {
            case 2:
              return v2.a(arguments[0], arguments[1]);
            case 3:
              return v2.i(arguments[0], arguments[1], arguments[2]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        };
        v.a = function(a, b) {
          if (a ? a.N : a) {
            return a.N(a, b);
          }
          var c;
          c = v[l(null == a ? null : a)];
          if (!c && (c = v._, !c)) {
            throw t("IIndexed.-nth", a);
          }
          return c.call(null, a, b);
        };
        v.i = function(a, b, c) {
          if (a ? a.da : a) {
            return a.da(a, b, c);
          }
          var d;
          d = v[l(null == a ? null : a)];
          if (!d && (d = v._, !d)) {
            throw t("IIndexed.-nth", a);
          }
          return d.call(null, a, b, c);
        };
        v.v = 3;
        var Wa = {}, Xa = function Xa2(b) {
          if (b ? b.R : b) {
            return b.R(b);
          }
          var c;
          c = Xa2[l(null == b ? null : b)];
          if (!c && (c = Xa2._, !c)) {
            throw t("ISeq.-first", b);
          }
          return c.call(null, b);
        }, Za = function Za2(b) {
          if (b ? b.Y : b) {
            return b.Y(b);
          }
          var c;
          c = Za2[l(null == b ? null : b)];
          if (!c && (c = Za2._, !c)) {
            throw t("ISeq.-rest", b);
          }
          return c.call(null, b);
        }, $a = {}, ab = {}, bb = function bb2() {
          switch (arguments.length) {
            case 2:
              return bb2.a(arguments[0], arguments[1]);
            case 3:
              return bb2.i(arguments[0], arguments[1], arguments[2]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        };
        bb.a = function(a, b) {
          if (a ? a.G : a) {
            return a.G(a, b);
          }
          var c;
          c = bb[l(null == a ? null : a)];
          if (!c && (c = bb._, !c)) {
            throw t("ILookup.-lookup", a);
          }
          return c.call(null, a, b);
        };
        bb.i = function(a, b, c) {
          if (a ? a.F : a) {
            return a.F(a, b, c);
          }
          var d;
          d = bb[l(null == a ? null : a)];
          if (!d && (d = bb._, !d)) {
            throw t("ILookup.-lookup", a);
          }
          return d.call(null, a, b, c);
        };
        bb.v = 3;
        var cb = function cb2(b, c) {
          if (b ? b.eb : b) {
            return b.eb(b, c);
          }
          var d;
          d = cb2[l(null == b ? null : b)];
          if (!d && (d = cb2._, !d)) {
            throw t("IAssociative.-contains-key?", b);
          }
          return d.call(null, b, c);
        }, db = function db2(b, c, d) {
          if (b ? b.Qa : b) {
            return b.Qa(b, c, d);
          }
          var e;
          e = db2[l(null == b ? null : b)];
          if (!e && (e = db2._, !e)) {
            throw t("IAssociative.-assoc", b);
          }
          return e.call(null, b, c, d);
        }, eb = {}, fb = function fb2(b, c) {
          if (b ? b.ib : b) {
            return b.ib(b, c);
          }
          var d;
          d = fb2[l(null == b ? null : b)];
          if (!d && (d = fb2._, !d)) {
            throw t("IMap.-dissoc", b);
          }
          return d.call(null, b, c);
        }, hb = {}, ib = function ib2(b) {
          if (b ? b.jb : b) {
            return b.jb();
          }
          var c;
          c = ib2[l(null == b ? null : b)];
          if (!c && (c = ib2._, !c)) {
            throw t("IMapEntry.-key", b);
          }
          return c.call(null, b);
        }, jb = function jb2(b) {
          if (b ? b.kb : b) {
            return b.kb();
          }
          var c;
          c = jb2[l(null == b ? null : b)];
          if (!c && (c = jb2._, !c)) {
            throw t("IMapEntry.-val", b);
          }
          return c.call(null, b);
        }, kb = {}, lb = function lb2(b, c) {
          if (b ? b.pb : b) {
            return b.pb(0, c);
          }
          var d;
          d = lb2[l(null == b ? null : b)];
          if (!d && (d = lb2._, !d)) {
            throw t("ISet.-disjoin", b);
          }
          return d.call(null, b, c);
        }, mb = function mb2(b) {
          if (b ? b.Sa : b) {
            return b.Sa(b);
          }
          var c;
          c = mb2[l(null == b ? null : b)];
          if (!c && (c = mb2._, !c)) {
            throw t("IStack.-peek", b);
          }
          return c.call(null, b);
        }, nb = {}, ob = function ob2(b, c, d) {
          if (b ? b.lb : b) {
            return b.lb(b, c, d);
          }
          var e;
          e = ob2[l(null == b ? null : b)];
          if (!e && (e = ob2._, !e)) {
            throw t("IVector.-assoc-n", b);
          }
          return e.call(null, b, c, d);
        }, pb = {}, qb = function qb2(b) {
          if (b ? b.O : b) {
            return b.O(b);
          }
          var c;
          c = qb2[l(null == b ? null : b)];
          if (!c && (c = qb2._, !c)) {
            throw t("IMeta.-meta", b);
          }
          return c.call(null, b);
        }, rb = {}, sb = function sb2(b, c) {
          if (b ? b.S : b) {
            return b.S(b, c);
          }
          var d;
          d = sb2[l(null == b ? null : b)];
          if (!d && (d = sb2._, !d)) {
            throw t("IWithMeta.-with-meta", b);
          }
          return d.call(null, b, c);
        }, tb = {}, ub = function ub2() {
          switch (arguments.length) {
            case 2:
              return ub2.a(arguments[0], arguments[1]);
            case 3:
              return ub2.i(arguments[0], arguments[1], arguments[2]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        };
        ub.a = function(a, b) {
          if (a ? a.T : a) {
            return a.T(a, b);
          }
          var c;
          c = ub[l(null == a ? null : a)];
          if (!c && (c = ub._, !c)) {
            throw t("IReduce.-reduce", a);
          }
          return c.call(null, a, b);
        };
        ub.i = function(a, b, c) {
          if (a ? a.U : a) {
            return a.U(a, b, c);
          }
          var d;
          d = ub[l(null == a ? null : a)];
          if (!d && (d = ub._, !d)) {
            throw t("IReduce.-reduce", a);
          }
          return d.call(null, a, b, c);
        };
        ub.v = 3;
        var vb = function vb2(b, c) {
          if (b ? b.s : b) {
            return b.s(b, c);
          }
          var d;
          d = vb2[l(null == b ? null : b)];
          if (!d && (d = vb2._, !d)) {
            throw t("IEquiv.-equiv", b);
          }
          return d.call(null, b, c);
        }, wb = function wb2(b) {
          if (b ? b.I : b) {
            return b.I(b);
          }
          var c;
          c = wb2[l(null == b ? null : b)];
          if (!c && (c = wb2._, !c)) {
            throw t("IHash.-hash", b);
          }
          return c.call(null, b);
        }, xb = {}, zb = function zb2(b) {
          if (b ? b.K : b) {
            return b.K(b);
          }
          var c;
          c = zb2[l(null == b ? null : b)];
          if (!c && (c = zb2._, !c)) {
            throw t("ISeqable.-seq", b);
          }
          return c.call(null, b);
        }, Ab = {}, Bb = {}, Cb = function Cb2(b) {
          if (b ? b.Za : b) {
            return b.Za(b);
          }
          var c;
          c = Cb2[l(null == b ? null : b)];
          if (!c && (c = Cb2._, !c)) {
            throw t("IReversible.-rseq", b);
          }
          return c.call(null, b);
        }, Db = function Db2(b, c) {
          if (b ? b.rb : b) {
            return b.rb(0, c);
          }
          var d;
          d = Db2[l(null == b ? null : b)];
          if (!d && (d = Db2._, !d)) {
            throw t("IWriter.-write", b);
          }
          return d.call(null, b, c);
        }, Gb = {}, Hb = function Hb2(b, c, d) {
          if (b ? b.H : b) {
            return b.H(b, c, d);
          }
          var e;
          e = Hb2[l(null == b ? null : b)];
          if (!e && (e = Hb2._, !e)) {
            throw t("IPrintWithWriter.-pr-writer", b);
          }
          return e.call(null, b, c, d);
        }, Ib = function Ib2(b) {
          if (b ? b.La : b) {
            return b.La(b);
          }
          var c;
          c = Ib2[l(null == b ? null : b)];
          if (!c && (c = Ib2._, !c)) {
            throw t("IEditableCollection.-as-transient", b);
          }
          return c.call(null, b);
        }, Jb = function Jb2(b, c) {
          if (b ? b.Ia : b) {
            return b.Ia(b, c);
          }
          var d;
          d = Jb2[l(null == b ? null : b)];
          if (!d && (d = Jb2._, !d)) {
            throw t("ITransientCollection.-conj!", b);
          }
          return d.call(null, b, c);
        }, Kb = function Kb2(b) {
          if (b ? b.Ma : b) {
            return b.Ma(b);
          }
          var c;
          c = Kb2[l(null == b ? null : b)];
          if (!c && (c = Kb2._, !c)) {
            throw t("ITransientCollection.-persistent!", b);
          }
          return c.call(null, b);
        }, Lb = function Lb2(b, c, d) {
          if (b ? b.Ta : b) {
            return b.Ta(b, c, d);
          }
          var e;
          e = Lb2[l(null == b ? null : b)];
          if (!e && (e = Lb2._, !e)) {
            throw t("ITransientAssociative.-assoc!", b);
          }
          return e.call(null, b, c, d);
        }, Mb = function Mb2(b, c, d) {
          if (b ? b.qb : b) {
            return b.qb(0, c, d);
          }
          var e;
          e = Mb2[l(null == b ? null : b)];
          if (!e && (e = Mb2._, !e)) {
            throw t("ITransientVector.-assoc-n!", b);
          }
          return e.call(null, b, c, d);
        }, Nb = function Nb2(b) {
          if (b ? b.ob : b) {
            return b.ob();
          }
          var c;
          c = Nb2[l(null == b ? null : b)];
          if (!c && (c = Nb2._, !c)) {
            throw t("IChunk.-drop-first", b);
          }
          return c.call(null, b);
        }, Ob = function Ob2(b) {
          if (b ? b.gb : b) {
            return b.gb(b);
          }
          var c;
          c = Ob2[l(null == b ? null : b)];
          if (!c && (c = Ob2._, !c)) {
            throw t("IChunkedSeq.-chunked-first", b);
          }
          return c.call(null, b);
        }, Qb = function Qb2(b) {
          if (b ? b.hb : b) {
            return b.hb(b);
          }
          var c;
          c = Qb2[l(null == b ? null : b)];
          if (!c && (c = Qb2._, !c)) {
            throw t("IChunkedSeq.-chunked-rest", b);
          }
          return c.call(null, b);
        }, Rb = function Rb2(b) {
          if (b ? b.fb : b) {
            return b.fb(b);
          }
          var c;
          c = Rb2[l(null == b ? null : b)];
          if (!c && (c = Rb2._, !c)) {
            throw t("IChunkedNext.-chunked-next", b);
          }
          return c.call(null, b);
        }, Sb = function Sb2(b) {
          if (b ? b.Ra : b) {
            return b.Ra(b);
          }
          var c;
          c = Sb2[l(null == b ? null : b)];
          if (!c && (c = Sb2._, !c)) {
            throw t("IIterable.-iterator", b);
          }
          return c.call(null, b);
        };
        function Tb(a) {
          this.Kb = a;
          this.h = 1073741824;
          this.w = 0;
        }
        Tb.prototype.rb = function(a, b) {
          return this.Kb.append(b);
        };
        function Ub(a) {
          var b = new ia();
          a.H(null, new Tb(b), ma());
          return "" + u(b);
        }
        var Vb = "undefined" !== typeof Math.imul && 0 !== Math.imul(4294967295, 5) ? function(a, b) {
          return Math.imul(a, b);
        } : function(a, b) {
          var c = a & 65535, d = b & 65535;
          return c * d + ((a >>> 16 & 65535) * d + c * (b >>> 16 & 65535) << 16 >>> 0) | 0;
        };
        function Wb(a) {
          a = Vb(a | 0, -862048943);
          return Vb(a << 15 | a >>> -15, 461845907);
        }
        function Xb(a, b) {
          var c = (a | 0) ^ (b | 0);
          return Vb(c << 13 | c >>> -13, 5) + -430675100 | 0;
        }
        function Yb(a, b) {
          var c = (a | 0) ^ b, c = Vb(c ^ c >>> 16, -2048144789), c = Vb(c ^ c >>> 13, -1028477387);
          return c ^ c >>> 16;
        }
        function Zb(a) {
          var b;
          a: {
            b = 1;
            for (var c = 0; ; ) {
              if (b < a.length) {
                var d = b + 2, c = Xb(c, Wb(a.charCodeAt(b - 1) | a.charCodeAt(b) << 16));
                b = d;
              } else {
                b = c;
                break a;
              }
            }
          }
          b = 1 === (a.length & 1) ? b ^ Wb(a.charCodeAt(a.length - 1)) : b;
          return Yb(b, Vb(2, a.length));
        }
        var $b = {}, ac = 0;
        function bc(a) {
          255 < ac && ($b = {}, ac = 0);
          var b = $b[a];
          if ("number" !== typeof b) {
            a: {
              if (null != a) {
                if (b = a.length, 0 < b) {
                  for (var c = 0, d = 0; ; ) {
                    if (c < b) {
                      var e = c + 1, d = Vb(31, d) + a.charCodeAt(c), c = e;
                    } else {
                      b = d;
                      break a;
                    }
                  }
                } else {
                  b = 0;
                }
              } else {
                b = 0;
              }
            }
            $b[a] = b;
            ac += 1;
          }
          return a = b;
        }
        function cc(a) {
          a && (a.h & 4194304 || a.Ob) ? a = a.I(null) : "number" === typeof a ? a = Math.floor(a) % 2147483647 : true === a ? a = 1 : false === a ? a = 0 : "string" === typeof a ? (a = bc(a), 0 !== a && (a = Wb(a), a = Xb(0, a), a = Yb(a, 4))) : a = a instanceof Date ? a.valueOf() : null == a ? 0 : wb(a);
          return a;
        }
        function dc(a, b) {
          return a ^ b + 2654435769 + (a << 6) + (a >> 2);
        }
        function w(a) {
          if (null == a) {
            return null;
          }
          if (a && (a.h & 8388608 || a.Qb)) {
            return a.K(null);
          }
          if (Ba(a) || "string" === typeof a) {
            return 0 === a.length ? null : new x(a, 0);
          }
          if (r(xb, a)) {
            return zb(a);
          }
          throw Error([u(a), u(" is not ISeqable")].join(""));
        }
        function y(a) {
          if (null == a) {
            return null;
          }
          if (a && (a.h & 64 || a.$a)) {
            return a.R(null);
          }
          a = w(a);
          return null == a ? null : Xa(a);
        }
        function ec(a) {
          return null != a ? a && (a.h & 64 || a.$a) ? a.Y(null) : (a = w(a)) ? Za(a) : C : C;
        }
        function D(a) {
          return null == a ? null : a && (a.h & 128 || a.Ya) ? a.W(null) : w(ec(a));
        }
        var E = function E2() {
          switch (arguments.length) {
            case 1:
              return E2.b(arguments[0]);
            case 2:
              return E2.a(arguments[0], arguments[1]);
            default:
              return E2.m(arguments[0], arguments[1], new x(Array.prototype.slice.call(arguments, 2), 0));
          }
        };
        E.b = function() {
          return true;
        };
        E.a = function(a, b) {
          return null == a ? null == b : a === b || vb(a, b);
        };
        E.m = function(a, b, c) {
          for (; ; ) {
            if (E.a(a, b)) {
              if (D(c)) {
                a = b, b = y(c), c = D(c);
              } else {
                return E.a(b, y(c));
              }
            } else {
              return false;
            }
          }
        };
        E.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          c = D(c);
          return E.m(b, a, c);
        };
        E.v = 2;
        function fc(a) {
          this.u = a;
        }
        fc.prototype.next = function() {
          if (null != this.u) {
            var a = y(this.u);
            this.u = D(this.u);
            return { value: a, done: false };
          }
          return { value: null, done: true };
        };
        function gc(a) {
          return new fc(w(a));
        }
        function hc(a, b) {
          var c = Wb(a), c = Xb(0, c);
          return Yb(c, b);
        }
        function ic(a) {
          var b = 0, c = 1;
          for (a = w(a); ; ) {
            if (null != a) {
              b += 1, c = Vb(31, c) + cc(y(a)) | 0, a = D(a);
            } else {
              return hc(c, b);
            }
          }
        }
        var jc = hc(1, 0);
        function kc(a) {
          var b = 0, c = 0;
          for (a = w(a); ; ) {
            if (null != a) {
              b += 1, c = c + cc(y(a)) | 0, a = D(a);
            } else {
              return hc(c, b);
            }
          }
        }
        var lc = hc(0, 0);
        Na["null"] = true;
        Oa["null"] = function() {
          return 0;
        };
        Date.prototype.s = function(a, b) {
          return b instanceof Date && this.valueOf() === b.valueOf();
        };
        vb.number = function(a, b) {
          return a === b;
        };
        Ma["function"] = true;
        pb["function"] = true;
        qb["function"] = function() {
          return null;
        };
        wb._ = function(a) {
          return a[ca] || (a[ca] = ++da);
        };
        function mc(a, b) {
          var c = Oa(a);
          if (0 === c) {
            return b.C ? b.C() : b.call(null);
          }
          for (var d = v.a(a, 0), e = 1; ; ) {
            if (e < c) {
              var g = v.a(a, e), d = b.a ? b.a(d, g) : b.call(null, d, g), e = e + 1;
            } else {
              return d;
            }
          }
        }
        function nc(a, b, c) {
          var d = Oa(a), e = c;
          for (c = 0; ; ) {
            if (c < d) {
              var g = v.a(a, c), e = b.a ? b.a(e, g) : b.call(null, e, g);
              c += 1;
            } else {
              return e;
            }
          }
        }
        function oc(a, b) {
          var c = a.length;
          if (0 === a.length) {
            return b.C ? b.C() : b.call(null);
          }
          for (var d = a[0], e = 1; ; ) {
            if (e < c) {
              var g = a[e], d = b.a ? b.a(d, g) : b.call(null, d, g), e = e + 1;
            } else {
              return d;
            }
          }
        }
        function pc(a, b, c) {
          var d = a.length, e = c;
          for (c = 0; ; ) {
            if (c < d) {
              var g = a[c], e = b.a ? b.a(e, g) : b.call(null, e, g);
              c += 1;
            } else {
              return e;
            }
          }
        }
        function qc(a, b, c, d) {
          for (var e = a.length; ; ) {
            if (d < e) {
              var g = a[d];
              c = b.a ? b.a(c, g) : b.call(null, c, g);
              d += 1;
            } else {
              return c;
            }
          }
        }
        function rc(a) {
          return a ? a.h & 2 || a.vb ? true : a.h ? false : r(Na, a) : r(Na, a);
        }
        function sc(a, b) {
          this.c = a;
          this.j = b;
        }
        sc.prototype.ab = function() {
          return this.j < this.c.length;
        };
        sc.prototype.next = function() {
          var a = this.c[this.j];
          this.j += 1;
          return a;
        };
        function x(a, b) {
          this.c = a;
          this.j = b;
          this.h = 166199550;
          this.w = 8192;
        }
        f = x.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.N = function(a, b) {
          var c = b + this.j;
          return c < this.c.length ? this.c[c] : null;
        };
        f.da = function(a, b, c) {
          a = b + this.j;
          return a < this.c.length ? this.c[a] : c;
        };
        f.Ra = function() {
          return new sc(this.c, this.j);
        };
        f.W = function() {
          return this.j + 1 < this.c.length ? new x(this.c, this.j + 1) : null;
        };
        f.L = function() {
          var a = this.c.length - this.j;
          return 0 > a ? 0 : a;
        };
        f.Za = function() {
          var a = Oa(this);
          return 0 < a ? new uc(this, a - 1, null) : null;
        };
        f.I = function() {
          return ic(this);
        };
        f.s = function(a, b) {
          return vc.a ? vc.a(this, b) : vc.call(null, this, b);
        };
        f.M = function() {
          return C;
        };
        f.T = function(a, b) {
          return qc(this.c, b, this.c[this.j], this.j + 1);
        };
        f.U = function(a, b, c) {
          return qc(this.c, b, c, this.j);
        };
        f.R = function() {
          return this.c[this.j];
        };
        f.Y = function() {
          return this.j + 1 < this.c.length ? new x(this.c, this.j + 1) : C;
        };
        f.K = function() {
          return this.j < this.c.length ? this : null;
        };
        f.J = function(a, b) {
          return F.a ? F.a(b, this) : F.call(null, b, this);
        };
        x.prototype[Ga] = function() {
          return gc(this);
        };
        function wc(a, b) {
          return b < a.length ? new x(a, b) : null;
        }
        function xc() {
          switch (arguments.length) {
            case 1:
              return wc(arguments[0], 0);
            case 2:
              return wc(arguments[0], arguments[1]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        }
        function uc(a, b, c) {
          this.Wa = a;
          this.j = b;
          this.l = c;
          this.h = 32374990;
          this.w = 8192;
        }
        f = uc.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.l;
        };
        f.W = function() {
          return 0 < this.j ? new uc(this.Wa, this.j - 1, null) : null;
        };
        f.L = function() {
          return this.j + 1;
        };
        f.I = function() {
          return ic(this);
        };
        f.s = function(a, b) {
          return vc.a ? vc.a(this, b) : vc.call(null, this, b);
        };
        f.M = function() {
          var a = this.l;
          return yc.a ? yc.a(C, a) : yc.call(null, C, a);
        };
        f.T = function(a, b) {
          return zc ? zc(b, this) : Ac.call(null, b, this);
        };
        f.U = function(a, b, c) {
          return Bc ? Bc(b, c, this) : Ac.call(null, b, c, this);
        };
        f.R = function() {
          return v.a(this.Wa, this.j);
        };
        f.Y = function() {
          return 0 < this.j ? new uc(this.Wa, this.j - 1, null) : C;
        };
        f.K = function() {
          return this;
        };
        f.S = function(a, b) {
          return new uc(this.Wa, this.j, b);
        };
        f.J = function(a, b) {
          return F.a ? F.a(b, this) : F.call(null, b, this);
        };
        uc.prototype[Ga] = function() {
          return gc(this);
        };
        function Cc(a) {
          return y(D(a));
        }
        function Dc(a) {
          for (; ; ) {
            var b = D(a);
            if (null != b) {
              a = b;
            } else {
              return y(a);
            }
          }
        }
        vb._ = function(a, b) {
          return a === b;
        };
        var Ec = function Ec2() {
          switch (arguments.length) {
            case 0:
              return Ec2.C();
            case 1:
              return Ec2.b(arguments[0]);
            case 2:
              return Ec2.a(arguments[0], arguments[1]);
            default:
              return Ec2.m(arguments[0], arguments[1], new x(Array.prototype.slice.call(arguments, 2), 0));
          }
        };
        Ec.C = function() {
          return Fc;
        };
        Ec.b = function(a) {
          return a;
        };
        Ec.a = function(a, b) {
          return null != a ? Sa(a, b) : Sa(C, b);
        };
        Ec.m = function(a, b, c) {
          for (; ; ) {
            if (n(c)) {
              a = Ec.a(a, b), b = y(c), c = D(c);
            } else {
              return Ec.a(a, b);
            }
          }
        };
        Ec.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          c = D(c);
          return Ec.m(b, a, c);
        };
        Ec.v = 2;
        function H(a) {
          if (null != a) {
            if (a && (a.h & 2 || a.vb)) {
              a = a.L(null);
            } else {
              if (Ba(a)) {
                a = a.length;
              } else {
                if ("string" === typeof a) {
                  a = a.length;
                } else {
                  if (r(Na, a)) {
                    a = Oa(a);
                  } else {
                    a: {
                      a = w(a);
                      for (var b = 0; ; ) {
                        if (rc(a)) {
                          a = b + Oa(a);
                          break a;
                        }
                        a = D(a);
                        b += 1;
                      }
                    }
                  }
                }
              }
            }
          } else {
            a = 0;
          }
          return a;
        }
        function Gc(a, b) {
          for (var c = null; ; ) {
            if (null == a) {
              return c;
            }
            if (0 === b) {
              return w(a) ? y(a) : c;
            }
            var d = a;
            if (d ? d.h & 16 || d.Bb || (d.h ? 0 : r(Va, d)) : r(Va, d)) {
              return v.i(a, b, c);
            }
            if (w(a)) {
              var d = D(a), e = b - 1;
              a = d;
              b = e;
            } else {
              return c;
            }
          }
        }
        function L(a, b) {
          if ("number" !== typeof b) {
            throw Error("index argument to nth must be a number.");
          }
          if (null == a) {
            return null;
          }
          if (a && (a.h & 16 || a.Bb)) {
            return a.da(null, b, null);
          }
          if (Ba(a) || "string" === typeof a) {
            return b < a.length ? a[b] : null;
          }
          if (r(Va, a)) {
            return v.a(a, b);
          }
          if (a ? a.h & 64 || a.$a || (a.h ? 0 : r(Wa, a)) : r(Wa, a)) {
            return Gc(a, b);
          }
          throw Error([u("nth not supported on this type "), u(Da(null == a ? null : a.constructor))].join(""));
        }
        function Hc(a, b) {
          return null == a ? null : a && (a.h & 256 || a.Cb) ? a.G(null, b) : Ba(a) ? b < a.length ? a[b | 0] : null : "string" === typeof a ? b < a.length ? a[b | 0] : null : r(ab, a) ? bb.a(a, b) : null;
        }
        function Ic(a, b, c) {
          return null != a ? a && (a.h & 256 || a.Cb) ? a.F(null, b, c) : Ba(a) ? b < a.length ? a[b] : c : "string" === typeof a ? b < a.length ? a[b] : c : r(ab, a) ? bb.i(a, b, c) : c : c;
        }
        var Jc = function Jc2() {
          switch (arguments.length) {
            case 3:
              return Jc2.i(arguments[0], arguments[1], arguments[2]);
            default:
              return Jc2.m(arguments[0], arguments[1], arguments[2], new x(Array.prototype.slice.call(arguments, 3), 0));
          }
        };
        Jc.i = function(a, b, c) {
          return null != a ? db(a, b, c) : Kc([b], [c]);
        };
        Jc.m = function(a, b, c, d) {
          for (; ; ) {
            if (a = Jc.i(a, b, c), n(d)) {
              b = y(d), c = Cc(d), d = D(D(d));
            } else {
              return a;
            }
          }
        };
        Jc.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          var d = D(c), c = y(d), d = D(d);
          return Jc.m(b, a, c, d);
        };
        Jc.v = 3;
        function Lc(a) {
          var b = "function" == l(a);
          return n(b) ? b : a ? n(n(null) ? null : a.ub) ? true : a.mb ? false : r(Ma, a) : r(Ma, a);
        }
        function Mc(a, b) {
          this.f = a;
          this.l = b;
          this.h = 393217;
          this.w = 0;
        }
        f = Mc.prototype;
        f.O = function() {
          return this.l;
        };
        f.S = function(a, b) {
          return new Mc(this.f, b);
        };
        f.ub = true;
        f.call = function() {
          function a(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2, V2, aa2, Ja2) {
            a2 = this.f;
            return Nc.Xa ? Nc.Xa(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2, V2, aa2, Ja2) : Nc.call(null, a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2, V2, aa2, Ja2);
          }
          function b(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2, V2, aa2) {
            a2 = this;
            return a2.f.wa ? a2.f.wa(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2, V2, aa2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2, V2, aa2);
          }
          function c(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2, V2) {
            a2 = this;
            return a2.f.va ? a2.f.va(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2, V2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2, V2);
          }
          function d(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2) {
            a2 = this;
            return a2.f.ua ? a2.f.ua(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2, J2);
          }
          function e(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2) {
            a2 = this;
            return a2.f.ta ? a2.f.ta(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2, O2);
          }
          function g(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2) {
            a2 = this;
            return a2.f.sa ? a2.f.sa(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2, K2);
          }
          function h(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2) {
            a2 = this;
            return a2.f.ra ? a2.f.ra(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2, I2);
          }
          function k(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2) {
            a2 = this;
            return a2.f.qa ? a2.f.qa(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2, G2);
          }
          function m(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2) {
            a2 = this;
            return a2.f.pa ? a2.f.pa(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2, A2);
          }
          function q(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2) {
            a2 = this;
            return a2.f.oa ? a2.f.oa(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2, B2);
          }
          function p(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2) {
            a2 = this;
            return a2.f.na ? a2.f.na(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2, z2);
          }
          function z(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2) {
            a2 = this;
            return a2.f.ma ? a2.f.ma(b2, c2, d2, e2, g2, h2, k2, m2, q2, p2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2, p2);
          }
          function B(a2, b2, c2, d2, e2, g2, h2, k2, m2, q2) {
            a2 = this;
            return a2.f.Aa ? a2.f.Aa(b2, c2, d2, e2, g2, h2, k2, m2, q2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2, q2);
          }
          function A(a2, b2, c2, d2, e2, g2, h2, k2, m2) {
            a2 = this;
            return a2.f.za ? a2.f.za(b2, c2, d2, e2, g2, h2, k2, m2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2, m2);
          }
          function G(a2, b2, c2, d2, e2, g2, h2, k2) {
            a2 = this;
            return a2.f.ya ? a2.f.ya(b2, c2, d2, e2, g2, h2, k2) : a2.f.call(null, b2, c2, d2, e2, g2, h2, k2);
          }
          function I(a2, b2, c2, d2, e2, g2, h2) {
            a2 = this;
            return a2.f.xa ? a2.f.xa(b2, c2, d2, e2, g2, h2) : a2.f.call(null, b2, c2, d2, e2, g2, h2);
          }
          function K(a2, b2, c2, d2, e2, g2) {
            a2 = this;
            return a2.f.ba ? a2.f.ba(b2, c2, d2, e2, g2) : a2.f.call(null, b2, c2, d2, e2, g2);
          }
          function O(a2, b2, c2, d2, e2) {
            a2 = this;
            return a2.f.aa ? a2.f.aa(b2, c2, d2, e2) : a2.f.call(null, b2, c2, d2, e2);
          }
          function V(a2, b2, c2, d2) {
            a2 = this;
            return a2.f.i ? a2.f.i(b2, c2, d2) : a2.f.call(null, b2, c2, d2);
          }
          function aa(a2, b2, c2) {
            a2 = this;
            return a2.f.a ? a2.f.a(b2, c2) : a2.f.call(null, b2, c2);
          }
          function Fa(a2, b2) {
            a2 = this;
            return a2.f.b ? a2.f.b(b2) : a2.f.call(null, b2);
          }
          function Ja(a2) {
            a2 = this;
            return a2.f.C ? a2.f.C() : a2.f.call(null);
          }
          var J = null, J = function(J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa, Ua, Eb, yb, Fb, Pb, tc, Uc, Vc, pe) {
            switch (arguments.length) {
              case 1:
                return Ja.call(this, J2);
              case 2:
                return Fa.call(this, J2, na);
              case 3:
                return aa.call(this, J2, na, oa);
              case 4:
                return V.call(this, J2, na, oa, sa);
              case 5:
                return O.call(this, J2, na, oa, sa, ta);
              case 6:
                return K.call(this, J2, na, oa, sa, ta, ya);
              case 7:
                return I.call(this, J2, na, oa, sa, ta, ya, za);
              case 8:
                return G.call(this, J2, na, oa, sa, ta, ya, za, Aa);
              case 9:
                return A.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea);
              case 10:
                return B.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya);
              case 11:
                return z.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta);
              case 12:
                return p.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb);
              case 13:
                return q.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa);
              case 14:
                return m.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa, Ua);
              case 15:
                return k.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa, Ua, Eb);
              case 16:
                return h.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa, Ua, Eb, yb);
              case 17:
                return g.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa, Ua, Eb, yb, Fb);
              case 18:
                return e.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa, Ua, Eb, yb, Fb, Pb);
              case 19:
                return d.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa, Ua, Eb, yb, Fb, Pb, tc);
              case 20:
                return c.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa, Ua, Eb, yb, Fb, Pb, tc, Uc);
              case 21:
                return b.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa, Ua, Eb, yb, Fb, Pb, tc, Uc, Vc);
              case 22:
                return a.call(this, J2, na, oa, sa, ta, ya, za, Aa, Ea, Ya, Ta, gb, Pa, Ua, Eb, yb, Fb, Pb, tc, Uc, Vc, pe);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          J.b = Ja;
          J.a = Fa;
          J.i = aa;
          J.aa = V;
          J.ba = O;
          J.xa = K;
          J.ya = I;
          J.za = G;
          J.Aa = A;
          J.ma = B;
          J.na = z;
          J.oa = p;
          J.pa = q;
          J.qa = m;
          J.ra = k;
          J.sa = h;
          J.ta = g;
          J.ua = e;
          J.va = d;
          J.wa = c;
          J.Ab = b;
          J.Xa = a;
          return J;
        }();
        f.apply = function(a, b) {
          return this.call.apply(this, [this].concat(Ha(b)));
        };
        f.C = function() {
          return this.f.C ? this.f.C() : this.f.call(null);
        };
        f.b = function(a) {
          return this.f.b ? this.f.b(a) : this.f.call(null, a);
        };
        f.a = function(a, b) {
          return this.f.a ? this.f.a(a, b) : this.f.call(null, a, b);
        };
        f.i = function(a, b, c) {
          return this.f.i ? this.f.i(a, b, c) : this.f.call(null, a, b, c);
        };
        f.aa = function(a, b, c, d) {
          return this.f.aa ? this.f.aa(a, b, c, d) : this.f.call(null, a, b, c, d);
        };
        f.ba = function(a, b, c, d, e) {
          return this.f.ba ? this.f.ba(a, b, c, d, e) : this.f.call(null, a, b, c, d, e);
        };
        f.xa = function(a, b, c, d, e, g) {
          return this.f.xa ? this.f.xa(a, b, c, d, e, g) : this.f.call(null, a, b, c, d, e, g);
        };
        f.ya = function(a, b, c, d, e, g, h) {
          return this.f.ya ? this.f.ya(a, b, c, d, e, g, h) : this.f.call(null, a, b, c, d, e, g, h);
        };
        f.za = function(a, b, c, d, e, g, h, k) {
          return this.f.za ? this.f.za(a, b, c, d, e, g, h, k) : this.f.call(null, a, b, c, d, e, g, h, k);
        };
        f.Aa = function(a, b, c, d, e, g, h, k, m) {
          return this.f.Aa ? this.f.Aa(a, b, c, d, e, g, h, k, m) : this.f.call(null, a, b, c, d, e, g, h, k, m);
        };
        f.ma = function(a, b, c, d, e, g, h, k, m, q) {
          return this.f.ma ? this.f.ma(a, b, c, d, e, g, h, k, m, q) : this.f.call(null, a, b, c, d, e, g, h, k, m, q);
        };
        f.na = function(a, b, c, d, e, g, h, k, m, q, p) {
          return this.f.na ? this.f.na(a, b, c, d, e, g, h, k, m, q, p) : this.f.call(null, a, b, c, d, e, g, h, k, m, q, p);
        };
        f.oa = function(a, b, c, d, e, g, h, k, m, q, p, z) {
          return this.f.oa ? this.f.oa(a, b, c, d, e, g, h, k, m, q, p, z) : this.f.call(null, a, b, c, d, e, g, h, k, m, q, p, z);
        };
        f.pa = function(a, b, c, d, e, g, h, k, m, q, p, z, B) {
          return this.f.pa ? this.f.pa(a, b, c, d, e, g, h, k, m, q, p, z, B) : this.f.call(null, a, b, c, d, e, g, h, k, m, q, p, z, B);
        };
        f.qa = function(a, b, c, d, e, g, h, k, m, q, p, z, B, A) {
          return this.f.qa ? this.f.qa(a, b, c, d, e, g, h, k, m, q, p, z, B, A) : this.f.call(null, a, b, c, d, e, g, h, k, m, q, p, z, B, A);
        };
        f.ra = function(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G) {
          return this.f.ra ? this.f.ra(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G) : this.f.call(null, a, b, c, d, e, g, h, k, m, q, p, z, B, A, G);
        };
        f.sa = function(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I) {
          return this.f.sa ? this.f.sa(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I) : this.f.call(null, a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I);
        };
        f.ta = function(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K) {
          return this.f.ta ? this.f.ta(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K) : this.f.call(null, a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K);
        };
        f.ua = function(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O) {
          return this.f.ua ? this.f.ua(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O) : this.f.call(null, a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O);
        };
        f.va = function(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V) {
          return this.f.va ? this.f.va(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V) : this.f.call(null, a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V);
        };
        f.wa = function(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa) {
          return this.f.wa ? this.f.wa(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa) : this.f.call(null, a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa);
        };
        f.Ab = function(a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa, Fa) {
          var Ja = this.f;
          return Nc.Xa ? Nc.Xa(Ja, a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa, Fa) : Nc.call(null, Ja, a, b, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa, Fa);
        };
        function yc(a, b) {
          return Lc(a) && !(a ? a.h & 262144 || a.Ub || (a.h ? 0 : r(rb, a)) : r(rb, a)) ? new Mc(a, b) : null == a ? null : sb(a, b);
        }
        function Oc(a) {
          var b = null != a;
          return (b ? a ? a.h & 131072 || a.Fb || (a.h ? 0 : r(pb, a)) : r(pb, a) : b) ? qb(a) : null;
        }
        function Pc(a) {
          return null == a ? null : mb(a);
        }
        var Qc = function Qc2() {
          switch (arguments.length) {
            case 1:
              return Qc2.b(arguments[0]);
            case 2:
              return Qc2.a(arguments[0], arguments[1]);
            default:
              return Qc2.m(arguments[0], arguments[1], new x(Array.prototype.slice.call(arguments, 2), 0));
          }
        };
        Qc.b = function(a) {
          return a;
        };
        Qc.a = function(a, b) {
          return null == a ? null : lb(a, b);
        };
        Qc.m = function(a, b, c) {
          for (; ; ) {
            if (null == a) {
              return null;
            }
            a = Qc.a(a, b);
            if (n(c)) {
              b = y(c), c = D(c);
            } else {
              return a;
            }
          }
        };
        Qc.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          c = D(c);
          return Qc.m(b, a, c);
        };
        Qc.v = 2;
        function Rc(a) {
          return null == a || Ca(w(a));
        }
        function Sc(a) {
          return null == a ? false : a ? a.h & 8 || a.Mb ? true : a.h ? false : r(Ra, a) : r(Ra, a);
        }
        function Tc(a) {
          return null == a ? false : a ? a.h & 4096 || a.Sb ? true : a.h ? false : r(kb, a) : r(kb, a);
        }
        function Wc(a) {
          return a ? a.h & 16777216 || a.Rb ? true : a.h ? false : r(Ab, a) : r(Ab, a);
        }
        function Xc(a) {
          return null == a ? false : a ? a.h & 1024 || a.Db ? true : a.h ? false : r(eb, a) : r(eb, a);
        }
        function Yc(a) {
          return a ? a.h & 16384 || a.Tb ? true : a.h ? false : r(nb, a) : r(nb, a);
        }
        function Zc(a) {
          return a ? a.w & 512 || a.Lb ? true : false : false;
        }
        function $c(a) {
          var b = [];
          ha(a, function(a2, b2) {
            return function(a3, c) {
              return b2.push(c);
            };
          }(a, b));
          return b;
        }
        function ad(a, b, c, d, e) {
          for (; 0 !== e; ) {
            c[d] = a[b], d += 1, --e, b += 1;
          }
        }
        var bd = {};
        function cd(a) {
          return null == a ? false : a ? a.h & 64 || a.$a ? true : a.h ? false : r(Wa, a) : r(Wa, a);
        }
        function dd(a) {
          return n(a) ? true : false;
        }
        function ed(a, b) {
          return Ic(a, b, bd) === bd ? false : true;
        }
        function Ac() {
          switch (arguments.length) {
            case 2:
              return zc(arguments[0], arguments[1]);
            case 3:
              return Bc(arguments[0], arguments[1], arguments[2]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        }
        function zc(a, b) {
          var c = w(b);
          if (c) {
            var d = y(c), c = D(c);
            return Ka ? Ka(a, d, c) : La.call(null, a, d, c);
          }
          return a.C ? a.C() : a.call(null);
        }
        function Bc(a, b, c) {
          for (c = w(c); ; ) {
            if (c) {
              var d = y(c);
              b = a.a ? a.a(b, d) : a.call(null, b, d);
              c = D(c);
            } else {
              return b;
            }
          }
        }
        function La() {
          switch (arguments.length) {
            case 2:
              var a = arguments[0], b = arguments[1];
              return b && (b.h & 524288 || b.Hb) ? b.T(null, a) : Ba(b) ? oc(b, a) : "string" === typeof b ? oc(b, a) : r(tb, b) ? ub.a(b, a) : zc(a, b);
            case 3:
              return Ka(arguments[0], arguments[1], arguments[2]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        }
        function Ka(a, b, c) {
          return c && (c.h & 524288 || c.Hb) ? c.U(null, a, b) : Ba(c) ? pc(c, a, b) : "string" === typeof c ? pc(c, a, b) : r(tb, c) ? ub.i(c, a, b) : Bc(a, b, c);
        }
        function fd(a) {
          return a;
        }
        function gd(a, b, c, d) {
          a = a.b ? a.b(b) : a.call(null, b);
          c = Ka(a, c, d);
          return a.b ? a.b(c) : a.call(null, c);
        }
        function hd(a) {
          a = (a - a % 2) / 2;
          return 0 <= a ? Math.floor(a) : Math.ceil(a);
        }
        function id(a) {
          a -= a >> 1 & 1431655765;
          a = (a & 858993459) + (a >> 2 & 858993459);
          return 16843009 * (a + (a >> 4) & 252645135) >> 24;
        }
        function jd(a) {
          return 0 === a;
        }
        var u = function u2() {
          switch (arguments.length) {
            case 0:
              return u2.C();
            case 1:
              return u2.b(arguments[0]);
            default:
              return u2.m(arguments[0], new x(Array.prototype.slice.call(arguments, 1), 0));
          }
        };
        u.C = function() {
          return "";
        };
        u.b = function(a) {
          return null == a ? "" : ga(a);
        };
        u.m = function(a, b) {
          for (var c = new ia("" + u(a)), d = b; ; ) {
            if (n(d)) {
              c = c.append("" + u(y(d))), d = D(d);
            } else {
              return c.toString();
            }
          }
        };
        u.A = function(a) {
          var b = y(a);
          a = D(a);
          return u.m(b, a);
        };
        u.v = 1;
        function kd(a, b) {
          return a.substring(b);
        }
        function ld(a, b) {
          return a.substring(0, b);
        }
        function vc(a, b) {
          var c;
          if (Wc(b)) {
            if (rc(a) && rc(b) && H(a) !== H(b)) {
              c = false;
            } else {
              a: {
                c = w(a);
                for (var d = w(b); ; ) {
                  if (null == c) {
                    c = null == d;
                    break a;
                  }
                  if (null != d && E.a(y(c), y(d))) {
                    c = D(c), d = D(d);
                  } else {
                    c = false;
                    break a;
                  }
                }
              }
            }
          } else {
            c = null;
          }
          return dd(c);
        }
        function md(a, b, c, d, e) {
          this.l = a;
          this.first = b;
          this.Ca = c;
          this.count = d;
          this.o = e;
          this.h = 65937646;
          this.w = 8192;
        }
        f = md.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.l;
        };
        f.W = function() {
          return 1 === this.count ? null : this.Ca;
        };
        f.L = function() {
          return this.count;
        };
        f.Sa = function() {
          return this.first;
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return sb(C, this.l);
        };
        f.T = function(a, b) {
          return zc(b, this);
        };
        f.U = function(a, b, c) {
          return Bc(b, c, this);
        };
        f.R = function() {
          return this.first;
        };
        f.Y = function() {
          return 1 === this.count ? C : this.Ca;
        };
        f.K = function() {
          return this;
        };
        f.S = function(a, b) {
          return new md(b, this.first, this.Ca, this.count, this.o);
        };
        f.J = function(a, b) {
          return new md(this.l, b, this, this.count + 1, null);
        };
        md.prototype[Ga] = function() {
          return gc(this);
        };
        function nd(a) {
          this.l = a;
          this.h = 65937614;
          this.w = 8192;
        }
        f = nd.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.l;
        };
        f.W = function() {
          return null;
        };
        f.L = function() {
          return 0;
        };
        f.Sa = function() {
          return null;
        };
        f.I = function() {
          return jc;
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return this;
        };
        f.T = function(a, b) {
          return zc(b, this);
        };
        f.U = function(a, b, c) {
          return Bc(b, c, this);
        };
        f.R = function() {
          return null;
        };
        f.Y = function() {
          return C;
        };
        f.K = function() {
          return null;
        };
        f.S = function(a, b) {
          return new nd(b);
        };
        f.J = function(a, b) {
          return new md(this.l, b, null, 1, null);
        };
        var C = new nd(null);
        nd.prototype[Ga] = function() {
          return gc(this);
        };
        function sd(a) {
          return (a ? a.h & 134217728 || a.Pb || (a.h ? 0 : r(Bb, a)) : r(Bb, a)) ? Cb(a) : Ka(Ec, C, a);
        }
        function M() {
          a: {
            var a = 0 < arguments.length ? new x(Array.prototype.slice.call(arguments, 0), 0) : null, b;
            if (a instanceof x && 0 === a.j) {
              b = a.c;
            } else {
              b: {
                for (b = []; ; ) {
                  if (null != a) {
                    b.push(a.R(null)), a = a.W(null);
                  } else {
                    break b;
                  }
                }
              }
            }
            for (var a = b.length, c = C; ; ) {
              if (0 < a) {
                var d = a - 1, c = c.J(null, b[a - 1]), a = d;
              } else {
                break a;
              }
            }
          }
          return c;
        }
        function td(a, b, c, d) {
          this.l = a;
          this.first = b;
          this.Ca = c;
          this.o = d;
          this.h = 65929452;
          this.w = 8192;
        }
        f = td.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.l;
        };
        f.W = function() {
          return null == this.Ca ? null : w(this.Ca);
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(C, this.l);
        };
        f.T = function(a, b) {
          return zc(b, this);
        };
        f.U = function(a, b, c) {
          return Bc(b, c, this);
        };
        f.R = function() {
          return this.first;
        };
        f.Y = function() {
          return null == this.Ca ? C : this.Ca;
        };
        f.K = function() {
          return this;
        };
        f.S = function(a, b) {
          return new td(b, this.first, this.Ca, this.o);
        };
        f.J = function(a, b) {
          return new td(null, b, this, this.o);
        };
        td.prototype[Ga] = function() {
          return gc(this);
        };
        function F(a, b) {
          var c = null == b;
          return (c ? c : b && (b.h & 64 || b.$a)) ? new td(null, a, b, null) : new td(null, a, w(b), null);
        }
        function N(a, b, c, d) {
          this.sb = a;
          this.name = b;
          this.Ea = c;
          this.nb = d;
          this.h = 2153775105;
          this.w = 4096;
        }
        f = N.prototype;
        f.toString = function() {
          return [u(":"), u(this.Ea)].join("");
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.s = function(a, b) {
          return b instanceof N ? this.Ea === b.Ea : false;
        };
        f.call = function() {
          var a = null, a = function(a2, c, d) {
            switch (arguments.length) {
              case 2:
                return Hc(c, this);
              case 3:
                return Ic(c, this, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function(a2, c) {
            return Hc(c, this);
          };
          a.i = function(a2, c, d) {
            return Ic(c, this, d);
          };
          return a;
        }();
        f.apply = function(a, b) {
          return this.call.apply(this, [this].concat(Ha(b)));
        };
        f.b = function(a) {
          return Hc(a, this);
        };
        f.a = function(a, b) {
          return Ic(a, this, b);
        };
        f.I = function() {
          var a = this.nb;
          return null != a ? a : this.nb = a = dc(Zb(this.name), bc(this.sb)) + 2654435769 | 0;
        };
        f.H = function(a, b) {
          return Db(b, [u(":"), u(this.Ea)].join(""));
        };
        var ud = function ud2() {
          switch (arguments.length) {
            case 1:
              return ud2.b(arguments[0]);
            case 2:
              return ud2.a(arguments[0], arguments[1]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        };
        ud.b = function(a) {
          var b;
          return a instanceof N ? a : "string" === typeof a ? (b = a.split("/"), 2 === b.length ? new N(b[0], b[1], a, null) : new N(null, b[0], a, null)) : null;
        };
        ud.a = function(a, b) {
          return new N(a, b, [u(n(a) ? [u(a), u("/")].join("") : null), u(b)].join(""), null);
        };
        ud.v = 2;
        function vd(a, b, c, d) {
          this.l = a;
          this.Oa = b;
          this.u = c;
          this.o = d;
          this.h = 32374988;
          this.w = 0;
        }
        f = vd.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        function wd(a) {
          null != a.Oa && (a.u = a.Oa.C ? a.Oa.C() : a.Oa.call(null), a.Oa = null);
          return a.u;
        }
        f.O = function() {
          return this.l;
        };
        f.W = function() {
          zb(this);
          return null == this.u ? null : D(this.u);
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(C, this.l);
        };
        f.T = function(a, b) {
          return zc(b, this);
        };
        f.U = function(a, b, c) {
          return Bc(b, c, this);
        };
        f.R = function() {
          zb(this);
          return null == this.u ? null : y(this.u);
        };
        f.Y = function() {
          zb(this);
          return null != this.u ? ec(this.u) : C;
        };
        f.K = function() {
          wd(this);
          if (null == this.u) {
            return null;
          }
          for (var a = this.u; ; ) {
            if (a instanceof vd) {
              a = wd(a);
            } else {
              return this.u = a, w(this.u);
            }
          }
        };
        f.S = function(a, b) {
          return new vd(b, this.Oa, this.u, this.o);
        };
        f.J = function(a, b) {
          return F(b, this);
        };
        vd.prototype[Ga] = function() {
          return gc(this);
        };
        function xd(a, b) {
          this.cb = a;
          this.end = b;
          this.h = 2;
          this.w = 0;
        }
        xd.prototype.add = function(a) {
          this.cb[this.end] = a;
          return this.end += 1;
        };
        xd.prototype.ea = function() {
          var a = new yd(this.cb, 0, this.end);
          this.cb = null;
          return a;
        };
        xd.prototype.L = function() {
          return this.end;
        };
        function yd(a, b, c) {
          this.c = a;
          this.V = b;
          this.end = c;
          this.h = 524306;
          this.w = 0;
        }
        f = yd.prototype;
        f.L = function() {
          return this.end - this.V;
        };
        f.N = function(a, b) {
          return this.c[this.V + b];
        };
        f.da = function(a, b, c) {
          return 0 <= b && b < this.end - this.V ? this.c[this.V + b] : c;
        };
        f.ob = function() {
          if (this.V === this.end) {
            throw Error("-drop-first of empty chunk");
          }
          return new yd(this.c, this.V + 1, this.end);
        };
        f.T = function(a, b) {
          return qc(this.c, b, this.c[this.V], this.V + 1);
        };
        f.U = function(a, b, c) {
          return qc(this.c, b, c, this.V);
        };
        function zd(a, b, c, d) {
          this.ea = a;
          this.ja = b;
          this.l = c;
          this.o = d;
          this.h = 31850732;
          this.w = 1536;
        }
        f = zd.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.l;
        };
        f.W = function() {
          if (1 < Oa(this.ea)) {
            return new zd(Nb(this.ea), this.ja, this.l, null);
          }
          var a = zb(this.ja);
          return null == a ? null : a;
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(C, this.l);
        };
        f.R = function() {
          return v.a(this.ea, 0);
        };
        f.Y = function() {
          return 1 < Oa(this.ea) ? new zd(Nb(this.ea), this.ja, this.l, null) : null == this.ja ? C : this.ja;
        };
        f.K = function() {
          return this;
        };
        f.gb = function() {
          return this.ea;
        };
        f.hb = function() {
          return null == this.ja ? C : this.ja;
        };
        f.S = function(a, b) {
          return new zd(this.ea, this.ja, b, this.o);
        };
        f.J = function(a, b) {
          return F(b, this);
        };
        f.fb = function() {
          return null == this.ja ? null : this.ja;
        };
        zd.prototype[Ga] = function() {
          return gc(this);
        };
        function Ad(a, b) {
          return 0 === Oa(a) ? b : new zd(a, b, null, null);
        }
        function Bd(a, b) {
          a.add(b);
        }
        function Cd(a) {
          for (var b = []; ; ) {
            if (w(a)) {
              b.push(y(a)), a = D(a);
            } else {
              return b;
            }
          }
        }
        function Dd(a, b) {
          if (rc(a)) {
            return H(a);
          }
          for (var c = a, d = b, e = 0; ; ) {
            if (0 < d && w(c)) {
              c = D(c), --d, e += 1;
            } else {
              return e;
            }
          }
        }
        var Ed = function Ed2(b) {
          return null == b ? null : null == D(b) ? w(y(b)) : F(y(b), Ed2(D(b)));
        }, Fd = function Fd2() {
          switch (arguments.length) {
            case 0:
              return Fd2.C();
            case 1:
              return Fd2.b(arguments[0]);
            case 2:
              return Fd2.a(arguments[0], arguments[1]);
            default:
              return Fd2.m(arguments[0], arguments[1], new x(Array.prototype.slice.call(arguments, 2), 0));
          }
        };
        Fd.C = function() {
          return new vd(null, function() {
            return null;
          }, null, null);
        };
        Fd.b = function(a) {
          return new vd(null, function() {
            return a;
          }, null, null);
        };
        Fd.a = function(a, b) {
          return new vd(null, function() {
            var c = w(a);
            return c ? Zc(c) ? Ad(Ob(c), Fd.a(Qb(c), b)) : F(y(c), Fd.a(ec(c), b)) : b;
          }, null, null);
        };
        Fd.m = function(a, b, c) {
          return function e(a2, b2) {
            return new vd(null, function() {
              var c2 = w(a2);
              return c2 ? Zc(c2) ? Ad(Ob(c2), e(Qb(c2), b2)) : F(y(c2), e(ec(c2), b2)) : n(b2) ? e(y(b2), D(b2)) : null;
            }, null, null);
          }(Fd.a(a, b), c);
        };
        Fd.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          c = D(c);
          return Fd.m(b, a, c);
        };
        Fd.v = 2;
        var Gd = function Gd2() {
          switch (arguments.length) {
            case 0:
              return Gd2.C();
            case 1:
              return Gd2.b(arguments[0]);
            case 2:
              return Gd2.a(arguments[0], arguments[1]);
            default:
              return Gd2.m(arguments[0], arguments[1], new x(Array.prototype.slice.call(arguments, 2), 0));
          }
        };
        Gd.C = function() {
          return Ib(Fc);
        };
        Gd.b = function(a) {
          return a;
        };
        Gd.a = function(a, b) {
          return Jb(a, b);
        };
        Gd.m = function(a, b, c) {
          for (; ; ) {
            if (a = Jb(a, b), n(c)) {
              b = y(c), c = D(c);
            } else {
              return a;
            }
          }
        };
        Gd.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          c = D(c);
          return Gd.m(b, a, c);
        };
        Gd.v = 2;
        function Hd(a, b, c) {
          var d = w(c);
          if (0 === b) {
            return a.C ? a.C() : a.call(null);
          }
          c = Xa(d);
          var e = Za(d);
          if (1 === b) {
            return a.b ? a.b(c) : a.b ? a.b(c) : a.call(null, c);
          }
          var d = Xa(e), g = Za(e);
          if (2 === b) {
            return a.a ? a.a(c, d) : a.a ? a.a(c, d) : a.call(null, c, d);
          }
          var e = Xa(g), h = Za(g);
          if (3 === b) {
            return a.i ? a.i(c, d, e) : a.i ? a.i(c, d, e) : a.call(null, c, d, e);
          }
          var g = Xa(h), k = Za(h);
          if (4 === b) {
            return a.aa ? a.aa(c, d, e, g) : a.aa ? a.aa(c, d, e, g) : a.call(null, c, d, e, g);
          }
          var h = Xa(k), m = Za(k);
          if (5 === b) {
            return a.ba ? a.ba(c, d, e, g, h) : a.ba ? a.ba(c, d, e, g, h) : a.call(null, c, d, e, g, h);
          }
          var k = Xa(m), q = Za(m);
          if (6 === b) {
            return a.xa ? a.xa(c, d, e, g, h, k) : a.xa ? a.xa(c, d, e, g, h, k) : a.call(null, c, d, e, g, h, k);
          }
          var m = Xa(q), p = Za(q);
          if (7 === b) {
            return a.ya ? a.ya(c, d, e, g, h, k, m) : a.ya ? a.ya(c, d, e, g, h, k, m) : a.call(null, c, d, e, g, h, k, m);
          }
          var q = Xa(p), z = Za(p);
          if (8 === b) {
            return a.za ? a.za(c, d, e, g, h, k, m, q) : a.za ? a.za(c, d, e, g, h, k, m, q) : a.call(null, c, d, e, g, h, k, m, q);
          }
          var p = Xa(z), B = Za(z);
          if (9 === b) {
            return a.Aa ? a.Aa(c, d, e, g, h, k, m, q, p) : a.Aa ? a.Aa(c, d, e, g, h, k, m, q, p) : a.call(null, c, d, e, g, h, k, m, q, p);
          }
          var z = Xa(B), A = Za(B);
          if (10 === b) {
            return a.ma ? a.ma(c, d, e, g, h, k, m, q, p, z) : a.ma ? a.ma(c, d, e, g, h, k, m, q, p, z) : a.call(null, c, d, e, g, h, k, m, q, p, z);
          }
          var B = Xa(A), G = Za(A);
          if (11 === b) {
            return a.na ? a.na(c, d, e, g, h, k, m, q, p, z, B) : a.na ? a.na(c, d, e, g, h, k, m, q, p, z, B) : a.call(null, c, d, e, g, h, k, m, q, p, z, B);
          }
          var A = Xa(G), I = Za(G);
          if (12 === b) {
            return a.oa ? a.oa(c, d, e, g, h, k, m, q, p, z, B, A) : a.oa ? a.oa(c, d, e, g, h, k, m, q, p, z, B, A) : a.call(null, c, d, e, g, h, k, m, q, p, z, B, A);
          }
          var G = Xa(I), K = Za(I);
          if (13 === b) {
            return a.pa ? a.pa(c, d, e, g, h, k, m, q, p, z, B, A, G) : a.pa ? a.pa(c, d, e, g, h, k, m, q, p, z, B, A, G) : a.call(null, c, d, e, g, h, k, m, q, p, z, B, A, G);
          }
          var I = Xa(K), O = Za(K);
          if (14 === b) {
            return a.qa ? a.qa(c, d, e, g, h, k, m, q, p, z, B, A, G, I) : a.qa ? a.qa(c, d, e, g, h, k, m, q, p, z, B, A, G, I) : a.call(null, c, d, e, g, h, k, m, q, p, z, B, A, G, I);
          }
          var K = Xa(O), V = Za(O);
          if (15 === b) {
            return a.ra ? a.ra(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K) : a.ra ? a.ra(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K) : a.call(null, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K);
          }
          var O = Xa(V), aa = Za(V);
          if (16 === b) {
            return a.sa ? a.sa(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O) : a.sa ? a.sa(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O) : a.call(null, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O);
          }
          var V = Xa(aa), Fa = Za(aa);
          if (17 === b) {
            return a.ta ? a.ta(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V) : a.ta ? a.ta(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V) : a.call(null, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V);
          }
          var aa = Xa(Fa), Ja = Za(Fa);
          if (18 === b) {
            return a.ua ? a.ua(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa) : a.ua ? a.ua(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa) : a.call(null, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa);
          }
          Fa = Xa(Ja);
          Ja = Za(Ja);
          if (19 === b) {
            return a.va ? a.va(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa, Fa) : a.va ? a.va(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa, Fa) : a.call(null, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa, Fa);
          }
          var J = Xa(Ja);
          Za(Ja);
          if (20 === b) {
            return a.wa ? a.wa(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa, Fa, J) : a.wa ? a.wa(c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa, Fa, J) : a.call(null, c, d, e, g, h, k, m, q, p, z, B, A, G, I, K, O, V, aa, Fa, J);
          }
          throw Error("Only up to 20 arguments supported on functions");
        }
        function Nc() {
          switch (arguments.length) {
            case 2:
              return Id(arguments[0], arguments[1]);
            case 3:
              return Jd(arguments[0], arguments[1], arguments[2]);
            case 4:
              return Kd(arguments[0], arguments[1], arguments[2], arguments[3]);
            case 5:
              var a;
              a = arguments[0];
              var b = F(arguments[1], F(arguments[2], F(arguments[3], arguments[4]))), c = a.v;
              if (a.A) {
                var d = Dd(b, c + 1);
                a = d <= c ? Hd(a, d, b) : a.A(b);
              } else {
                a = a.apply(a, Cd(b));
              }
              return a;
            default:
              return a = arguments[0], b = F(arguments[1], F(arguments[2], F(arguments[3], F(arguments[4], Ed(new x(Array.prototype.slice.call(arguments, 5), 0)))))), c = a.v, a.A ? (d = Dd(b, c + 1), a = d <= c ? Hd(a, d, b) : a.A(b)) : a = a.apply(a, Cd(b)), a;
          }
        }
        function Id(a, b) {
          var c = a.v;
          if (a.A) {
            var d = Dd(b, c + 1);
            return d <= c ? Hd(a, d, b) : a.A(b);
          }
          return a.apply(a, Cd(b));
        }
        function Jd(a, b, c) {
          b = F(b, c);
          c = a.v;
          if (a.A) {
            var d = Dd(b, c + 1);
            return d <= c ? Hd(a, d, b) : a.A(b);
          }
          return a.apply(a, Cd(b));
        }
        function Kd(a, b, c, d) {
          b = F(b, F(c, d));
          c = a.v;
          return a.A ? (d = Dd(b, c + 1), d <= c ? Hd(a, d, b) : a.A(b)) : a.apply(a, Cd(b));
        }
        function Ld(a, b) {
          return !E.a(a, b);
        }
        function Md(a, b) {
          for (; ; ) {
            if (null == w(b)) {
              return true;
            }
            var c;
            c = y(b);
            c = a.b ? a.b(c) : a.call(null, c);
            if (n(c)) {
              c = a;
              var d = D(b);
              a = c;
              b = d;
            } else {
              return false;
            }
          }
        }
        function Nd(a, b) {
          for (; ; ) {
            if (w(b)) {
              var c;
              c = y(b);
              c = a.b ? a.b(c) : a.call(null, c);
              if (n(c)) {
                return c;
              }
              c = a;
              var d = D(b);
              a = c;
              b = d;
            } else {
              return null;
            }
          }
        }
        function Od(a) {
          return function() {
            function b(b2, c2) {
              return Ca(a.a ? a.a(b2, c2) : a.call(null, b2, c2));
            }
            function c(b2) {
              return Ca(a.b ? a.b(b2) : a.call(null, b2));
            }
            function d() {
              return Ca(a.C ? a.C() : a.call(null));
            }
            var e = null, g = function() {
              function b2(a2, d2, e2) {
                var g2 = null;
                if (2 < arguments.length) {
                  for (var g2 = 0, h = Array(arguments.length - 2); g2 < h.length; ) {
                    h[g2] = arguments[g2 + 2], ++g2;
                  }
                  g2 = new x(h, 0);
                }
                return c2.call(this, a2, d2, g2);
              }
              function c2(b3, d2, e2) {
                return Ca(Kd(a, b3, d2, e2));
              }
              b2.v = 2;
              b2.A = function(a2) {
                var b3 = y(a2);
                a2 = D(a2);
                var d2 = y(a2);
                a2 = ec(a2);
                return c2(b3, d2, a2);
              };
              b2.m = c2;
              return b2;
            }(), e = function(a2, e2, m) {
              switch (arguments.length) {
                case 0:
                  return d.call(this);
                case 1:
                  return c.call(this, a2);
                case 2:
                  return b.call(this, a2, e2);
                default:
                  var q = null;
                  if (2 < arguments.length) {
                    for (var q = 0, p = Array(arguments.length - 2); q < p.length; ) {
                      p[q] = arguments[q + 2], ++q;
                    }
                    q = new x(p, 0);
                  }
                  return g.m(a2, e2, q);
              }
              throw Error("Invalid arity: " + arguments.length);
            };
            e.v = 2;
            e.A = g.A;
            e.C = d;
            e.b = c;
            e.a = b;
            e.m = g.m;
            return e;
          }();
        }
        function Pd(a, b) {
          return function d(b2, g) {
            return new vd(null, function() {
              var h = w(g);
              if (h) {
                if (Zc(h)) {
                  for (var k = Ob(h), m = H(k), q = new xd(Array(m), 0), p = 0; ; ) {
                    if (p < m) {
                      Bd(q, function() {
                        var d2 = b2 + p, g2 = v.a(k, p);
                        return a.a ? a.a(d2, g2) : a.call(null, d2, g2);
                      }()), p += 1;
                    } else {
                      break;
                    }
                  }
                  return Ad(q.ea(), d(b2 + m, Qb(h)));
                }
                return F(function() {
                  var d2 = y(h);
                  return a.a ? a.a(b2, d2) : a.call(null, b2, d2);
                }(), d(b2 + 1, ec(h)));
              }
              return null;
            }, null, null);
          }(0, b);
        }
        var P = function P2() {
          switch (arguments.length) {
            case 1:
              return P2.b(arguments[0]);
            case 2:
              return P2.a(arguments[0], arguments[1]);
            case 3:
              return P2.i(arguments[0], arguments[1], arguments[2]);
            case 4:
              return P2.aa(arguments[0], arguments[1], arguments[2], arguments[3]);
            default:
              return P2.m(arguments[0], arguments[1], arguments[2], arguments[3], new x(Array.prototype.slice.call(arguments, 4), 0));
          }
        };
        P.b = function(a) {
          return function(b) {
            return function() {
              function c(c2, d2) {
                var e2 = a.b ? a.b(d2) : a.call(null, d2);
                return b.a ? b.a(c2, e2) : b.call(null, c2, e2);
              }
              function d(a2) {
                return b.b ? b.b(a2) : b.call(null, a2);
              }
              function e() {
                return b.C ? b.C() : b.call(null);
              }
              var g = null, h = function() {
                function c2(a2, b2, e2) {
                  var g2 = null;
                  if (2 < arguments.length) {
                    for (var g2 = 0, h2 = Array(arguments.length - 2); g2 < h2.length; ) {
                      h2[g2] = arguments[g2 + 2], ++g2;
                    }
                    g2 = new x(h2, 0);
                  }
                  return d2.call(this, a2, b2, g2);
                }
                function d2(c3, e2, g2) {
                  e2 = Jd(a, e2, g2);
                  return b.a ? b.a(c3, e2) : b.call(null, c3, e2);
                }
                c2.v = 2;
                c2.A = function(a2) {
                  var b2 = y(a2);
                  a2 = D(a2);
                  var c3 = y(a2);
                  a2 = ec(a2);
                  return d2(b2, c3, a2);
                };
                c2.m = d2;
                return c2;
              }(), g = function(a2, b2, g2) {
                switch (arguments.length) {
                  case 0:
                    return e.call(this);
                  case 1:
                    return d.call(this, a2);
                  case 2:
                    return c.call(this, a2, b2);
                  default:
                    var p = null;
                    if (2 < arguments.length) {
                      for (var p = 0, z = Array(arguments.length - 2); p < z.length; ) {
                        z[p] = arguments[p + 2], ++p;
                      }
                      p = new x(z, 0);
                    }
                    return h.m(a2, b2, p);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              g.v = 2;
              g.A = h.A;
              g.C = e;
              g.b = d;
              g.a = c;
              g.m = h.m;
              return g;
            }();
          };
        };
        P.a = function(a, b) {
          return new vd(null, function() {
            var c = w(b);
            if (c) {
              if (Zc(c)) {
                for (var d = Ob(c), e = H(d), g = new xd(Array(e), 0), h = 0; ; ) {
                  if (h < e) {
                    Bd(g, function() {
                      var b2 = v.a(d, h);
                      return a.b ? a.b(b2) : a.call(null, b2);
                    }()), h += 1;
                  } else {
                    break;
                  }
                }
                return Ad(g.ea(), P.a(a, Qb(c)));
              }
              return F(function() {
                var b2 = y(c);
                return a.b ? a.b(b2) : a.call(null, b2);
              }(), P.a(a, ec(c)));
            }
            return null;
          }, null, null);
        };
        P.i = function(a, b, c) {
          return new vd(null, function() {
            var d = w(b), e = w(c);
            if (d && e) {
              var g = F, h;
              h = y(d);
              var k = y(e);
              h = a.a ? a.a(h, k) : a.call(null, h, k);
              d = g(h, P.i(a, ec(d), ec(e)));
            } else {
              d = null;
            }
            return d;
          }, null, null);
        };
        P.aa = function(a, b, c, d) {
          return new vd(null, function() {
            var e = w(b), g = w(c), h = w(d);
            if (e && g && h) {
              var k = F, m;
              m = y(e);
              var q = y(g), p = y(h);
              m = a.i ? a.i(m, q, p) : a.call(null, m, q, p);
              e = k(m, P.aa(a, ec(e), ec(g), ec(h)));
            } else {
              e = null;
            }
            return e;
          }, null, null);
        };
        P.m = function(a, b, c, d, e) {
          var g = function k(a2) {
            return new vd(null, function() {
              var b2 = P.a(w, a2);
              return Md(fd, b2) ? F(P.a(y, b2), k(P.a(ec, b2))) : null;
            }, null, null);
          };
          return P.a(function() {
            return function(b2) {
              return Id(a, b2);
            };
          }(g), g(Ec.m(e, d, xc([c, b], 0))));
        };
        P.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          var d = D(c), c = y(d), e = D(d), d = y(e), e = D(e);
          return P.m(b, a, c, d, e);
        };
        P.v = 4;
        function Qd(a, b) {
          return new vd(null, function() {
            if (0 < a) {
              var c = w(b);
              return c ? F(y(c), Qd(a - 1, ec(c))) : null;
            }
            return null;
          }, null, null);
        }
        function Rd(a, b) {
          return new vd(null, function(c) {
            return function() {
              return c(a, b);
            };
          }(function(a2, b2) {
            for (; ; ) {
              var e = w(b2);
              if (0 < a2 && e) {
                var g = a2 - 1, e = ec(e);
                a2 = g;
                b2 = e;
              } else {
                return e;
              }
            }
          }), null, null);
        }
        function Sd(a, b) {
          for (var c = w(b), d = w(Rd(a, b)); ; ) {
            if (d) {
              c = D(c), d = D(d);
            } else {
              return c;
            }
          }
        }
        function Td(a) {
          return new vd(null, function() {
            return F(a, Td(a));
          }, null, null);
        }
        function Ud(a, b) {
          return Qd(a, Td(b));
        }
        var Yd = function Yd2() {
          switch (arguments.length) {
            case 2:
              return Yd2.a(arguments[0], arguments[1]);
            default:
              return Yd2.m(arguments[0], arguments[1], new x(Array.prototype.slice.call(arguments, 2), 0));
          }
        };
        Yd.a = function(a, b) {
          return new vd(null, function() {
            var c = w(a), d = w(b);
            return c && d ? F(y(c), F(y(d), Yd.a(ec(c), ec(d)))) : null;
          }, null, null);
        };
        Yd.m = function(a, b, c) {
          return new vd(null, function() {
            var d = P.a(w, Ec.m(c, b, xc([a], 0)));
            return Md(fd, d) ? Fd.a(P.a(y, d), Id(Yd, P.a(ec, d))) : null;
          }, null, null);
        };
        Yd.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          c = D(c);
          return Yd.m(b, a, c);
        };
        Yd.v = 2;
        function Zd(a, b) {
          return new vd(null, function() {
            var c = w(b);
            if (c) {
              if (Zc(c)) {
                for (var d = Ob(c), e = H(d), g = new xd(Array(e), 0), h = 0; ; ) {
                  if (h < e) {
                    var k;
                    k = v.a(d, h);
                    k = a.b ? a.b(k) : a.call(null, k);
                    n(k) && (k = v.a(d, h), g.add(k));
                    h += 1;
                  } else {
                    break;
                  }
                }
                return Ad(g.ea(), Zd(a, Qb(c)));
              }
              d = y(c);
              c = ec(c);
              return n(a.b ? a.b(d) : a.call(null, d)) ? F(d, Zd(a, c)) : Zd(a, c);
            }
            return null;
          }, null, null);
        }
        function $d(a, b) {
          return Zd(Od(a), b);
        }
        function ae(a) {
          return function c(a2) {
            return new vd(null, function() {
              var e;
              n(Wc.b ? Wc.b(a2) : Wc.call(null, a2)) ? (e = xc([w.b ? w.b(a2) : w.call(null, a2)], 0), e = Id(Fd, Jd(P, c, e))) : e = null;
              return F(a2, e);
            }, null, null);
          }(a);
        }
        function be(a) {
          return Zd(function(a2) {
            return !Wc(a2);
          }, ec(ae(a)));
        }
        var ce = function ce2() {
          switch (arguments.length) {
            case 2:
              return ce2.a(arguments[0], arguments[1]);
            case 3:
              return ce2.i(arguments[0], arguments[1], arguments[2]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        };
        ce.a = function(a, b) {
          var c;
          null != a ? a && (a.w & 4 || a.wb) ? (c = Ka(Jb, Ib(a), b), c = Kb(c), c = yc(c, Oc(a))) : c = Ka(Sa, a, b) : c = Ka(Ec, C, b);
          return c;
        };
        ce.i = function(a, b, c) {
          a && (a.w & 4 || a.wb) ? (b = gd(b, Gd, Ib(a), c), b = Kb(b), a = yc(b, Oc(a))) : a = gd(b, Ec, a, c);
          return a;
        };
        ce.v = 3;
        function de(a) {
          return ee(2, 2, a);
        }
        function ee(a, b, c) {
          return new vd(null, function() {
            var d = w(c);
            if (d) {
              var e = Qd(a, d);
              return a === H(e) ? F(e, ee(a, b, Rd(b, d))) : null;
            }
            return null;
          }, null, null);
        }
        function fe(a, b) {
          this.B = a;
          this.c = b;
        }
        function ge(a) {
          return new fe(a, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
        }
        function he(a) {
          a = a.g;
          return 32 > a ? 0 : a - 1 >>> 5 << 5;
        }
        function ie(a, b, c) {
          for (; ; ) {
            if (0 === b) {
              return c;
            }
            var d = ge(a);
            d.c[0] = c;
            c = d;
            b -= 5;
          }
        }
        var je = function je2(b, c, d, e) {
          var g = new fe(d.B, Ha(d.c)), h = b.g - 1 >>> c & 31;
          5 === c ? g.c[h] = e : (d = d.c[h], b = null != d ? je2(b, c - 5, d, e) : ie(null, c - 5, e), g.c[h] = b);
          return g;
        };
        function ke(a, b) {
          throw Error([u("No item "), u(a), u(" in vector of length "), u(b)].join(""));
        }
        function le(a, b) {
          if (b >= he(a)) {
            return a.$;
          }
          for (var c = a.root, d = a.shift; ; ) {
            if (0 < d) {
              var e = d - 5, c = c.c[b >>> d & 31], d = e;
            } else {
              return c.c;
            }
          }
        }
        function me(a, b) {
          return 0 <= b && b < a.g ? le(a, b) : ke(b, a.g);
        }
        var ne = function ne2(b, c, d, e, g) {
          var h = new fe(d.B, Ha(d.c));
          if (0 === c) {
            h.c[e & 31] = g;
          } else {
            var k = e >>> c & 31;
            b = ne2(b, c - 5, d.c[k], e, g);
            h.c[k] = b;
          }
          return h;
        };
        function oe(a, b, c, d, e, g) {
          this.j = a;
          this.bb = b;
          this.c = c;
          this.ka = d;
          this.start = e;
          this.end = g;
        }
        oe.prototype.ab = function() {
          return this.j < this.end;
        };
        oe.prototype.next = function() {
          32 === this.j - this.bb && (this.c = le(this.ka, this.j), this.bb += 32);
          var a = this.c[this.j & 31];
          this.j += 1;
          return a;
        };
        function Q(a, b, c, d, e, g) {
          this.l = a;
          this.g = b;
          this.shift = c;
          this.root = d;
          this.$ = e;
          this.o = g;
          this.h = 167668511;
          this.w = 8196;
        }
        f = Q.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.G = function(a, b) {
          return bb.i(this, b, null);
        };
        f.F = function(a, b, c) {
          return "number" === typeof b ? v.i(this, b, c) : c;
        };
        f.N = function(a, b) {
          return me(this, b)[b & 31];
        };
        f.da = function(a, b, c) {
          return 0 <= b && b < this.g ? le(this, b)[b & 31] : c;
        };
        f.lb = function(a, b, c) {
          if (0 <= b && b < this.g) {
            return he(this) <= b ? (a = Ha(this.$), a[b & 31] = c, new Q(this.l, this.g, this.shift, this.root, a, null)) : new Q(this.l, this.g, this.shift, ne(this, this.shift, this.root, b, c), this.$, null);
          }
          if (b === this.g) {
            return Sa(this, c);
          }
          throw Error([u("Index "), u(b), u(" out of bounds  [0,"), u(this.g), u("]")].join(""));
        };
        f.Ra = function() {
          var a = this.g;
          return new oe(0, 0, 0 < H(this) ? le(this, 0) : null, this, 0, a);
        };
        f.O = function() {
          return this.l;
        };
        f.L = function() {
          return this.g;
        };
        f.jb = function() {
          return v.a(this, 0);
        };
        f.kb = function() {
          return v.a(this, 1);
        };
        f.Sa = function() {
          return 0 < this.g ? v.a(this, this.g - 1) : null;
        };
        f.Za = function() {
          return 0 < this.g ? new uc(this, this.g - 1, null) : null;
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = ic(this);
        };
        f.s = function(a, b) {
          if (b instanceof Q) {
            if (this.g === H(b)) {
              for (var c = Sb(this), d = Sb(b); ; ) {
                if (n(c.ab())) {
                  var e = c.next(), g = d.next();
                  if (!E.a(e, g)) {
                    return false;
                  }
                } else {
                  return true;
                }
              }
            } else {
              return false;
            }
          } else {
            return vc(this, b);
          }
        };
        f.La = function() {
          var a = this;
          return new qe(a.g, a.shift, function() {
            var b = a.root;
            return re4.b ? re4.b(b) : re4.call(null, b);
          }(), function() {
            var b = a.$;
            return se.b ? se.b(b) : se.call(null, b);
          }());
        };
        f.M = function() {
          return yc(Fc, this.l);
        };
        f.T = function(a, b) {
          return mc(this, b);
        };
        f.U = function(a, b, c) {
          a = 0;
          for (var d = c; ; ) {
            if (a < this.g) {
              var e = le(this, a);
              c = e.length;
              a: {
                for (var g = 0; ; ) {
                  if (g < c) {
                    var h = e[g], d = b.a ? b.a(d, h) : b.call(null, d, h), g = g + 1;
                  } else {
                    e = d;
                    break a;
                  }
                }
              }
              a += c;
              d = e;
            } else {
              return d;
            }
          }
        };
        f.Qa = function(a, b, c) {
          if ("number" === typeof b) {
            return ob(this, b, c);
          }
          throw Error("Vector's key for assoc must be a number.");
        };
        f.K = function() {
          if (0 === this.g) {
            return null;
          }
          if (32 >= this.g) {
            return new x(this.$, 0);
          }
          var a;
          a: {
            a = this.root;
            for (var b = this.shift; ; ) {
              if (0 < b) {
                b -= 5, a = a.c[0];
              } else {
                a = a.c;
                break a;
              }
            }
          }
          return te ? te(this, a, 0, 0) : ue.call(null, this, a, 0, 0);
        };
        f.S = function(a, b) {
          return new Q(b, this.g, this.shift, this.root, this.$, this.o);
        };
        f.J = function(a, b) {
          if (32 > this.g - he(this)) {
            for (var c = this.$.length, d = Array(c + 1), e = 0; ; ) {
              if (e < c) {
                d[e] = this.$[e], e += 1;
              } else {
                break;
              }
            }
            d[c] = b;
            return new Q(this.l, this.g + 1, this.shift, this.root, d, null);
          }
          c = (d = this.g >>> 5 > 1 << this.shift) ? this.shift + 5 : this.shift;
          d ? (d = ge(null), d.c[0] = this.root, e = ie(null, this.shift, new fe(null, this.$)), d.c[1] = e) : d = je(this, this.shift, this.root, new fe(null, this.$));
          return new Q(this.l, this.g + 1, c, d, [b], null);
        };
        f.call = function() {
          var a = null, a = function(a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.N(null, c);
              case 3:
                return this.da(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function(a2, c) {
            return this.N(null, c);
          };
          a.i = function(a2, c, d) {
            return this.da(null, c, d);
          };
          return a;
        }();
        f.apply = function(a, b) {
          return this.call.apply(this, [this].concat(Ha(b)));
        };
        f.b = function(a) {
          return this.N(null, a);
        };
        f.a = function(a, b) {
          return this.da(null, a, b);
        };
        var R = new fe(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]), Fc = new Q(null, 0, 5, R, [], jc);
        function ve(a) {
          var b = a.length;
          if (32 > b) {
            return new Q(null, b, 5, R, a, null);
          }
          for (var c = 32, d = new Q(null, 32, 5, R, a.slice(0, 32), null).La(null); ; ) {
            if (c < b) {
              var e = c + 1, d = Gd.a(d, a[c]), c = e;
            } else {
              return Kb(d);
            }
          }
        }
        Q.prototype[Ga] = function() {
          return gc(this);
        };
        function we(a) {
          return Ba(a) ? ve(a) : Kb(Ka(Jb, Ib(Fc), a));
        }
        var xe = function xe2() {
          return xe2.m(0 < arguments.length ? new x(Array.prototype.slice.call(arguments, 0), 0) : null);
        };
        xe.m = function(a) {
          return a instanceof x && 0 === a.j ? ve(a.c) : we(a);
        };
        xe.v = 0;
        xe.A = function(a) {
          return xe.m(w(a));
        };
        function ye(a, b, c, d, e, g) {
          this.ga = a;
          this.node = b;
          this.j = c;
          this.V = d;
          this.l = e;
          this.o = g;
          this.h = 32375020;
          this.w = 1536;
        }
        f = ye.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.l;
        };
        f.W = function() {
          if (this.V + 1 < this.node.length) {
            var a;
            a = this.ga;
            var b = this.node, c = this.j, d = this.V + 1;
            a = te ? te(a, b, c, d) : ue.call(null, a, b, c, d);
            return null == a ? null : a;
          }
          return Rb(this);
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(Fc, this.l);
        };
        f.T = function(a, b) {
          var c;
          c = this.ga;
          var d = this.j + this.V, e = H(this.ga);
          c = ze ? ze(c, d, e) : Ae.call(null, c, d, e);
          return mc(c, b);
        };
        f.U = function(a, b, c) {
          a = this.ga;
          var d = this.j + this.V, e = H(this.ga);
          a = ze ? ze(a, d, e) : Ae.call(null, a, d, e);
          return nc(a, b, c);
        };
        f.R = function() {
          return this.node[this.V];
        };
        f.Y = function() {
          if (this.V + 1 < this.node.length) {
            var a;
            a = this.ga;
            var b = this.node, c = this.j, d = this.V + 1;
            a = te ? te(a, b, c, d) : ue.call(null, a, b, c, d);
            return null == a ? C : a;
          }
          return Qb(this);
        };
        f.K = function() {
          return this;
        };
        f.gb = function() {
          var a = this.node;
          return new yd(a, this.V, a.length);
        };
        f.hb = function() {
          var a = this.j + this.node.length;
          if (a < Oa(this.ga)) {
            var b = this.ga, c = le(this.ga, a);
            return te ? te(b, c, a, 0) : ue.call(null, b, c, a, 0);
          }
          return C;
        };
        f.S = function(a, b) {
          var c = this.ga, d = this.node, e = this.j, g = this.V;
          return Be ? Be(c, d, e, g, b) : ue.call(null, c, d, e, g, b);
        };
        f.J = function(a, b) {
          return F(b, this);
        };
        f.fb = function() {
          var a = this.j + this.node.length;
          if (a < Oa(this.ga)) {
            var b = this.ga, c = le(this.ga, a);
            return te ? te(b, c, a, 0) : ue.call(null, b, c, a, 0);
          }
          return null;
        };
        ye.prototype[Ga] = function() {
          return gc(this);
        };
        function ue() {
          switch (arguments.length) {
            case 3:
              var a = arguments[0], b = arguments[1], c = arguments[2];
              return new ye(a, me(a, b), b, c, null, null);
            case 4:
              return te(arguments[0], arguments[1], arguments[2], arguments[3]);
            case 5:
              return Be(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        }
        function te(a, b, c, d) {
          return new ye(a, b, c, d, null, null);
        }
        function Be(a, b, c, d, e) {
          return new ye(a, b, c, d, e, null);
        }
        function Ce(a, b, c, d, e) {
          this.l = a;
          this.ka = b;
          this.start = c;
          this.end = d;
          this.o = e;
          this.h = 167666463;
          this.w = 8192;
        }
        f = Ce.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.G = function(a, b) {
          return bb.i(this, b, null);
        };
        f.F = function(a, b, c) {
          return "number" === typeof b ? v.i(this, b, c) : c;
        };
        f.N = function(a, b) {
          return 0 > b || this.end <= this.start + b ? ke(b, this.end - this.start) : v.a(this.ka, this.start + b);
        };
        f.da = function(a, b, c) {
          return 0 > b || this.end <= this.start + b ? c : v.i(this.ka, this.start + b, c);
        };
        f.lb = function(a, b, c) {
          var d = this.start + b;
          a = this.l;
          c = Jc.i(this.ka, d, c);
          b = this.start;
          var e = this.end, d = d + 1, d = e > d ? e : d;
          return De.ba ? De.ba(a, c, b, d, null) : De.call(null, a, c, b, d, null);
        };
        f.O = function() {
          return this.l;
        };
        f.L = function() {
          return this.end - this.start;
        };
        f.Sa = function() {
          return v.a(this.ka, this.end - 1);
        };
        f.Za = function() {
          return this.start !== this.end ? new uc(this, this.end - this.start - 1, null) : null;
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(Fc, this.l);
        };
        f.T = function(a, b) {
          return mc(this, b);
        };
        f.U = function(a, b, c) {
          return nc(this, b, c);
        };
        f.Qa = function(a, b, c) {
          if ("number" === typeof b) {
            return ob(this, b, c);
          }
          throw Error("Subvec's key for assoc must be a number.");
        };
        f.K = function() {
          var a = this;
          return function(b) {
            return function d(e) {
              return e === a.end ? null : F(v.a(a.ka, e), new vd(null, function() {
                return function() {
                  return d(e + 1);
                };
              }(b), null, null));
            };
          }(this)(a.start);
        };
        f.S = function(a, b) {
          var c = this.ka, d = this.start, e = this.end, g = this.o;
          return De.ba ? De.ba(b, c, d, e, g) : De.call(null, b, c, d, e, g);
        };
        f.J = function(a, b) {
          var c = this.l, d = ob(this.ka, this.end, b), e = this.start, g = this.end + 1;
          return De.ba ? De.ba(c, d, e, g, null) : De.call(null, c, d, e, g, null);
        };
        f.call = function() {
          var a = null, a = function(a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.N(null, c);
              case 3:
                return this.da(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function(a2, c) {
            return this.N(null, c);
          };
          a.i = function(a2, c, d) {
            return this.da(null, c, d);
          };
          return a;
        }();
        f.apply = function(a, b) {
          return this.call.apply(this, [this].concat(Ha(b)));
        };
        f.b = function(a) {
          return this.N(null, a);
        };
        f.a = function(a, b) {
          return this.da(null, a, b);
        };
        Ce.prototype[Ga] = function() {
          return gc(this);
        };
        function De(a, b, c, d, e) {
          for (; ; ) {
            if (b instanceof Ce) {
              c = b.start + c, d = b.start + d, b = b.ka;
            } else {
              var g = H(b);
              if (0 > c || 0 > d || c > g || d > g) {
                throw Error("Index out of bounds");
              }
              return new Ce(a, b, c, d, e);
            }
          }
        }
        function Ae() {
          switch (arguments.length) {
            case 2:
              var a = arguments[0];
              return ze(a, arguments[1], H(a));
            case 3:
              return ze(arguments[0], arguments[1], arguments[2]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        }
        function ze(a, b, c) {
          return De(null, a, b, c, null);
        }
        function Ee(a, b) {
          return a === b.B ? b : new fe(a, Ha(b.c));
        }
        function re4(a) {
          return new fe({}, Ha(a.c));
        }
        function se(a) {
          var b = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          ad(a, 0, b, 0, a.length);
          return b;
        }
        var Fe = function Fe2(b, c, d, e) {
          d = Ee(b.root.B, d);
          var g = b.g - 1 >>> c & 31;
          if (5 === c) {
            b = e;
          } else {
            var h = d.c[g];
            b = null != h ? Fe2(b, c - 5, h, e) : ie(b.root.B, c - 5, e);
          }
          d.c[g] = b;
          return d;
        };
        function qe(a, b, c, d) {
          this.g = a;
          this.shift = b;
          this.root = c;
          this.$ = d;
          this.w = 88;
          this.h = 275;
        }
        f = qe.prototype;
        f.Ia = function(a, b) {
          if (this.root.B) {
            if (32 > this.g - he(this)) {
              this.$[this.g & 31] = b;
            } else {
              var c = new fe(this.root.B, this.$), d = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              d[0] = b;
              this.$ = d;
              if (this.g >>> 5 > 1 << this.shift) {
                var d = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], e = this.shift + 5;
                d[0] = this.root;
                d[1] = ie(this.root.B, this.shift, c);
                this.root = new fe(this.root.B, d);
                this.shift = e;
              } else {
                this.root = Fe(this, this.shift, this.root, c);
              }
            }
            this.g += 1;
            return this;
          }
          throw Error("conj! after persistent!");
        };
        f.Ma = function() {
          if (this.root.B) {
            this.root.B = null;
            var a = this.g - he(this), b = Array(a);
            ad(this.$, 0, b, 0, a);
            return new Q(null, this.g, this.shift, this.root, b, null);
          }
          throw Error("persistent! called twice");
        };
        f.Ta = function(a, b, c) {
          if ("number" === typeof b) {
            return Mb(this, b, c);
          }
          throw Error("TransientVector's key for assoc! must be a number.");
        };
        f.qb = function(a, b, c) {
          var d = this;
          if (d.root.B) {
            if (0 <= b && b < d.g) {
              return he(this) <= b ? d.$[b & 31] = c : (a = function() {
                return function g(a2, k) {
                  var m = Ee(d.root.B, k);
                  if (0 === a2) {
                    m.c[b & 31] = c;
                  } else {
                    var q = b >>> a2 & 31, p = g(a2 - 5, m.c[q]);
                    m.c[q] = p;
                  }
                  return m;
                };
              }(this).call(null, d.shift, d.root), d.root = a), this;
            }
            if (b === d.g) {
              return Jb(this, c);
            }
            throw Error([u("Index "), u(b), u(" out of bounds for TransientVector of length"), u(d.g)].join(""));
          }
          throw Error("assoc! after persistent!");
        };
        f.L = function() {
          if (this.root.B) {
            return this.g;
          }
          throw Error("count after persistent!");
        };
        f.N = function(a, b) {
          if (this.root.B) {
            return me(this, b)[b & 31];
          }
          throw Error("nth after persistent!");
        };
        f.da = function(a, b, c) {
          return 0 <= b && b < this.g ? v.a(this, b) : c;
        };
        f.G = function(a, b) {
          return bb.i(this, b, null);
        };
        f.F = function(a, b, c) {
          return "number" === typeof b ? v.i(this, b, c) : c;
        };
        f.call = function() {
          var a = null, a = function(a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.G(null, c);
              case 3:
                return this.F(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function(a2, c) {
            return this.G(null, c);
          };
          a.i = function(a2, c, d) {
            return this.F(null, c, d);
          };
          return a;
        }();
        f.apply = function(a, b) {
          return this.call.apply(this, [this].concat(Ha(b)));
        };
        f.b = function(a) {
          return this.G(null, a);
        };
        f.a = function(a, b) {
          return this.F(null, a, b);
        };
        function Ge() {
          this.h = 2097152;
          this.w = 0;
        }
        Ge.prototype.equiv = function(a) {
          return this.s(null, a);
        };
        Ge.prototype.s = function() {
          return false;
        };
        var He = new Ge();
        function Ie(a, b) {
          return dd(Xc(b) ? H(a) === H(b) ? Md(fd, P.a(function(a2) {
            return E.a(Ic(b, y(a2), He), Cc(a2));
          }, a)) : null : null);
        }
        function Je(a) {
          this.u = a;
        }
        Je.prototype.next = function() {
          if (null != this.u) {
            var a = y(this.u), b = L(a, 0), a = L(a, 1);
            this.u = D(this.u);
            return { value: [b, a], done: false };
          }
          return { value: null, done: true };
        };
        function Ke(a) {
          return new Je(w(a));
        }
        function Le(a) {
          this.u = a;
        }
        Le.prototype.next = function() {
          if (null != this.u) {
            var a = y(this.u);
            this.u = D(this.u);
            return { value: [a, a], done: false };
          }
          return { value: null, done: true };
        };
        function Me(a, b) {
          var c;
          if (b instanceof N) {
            a: {
              c = a.length;
              for (var d = b.Ea, e = 0; ; ) {
                if (c <= e) {
                  c = -1;
                  break a;
                }
                var g = a[e];
                if (g instanceof N && d === g.Ea) {
                  c = e;
                  break a;
                }
                e += 2;
              }
            }
          } else {
            if (c = "string" == typeof b, n(n(c) ? c : "number" === typeof b)) {
              a: {
                for (c = a.length, d = 0; ; ) {
                  if (c <= d) {
                    c = -1;
                    break a;
                  }
                  if (b === a[d]) {
                    c = d;
                    break a;
                  }
                  d += 2;
                }
              }
            } else {
              if (null == b) {
                a: {
                  for (c = a.length, d = 0; ; ) {
                    if (c <= d) {
                      c = -1;
                      break a;
                    }
                    if (null == a[d]) {
                      c = d;
                      break a;
                    }
                    d += 2;
                  }
                }
              } else {
                a: {
                  for (c = a.length, d = 0; ; ) {
                    if (c <= d) {
                      c = -1;
                      break a;
                    }
                    if (E.a(b, a[d])) {
                      c = d;
                      break a;
                    }
                    d += 2;
                  }
                }
              }
            }
          }
          return c;
        }
        function Ne(a, b, c) {
          this.c = a;
          this.j = b;
          this.ca = c;
          this.h = 32374990;
          this.w = 0;
        }
        f = Ne.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.ca;
        };
        f.W = function() {
          return this.j < this.c.length - 2 ? new Ne(this.c, this.j + 2, this.ca) : null;
        };
        f.L = function() {
          return (this.c.length - this.j) / 2;
        };
        f.I = function() {
          return ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(C, this.ca);
        };
        f.T = function(a, b) {
          return zc(b, this);
        };
        f.U = function(a, b, c) {
          return Bc(b, c, this);
        };
        f.R = function() {
          return new Q(null, 2, 5, R, [this.c[this.j], this.c[this.j + 1]], null);
        };
        f.Y = function() {
          return this.j < this.c.length - 2 ? new Ne(this.c, this.j + 2, this.ca) : C;
        };
        f.K = function() {
          return this;
        };
        f.S = function(a, b) {
          return new Ne(this.c, this.j, b);
        };
        f.J = function(a, b) {
          return F(b, this);
        };
        Ne.prototype[Ga] = function() {
          return gc(this);
        };
        function Te(a, b, c) {
          this.c = a;
          this.j = b;
          this.g = c;
        }
        Te.prototype.ab = function() {
          return this.j < this.g;
        };
        Te.prototype.next = function() {
          var a = new Q(null, 2, 5, R, [this.c[this.j], this.c[this.j + 1]], null);
          this.j += 2;
          return a;
        };
        function pa(a, b, c, d) {
          this.l = a;
          this.g = b;
          this.c = c;
          this.o = d;
          this.h = 16647951;
          this.w = 8196;
        }
        f = pa.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.keys = function() {
          return gc(Ue.b ? Ue.b(this) : Ue.call(null, this));
        };
        f.entries = function() {
          return Ke(w(this));
        };
        f.values = function() {
          return gc(Ve.b ? Ve.b(this) : Ve.call(null, this));
        };
        f.has = function(a) {
          return ed(this, a);
        };
        f.get = function(a, b) {
          return this.F(null, a, b);
        };
        f.forEach = function(a) {
          for (var b = w(this), c = null, d = 0, e = 0; ; ) {
            if (e < d) {
              var g = c.N(null, e), h = L(g, 0), g = L(g, 1);
              a.a ? a.a(g, h) : a.call(null, g, h);
              e += 1;
            } else {
              if (b = w(b)) {
                Zc(b) ? (c = Ob(b), b = Qb(b), h = c, d = H(c), c = h) : (c = y(b), h = L(c, 0), c = g = L(c, 1), a.a ? a.a(c, h) : a.call(null, c, h), b = D(b), c = null, d = 0), e = 0;
              } else {
                return null;
              }
            }
          }
        };
        f.G = function(a, b) {
          return bb.i(this, b, null);
        };
        f.F = function(a, b, c) {
          a = Me(this.c, b);
          return -1 === a ? c : this.c[a + 1];
        };
        f.Ra = function() {
          return new Te(this.c, 0, 2 * this.g);
        };
        f.O = function() {
          return this.l;
        };
        f.L = function() {
          return this.g;
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = kc(this);
        };
        f.s = function(a, b) {
          if (b && (b.h & 1024 || b.Db)) {
            var c = this.c.length;
            if (this.g === b.L(null)) {
              for (var d = 0; ; ) {
                if (d < c) {
                  var e = b.F(null, this.c[d], bd);
                  if (e !== bd) {
                    if (E.a(this.c[d + 1], e)) {
                      d += 2;
                    } else {
                      return false;
                    }
                  } else {
                    return false;
                  }
                } else {
                  return true;
                }
              }
            } else {
              return false;
            }
          } else {
            return Ie(this, b);
          }
        };
        f.La = function() {
          return new We({}, this.c.length, Ha(this.c));
        };
        f.M = function() {
          return sb(Xe, this.l);
        };
        f.T = function(a, b) {
          return zc(b, this);
        };
        f.U = function(a, b, c) {
          return Bc(b, c, this);
        };
        f.ib = function(a, b) {
          if (0 <= Me(this.c, b)) {
            var c = this.c.length, d = c - 2;
            if (0 === d) {
              return Qa(this);
            }
            for (var d = Array(d), e = 0, g = 0; ; ) {
              if (e >= c) {
                return new pa(this.l, this.g - 1, d, null);
              }
              E.a(b, this.c[e]) || (d[g] = this.c[e], d[g + 1] = this.c[e + 1], g += 2);
              e += 2;
            }
          } else {
            return this;
          }
        };
        f.Qa = function(a, b, c) {
          a = Me(this.c, b);
          if (-1 === a) {
            if (this.g < Ye) {
              a = this.c;
              for (var d = a.length, e = Array(d + 2), g = 0; ; ) {
                if (g < d) {
                  e[g] = a[g], g += 1;
                } else {
                  break;
                }
              }
              e[d] = b;
              e[d + 1] = c;
              return new pa(this.l, this.g + 1, e, null);
            }
            return sb(db(ce.a(Ze, this), b, c), this.l);
          }
          if (c === this.c[a + 1]) {
            return this;
          }
          b = Ha(this.c);
          b[a + 1] = c;
          return new pa(this.l, this.g, b, null);
        };
        f.eb = function(a, b) {
          return -1 !== Me(this.c, b);
        };
        f.K = function() {
          var a = this.c;
          return 0 <= a.length - 2 ? new Ne(a, 0, null) : null;
        };
        f.S = function(a, b) {
          return new pa(b, this.g, this.c, this.o);
        };
        f.J = function(a, b) {
          if (Yc(b)) {
            return db(this, v.a(b, 0), v.a(b, 1));
          }
          for (var c = this, d = w(b); ; ) {
            if (null == d) {
              return c;
            }
            var e = y(d);
            if (Yc(e)) {
              c = db(c, v.a(e, 0), v.a(e, 1)), d = D(d);
            } else {
              throw Error("conj on a map takes map entries or seqables of map entries");
            }
          }
        };
        f.call = function() {
          var a = null, a = function(a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.G(null, c);
              case 3:
                return this.F(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function(a2, c) {
            return this.G(null, c);
          };
          a.i = function(a2, c, d) {
            return this.F(null, c, d);
          };
          return a;
        }();
        f.apply = function(a, b) {
          return this.call.apply(this, [this].concat(Ha(b)));
        };
        f.b = function(a) {
          return this.G(null, a);
        };
        f.a = function(a, b) {
          return this.F(null, a, b);
        };
        var Xe = new pa(null, 0, [], lc), Ye = 8;
        pa.prototype[Ga] = function() {
          return gc(this);
        };
        function We(a, b, c) {
          this.Na = a;
          this.Pa = b;
          this.c = c;
          this.h = 258;
          this.w = 56;
        }
        f = We.prototype;
        f.L = function() {
          if (n(this.Na)) {
            return hd(this.Pa);
          }
          throw Error("count after persistent!");
        };
        f.G = function(a, b) {
          return bb.i(this, b, null);
        };
        f.F = function(a, b, c) {
          if (n(this.Na)) {
            return a = Me(this.c, b), -1 === a ? c : this.c[a + 1];
          }
          throw Error("lookup after persistent!");
        };
        f.Ia = function(a, b) {
          if (n(this.Na)) {
            if (b ? b.h & 2048 || b.Eb || (b.h ? 0 : r(hb, b)) : r(hb, b)) {
              return Lb(this, $e.b ? $e.b(b) : $e.call(null, b), af.b ? af.b(b) : af.call(null, b));
            }
            for (var c = w(b), d = this; ; ) {
              var e = y(c);
              if (n(e)) {
                var g = e, c = D(c), d = Lb(d, function() {
                  var a2 = g;
                  return $e.b ? $e.b(a2) : $e.call(null, a2);
                }(), function() {
                  var a2 = g;
                  return af.b ? af.b(a2) : af.call(null, a2);
                }());
              } else {
                return d;
              }
            }
          } else {
            throw Error("conj! after persistent!");
          }
        };
        f.Ma = function() {
          if (n(this.Na)) {
            return this.Na = false, new pa(null, hd(this.Pa), this.c, null);
          }
          throw Error("persistent! called twice");
        };
        f.Ta = function(a, b, c) {
          if (n(this.Na)) {
            a = Me(this.c, b);
            if (-1 === a) {
              if (this.Pa + 2 <= 2 * Ye) {
                return this.Pa += 2, this.c.push(b), this.c.push(c), this;
              }
              a = this.Pa;
              var d = this.c;
              a = bf.a ? bf.a(a, d) : bf.call(null, a, d);
              return Lb(a, b, c);
            }
            c !== this.c[a + 1] && (this.c[a + 1] = c);
            return this;
          }
          throw Error("assoc! after persistent!");
        };
        function bf(a, b) {
          for (var c = Ib(Ze), d = 0; ; ) {
            if (d < a) {
              c = Lb(c, b[d], b[d + 1]), d += 2;
            } else {
              return c;
            }
          }
        }
        function cf() {
          this.la = false;
        }
        function df(a, b) {
          return a === b ? true : a === b || a instanceof N && b instanceof N && a.Ea === b.Ea ? true : E.a(a, b);
        }
        function ff(a, b, c) {
          a = Ha(a);
          a[b] = c;
          return a;
        }
        function gf(a, b) {
          var c = Array(a.length - 2);
          ad(a, 0, c, 0, 2 * b);
          ad(a, 2 * (b + 1), c, 2 * b, c.length - 2 * b);
          return c;
        }
        function hf(a, b, c, d) {
          a = a.Ja(b);
          a.c[c] = d;
          return a;
        }
        function jf(a, b, c) {
          this.B = a;
          this.D = b;
          this.c = c;
        }
        f = jf.prototype;
        f.Ja = function(a) {
          if (a === this.B) {
            return this;
          }
          var b = id(this.D), c = Array(0 > b ? 4 : 2 * (b + 1));
          ad(this.c, 0, c, 0, 2 * b);
          return new jf(a, this.D, c);
        };
        f.Ua = function() {
          var a = this.c;
          return kf ? kf(a) : lf.call(null, a);
        };
        f.Fa = function(a, b, c, d) {
          var e = 1 << (b >>> a & 31);
          if (0 === (this.D & e)) {
            return d;
          }
          var g = id(this.D & e - 1), e = this.c[2 * g], g = this.c[2 * g + 1];
          return null == e ? g.Fa(a + 5, b, c, d) : df(c, e) ? g : d;
        };
        f.ia = function(a, b, c, d, e, g) {
          var h = 1 << (c >>> b & 31), k = id(this.D & h - 1);
          if (0 === (this.D & h)) {
            var m = id(this.D);
            if (2 * m < this.c.length) {
              a = this.Ja(a);
              b = a.c;
              g.la = true;
              a: {
                for (c = 2 * (m - k), g = 2 * k + (c - 1), m = 2 * (k + 1) + (c - 1); ; ) {
                  if (0 === c) {
                    break a;
                  }
                  b[m] = b[g];
                  --m;
                  --c;
                  --g;
                }
              }
              b[2 * k] = d;
              b[2 * k + 1] = e;
              a.D |= h;
              return a;
            }
            if (16 <= m) {
              k = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              k[c >>> b & 31] = mf.ia(a, b + 5, c, d, e, g);
              for (e = d = 0; ; ) {
                if (32 > d) {
                  0 !== (this.D >>> d & 1) && (k[d] = null != this.c[e] ? mf.ia(a, b + 5, cc(this.c[e]), this.c[e], this.c[e + 1], g) : this.c[e + 1], e += 2), d += 1;
                } else {
                  break;
                }
              }
              return new nf(a, m + 1, k);
            }
            b = Array(2 * (m + 4));
            ad(this.c, 0, b, 0, 2 * k);
            b[2 * k] = d;
            b[2 * k + 1] = e;
            ad(this.c, 2 * k, b, 2 * (k + 1), 2 * (m - k));
            g.la = true;
            a = this.Ja(a);
            a.c = b;
            a.D |= h;
            return a;
          }
          m = this.c[2 * k];
          h = this.c[2 * k + 1];
          if (null == m) {
            return m = h.ia(a, b + 5, c, d, e, g), m === h ? this : hf(this, a, 2 * k + 1, m);
          }
          if (df(d, m)) {
            return e === h ? this : hf(this, a, 2 * k + 1, e);
          }
          g.la = true;
          g = b + 5;
          d = of ? of(a, g, m, h, c, d, e) : pf.call(null, a, g, m, h, c, d, e);
          e = 2 * k;
          k = 2 * k + 1;
          a = this.Ja(a);
          a.c[e] = null;
          a.c[k] = d;
          return a;
        };
        f.ha = function(a, b, c, d, e) {
          var g = 1 << (b >>> a & 31), h = id(this.D & g - 1);
          if (0 === (this.D & g)) {
            var k = id(this.D);
            if (16 <= k) {
              h = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              h[b >>> a & 31] = mf.ha(a + 5, b, c, d, e);
              for (d = c = 0; ; ) {
                if (32 > c) {
                  0 !== (this.D >>> c & 1) && (h[c] = null != this.c[d] ? mf.ha(a + 5, cc(this.c[d]), this.c[d], this.c[d + 1], e) : this.c[d + 1], d += 2), c += 1;
                } else {
                  break;
                }
              }
              return new nf(null, k + 1, h);
            }
            a = Array(2 * (k + 1));
            ad(this.c, 0, a, 0, 2 * h);
            a[2 * h] = c;
            a[2 * h + 1] = d;
            ad(this.c, 2 * h, a, 2 * (h + 1), 2 * (k - h));
            e.la = true;
            return new jf(null, this.D | g, a);
          }
          var m = this.c[2 * h], g = this.c[2 * h + 1];
          if (null == m) {
            return k = g.ha(a + 5, b, c, d, e), k === g ? this : new jf(null, this.D, ff(this.c, 2 * h + 1, k));
          }
          if (df(c, m)) {
            return d === g ? this : new jf(null, this.D, ff(this.c, 2 * h + 1, d));
          }
          e.la = true;
          e = this.D;
          k = this.c;
          a += 5;
          a = qf ? qf(a, m, g, b, c, d) : pf.call(null, a, m, g, b, c, d);
          c = 2 * h;
          h = 2 * h + 1;
          d = Ha(k);
          d[c] = null;
          d[h] = a;
          return new jf(null, e, d);
        };
        f.Va = function(a, b, c) {
          var d = 1 << (b >>> a & 31);
          if (0 === (this.D & d)) {
            return this;
          }
          var e = id(this.D & d - 1), g = this.c[2 * e], h = this.c[2 * e + 1];
          return null == g ? (a = h.Va(a + 5, b, c), a === h ? this : null != a ? new jf(null, this.D, ff(this.c, 2 * e + 1, a)) : this.D === d ? null : new jf(null, this.D ^ d, gf(this.c, e))) : df(c, g) ? new jf(null, this.D ^ d, gf(this.c, e)) : this;
        };
        var mf = new jf(null, 0, []);
        function nf(a, b, c) {
          this.B = a;
          this.g = b;
          this.c = c;
        }
        f = nf.prototype;
        f.Ja = function(a) {
          return a === this.B ? this : new nf(a, this.g, Ha(this.c));
        };
        f.Ua = function() {
          var a = this.c;
          return rf ? rf(a) : sf.call(null, a);
        };
        f.Fa = function(a, b, c, d) {
          var e = this.c[b >>> a & 31];
          return null != e ? e.Fa(a + 5, b, c, d) : d;
        };
        f.ia = function(a, b, c, d, e, g) {
          var h = c >>> b & 31, k = this.c[h];
          if (null == k) {
            return a = hf(this, a, h, mf.ia(a, b + 5, c, d, e, g)), a.g += 1, a;
          }
          b = k.ia(a, b + 5, c, d, e, g);
          return b === k ? this : hf(this, a, h, b);
        };
        f.ha = function(a, b, c, d, e) {
          var g = b >>> a & 31, h = this.c[g];
          if (null == h) {
            return new nf(null, this.g + 1, ff(this.c, g, mf.ha(a + 5, b, c, d, e)));
          }
          a = h.ha(a + 5, b, c, d, e);
          return a === h ? this : new nf(null, this.g, ff(this.c, g, a));
        };
        f.Va = function(a, b, c) {
          var d = b >>> a & 31, e = this.c[d];
          if (null != e) {
            a = e.Va(a + 5, b, c);
            if (a === e) {
              d = this;
            } else {
              if (null == a) {
                if (8 >= this.g) {
                  a: {
                    e = this.c;
                    a = e.length;
                    b = Array(2 * (this.g - 1));
                    c = 0;
                    for (var g = 1, h = 0; ; ) {
                      if (c < a) {
                        c !== d && null != e[c] && (b[g] = e[c], g += 2, h |= 1 << c), c += 1;
                      } else {
                        d = new jf(null, h, b);
                        break a;
                      }
                    }
                  }
                } else {
                  d = new nf(null, this.g - 1, ff(this.c, d, a));
                }
              } else {
                d = new nf(null, this.g, ff(this.c, d, a));
              }
            }
            return d;
          }
          return this;
        };
        function tf(a, b, c) {
          b *= 2;
          for (var d = 0; ; ) {
            if (d < b) {
              if (df(c, a[d])) {
                return d;
              }
              d += 2;
            } else {
              return -1;
            }
          }
        }
        function uf(a, b, c, d) {
          this.B = a;
          this.Ba = b;
          this.g = c;
          this.c = d;
        }
        f = uf.prototype;
        f.Ja = function(a) {
          if (a === this.B) {
            return this;
          }
          var b = Array(2 * (this.g + 1));
          ad(this.c, 0, b, 0, 2 * this.g);
          return new uf(a, this.Ba, this.g, b);
        };
        f.Ua = function() {
          var a = this.c;
          return kf ? kf(a) : lf.call(null, a);
        };
        f.Fa = function(a, b, c, d) {
          a = tf(this.c, this.g, c);
          return 0 > a ? d : df(c, this.c[a]) ? this.c[a + 1] : d;
        };
        f.ia = function(a, b, c, d, e, g) {
          if (c === this.Ba) {
            b = tf(this.c, this.g, d);
            if (-1 === b) {
              if (this.c.length > 2 * this.g) {
                return b = 2 * this.g, c = 2 * this.g + 1, a = this.Ja(a), a.c[b] = d, a.c[c] = e, g.la = true, a.g += 1, a;
              }
              c = this.c.length;
              b = Array(c + 2);
              ad(this.c, 0, b, 0, c);
              b[c] = d;
              b[c + 1] = e;
              g.la = true;
              d = this.g + 1;
              a === this.B ? (this.c = b, this.g = d, a = this) : a = new uf(this.B, this.Ba, d, b);
              return a;
            }
            return this.c[b + 1] === e ? this : hf(this, a, b + 1, e);
          }
          return new jf(a, 1 << (this.Ba >>> b & 31), [null, this, null, null]).ia(a, b, c, d, e, g);
        };
        f.ha = function(a, b, c, d, e) {
          return b === this.Ba ? (a = tf(this.c, this.g, c), -1 === a ? (a = 2 * this.g, b = Array(a + 2), ad(this.c, 0, b, 0, a), b[a] = c, b[a + 1] = d, e.la = true, new uf(null, this.Ba, this.g + 1, b)) : E.a(this.c[a], d) ? this : new uf(null, this.Ba, this.g, ff(this.c, a + 1, d))) : new jf(null, 1 << (this.Ba >>> a & 31), [null, this]).ha(a, b, c, d, e);
        };
        f.Va = function(a, b, c) {
          a = tf(this.c, this.g, c);
          return -1 === a ? this : 1 === this.g ? null : new uf(null, this.Ba, this.g - 1, gf(this.c, hd(a)));
        };
        function pf() {
          switch (arguments.length) {
            case 6:
              return qf(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
            case 7:
              return of(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        }
        function qf(a, b, c, d, e, g) {
          var h = cc(b);
          if (h === d) {
            return new uf(null, h, 2, [b, c, e, g]);
          }
          var k = new cf();
          return mf.ha(a, h, b, c, k).ha(a, d, e, g, k);
        }
        function of(a, b, c, d, e, g, h) {
          var k = cc(c);
          if (k === e) {
            return new uf(null, k, 2, [c, d, g, h]);
          }
          var m = new cf();
          return mf.ia(a, b, k, c, d, m).ia(a, b, e, g, h, m);
        }
        function vf(a, b, c, d, e) {
          this.l = a;
          this.Ga = b;
          this.j = c;
          this.u = d;
          this.o = e;
          this.h = 32374860;
          this.w = 0;
        }
        f = vf.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.l;
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(C, this.l);
        };
        f.T = function(a, b) {
          return zc(b, this);
        };
        f.U = function(a, b, c) {
          return Bc(b, c, this);
        };
        f.R = function() {
          return null == this.u ? new Q(null, 2, 5, R, [this.Ga[this.j], this.Ga[this.j + 1]], null) : y(this.u);
        };
        f.Y = function() {
          if (null == this.u) {
            var a = this.Ga, b = this.j + 2;
            return wf ? wf(a, b, null) : lf.call(null, a, b, null);
          }
          var a = this.Ga, b = this.j, c = D(this.u);
          return wf ? wf(a, b, c) : lf.call(null, a, b, c);
        };
        f.K = function() {
          return this;
        };
        f.S = function(a, b) {
          return new vf(b, this.Ga, this.j, this.u, this.o);
        };
        f.J = function(a, b) {
          return F(b, this);
        };
        vf.prototype[Ga] = function() {
          return gc(this);
        };
        function lf() {
          switch (arguments.length) {
            case 1:
              return kf(arguments[0]);
            case 3:
              return wf(arguments[0], arguments[1], arguments[2]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        }
        function kf(a) {
          return wf(a, 0, null);
        }
        function wf(a, b, c) {
          if (null == c) {
            for (c = a.length; ; ) {
              if (b < c) {
                if (null != a[b]) {
                  return new vf(null, a, b, null, null);
                }
                var d = a[b + 1];
                if (n(d) && (d = d.Ua(), n(d))) {
                  return new vf(null, a, b + 2, d, null);
                }
                b += 2;
              } else {
                return null;
              }
            }
          } else {
            return new vf(null, a, b, c, null);
          }
        }
        function xf(a, b, c, d, e) {
          this.l = a;
          this.Ga = b;
          this.j = c;
          this.u = d;
          this.o = e;
          this.h = 32374860;
          this.w = 0;
        }
        f = xf.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.l;
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(C, this.l);
        };
        f.T = function(a, b) {
          return zc(b, this);
        };
        f.U = function(a, b, c) {
          return Bc(b, c, this);
        };
        f.R = function() {
          return y(this.u);
        };
        f.Y = function() {
          var a = this.Ga, b = this.j, c = D(this.u);
          return yf ? yf(null, a, b, c) : sf.call(null, null, a, b, c);
        };
        f.K = function() {
          return this;
        };
        f.S = function(a, b) {
          return new xf(b, this.Ga, this.j, this.u, this.o);
        };
        f.J = function(a, b) {
          return F(b, this);
        };
        xf.prototype[Ga] = function() {
          return gc(this);
        };
        function sf() {
          switch (arguments.length) {
            case 1:
              return rf(arguments[0]);
            case 4:
              return yf(arguments[0], arguments[1], arguments[2], arguments[3]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        }
        function rf(a) {
          return yf(null, a, 0, null);
        }
        function yf(a, b, c, d) {
          if (null == d) {
            for (d = b.length; ; ) {
              if (c < d) {
                var e = b[c];
                if (n(e) && (e = e.Ua(), n(e))) {
                  return new xf(a, b, c + 1, e, null);
                }
                c += 1;
              } else {
                return null;
              }
            }
          } else {
            return new xf(a, b, c, d, null);
          }
        }
        function zf(a, b, c, d, e, g) {
          this.l = a;
          this.g = b;
          this.root = c;
          this.Z = d;
          this.fa = e;
          this.o = g;
          this.h = 16123663;
          this.w = 8196;
        }
        f = zf.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.keys = function() {
          return gc(Ue.b ? Ue.b(this) : Ue.call(null, this));
        };
        f.entries = function() {
          return Ke(w(this));
        };
        f.values = function() {
          return gc(Ve.b ? Ve.b(this) : Ve.call(null, this));
        };
        f.has = function(a) {
          return ed(this, a);
        };
        f.get = function(a, b) {
          return this.F(null, a, b);
        };
        f.forEach = function(a) {
          for (var b = w(this), c = null, d = 0, e = 0; ; ) {
            if (e < d) {
              var g = c.N(null, e), h = L(g, 0), g = L(g, 1);
              a.a ? a.a(g, h) : a.call(null, g, h);
              e += 1;
            } else {
              if (b = w(b)) {
                Zc(b) ? (c = Ob(b), b = Qb(b), h = c, d = H(c), c = h) : (c = y(b), h = L(c, 0), c = g = L(c, 1), a.a ? a.a(c, h) : a.call(null, c, h), b = D(b), c = null, d = 0), e = 0;
              } else {
                return null;
              }
            }
          }
        };
        f.G = function(a, b) {
          return bb.i(this, b, null);
        };
        f.F = function(a, b, c) {
          return null == b ? this.Z ? this.fa : c : null == this.root ? c : this.root.Fa(0, cc(b), b, c);
        };
        f.O = function() {
          return this.l;
        };
        f.L = function() {
          return this.g;
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = kc(this);
        };
        f.s = function(a, b) {
          return Ie(this, b);
        };
        f.La = function() {
          return new Af({}, this.root, this.g, this.Z, this.fa);
        };
        f.M = function() {
          return sb(Ze, this.l);
        };
        f.ib = function(a, b) {
          if (null == b) {
            return this.Z ? new zf(this.l, this.g - 1, this.root, false, null, null) : this;
          }
          if (null == this.root) {
            return this;
          }
          var c = this.root.Va(0, cc(b), b);
          return c === this.root ? this : new zf(this.l, this.g - 1, c, this.Z, this.fa, null);
        };
        f.Qa = function(a, b, c) {
          if (null == b) {
            return this.Z && c === this.fa ? this : new zf(this.l, this.Z ? this.g : this.g + 1, this.root, true, c, null);
          }
          a = new cf();
          b = (null == this.root ? mf : this.root).ha(0, cc(b), b, c, a);
          return b === this.root ? this : new zf(this.l, a.la ? this.g + 1 : this.g, b, this.Z, this.fa, null);
        };
        f.eb = function(a, b) {
          return null == b ? this.Z : null == this.root ? false : this.root.Fa(0, cc(b), b, bd) !== bd;
        };
        f.K = function() {
          if (0 < this.g) {
            var a = null != this.root ? this.root.Ua() : null;
            return this.Z ? F(new Q(null, 2, 5, R, [null, this.fa], null), a) : a;
          }
          return null;
        };
        f.S = function(a, b) {
          return new zf(b, this.g, this.root, this.Z, this.fa, this.o);
        };
        f.J = function(a, b) {
          if (Yc(b)) {
            return db(this, v.a(b, 0), v.a(b, 1));
          }
          for (var c = this, d = w(b); ; ) {
            if (null == d) {
              return c;
            }
            var e = y(d);
            if (Yc(e)) {
              c = db(c, v.a(e, 0), v.a(e, 1)), d = D(d);
            } else {
              throw Error("conj on a map takes map entries or seqables of map entries");
            }
          }
        };
        f.call = function() {
          var a = null, a = function(a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.G(null, c);
              case 3:
                return this.F(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function(a2, c) {
            return this.G(null, c);
          };
          a.i = function(a2, c, d) {
            return this.F(null, c, d);
          };
          return a;
        }();
        f.apply = function(a, b) {
          return this.call.apply(this, [this].concat(Ha(b)));
        };
        f.b = function(a) {
          return this.G(null, a);
        };
        f.a = function(a, b) {
          return this.F(null, a, b);
        };
        var Ze = new zf(null, 0, null, false, null, lc);
        function Kc(a, b) {
          for (var c = a.length, d = 0, e = Ib(Ze); ; ) {
            if (d < c) {
              var g = d + 1, e = e.Ta(null, a[d], b[d]), d = g;
            } else {
              return Kb(e);
            }
          }
        }
        zf.prototype[Ga] = function() {
          return gc(this);
        };
        function Af(a, b, c, d, e) {
          this.B = a;
          this.root = b;
          this.count = c;
          this.Z = d;
          this.fa = e;
          this.h = 258;
          this.w = 56;
        }
        function Bf(a, b) {
          if (a.B) {
            if (b ? b.h & 2048 || b.Eb || (b.h ? 0 : r(hb, b)) : r(hb, b)) {
              return Cf(a, $e.b ? $e.b(b) : $e.call(null, b), af.b ? af.b(b) : af.call(null, b));
            }
            for (var c = w(b), d = a; ; ) {
              var e = y(c);
              if (n(e)) {
                var g = e, c = D(c), d = Cf(d, function() {
                  var a2 = g;
                  return $e.b ? $e.b(a2) : $e.call(null, a2);
                }(), function() {
                  var a2 = g;
                  return af.b ? af.b(a2) : af.call(null, a2);
                }());
              } else {
                return d;
              }
            }
          } else {
            throw Error("conj! after persistent");
          }
        }
        function Cf(a, b, c) {
          if (a.B) {
            if (null == b) {
              a.fa !== c && (a.fa = c), a.Z || (a.count += 1, a.Z = true);
            } else {
              var d = new cf();
              b = (null == a.root ? mf : a.root).ia(a.B, 0, cc(b), b, c, d);
              b !== a.root && (a.root = b);
              d.la && (a.count += 1);
            }
            return a;
          }
          throw Error("assoc! after persistent!");
        }
        f = Af.prototype;
        f.L = function() {
          if (this.B) {
            return this.count;
          }
          throw Error("count after persistent!");
        };
        f.G = function(a, b) {
          return null == b ? this.Z ? this.fa : null : null == this.root ? null : this.root.Fa(0, cc(b), b);
        };
        f.F = function(a, b, c) {
          return null == b ? this.Z ? this.fa : c : null == this.root ? c : this.root.Fa(0, cc(b), b, c);
        };
        f.Ia = function(a, b) {
          return Bf(this, b);
        };
        f.Ma = function() {
          var a;
          if (this.B) {
            this.B = null, a = new zf(null, this.count, this.root, this.Z, this.fa, null);
          } else {
            throw Error("persistent! called twice");
          }
          return a;
        };
        f.Ta = function(a, b, c) {
          return Cf(this, b, c);
        };
        var Df = function Df2() {
          return Df2.m(0 < arguments.length ? new x(Array.prototype.slice.call(arguments, 0), 0) : null);
        };
        Df.m = function(a) {
          for (var b = w(a), c = Ib(Ze); ; ) {
            if (b) {
              a = D(D(b));
              var d = y(b), b = Cc(b), c = Lb(c, d, b), b = a;
            } else {
              return Kb(c);
            }
          }
        };
        Df.v = 0;
        Df.A = function(a) {
          return Df.m(w(a));
        };
        var Ef = function Ef2() {
          return Ef2.m(0 < arguments.length ? new x(Array.prototype.slice.call(arguments, 0), 0) : null);
        };
        Ef.m = function(a) {
          a = a instanceof x && 0 === a.j ? a.c : Ia(a);
          for (var b = [], c = 0; ; ) {
            if (c < a.length) {
              var d = a[c], e = a[c + 1];
              -1 === Me(b, d) && (b.push(d), b.push(e));
              c += 2;
            } else {
              break;
            }
          }
          return new pa(null, b.length / 2, b, null);
        };
        Ef.v = 0;
        Ef.A = function(a) {
          return Ef.m(w(a));
        };
        function Ff(a, b) {
          this.X = a;
          this.ca = b;
          this.h = 32374988;
          this.w = 0;
        }
        f = Ff.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.ca;
        };
        f.W = function() {
          var a = this.X, a = (a ? a.h & 128 || a.Ya || (a.h ? 0 : r($a, a)) : r($a, a)) ? this.X.W(null) : D(this.X);
          return null == a ? null : new Ff(a, this.ca);
        };
        f.I = function() {
          return ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(C, this.ca);
        };
        f.T = function(a, b) {
          return zc(b, this);
        };
        f.U = function(a, b, c) {
          return Bc(b, c, this);
        };
        f.R = function() {
          return this.X.R(null).jb();
        };
        f.Y = function() {
          var a = this.X, a = (a ? a.h & 128 || a.Ya || (a.h ? 0 : r($a, a)) : r($a, a)) ? this.X.W(null) : D(this.X);
          return null != a ? new Ff(a, this.ca) : C;
        };
        f.K = function() {
          return this;
        };
        f.S = function(a, b) {
          return new Ff(this.X, b);
        };
        f.J = function(a, b) {
          return F(b, this);
        };
        Ff.prototype[Ga] = function() {
          return gc(this);
        };
        function Ue(a) {
          return (a = w(a)) ? new Ff(a, null) : null;
        }
        function $e(a) {
          return ib(a);
        }
        function Gf(a, b) {
          this.X = a;
          this.ca = b;
          this.h = 32374988;
          this.w = 0;
        }
        f = Gf.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.O = function() {
          return this.ca;
        };
        f.W = function() {
          var a = this.X, a = (a ? a.h & 128 || a.Ya || (a.h ? 0 : r($a, a)) : r($a, a)) ? this.X.W(null) : D(this.X);
          return null == a ? null : new Gf(a, this.ca);
        };
        f.I = function() {
          return ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(C, this.ca);
        };
        f.T = function(a, b) {
          return zc(b, this);
        };
        f.U = function(a, b, c) {
          return Bc(b, c, this);
        };
        f.R = function() {
          return this.X.R(null).kb();
        };
        f.Y = function() {
          var a = this.X, a = (a ? a.h & 128 || a.Ya || (a.h ? 0 : r($a, a)) : r($a, a)) ? this.X.W(null) : D(this.X);
          return null != a ? new Gf(a, this.ca) : C;
        };
        f.K = function() {
          return this;
        };
        f.S = function(a, b) {
          return new Gf(this.X, b);
        };
        f.J = function(a, b) {
          return F(b, this);
        };
        Gf.prototype[Ga] = function() {
          return gc(this);
        };
        function Ve(a) {
          return (a = w(a)) ? new Gf(a, null) : null;
        }
        function af(a) {
          return jb(a);
        }
        function Hf(a, b, c) {
          this.l = a;
          this.Ka = b;
          this.o = c;
          this.h = 15077647;
          this.w = 8196;
        }
        f = Hf.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.keys = function() {
          return gc(w(this));
        };
        f.entries = function() {
          var a = w(this);
          return new Le(w(a));
        };
        f.values = function() {
          return gc(w(this));
        };
        f.has = function(a) {
          return ed(this, a);
        };
        f.forEach = function(a) {
          for (var b = w(this), c = null, d = 0, e = 0; ; ) {
            if (e < d) {
              var g = c.N(null, e), h = L(g, 0), g = L(g, 1);
              a.a ? a.a(g, h) : a.call(null, g, h);
              e += 1;
            } else {
              if (b = w(b)) {
                Zc(b) ? (c = Ob(b), b = Qb(b), h = c, d = H(c), c = h) : (c = y(b), h = L(c, 0), c = g = L(c, 1), a.a ? a.a(c, h) : a.call(null, c, h), b = D(b), c = null, d = 0), e = 0;
              } else {
                return null;
              }
            }
          }
        };
        f.G = function(a, b) {
          return bb.i(this, b, null);
        };
        f.F = function(a, b, c) {
          return cb(this.Ka, b) ? b : c;
        };
        f.O = function() {
          return this.l;
        };
        f.L = function() {
          return Oa(this.Ka);
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = kc(this);
        };
        f.s = function(a, b) {
          return Tc(b) && H(this) === H(b) && Md(function(a2) {
            return function(b2) {
              return ed(a2, b2);
            };
          }(this), b);
        };
        f.La = function() {
          return new If(Ib(this.Ka));
        };
        f.M = function() {
          return yc(Jf, this.l);
        };
        f.pb = function(a, b) {
          return new Hf(this.l, fb(this.Ka, b), null);
        };
        f.K = function() {
          return Ue(this.Ka);
        };
        f.S = function(a, b) {
          return new Hf(b, this.Ka, this.o);
        };
        f.J = function(a, b) {
          return new Hf(this.l, Jc.i(this.Ka, b, null), null);
        };
        f.call = function() {
          var a = null, a = function(a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.G(null, c);
              case 3:
                return this.F(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function(a2, c) {
            return this.G(null, c);
          };
          a.i = function(a2, c, d) {
            return this.F(null, c, d);
          };
          return a;
        }();
        f.apply = function(a, b) {
          return this.call.apply(this, [this].concat(Ha(b)));
        };
        f.b = function(a) {
          return this.G(null, a);
        };
        f.a = function(a, b) {
          return this.F(null, a, b);
        };
        var Jf = new Hf(null, Xe, lc);
        Hf.prototype[Ga] = function() {
          return gc(this);
        };
        function If(a) {
          this.Da = a;
          this.w = 136;
          this.h = 259;
        }
        f = If.prototype;
        f.Ia = function(a, b) {
          this.Da = Lb(this.Da, b, null);
          return this;
        };
        f.Ma = function() {
          return new Hf(null, Kb(this.Da), null);
        };
        f.L = function() {
          return H(this.Da);
        };
        f.G = function(a, b) {
          return bb.i(this, b, null);
        };
        f.F = function(a, b, c) {
          return bb.i(this.Da, b, bd) === bd ? c : b;
        };
        f.call = function() {
          function a(a2, b2, c2) {
            return bb.i(this.Da, b2, bd) === bd ? c2 : b2;
          }
          function b(a2, b2) {
            return bb.i(this.Da, b2, bd) === bd ? null : b2;
          }
          var c = null, c = function(c2, e, g) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.i = a;
          return c;
        }();
        f.apply = function(a, b) {
          return this.call.apply(this, [this].concat(Ha(b)));
        };
        f.b = function(a) {
          return bb.i(this.Da, a, bd) === bd ? null : a;
        };
        f.a = function(a, b) {
          return bb.i(this.Da, a, bd) === bd ? b : a;
        };
        function Kf(a) {
          a = w(a);
          if (null == a) {
            return Jf;
          }
          if (a instanceof x && 0 === a.j) {
            a = a.c;
            a: {
              for (var b = 0, c = Ib(Jf); ; ) {
                if (b < a.length) {
                  var d = b + 1, c = c.Ia(null, a[b]), b = d;
                } else {
                  break a;
                }
              }
            }
            return c.Ma(null);
          }
          for (d = Ib(Jf); ; ) {
            if (null != a) {
              b = D(a), d = d.Ia(null, a.R(null)), a = b;
            } else {
              return Kb(d);
            }
          }
        }
        function Lf(a) {
          if (a && (a.w & 4096 || a.Gb)) {
            return a.name;
          }
          if ("string" === typeof a) {
            return a;
          }
          throw Error([u("Doesn't support name: "), u(a)].join(""));
        }
        var Mf = function Mf2() {
          switch (arguments.length) {
            case 2:
              return Mf2.a(arguments[0], arguments[1]);
            case 3:
              return Mf2.i(arguments[0], arguments[1], arguments[2]);
            default:
              return Mf2.m(arguments[0], arguments[1], arguments[2], new x(Array.prototype.slice.call(arguments, 3), 0));
          }
        };
        Mf.a = function(a, b) {
          return b;
        };
        Mf.i = function(a, b, c) {
          return (a.b ? a.b(b) : a.call(null, b)) > (a.b ? a.b(c) : a.call(null, c)) ? b : c;
        };
        Mf.m = function(a, b, c, d) {
          return Ka(function(b2, c2) {
            return Mf.i(a, b2, c2);
          }, Mf.i(a, b, c), d);
        };
        Mf.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          var d = D(c), c = y(d), d = D(d);
          return Mf.m(b, a, c, d);
        };
        Mf.v = 3;
        function Nf(a, b) {
          return new vd(null, function() {
            var c = w(b);
            if (c) {
              var d;
              d = y(c);
              d = a.b ? a.b(d) : a.call(null, d);
              c = n(d) ? F(y(c), Nf(a, ec(c))) : null;
            } else {
              c = null;
            }
            return c;
          }, null, null);
        }
        function Of(a, b, c) {
          this.j = a;
          this.end = b;
          this.step = c;
        }
        Of.prototype.ab = function() {
          return 0 < this.step ? this.j < this.end : this.j > this.end;
        };
        Of.prototype.next = function() {
          var a = this.j;
          this.j += this.step;
          return a;
        };
        function Pf(a, b, c, d, e) {
          this.l = a;
          this.start = b;
          this.end = c;
          this.step = d;
          this.o = e;
          this.h = 32375006;
          this.w = 8192;
        }
        f = Pf.prototype;
        f.toString = function() {
          return Ub(this);
        };
        f.equiv = function(a) {
          return this.s(null, a);
        };
        f.N = function(a, b) {
          if (b < Oa(this)) {
            return this.start + b * this.step;
          }
          if (this.start > this.end && 0 === this.step) {
            return this.start;
          }
          throw Error("Index out of bounds");
        };
        f.da = function(a, b, c) {
          return b < Oa(this) ? this.start + b * this.step : this.start > this.end && 0 === this.step ? this.start : c;
        };
        f.Ra = function() {
          return new Of(this.start, this.end, this.step);
        };
        f.O = function() {
          return this.l;
        };
        f.W = function() {
          return 0 < this.step ? this.start + this.step < this.end ? new Pf(this.l, this.start + this.step, this.end, this.step, null) : null : this.start + this.step > this.end ? new Pf(this.l, this.start + this.step, this.end, this.step, null) : null;
        };
        f.L = function() {
          return Ca(zb(this)) ? 0 : Math.ceil((this.end - this.start) / this.step);
        };
        f.I = function() {
          var a = this.o;
          return null != a ? a : this.o = a = ic(this);
        };
        f.s = function(a, b) {
          return vc(this, b);
        };
        f.M = function() {
          return yc(C, this.l);
        };
        f.T = function(a, b) {
          return mc(this, b);
        };
        f.U = function(a, b, c) {
          for (a = this.start; ; ) {
            if (0 < this.step ? a < this.end : a > this.end) {
              var d = a;
              c = b.a ? b.a(c, d) : b.call(null, c, d);
              a += this.step;
            } else {
              return c;
            }
          }
        };
        f.R = function() {
          return null == zb(this) ? null : this.start;
        };
        f.Y = function() {
          return null != zb(this) ? new Pf(this.l, this.start + this.step, this.end, this.step, null) : C;
        };
        f.K = function() {
          return 0 < this.step ? this.start < this.end ? this : null : this.start > this.end ? this : null;
        };
        f.S = function(a, b) {
          return new Pf(b, this.start, this.end, this.step, this.o);
        };
        f.J = function(a, b) {
          return F(b, this);
        };
        Pf.prototype[Ga] = function() {
          return gc(this);
        };
        function Qf(a, b) {
          return new vd(null, function() {
            var c = w(b);
            if (c) {
              var d = y(c), e = a.b ? a.b(d) : a.call(null, d), d = F(d, Nf(function(b2, c2) {
                return function(b3) {
                  return E.a(c2, a.b ? a.b(b3) : a.call(null, b3));
                };
              }(d, e, c, c), D(c)));
              return F(d, Qf(a, w(Rd(H(d), c))));
            }
            return null;
          }, null, null);
        }
        function yg(a) {
          a: {
            for (var b = a; ; ) {
              if (w(b)) {
                b = D(b);
              } else {
                break a;
              }
            }
          }
          return a;
        }
        function zg(a, b) {
          if ("string" === typeof b) {
            var c = a.exec(b);
            return null == c ? null : 1 === H(c) ? y(c) : we(c);
          }
          throw new TypeError("re-find must match against a string.");
        }
        function Ag(a) {
          if (a instanceof RegExp) {
            return a;
          }
          var b = zg(/^\(\?([idmsux]*)\)/, a), c = L(b, 0), b = L(b, 1);
          a = kd(a, H(c));
          return new RegExp(a, n(b) ? b : "");
        }
        function Bg(a, b, c, d, e, g, h) {
          var k = ka;
          ka = null == ka ? null : ka - 1;
          try {
            if (null != ka && 0 > ka) {
              return Db(a, "#");
            }
            Db(a, c);
            if (0 === wa.b(g)) {
              w(h) && Db(a, function() {
                var a2 = Cg.b(g);
                return n(a2) ? a2 : "...";
              }());
            } else {
              if (w(h)) {
                var m = y(h);
                b.i ? b.i(m, a, g) : b.call(null, m, a, g);
              }
              for (var q = D(h), p = wa.b(g) - 1; ; ) {
                if (!q || null != p && 0 === p) {
                  w(q) && 0 === p && (Db(a, d), Db(a, function() {
                    var a2 = Cg.b(g);
                    return n(a2) ? a2 : "...";
                  }()));
                  break;
                } else {
                  Db(a, d);
                  var z = y(q);
                  c = a;
                  h = g;
                  b.i ? b.i(z, c, h) : b.call(null, z, c, h);
                  var B = D(q);
                  c = p - 1;
                  q = B;
                  p = c;
                }
              }
            }
            return Db(a, e);
          } finally {
            ka = k;
          }
        }
        function Dg(a, b) {
          for (var c = w(b), d = null, e = 0, g = 0; ; ) {
            if (g < e) {
              var h = d.N(null, g);
              Db(a, h);
              g += 1;
            } else {
              if (c = w(c)) {
                d = c, Zc(d) ? (c = Ob(d), e = Qb(d), d = c, h = H(c), c = e, e = h) : (h = y(d), Db(a, h), c = D(d), d = null, e = 0), g = 0;
              } else {
                return null;
              }
            }
          }
        }
        var Eg = { '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t" };
        function Fg(a) {
          return [u('"'), u(a.replace(RegExp('[\\\\"\b\f\n\r	]', "g"), function(a2) {
            return Eg[a2];
          })), u('"')].join("");
        }
        function Gg(a, b, c) {
          if (null == a) {
            return Db(b, "nil");
          }
          if (void 0 === a) {
            return Db(b, "#<undefined>");
          }
          if (n(function() {
            var b2 = Hc(c, ua);
            return n(b2) ? (b2 = a ? a.h & 131072 || a.Fb ? true : a.h ? false : r(pb, a) : r(pb, a)) ? Oc(a) : b2 : b2;
          }())) {
            Db(b, "^");
            var d = Oc(a);
            Hg.i ? Hg.i(d, b, c) : Hg.call(null, d, b, c);
            Db(b, " ");
          }
          return null == a ? Db(b, "nil") : a.Jb ? a.Vb(a, b, c) : a && (a.h & 2147483648 || a.P) ? a.H(null, b, c) : (null == a ? null : a.constructor) === Boolean || "number" === typeof a ? Db(b, "" + u(a)) : null != a && a.constructor === Object ? (Db(b, "#js "), d = P.a(function(b2) {
            return new Q(null, 2, 5, R, [ud.b(b2), a[b2]], null);
          }, $c(a)), Ig.aa ? Ig.aa(d, Hg, b, c) : Ig.call(null, d, Hg, b, c)) : Ba(a) ? Bg(b, Hg, "#js [", " ", "]", c, a) : n("string" == typeof a) ? n(ra.b(c)) ? Db(b, Fg(a)) : Db(b, a) : Lc(a) ? Dg(b, xc(["#<", "" + u(a), ">"], 0)) : a instanceof Date ? (d = function(a2, b2) {
            for (var c2 = "" + u(a2); ; ) {
              if (H(c2) < b2) {
                c2 = [u("0"), u(c2)].join("");
              } else {
                return c2;
              }
            }
          }, Dg(b, xc(['#inst "', "" + u(a.getUTCFullYear()), "-", d(a.getUTCMonth() + 1, 2), "-", d(a.getUTCDate(), 2), "T", d(a.getUTCHours(), 2), ":", d(a.getUTCMinutes(), 2), ":", d(a.getUTCSeconds(), 2), ".", d(a.getUTCMilliseconds(), 3), "-", '00:00"'], 0))) : n(a instanceof RegExp) ? Dg(b, xc(['#"', a.source, '"'], 0)) : (a ? a.h & 2147483648 || a.P || (a.h ? 0 : r(Gb, a)) : r(Gb, a)) ? Hb(a, b, c) : Dg(b, xc(["#<", "" + u(a), ">"], 0));
        }
        function Hg(a, b, c) {
          var d = Jg.b(c);
          return n(d) ? (c = Jc.i(c, Kg, Gg), d.i ? d.i(a, b, c) : d.call(null, a, b, c)) : Gg(a, b, c);
        }
        function Ig(a, b, c, d) {
          return Bg(c, function(a2, c2, d2) {
            var k = ib(a2);
            b.i ? b.i(k, c2, d2) : b.call(null, k, c2, d2);
            Db(c2, " ");
            a2 = jb(a2);
            return b.i ? b.i(a2, c2, d2) : b.call(null, a2, c2, d2);
          }, "{", ", ", "}", d, w(a));
        }
        x.prototype.P = true;
        x.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        vd.prototype.P = true;
        vd.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        vf.prototype.P = true;
        vf.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        Ne.prototype.P = true;
        Ne.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        ye.prototype.P = true;
        ye.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        td.prototype.P = true;
        td.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        uc.prototype.P = true;
        uc.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        zf.prototype.P = true;
        zf.prototype.H = function(a, b, c) {
          return Ig(this, Hg, b, c);
        };
        xf.prototype.P = true;
        xf.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        Ce.prototype.P = true;
        Ce.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "[", " ", "]", c, this);
        };
        Hf.prototype.P = true;
        Hf.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "#{", " ", "}", c, this);
        };
        zd.prototype.P = true;
        zd.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        Gf.prototype.P = true;
        Gf.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        Q.prototype.P = true;
        Q.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "[", " ", "]", c, this);
        };
        nd.prototype.P = true;
        nd.prototype.H = function(a, b) {
          return Db(b, "()");
        };
        pa.prototype.P = true;
        pa.prototype.H = function(a, b, c) {
          return Ig(this, Hg, b, c);
        };
        Pf.prototype.P = true;
        Pf.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        Ff.prototype.P = true;
        Ff.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        md.prototype.P = true;
        md.prototype.H = function(a, b, c) {
          return Bg(b, Hg, "(", " ", ")", c, this);
        };
        var Lg = {}, Mg = function Mg2(b) {
          if (b ? b.zb : b) {
            return b.zb(b);
          }
          var c;
          c = Mg2[l(null == b ? null : b)];
          if (!c && (c = Mg2._, !c)) {
            throw t("IEncodeJS.-clj->js", b);
          }
          return c.call(null, b);
        };
        function Ng(a) {
          if (a ? n(n(null) ? null : a.yb) || (a.mb ? 0 : r(Lg, a)) : r(Lg, a)) {
            a = Mg(a);
          } else {
            if ("string" === typeof a || "number" === typeof a || a instanceof N) {
              a = Og.b ? Og.b(a) : Og.call(null, a);
            } else {
              var b = xc([a], 0);
              a = ma();
              if (Rc(b)) {
                a = "";
              } else {
                var c = u, d = new ia();
                a: {
                  var e = new Tb(d);
                  Hg(y(b), e, a);
                  for (var b = w(D(b)), g = null, h = 0, k = 0; ; ) {
                    if (k < h) {
                      var m = g.N(null, k);
                      Db(e, " ");
                      Hg(m, e, a);
                      k += 1;
                    } else {
                      if (b = w(b)) {
                        g = b, Zc(g) ? (b = Ob(g), h = Qb(g), g = b, m = H(b), b = h, h = m) : (m = y(g), Db(e, " "), Hg(m, e, a), b = D(g), g = null, h = 0), k = 0;
                      } else {
                        break a;
                      }
                    }
                  }
                }
                a = "" + c(d);
              }
            }
          }
          return a;
        }
        var Og = function Og2(b) {
          if (null == b) {
            return null;
          }
          if (b ? n(n(null) ? null : b.yb) || (b.mb ? 0 : r(Lg, b)) : r(Lg, b)) {
            return Mg(b);
          }
          if (b instanceof N) {
            return Lf(b);
          }
          if (Xc(b)) {
            var c = {};
            b = w(b);
            for (var d = null, e = 0, g = 0; ; ) {
              if (g < e) {
                var h = d.N(null, g), k = L(h, 0), h = L(h, 1);
                c[Ng(k)] = Og2(h);
                g += 1;
              } else {
                if (b = w(b)) {
                  Zc(b) ? (e = Ob(b), b = Qb(b), d = e, e = H(e)) : (e = y(b), d = L(e, 0), e = L(e, 1), c[Ng(d)] = Og2(e), b = D(b), d = null, e = 0), g = 0;
                } else {
                  break;
                }
              }
            }
            return c;
          }
          if (Sc(b)) {
            c = [];
            b = w(P.a(Og2, b));
            d = null;
            for (g = e = 0; ; ) {
              if (g < e) {
                k = d.N(null, g), c.push(k), g += 1;
              } else {
                if (b = w(b)) {
                  d = b, Zc(d) ? (b = Ob(d), g = Qb(d), d = b, e = H(b), b = g) : (b = y(d), c.push(b), b = D(d), d = null, e = 0), g = 0;
                } else {
                  break;
                }
              }
            }
            return c;
          }
          return b;
        }, Pg = {}, Qg = function Qg2(b, c) {
          if (b ? b.xb : b) {
            return b.xb(b, c);
          }
          var d;
          d = Qg2[l(null == b ? null : b)];
          if (!d && (d = Qg2._, !d)) {
            throw t("IEncodeClojure.-js->clj", b);
          }
          return d.call(null, b, c);
        };
        function Rg(a) {
          var b = xc([Sg, true], 0), c = cd(b) ? Id(Df, b) : b, d = Hc(c, Sg);
          return function(a2, c2, d2, k) {
            return function q(p) {
              return (p ? n(n(null) ? null : p.Nb) || (p.mb ? 0 : r(Pg, p)) : r(Pg, p)) ? Qg(p, Id(Ef, b)) : cd(p) ? yg(P.a(q, p)) : Sc(p) ? ce.a(null == p ? null : Qa(p), P.a(q, p)) : Ba(p) ? we(P.a(q, p)) : (null == p ? null : p.constructor) === Object ? ce.a(Xe, function() {
                return function(a3, b2, c3, d3) {
                  return function K(e) {
                    return new vd(null, function(a4, b3, c4, d4) {
                      return function() {
                        for (; ; ) {
                          var a5 = w(e);
                          if (a5) {
                            if (Zc(a5)) {
                              var b4 = Ob(a5), c5 = H(b4), g = new xd(Array(c5), 0);
                              return function() {
                                for (var a6 = 0; ; ) {
                                  if (a6 < c5) {
                                    var e2 = v.a(b4, a6), h2 = g, k2 = R, z;
                                    z = e2;
                                    z = d4.b ? d4.b(z) : d4.call(null, z);
                                    e2 = new Q(null, 2, 5, k2, [z, q(p[e2])], null);
                                    h2.add(e2);
                                    a6 += 1;
                                  } else {
                                    return true;
                                  }
                                }
                              }() ? Ad(g.ea(), K(Qb(a5))) : Ad(g.ea(), null);
                            }
                            var h = y(a5);
                            return F(new Q(null, 2, 5, R, [function() {
                              var a6 = h;
                              return d4.b ? d4.b(a6) : d4.call(null, a6);
                            }(), q(p[h])], null), K(ec(a5)));
                          }
                          return null;
                        }
                      };
                    }(a3, b2, c3, d3), null, null);
                  };
                }(a2, c2, d2, k)($c(p));
              }()) : p;
            };
          }(b, c, d, n(d) ? ud : u)(a);
        }
        var Tg = new N(null, "L", "L", -1038307519), Ug = new N(null, "M", "M", -1755742206), Vg = new N(null, "SK", "SK", -2019305726), Wg = new N(null, "I", "I", 1827140963), Xg = new N(null, "codex", "codex", -1831831581), Yg = new N(null, "CC", "CC", -1077285628), ua = new N(null, "meta", "meta", 1499536964), Zg = new N(null, "protect", "protect", -67966332), $g = new N(null, "beta", "beta", 455605892), va = new N(null, "dup", "dup", 556298533), ah = new N(null, "verb", "verb", -1492655803), bh = new N(null, "R", "R", -936662523), ch = new N(null, "AA", "AA", 2016584549), dh = new N(null, "O", "O", 795252742), S = new N(null, "A", "A", -1688942394), eh = new N(null, "F", "F", -1115543258), fh = new N(null, "second", "second", -444702010), T = new N(null, "continue", "continue", -207346553), gh = new N(null, "W", "W", -2035370425), hh = new N(null, "Q", "Q", 663320520), ih = new N(null, "0", "0", 351625802), jh = new N(null, "P", "P", 1668913291), kh = new N(null, "original", "original", -445386197), lh = new N(null, "D", "D", -8015893), mh = new N(null, "revisited", "revisited", -474682004), nh = new N(null, "refined", "refined", -448168596), U = new N(null, "B", "B", -1422503380), oh = new N(null, "TS", "TS", -510110068), ph = new N(null, "J", "J", 1394734828), qh = new N(null, "Z", "Z", 459124588), rh = new N(null, "KN", "KN", -509476499), Kg = new N(null, "fallback-impl", "fallback-impl", -1501286995), sh = new N(null, "T", "T", 175240877), th = new N(null, "C", "C", -173629587), qa = new N(null, "flush-on-newline", "flush-on-newline", -151457939), uh = new N(null, "similarity", "similarity", 1871163855), vh = new N(null, "intact", "intact", -1755370897), wh = new N(null, "KS", "KS", -1201182352), ra = new N(null, "readably", "readably", 1129599760), Cg = new N(null, "more-marker", "more-marker", -14717935), xh = new N(null, "BB", "BB", 1873237105), W = new N(null, "stop", "stop", -2140911342), yh = new N(null, "E", "E", 230849842), zh = new N(null, "G", "G", -738544397), wa = new N(null, "print-length", "print-length", 1931866356), Ah = new N(null, "Y", "Y", -560717356), Bh = new N(null, "minimum", "minimum", -1621006059), Ch = new N(null, "alpha", "alpha", -1574982441), Dh = new N(null, "symmetric", "symmetric", -960442568), Eh = new N(null, "TK", "TK", -906932264), Fh = new N(null, "X", "X", 1705996313), Gh = new N(null, "H", "H", -938148327), Hh = new N(null, "V", "V", -1169284006), Ih = new N(null, "first", "first", -644103046), Jh = new N(null, "KL", "KL", 1621356699), Jg = new N(null, "alt-impl", "alt-impl", 670969595), Kh = new N(null, "U", "U", 1362002044), Lh = new N(null, "S", "S", 1267293308), Mh = new N(null, "noun", "noun", 185846460), Sg = new N(null, "keywordize-keys", "keywordize-keys", 1310784252), Nh = new N(null, "N", "N", -640629860), X = new N(null, "K", "K", 711741), Oh = new N(null, "match", "match", 1220059550);
        function Ph(a, b, c) {
          if ("string" === typeof b) {
            return a.replace(new RegExp(String(b).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08"), "g"), c);
          }
          if (b instanceof RegExp) {
            return a.replace(new RegExp(b.source, "g"), c);
          }
          throw [u("Invalid match arg: "), u(b)].join("");
        }
        function Qh(a) {
          var b = new ia();
          for (a = w(a); ; ) {
            if (a) {
              b.append("" + u(y(a))), a = D(a), null != a && b.append("|");
            } else {
              return b.toString();
            }
          }
        }
        function Rh(a) {
          return a.toUpperCase();
        }
        function Sh(a) {
          return a.toLowerCase();
        }
        function Y(a, b, c) {
          b = 0 > b ? H(a) + b : b;
          return Id(u, Qd(c, Rd(b, a)));
        }
        function Th(a) {
          return ld(a, H(a) - 1);
        }
        function Uh(a, b) {
          var c = de(b);
          return Ka(function() {
            return function(a2, b2) {
              return Jd(Ph, a2, b2);
            };
          }(c), a, c);
        }
        function qi(a) {
          return Ph(a, /[^a-zA-Z]/, "");
        }
        function Z(a, b) {
          return null != zg(a, b);
        }
        function ri(a) {
          return P.a(y, Qf(fd, a));
        }
        function si(a, b) {
          var c;
          a: {
            c = [a];
            var d = c.length;
            if (d <= Ye) {
              for (var e = 0, g = Ib(Xe); ; ) {
                if (e < d) {
                  var h = e + 1, g = Lb(g, c[e], null), e = h;
                } else {
                  c = new Hf(null, Kb(g), null);
                  break a;
                }
              }
            } else {
              for (e = 0, g = Ib(Jf); ; ) {
                if (e < d) {
                  h = e + 1, g = Jb(g, c[e]), e = h;
                } else {
                  c = Kb(g);
                  break a;
                }
              }
            }
          }
          return dd(Nd(c, b));
        }
        var ti = Od(si);
        var ui;
        a: {
          for (var vi = Ib(Xe), wi = w("AEIOUYWHBPFVCSKGJQXZDTLMNR"), xi = w("000000DD111122222222334556"); ; ) {
            if (wi && xi) {
              var yi, zi = y(wi), Ai = y(xi);
              yi = Lb(vi, zi, Ai);
              var Bi = D(wi), Ci = D(xi), vi = yi, wi = Bi, xi = Ci;
            } else {
              ui = Kb(vi);
              break a;
            }
          }
        }
        function Di(a) {
          return ui.b ? ui.b(a) : ui.call(null, a);
        }
        function Ei(a) {
          return ld([u(a), u("000")].join(""), 4);
        }
        function Fi(a) {
          return Zd(function(a2) {
            return Ld("D", a2);
          }, P.a(Di, a));
        }
        function Gi(a, b) {
          return E.a(y(a), ui.b ? ui.b(b) : ui.call(null, b)) ? Rd(1, a) : a;
        }
        function Hi(a) {
          return Z(/W|K|CZ|WITZ/, a);
        }
        function Ii(a) {
          return Z(/^A|E|I|O|U|Y$/, a);
        }
        var Ji = Od(Z);
        function Ki(a, b) {
          return 0 < b && E.a("CHAE", Y(a, b, 4)) ? new Q(null, 3, 5, R, [X, Fh, 2], null) : n(function() {
            var c = 0 === b;
            return c ? (c = si(Y(a, b + 1, 5), new Q(null, 2, 5, R, ["HARAC", "HARIS"], null)), c = n(c) ? c : si(Y(a, b + 1, 3), new Q(null, 4, 5, R, ["HOR", "HYM", "HIA", "HEM"], null)), n(c) ? Ld("CHORE", Y(a, 0, 5)) : c) : c;
          }()) ? new Q(null, 3, 5, R, [X, X, 2], null) : n(function() {
            var c = si(Y(a, 0, 4), new Q(null, 2, 5, R, ["VAN ", "VON "], null));
            if (n(c) || (c = E.a("SCH", Y(a, 0, 3)))) {
              return c;
            }
            c = si(Y(a, b - 2, 6), new Q(null, 3, 5, R, ["ORCHES", "ARCHIT", "ORCHID"], null));
            if (n(c)) {
              return c;
            }
            c = si(Y(a, b + 2, 1), new Q(null, 2, 5, R, ["T", "S"], null));
            if (n(c)) {
              return c;
            }
            c = (c = 0 === b) ? c : si(Y(a, b - 1, 1), new Q(null, 4, 5, R, ["A", "O", "U", "E"], null));
            return n(c) ? si(Y(a, b + 2, 1), new Q(null, 10, 5, R, "LRNMBHFVW ".split(""), null)) : c;
          }()) ? new Q(null, 3, 5, R, [X, X, 2], null) : 0 < b ? new Q(null, 3, 5, R, [E.a("MC", Y(a, 0, 2)) ? X : Fh, X, 2], null) : new Q(null, 3, 5, R, [Fh, Fh, 2], null);
        }
        function Li(a, b) {
          return n(function() {
            var c = Z(/^I|E|H$/, Y(a, b + 2, 1));
            return n(c) ? Ld("HU", Y(a, b + 2, 2)) : c;
          }()) ? n(function() {
            var c = E.a(b, 1) && E.a("A", Y(a, b - 1, 1));
            return c ? c : Z(/^UCCE(E|S)$/, Y(a, b - 1, 5));
          }()) ? new Q(null, 3, 5, R, [wh, wh, 3], null) : new Q(null, 3, 5, R, [Fh, Fh, 3], null) : new Q(null, 3, 5, R, [X, X, 2], null);
        }
        function Mi(a, b) {
          var c;
          n(Z(/^ (C|Q|G)$/, Y(a, b + 1, 2))) ? c = new Q(null, 3, 5, R, [X, X, 3], null) : (c = Z(/^C|K|Q$/, Y(a, b + 1, 1)), c = n(c) ? Ca(si(Y(a, b + 1, 2), new Q(null, 2, 5, R, ["CE", "CI"], null))) : c, c = new Q(null, 3, 5, R, [X, X, n(c) ? 2 : 1], null));
          return c;
        }
        function Ni(a, b) {
          return n(function() {
            var c = 1 < b;
            return c && (c = Ii(Y(a, b - 2, 1)), n(c) && (c = E.a("ACH", Y(a, b - 1, 3)))) && (c = Ld("I", Y(a, b + 2, 1))) ? (c = Ld("E", Y(a, b + 2, 1))) ? c : Z(/^(B|M)ACHER$/, Y(a, b - 2, 6)) : c;
          }()) ? new Q(null, 3, 5, R, [X, X, 2], null) : 0 === b && E.a("CAESAR", Y(a, b, 6)) ? new Q(null, 3, 5, R, [Lh, Lh, 2], null) : E.a("CHIA", Y(a, b, 4)) ? new Q(null, 3, 5, R, [X, X, 2], null) : E.a("CH", Y(a, b, 2)) ? Ki(a, b) : E.a("CZ", Y(a, b, 2)) && Ld("WICZ", Y(a, b - 2, 4)) ? new Q(null, 3, 5, R, [Lh, Fh, 2], null) : E.a("CIA", Y(a, b + 1, 3)) ? new Q(null, 3, 5, R, [Fh, Fh, 3], null) : !E.a("CC", Y(a, b, 2)) || E.a(b, 1) || E.a("M", Y(a, 0, 1)) ? n(Z(/^C(K|G|Q)$/, Y(a, b, 2))) ? new Q(null, 3, 5, R, [X, X, 2], null) : n(Z(/^C(I|E|Y)$/, Y(a, b, 2))) ? new Q(null, 3, 5, R, [Lh, n(Z(/^CI(O|E|A)$/, Y(a, b, 3))) ? Fh : Lh, 2], null) : Mi(a, b) : Li(a, b);
        }
        function Oi(a, b) {
          var c;
          if (c = 2 < b) {
            c = (c = E.a("U", Y(a, b - 1, 1))) ? Z(/^C|G|L|R|T$/, Y(a, b - 3, 1)) : c;
          }
          return n(c) ? new Q(null, 3, 5, R, [eh, eh, 2], null) : 0 < b && Ld("I", Y(a, b - 1, 1)) ? new Q(null, 3, 5, R, [X, X, 2], null) : new Q(null, 3, 5, R, [null, null, 2], null);
        }
        function Pi(a, b) {
          return 0 < b && Ca(Ii(Y(a, b - 1, 1))) ? new Q(null, 3, 5, R, [X, X, 2], null) : 0 === b ? E.a("I", Y(a, b + 2, 1)) ? new Q(null, 3, 5, R, [ph, ph, 2], null) : new Q(null, 3, 5, R, [X, X, 2], null) : n(function() {
            var c = function() {
              var c2 = 1 < b;
              return c2 ? Z(/^B|H|D$/, Y(a, b - 2, 1)) : c2;
            }();
            if (n(c)) {
              return c;
            }
            c = function() {
              var c2 = 2 < b;
              return c2 ? Z(/^B|H|D$/, Y(a, b - 3, 1)) : c2;
            }();
            return n(c) ? c : (c = 3 < b) ? Z(/^B|H$/, Y(a, b - 4, 1)) : c;
          }()) ? new Q(null, 3, 5, R, [null, null, 2], null) : Oi(a, b);
        }
        function Qi(a, b) {
          var c;
          if (c = E.a(b, 1)) {
            c = Ii(Y(a, 0, 1)), c = n(c) ? Ca(Hi(a)) : c;
          }
          return n(c) ? new Q(null, 3, 5, R, [rh, Nh, 2], null) : Ld("EY", Y(a, b + 2, 2)) && Ld("Y", Y(a, b + 1, 1)) && Ca(Hi(a)) ? new Q(null, 3, 5, R, [Nh, rh, 2], null) : new Q(null, 3, 5, R, [rh, rh, 2], null);
        }
        function Ri(a, b) {
          var c;
          c = Z(/^V(A|O)N $/, Y(a, 0, 4));
          c = n(c) ? c : E.a("SCH", Y(a, 0, 3)) || E.a("ET", Y(a, b + 1, 2));
          return n(c) ? new Q(null, 3, 5, R, [X, X, 2], null) : E.a("IER ", Y(a, b + 1, 4)) ? new Q(null, 3, 5, R, [ph, ph, 2], null) : new Q(null, 3, 5, R, [ph, X, 2], null);
        }
        function Si(a, b) {
          return E.a("H", Y(a, b + 1, 1)) ? Pi(a, b) : E.a("N", Y(a, b + 1, 1)) ? Qi(a, b) : E.a("LI", Y(a, b + 1, 2)) && Ca(Hi(a)) ? new Q(null, 3, 5, R, [Jh, Tg, 2], null) : n(function() {
            var c = 0 === b;
            return c ? (c = E.a("Y", Y(a, b + 1, 1))) ? c : Z(/^(E(S|P|B|L|Y|I|R)|I(B|L|N|E))$/, Y(a, b + 1, 2)) : c;
          }()) ? new Q(null, 3, 5, R, [X, ph, 2], null) : n(function() {
            var c = E.a("ER", Y(a, b + 1, 2)) || E.a("Y", Y(a, b + 1, 1));
            if (c && (c = function() {
              var b2 = /^(D|R|M)ANGER$/, c2 = Y(a, 0, 6);
              return Ji.a ? Ji.a(b2, c2) : Ji.call(null, b2, c2);
            }(), n(c) && (c = function() {
              var c2 = /^E|I$/, d2 = Y(a, b - 1, 1);
              return Ji.a ? Ji.a(c2, d2) : Ji.call(null, c2, d2);
            }(), n(c)))) {
              var c = /^(R|O)GY$/, d = Y(a, b - 1, 3);
              return Ji.a ? Ji.a(c, d) : Ji.call(null, c, d);
            }
            return c;
          }()) ? new Q(null, 3, 5, R, [X, ph, 2], null) : n(function() {
            var c = Z(/^E|I|Y$/, Y(a, b + 1, 1));
            return n(c) ? c : Z(/^(A|O)GGI$/, Y(a, b - 1, 4));
          }()) ? Ri(a, b) : E.a("G", Y(a, b + 1, 1)) ? new Q(null, 3, 5, R, [X, X, 2], null) : new Q(null, 3, 5, R, [X, X, 1], null);
        }
        function Ti(a, b, c, d) {
          return n(function() {
            var e = function() {
              var d2 = E.a(c - 3, b);
              return d2 ? Z(/^(ILL(O|A)|ALLE)$/, Y(a, b - 1, 4)) : d2;
            }();
            if (n(e)) {
              return e;
            }
            e = function() {
              var b2 = Z(/^(A|O)S$/, Y(a, d - 1, 2));
              return n(b2) ? b2 : Z(/^A|O$/, Y(a, d, 1));
            }();
            return n(e) ? E.a("ALLE", Y(a, b - 1, 4)) : e;
          }()) ? new Q(null, 3, 5, R, [Tg, null, 2], null) : new Q(null, 3, 5, R, [Tg, Tg, 2], null);
        }
        function Ui(a, b, c) {
          var d = E.a("R", Y(a, b + 1, 1)) ? 2 : 1;
          return n(function() {
            var d2 = E.a(c, b);
            if (d2 && (d2 = Ca(Hi(a))) && (d2 = E.a("IE", Y(a, b - 2, 2)))) {
              var d2 = /^M(E|A)$/, g = Y(a, b - 4, 2);
              return Ji.a ? Ji.a(d2, g) : Ji.call(null, d2, g);
            }
            return d2;
          }()) ? new Q(null, 3, 5, R, [null, bh, d], null) : new Q(null, 3, 5, R, [bh, bh, d], null);
        }
        function Vi(a, b) {
          return E.a("H", Y(a, b + 2, 1)) ? n(Z(/^OO|ER|EN|UY|ED|EM$/, Y(a, b + 3, 2))) ? new Q(null, 3, 5, R, [n(Z(/^E(R|N)$/, Y(a, b + 3, 2))) ? Fh : Vg, Vg, 3], null) : new Q(null, 3, 5, R, [Fh, 0 === b && Ca(Ii(Y(a, 3, 1))) && Ld("W", Y(a, b + 3, 1)) ? Lh : Fh, 3], null) : n(Z(/^I|E|Y$/, Y(a, b + 2, 1))) ? new Q(null, 3, 5, R, [Lh, Lh, 3], null) : new Q(null, 3, 5, R, [Vg, Vg, 3], null);
        }
        function Wi(a, b, c) {
          return n(Z(/^(I|Y)SL$/, Y(a, b - 1, 3))) ? new Q(null, 3, 5, R, [null, null, 1], null) : 0 === b && E.a("SUGAR", Y(a, b, 5)) ? new Q(null, 3, 5, R, [Fh, Lh, 1], null) : E.a("SH", Y(a, b, 2)) ? n(Z(/^H(EIM|OEK|OLM|OLZ)$/, Y(a, b + 1, 4))) ? new Q(null, 3, 5, R, [Lh, Lh, 2], null) : new Q(null, 3, 5, R, [Fh, Fh, 2], null) : n(function() {
            var c2 = Z(/^SI(O|A)$/, Y(a, b, 3));
            return n(c2) ? c2 : E.a("SIAN", Y(a, b, 4));
          }()) ? new Q(null, 3, 5, R, [Lh, n(Hi(a)) ? Lh : Fh, 3], null) : n(function() {
            var c2;
            c2 = (c2 = 0 === b) ? Z(/^M|N|L|W$/, Y(a, b + 1, 1)) : c2;
            return n(c2) ? c2 : E.a("Z", Y(a, b + 1, 1));
          }()) ? new Q(null, 3, 5, R, [Lh, Fh, E.a("Z", Y(a, b + 1, 1)) ? 2 : 1], null) : E.a("SC", Y(a, b, 2)) ? Vi(a, b) : new Q(null, 3, 5, R, [n(function() {
            var d = E.a(c, b);
            return d ? Z(/^(A|O)I$/, Y(a, b - 2, 2)) : d;
          }()) ? null : Lh, Lh, n(Z(/^S|Z$/, Y(a, b + 1, 1))) ? 2 : 1], null);
        }
        function Xi(a) {
          return Ag([u("("), u(Qh(a)), u(")$")].join(""));
        }
        var Yi = Xi(xc("ational tional enci anci izer bli alli entli ousli ization ation ator alism iveness fulness ousness aliti iviti biliti logi".split(" "), 0)), Zi = Xi(xc("icate ative alize iciti ical ful ness".split(" "), 0)), $i = Xi(xc("al ance ence er ic able ible ant ement ment ent ou ism ate iti ous ive ize".split(" "), 0)), aj = Kc("izer biliti fulness iveness logi alli ousness bli alism aliti ator ation anci ational tional iviti ization enci".split(" "), "ize ble ful ive log al ous ble al al ate ate ance ate tion ive ize ence".split(" ")), bj = new pa(null, 7, "icate ic ative  alize al iciti ic ical ic ful  ness ".split(" "), null), cj = [u("[^aeiou]"), u("[^aeiou]"), u("*")].join(""), dj = [u("[aeiouy]"), u("[aeiouy]"), u("*")].join("");
        function ej(a) {
          return function(b) {
            return Z(Ag(a), b);
          };
        }
        var fj = ej([u("^("), u(cj), u(")?"), u(dj), u(cj)].join("")), gj = ej([u("^("), u(cj), u(")?"), u(dj), u(cj), u("("), u(dj), u(")?$")].join("")), hj = ej([u("^("), u(cj), u(")?"), u(dj), u(cj), u(dj), u(cj)].join("")), ij = ej([u("^("), u(cj), u(")?"), u("[aeiouy]")].join("")), jj = ej([u("^"), u(cj), u("[aeiouy]"), u("[^aeiouwxy]$")].join(""));
        function kj(a, b) {
          var c = zg(a, b), d = L(c, 0), e = L(c, 1);
          null != c ? (c = "" + u(d), d = b.lastIndexOf(c), c = 0 > d ? b : [u(ld(b, d)), u(kd(b, d + H(c)))].join(""), e = new Q(null, 2, 5, R, [c, e], null)) : e = new Q(null, 2, 5, R, [null, null], null);
          return e;
        }
        function lj(a, b, c) {
          var d = kj(b, a);
          b = L(d, 0);
          d = L(d, 1);
          return n(n(b) ? fj.b ? fj.b(b) : fj.call(null, b) : b) ? [u(b), u(Hc(c, d))].join("") : a;
        }
        var mj = new pa(null, 2, [kh, M(/e$/, "", /^(cou|rou|tou|enou|trou)gh/, "$12f", /^gn/, "2n", /^mb/, "m2", /cq/, "2q", /ci/, "si", /ce/, "se", /cy/, "sy", /tch/, "2ch", /c/, "k", /q/, "k", /x/, "k", /v/, "f", /dg/, "2g", /tio/, "sio", /tia/, "sia", /d/, "t", /ph/, "fh", /b/, "p", /sh/, "s2", /z/, "s", /^[aieou]/, "A", /[aeiou]/, "3", /i/, "y", /^y3/, "Y3", /^y/, "A", /y/, "3", /3gh3/, "3kh3", /gh/, "22", /g/, "k", /s+/, "S", /t+/, "T", /p+/, "P", /k+/, "K", /f+/, "F", /m+/, "M", /n+/, "N", /w3/, "W3", /wh3/, "Wh3", /w$/, "3", /w/, "2", /^h/, "A", /h/, "2", /r3/, "R3", /r$/, "3", /r/, "2", /l3/, "L3", /l$/, "3", /l/, "2", /2/, "", /3$/, "A", /3/, ""), mh, M(/e$/, "", /^(cou|rou|tou|enou|trou)gh/, "$12f", /^gn/, "2n", /mb$/, "mb", /cq/, "2q", /c([iey])/, "s", /tch/, "2ch", /[cqx]/, "k", /v/, "f", /dg/, "2g", /ti([oa])/, "si", /d/, "t", /ph/, "fh", /b/, "p", /sh/, "s2", /z/, "s", /^[aeiou]/, "A", /[aeiou]/, "3", /j/, "y", /^y3/, "Y3", /^y/, "A", /y/, "3", /3gh3/, "3kh3", /gh/, "22", /g/, "k", /s+/, "S", /t+/, "T", /p+/, "P", /k+/, "K", /f+/, "F", /m+/, "M", /n+/, "N", /w3/, "W3", /wh3/, "Wh3", /w$/, "3", /w/, "2", /^h/, "A", /h/, "2", /r3/, "R3", /r$/, "3", /r/, "2", /l3/, "L3", /l$/, "3", /l/, "2", /2/, "", /3$/, "A", /3/, "")], null);
        function nj(a, b) {
          var c = qi(Sh(a)), c = Uh(c, mj.b ? mj.b(b) : mj.call(null, b));
          return ld([u(c), u(Id(u, Ud(10, "1")))].join(""), 10);
        }
        var oj = function oj2() {
          switch (arguments.length) {
            case 1:
              return oj2.b(arguments[0]);
            case 2:
              return oj2.a(arguments[0], arguments[1]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        };
        oj.b = function(a) {
          return nj(a, kh);
        };
        oj.a = function(a, b) {
          return nj(a, b);
        };
        oj.v = 2;
        function pj(a) {
          return $d(xa, a);
        }
        function qj(a, b) {
          return de(Yd.a(a, Fd.a(b, Ud(H(a) - H(b), null))));
        }
        function rj(a) {
          return Zd(function(a2) {
            return Ld(y(a2), Cc(a2));
          }, a);
        }
        function sj(a) {
          a = qi(Rh(a));
          a = Jd(u, y(a), Ph(Id(u, Rd(1, a)), /[AEIOU]/, ""));
          a = ri(a);
          var b = H(a) - 3;
          return Id(u, Fd.a(Qd(3, a), Sd(3 < b ? 3 : b, a)));
        }
        var tj = new pa(null, 2, [kh, new pa(null, 2, [Ih, M(/JR$/, "", /SR$/, "", /^MAC/, "MCC", /^KN/, "NN", /^K/, "C", /^(PH|PF)/, "FF", /^SCH/, "SSS", /(EE|IE)$/, "Y", /(DT|RT|RD|NT|ND)$/, "D"), fh, M(/EV/, "AF", /[EIOU]/, "A", /Q/, "G", /Z/, "S", /(M|KN)/, "N", /K/, "C", /SCH/, "SSS", /PH/, "FF", /([^A])H/, "$1", /(.)H[^A]/, "$1", /AW/, "A", /S$/, "", /AY$/, "Y", /A$/, "")], null), nh, new pa(null, 2, [Ih, M(/JR$/, "", /SR$/, "", /(S|Z)$/, "", /MAC/, "MC", /PH/, "F", /IX$/, "IC", /EX$/, "EC", /(YE|EE|IE)/, "Y", /(DT|RT|RD|NT|ND)$/, "D", /(.+)EV/, "$1EF"), fh, M(/([AEIOU]+)W/, "$1", /[EIOU]/, "A", /AA+/, "A", /GHT/, "GT", /DG/, "G", /PH/, "F", /(.+)HA/, "$1A", /A+H/, "A", /KN/, "N", /K/, "C", /(.+)M/, "$1N", /(.+)Q/, "$1G", /(SH|SCH)/, "S", /YW/, "Y", /(.+)Y(.+)/, "$1A$2", /WR/, "R", /(.+)Z/, "$1S", /AY$/, "Y", /A+$/, "", /^\w/, "")], null)], null);
        function uj(a, b) {
          return ri(Uh(a, b));
        }
        function vj(a, b) {
          return (tj.b ? tj.b(a) : tj.call(null, a)).call(null, b);
        }
        function wj(a) {
          return function(b) {
            b = qi(fa(Rh(b)));
            var c = vj(a, Ih);
            b = Uh(b, c);
            return Id(u, Fd.a(Qd(1, b), uj(E.a(a, kh) ? Id(u, Rd(1, b)) : b, vj(a, fh))));
          };
        }
        var xj = new pa(null, 2, [kh, wj(kh), nh, wj(nh)], null), yj = function yj2() {
          switch (arguments.length) {
            case 1:
              return yj2.b(arguments[0]);
            case 2:
              return yj2.a(arguments[0], arguments[1]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        };
        yj.b = function(a) {
          return (xj.b ? xj.b(kh) : xj.call(null, kh)).call(null, a);
        };
        yj.a = function(a, b) {
          var c = ud.b(b);
          return (xj.b ? xj.b(c) : xj.call(null, c)).call(null, a);
        };
        yj.v = 2;
        var zj = M(/([bcdfhjklmnpqrstvwxyz])\1+/, "$1", /^ae/, "E", /^[gkp]n/, "N", /^wr/, "R", /^x/, "S", /^wh/, "W", /mb$/, "M", /(?!^)sch/, "SK", /th/, "0", /t?ch|sh/, "X", /c(?=ia)/, "X", /[st](?=i[ao])/, "X", /s?c(?=[iey])/, "S", /[cq]/, "K", /dg(?=[iey])/, "J", /d/, "T", /g(?=h[^aeiou])/, "", /gn(ed)?/, "N", /([^g]|^)g(?=[iey])/, "$1J", /g+/, "K", /ph/, "F", /([aeiou])h(?=\b|[^aeiou])/, "$1", /[wy](?![aeiou])/, "", /z/, "S", /v/, "F", /(?!^)[aeiou]+/, "");
        function Aj(a) {
          return Pd(function(b, c) {
            return new Q(null, 3, 5, R, [Hc(a, b - 1), c, Hc(a, b + 1)], null);
          }, a);
        }
        function Bj(a, b) {
          return n(function() {
            var c;
            c = (c = null == a) ? si(b, M("A", "H", "K", "L", "O", "Q", "R", "U", "X")) : c;
            if (n(c)) {
              return c;
            }
            c = si(b, M("A", "H", "K", "O", "Q", "U", "X"));
            return n(c) ? (c = M("S", "Z"), ti.a ? ti.a(a, c) : ti.call(null, a, c)) : c;
          }()) ? 4 : 8;
        }
        function Cj(a) {
          var b = y(a), c = Cc(a);
          a = Dc(a);
          return n(si(c, M("A", "E", "I", "O", "U", "J", "Y"))) ? 0 : E.a("H", c) ? null : n(si(c, M("B", "P"))) ? 1 : n(si(c, M("D", "T"))) ? n(si(a, M("C", "S", "Z"))) ? 8 : 2 : n(si(c, M("F", "V", "W"))) ? 3 : n(si(c, M("G", "K", "Q"))) ? 4 : E.a("C", c) ? Bj(b, a) : E.a("X", c) ? n(si(b, M("C", "Q", "K"))) ? 8 : 48 : E.a("L", c) ? 5 : n(si(c, M("M", "N"))) ? 6 : E.a("R", c) ? 7 : n(si(c, M("S", "Z"))) ? 8 : null;
        }
        ea("clj_fuzzy.phonetics.metaphone", function(a) {
          a = Sh(qi(a));
          return Rh(Uh(a, zj));
        });
        ea("clj_fuzzy.phonetics.double_metaphone", function(a) {
          for (var b = [u(Rh(a)), u("     ")].join(""), c = n(Z(/^GN|KN|PN|WR|PS$/, Y(b, 0, 2))) ? 1 : 0, d = H(a), e = d - 1, g = c, h = Fc, k = Fc; ; ) {
            if (g > d || 4 <= H(h) && 4 <= H(k)) {
              return new Q(null, 2, 5, R, [Y(Id(u, P.a(Lf, h)), 0, 4), Y(Id(u, P.a(Lf, k)), 0, 4)], null);
            }
            var m, q = b, p = g, z = d, B = e, A = Y(q, p, 1), G;
            if (n(Ii(A))) {
              G = 0 === p ? new Q(null, 3, 5, R, [S, S, 1], null) : new Q(null, 3, 5, R, [null, null, 1], null);
            } else {
              var I;
              if (E.a("B", A)) {
                I = new Q(null, 3, 5, R, [jh, jh, E.a("B", Y(q, p + 1, 1)) ? 2 : 1], null);
              } else {
                var K;
                if (E.a("\xC7", A)) {
                  K = new Q(null, 3, 5, R, [Lh, Lh, 1], null);
                } else {
                  var O;
                  if (E.a("C", A)) {
                    O = Ni(q, p);
                  } else {
                    var V;
                    if (E.a("D", A)) {
                      var aa = q, Fa = p;
                      V = E.a("DG", Y(aa, Fa, 2)) ? n(Z(/^I|E|Y$/, Y(aa, Fa + 2, 1))) ? new Q(null, 3, 5, R, [ph, ph, 3], null) : new Q(null, 3, 5, R, [Eh, Eh, 2], null) : new Q(null, 3, 5, R, [sh, sh, n(Z(/^D(T|D)$/, Y(aa, Fa, 2))) ? 2 : 1], null);
                    } else {
                      var Ja;
                      if (E.a("F", A)) {
                        Ja = new Q(null, 3, 5, R, [eh, eh, E.a("F", Y(q, p + 1, 1)) ? 2 : 1], null);
                      } else {
                        var J;
                        if (E.a("G", A)) {
                          J = Si(q, p);
                        } else {
                          var ef;
                          if (E.a("H", A)) {
                            var na = q, oa = p, sa = void 0, ta = void 0, ya = 0 === oa, ta = ya ? ya : Ii(Y(na, oa - 1, 1)), sa = n(ta) ? Ii(Y(na, oa + 1, 1)) : ta;
                            ef = n(sa) ? new Q(null, 3, 5, R, [Gh, Gh, 2], null) : new Q(null, 3, 5, R, [null, null, 1], null);
                          } else {
                            var za;
                            if (E.a("J", A)) {
                              var Aa = q, Ea = p, Ya = B, Ta;
                              if (E.a("JOSE", Y(Aa, Ea, 4)) || E.a("SAN ", Y(Aa, 0, 4))) {
                                var gb = Aa;
                                Ta = 0 === Ea && E.a(" ", Y(gb, Ea + 4, 1)) || E.a("SAN ", Y(gb, 0, 4)) ? new Q(null, 3, 5, R, [Gh, Gh, 1], null) : new Q(null, 3, 5, R, [ph, Gh, 1], null);
                              } else {
                                var Pa = Aa, Ua = Ea, Eb = Ya, yb = E.a("J", Y(Pa, Ua + 1, 1)) ? 2 : 1, Fb = void 0;
                                if (0 === Ua && Ld("JOSE", Y(Pa, Ua, 4))) {
                                  Fb = new Q(null, 3, 5, R, [ph, S, yb], null);
                                } else {
                                  var Pb = void 0;
                                  var tc = Ii(Y(Pa, Ua - 1, 1));
                                  if (n(tc)) {
                                    var Uc = Ca(Hi(Pa)), Pb = Uc ? Z(/^A|O$/, Y(Pa, Ua + 1, 1)) : Uc;
                                  } else {
                                    Pb = tc;
                                  }
                                  var Vc;
                                  if (n(Pb)) {
                                    Vc = new Q(null, 3, 5, R, [ph, Gh, yb], null);
                                  } else {
                                    var pe = Pa, Rf = Ua, Sf = yb, Tf = void 0;
                                    if (E.a(Eb, Rf)) {
                                      Tf = new Q(null, 3, 5, R, [ph, null, Sf], null);
                                    } else {
                                      var Uf = void 0;
                                      var Vf = void 0, Vh = /^L|T|K|S|N|M|B|Z$/, Wh = Y(pe, Rf + 1, 1), Vf = Ji.a ? Ji.a(Vh, Wh) : Ji.call(null, Vh, Wh);
                                      if (n(Vf)) {
                                        var Xh = /^S|K|L$/, Yh = Y(pe, Rf - 1, 1), Uf = Ji.a ? Ji.a(Xh, Yh) : Ji.call(null, Xh, Yh);
                                      } else {
                                        Uf = Vf;
                                      }
                                      Tf = n(Uf) ? new Q(null, 3, 5, R, [ph, ph, Sf], null) : new Q(null, 3, 5, R, [null, null, Sf], null);
                                    }
                                    Vc = Tf;
                                  }
                                  Fb = Vc;
                                }
                                Ta = Fb;
                              }
                              za = Ta;
                            } else {
                              var Wf;
                              if (E.a("K", A)) {
                                Wf = new Q(null, 3, 5, R, [X, X, E.a("K", Y(q, p + 1, 1)) ? 2 : 1], null);
                              } else {
                                var Xf;
                                if (E.a("L", A)) {
                                  var Zh = q, $h = p, Oj = z, Pj = B;
                                  Xf = E.a("L", Y(Zh, $h + 1, 1)) ? Ti(Zh, $h, Oj, Pj) : new Q(null, 3, 5, R, [Tg, Tg, 1], null);
                                } else {
                                  var Yf;
                                  if (E.a("M", A)) {
                                    var Zf = q, Oe = p, Qj = B;
                                    Yf = E.a("UMB", Y(Zf, Oe - 1, 3)) && (E.a(Qj - 1, Oe) || E.a("ER", Y(Zf, Oe + 2, 2))) || E.a("M", Y(Zf, Oe + 1, 1)) ? new Q(null, 3, 5, R, [Ug, Ug, 2], null) : new Q(null, 3, 5, R, [Ug, Ug, 1], null);
                                  } else {
                                    var $f;
                                    if (E.a("N", A)) {
                                      $f = new Q(null, 3, 5, R, [Nh, Nh, E.a("N", Y(q, p + 1, 1)) ? 2 : 1], null);
                                    } else {
                                      var ag;
                                      if (E.a("\xD1", A)) {
                                        ag = new Q(null, 3, 5, R, [Nh, Nh, 1], null);
                                      } else {
                                        var bg;
                                        if (E.a("P", A)) {
                                          var ai = q, bi = p;
                                          bg = E.a("H", Y(ai, bi + 1, 1)) ? new Q(null, 3, 5, R, [eh, eh, 2], null) : new Q(null, 3, 5, R, [jh, jh, n(Z(/^P|B$/, Y(ai, bi + 1, 1))) ? 2 : 1], null);
                                        } else {
                                          var cg;
                                          if (E.a("Q", A)) {
                                            cg = new Q(null, 3, 5, R, [X, X, E.a("Q", Y(q, p + 1, 1)) ? 2 : 1], null);
                                          } else {
                                            var dg;
                                            if (E.a("R", A)) {
                                              dg = Ui(q, p, B);
                                            } else {
                                              var eg;
                                              if (E.a("S", A)) {
                                                eg = Wi(q, p, B);
                                              } else {
                                                var fg;
                                                if (E.a("T", A)) {
                                                  var od = q, pd = p, gg;
                                                  if (E.a("TION", Y(od, pd, 4))) {
                                                    gg = new Q(null, 3, 5, R, [Fh, Fh, 3], null);
                                                  } else {
                                                    var hg;
                                                    if (n(Z(/^T(IA|CH)$/, Y(od, pd, 3)))) {
                                                      hg = new Q(null, 3, 5, R, [Fh, Fh, 3], null);
                                                    } else {
                                                      var ig;
                                                      if (E.a("TH", Y(od, pd, 2)) || E.a("TTH", Y(od, pd, 3))) {
                                                        var jg = od, kg = void 0;
                                                        var ci = Z(/^(O|A)M$/, Y(jg, pd + 2, 2));
                                                        if (n(ci)) {
                                                          kg = ci;
                                                        } else {
                                                          var di = Z(/^V(A|O)N /, Y(jg, 0, 4)), kg = n(di) ? di : E.a("SCH", Y(jg, 0, 3));
                                                        }
                                                        ig = n(kg) ? new Q(null, 3, 5, R, [sh, sh, 2], null) : new Q(null, 3, 5, R, [ih, sh, 2], null);
                                                      } else {
                                                        ig = new Q(null, 3, 5, R, [sh, sh, n(Z(/^T|D$/, Y(od, pd + 1, 1))) ? 2 : 1], null);
                                                      }
                                                      hg = ig;
                                                    }
                                                    gg = hg;
                                                  }
                                                  fg = gg;
                                                } else {
                                                  var lg;
                                                  if (E.a("V", A)) {
                                                    lg = new Q(null, 3, 5, R, [eh, eh, E.a("V", Y(q, p + 1, 1)) ? 2 : 1], null);
                                                  } else {
                                                    var Pe;
                                                    if (E.a("W", A)) {
                                                      var qd = q, rd = p, Rj = B;
                                                      if (E.a("WR", Y(qd, rd, 2))) {
                                                        Pe = new Q(null, 3, 5, R, [bh, bh, 2], null);
                                                      } else {
                                                        var mg, ng = qd, Qe = rd, og = void 0;
                                                        var ei = 0 === Qe;
                                                        if (ei) {
                                                          var fi = Ii(Y(ng, Qe + 1, 1)), og = n(fi) ? fi : E.a("WH", Y(ng, Qe, 2));
                                                        } else {
                                                          og = ei;
                                                        }
                                                        mg = n(og) ? new Q(null, 2, 5, R, ["A", n(Ii(Y(ng, Qe + 1, 1))) ? "F" : "A"], null) : new Q(null, 2, 5, R, [null, null], null);
                                                        var pg = L(mg, 0), qg = L(mg, 1), rg = void 0;
                                                        var sg = void 0, gi = E.a(Rj, rd), sg = gi ? Ii(Y(qd, rd - 1, 1)) : gi;
                                                        if (n(sg)) {
                                                          rg = sg;
                                                        } else {
                                                          var hi = E.a("SCH", Y(qd, 0, 3)), rg = hi ? hi : Z(/^EWSKI|EWSKY|OWSKI|OWSKY$/, Y(qd, rd - 1, 5));
                                                        }
                                                        var tg;
                                                        if (n(rg)) {
                                                          var Sj = qg;
                                                          tg = new Q(null, 3, 5, R, [ud.b(pg), ud.b([u(Sj), u("F")].join("")), 1], null);
                                                        } else {
                                                          var ug;
                                                          if (n(Z(/^WI(C|T)Z$/, Y(qd, rd, 4)))) {
                                                            var Tj = qg;
                                                            ug = new Q(null, 3, 5, R, [ud.b([u(pg), u("TS")].join("")), ud.b([u(Tj), u("FX")].join("")), 4], null);
                                                          } else {
                                                            ug = new Q(null, 3, 5, R, [ud.b(pg), ud.b(qg), 1], null);
                                                          }
                                                          tg = ug;
                                                        }
                                                        Pe = tg;
                                                      }
                                                    } else {
                                                      var Re;
                                                      if (E.a("X", A)) {
                                                        var vg = q, Vd = p, Uj = B;
                                                        if (0 === Vd) {
                                                          Re = new Q(null, 3, 5, R, [Lh, Lh, 1], null);
                                                        } else {
                                                          var ii = n(Z(/^C|X$/, Y(vg, Vd + 1, 1))) ? 2 : 1, wg = void 0;
                                                          var ji = E.a(Uj, Vd);
                                                          if (ji) {
                                                            var ki = Z(/^(I|E)AU$/, Y(vg, Vd - 3, 3)), wg = n(ki) ? ki : Z(/^(A|O)U$/, Y(vg, Vd - 2, 2));
                                                          } else {
                                                            wg = ji;
                                                          }
                                                          Re = Ca(wg) ? new Q(null, 3, 5, R, [wh, wh, ii], null) : new Q(null, 3, 5, R, [null, null, ii], null);
                                                        }
                                                      } else {
                                                        var Se;
                                                        if (E.a("Z", A)) {
                                                          var Wd = q, Xd = p;
                                                          if (E.a("H", Y(Wd, Xd + 1, 1))) {
                                                            Se = new Q(null, 3, 5, R, [ph, ph, 2], null);
                                                          } else {
                                                            var li = E.a("Z", Y(Wd, Xd + 1, 1)) ? 2 : 1, xg = void 0;
                                                            var mi = Z(/^Z(O|I|A)$/, Y(Wd, Xd + 1, 2));
                                                            if (n(mi)) {
                                                              xg = mi;
                                                            } else {
                                                              var ni = Hi(Wd), xg = n(ni) ? 0 < Xd && Ld("T", Y(Wd, Xd - 1, 1)) : ni;
                                                            }
                                                            Se = n(xg) ? new Q(null, 3, 5, R, [Lh, oh, li], null) : new Q(null, 3, 5, R, [Lh, Lh, li], null);
                                                          }
                                                        } else {
                                                          Se = new Q(null, 3, 5, R, [null, null, 1], null);
                                                        }
                                                        Re = Se;
                                                      }
                                                      Pe = Re;
                                                    }
                                                    lg = Pe;
                                                  }
                                                  fg = lg;
                                                }
                                                eg = fg;
                                              }
                                              dg = eg;
                                            }
                                            cg = dg;
                                          }
                                          bg = cg;
                                        }
                                        ag = bg;
                                      }
                                      $f = ag;
                                    }
                                    Yf = $f;
                                  }
                                  Xf = Yf;
                                }
                                Wf = Xf;
                              }
                              za = Wf;
                            }
                            ef = za;
                          }
                          J = ef;
                        }
                        Ja = J;
                      }
                      V = Ja;
                    }
                    O = V;
                  }
                  K = O;
                }
                I = K;
              }
              G = I;
            }
            m = G;
            var oi = L(m, 0), pi = L(m, 1), Vj = L(m, 2) + g, Wj = null == oi ? h : Ec.a(h, oi), Xj = null == pi ? k : Ec.a(k, pi), g = Vj, h = Wj, k = Xj;
          }
        });
        ea("clj_fuzzy.phonetics.soundex", function(a) {
          a = qi(Rh(a));
          var b = y(a), c = Fi(Id(u, Rd(1, a))), d = Gi(c, b);
          return Ei([u(b), u(Id(u, Zd(function() {
            return function(a2) {
              return Ld("0", a2);
            };
          }(a, b, c, d), ri(d))))].join(""));
        });
        ea("clj_fuzzy.phonetics.nysiis", yj);
        ea("clj_fuzzy.phonetics.caverphone", oj);
        ea("clj_fuzzy.phonetics.mra_codex", sj);
        ea("clj_fuzzy.phonetics.cologne", function(a) {
          a = Aj(qi(Uh(Rh(a), M(/\u00c4/, "A", /\u00d6/, "O", /\u00dc/, "U", /\u00df/, "SS", /PH/, "F"))));
          return Id(u, $d(jd, ri($d(xa, P.a(Cj, a)))));
        });
        var Dj = M(/alistically$/, U, /arizability$/, S, /izationally$/, U, /antialness$/, S, /arisations$/, S, /arizations$/, S, /entialness$/, S, /allically$/, th, /antaneous$/, S, /antiality$/, S, /arisation$/, S, /arization$/, S, /ationally$/, U, /ativeness$/, S, /eableness$/, yh, /entations$/, S, /entiality$/, S, /entialize$/, S, /entiation$/, S, /ionalness$/, S, /istically$/, S, /itousness$/, S, /izability$/, S, /izational$/, S, /ableness$/, S, /arizable$/, S, /entation$/, S, /entially$/, S, /eousness$/, S, /ibleness$/, S, /icalness$/, S, /ionalism$/, S, /ionality$/, S, /ionalize$/, S, /iousness$/, S, /izations$/, S, /lessness$/, S, /ability$/, S, /aically$/, S, /alistic$/, U, /alities$/, S, /ariness$/, yh, /aristic$/, S, /arizing$/, S, /ateness$/, S, /atingly$/, S, /ational$/, U, /atively$/, S, /ativism$/, S, /elihood$/, yh, /encible$/, S, /entally$/, S, /entials$/, S, /entiate$/, S, /entness$/, S, /fulness$/, S, /ibility$/, S, /icalism$/, S, /icalist$/, S, /icality$/, S, /icalize$/, S, /ication$/, zh, /icianry$/, S, /ination$/, S, /ingness$/, S, /ionally$/, S, /isation$/, S, /ishness$/, S, /istical$/, S, /iteness$/, S, /iveness$/, S, /ivistic$/, S, /ivities$/, S, /ization$/, eh, /izement$/, S, /oidally$/, S, /ousness$/, S, /aceous$/, S, /acious$/, U, /action$/, zh, /alness$/, S, /ancial$/, S, /ancies$/, S, /ancing$/, U, /ariser$/, S, /arized$/, S, /arizer$/, S, /atable$/, S, /ations$/, U, /atives$/, S, /eature$/, qh, /efully$/, S, /encies$/, S, /encing$/, S, /ential$/, S, /enting$/, th, /entist$/, S, /eously$/, S, /ialist$/, S, /iality$/, S, /ialize$/, S, /ically$/, S, /icance$/, S, /icians$/, S, /icists$/, S, /ifully$/, S, /ionals$/, S, /ionate$/, lh, /ioning$/, S, /ionist$/, S, /iously$/, S, /istics$/, S, /izable$/, yh, /lessly$/, S, /nesses$/, S, /oidism$/, S, /acies$/, S, /acity$/, S, /aging$/, U, /aical$/, S, /alist$/, S, /alism$/, U, /ality$/, S, /alize$/, S, /allic$/, xh, /anced$/, U, /ances$/, U, /antic$/, th, /arial$/, S, /aries$/, S, /arily$/, S, /arity$/, U, /arize$/, S, /aroid$/, S, /ately$/, S, /ating$/, Wg, /ation$/, U, /ative$/, S, /ators$/, S, /atory$/, S, /ature$/, yh, /early$/, Ah, /ehood$/, S, /eless$/, S, /elity$/, S, /ement$/, S, /enced$/, S, /ences$/, S, /eness$/, yh, /ening$/, yh, /ental$/, S, /ented$/, th, /ently$/, S, /fully$/, S, /ially$/, S, /icant$/, S, /ician$/, S, /icide$/, S, /icism$/, S, /icist$/, S, /icity$/, S, /idine$/, Wg, /iedly$/, S, /ihood$/, S, /inate$/, S, /iness$/, S, /ingly$/, U, /inism$/, ph, /inity$/, Yg, /ional$/, S, /ioned$/, S, /ished$/, S, /istic$/, S, /ities$/, S, /itous$/, S, /ively$/, S, /ivity$/, S, /izers$/, eh, /izing$/, eh, /oidal$/, S, /oides$/, S, /otide$/, S, /ously$/, S, /able$/, S, /ably$/, S, /ages$/, U, /ally$/, U, /ance$/, U, /ancy$/, U, /ants$/, U, /aric$/, S, /arly$/, X, /ated$/, Wg, /ates$/, S, /atic$/, U, /ator$/, S, /ealy$/, Ah, /edly$/, yh, /eful$/, S, /eity$/, S, /ence$/, S, /ency$/, S, /ened$/, yh, /enly$/, yh, /eous$/, S, /hood$/, S, /ials$/, S, /ians$/, S, /ible$/, S, /ibly$/, S, /ical$/, S, /ides$/, Tg, /iers$/, S, /iful$/, S, /ines$/, Ug, /ings$/, Nh, /ions$/, U, /ious$/, S, /isms$/, U, /ists$/, S, /itic$/, Gh, /ized$/, eh, /izer$/, eh, /less$/, S, /lily$/, S, /ness$/, S, /ogen$/, S, /ward$/, S, /wise$/, S, /ying$/, U, /yish$/, S, /acy$/, S, /age$/, U, /aic$/, S, /als$/, xh, /ant$/, U, /ars$/, dh, /ary$/, eh, /ata$/, S, /ate$/, S, /eal$/, Ah, /ear$/, Ah, /ely$/, yh, /ene$/, yh, /ent$/, th, /ery$/, yh, /ese$/, S, /ful$/, S, /ial$/, S, /ian$/, S, /ics$/, S, /ide$/, Tg, /ied$/, S, /ier$/, S, /ies$/, jh, /ily$/, S, /ine$/, Ug, /ing$/, Nh, /ion$/, hh, /ish$/, th, /ism$/, U, /ist$/, S, /ite$/, ch, /ity$/, S, /ium$/, S, /ive$/, S, /ize$/, eh, /oid$/, S, /one$/, bh, /ous$/, S, /ae$/, S, /al$/, xh, /ar$/, Fh, /as$/, U, /ed$/, yh, /en$/, eh, /es$/, yh, /ia$/, S, /ic$/, S, /is$/, S, /ly$/, U, /on$/, Lh, /or$/, sh, /um$/, Kh, /us$/, Hh, /yl$/, bh, /s'/, S, /'s$/, S, /a$/, S, /e$/, S, /i$/, S, /o$/, S, /s$/, gh, /y$/, U), Ej = Kc([Tg, Ug, Wg, Yg, bh, ch, dh, S, eh, gh, hh, jh, lh, U, ph, qh, sh, th, xh, yh, zh, Ah, Fh, Gh, Hh, Kh, Lh, Nh, X], [function(a) {
          return Ca(Z(/(u|x|([^o]s))$/, a));
        }, function(a) {
          return Ca(Z(/[acem]$/, a));
        }, function(a) {
          return Ca(Z(/[oe]$/, a));
        }, function(a) {
          return Z(/l$/, a);
        }, function(a) {
          return Z(/[nr]$/, a);
        }, function(a) {
          return Z(/([dflt]|ph|th|er|or|es)$/, a);
        }, function(a) {
          return Z(/[li]$/, a);
        }, function() {
          return true;
        }, function(a) {
          var b = (Ej.b ? Ej.b(U) : Ej.call(null, U)).call(null, a);
          return n(b) ? Ej.a ? Ej.a(yh, a) : Ej.call(null, yh, a) : b;
        }, function(a) {
          return Ca(Z(/[su]$/, a));
        }, function(a) {
          var b = (Ej.b ? Ej.b(U) : Ej.call(null, U)).call(null, a);
          return n(b) ? Ca(Z(/[ln]$/, a)) : b;
        }, function(a) {
          return Ca(Z(/c$/, a));
        }, function(a) {
          return 4 < H(a);
        }, function(a) {
          return 2 < H(a);
        }, function(a) {
          return Ca(Z(/[ae]$/, a));
        }, function(a) {
          return Ca(Z(/f$/, a));
        }, function(a) {
          return Z(/(s|[^o]t)$/, a);
        }, function(a) {
          return 3 < H(a);
        }, function(a) {
          var b = (Ej.b ? Ej.b(U) : Ej.call(null, U)).call(null, a);
          return n(b) ? Ca(Z(/(met|ryst)/, a)) : b;
        }, function(a) {
          return Ca(Z(/e$/, a));
        }, function(a) {
          var b = (Ej.b ? Ej.b(U) : Ej.call(null, U)).call(null, a);
          return n(b) ? Z(/f$/, a) : b;
        }, function(a) {
          return Z(/in$/, a);
        }, function(a) {
          return Z(/(l|i|u\we)$/, a);
        }, function(a) {
          return Z(/(t|ll)$/, a);
        }, function(a) {
          return Z(/c$/, a);
        }, function(a) {
          return Z(/[lmnr]$/, a);
        }, function(a) {
          return Z(/(dr|[^t]t)$/, a);
        }, function(a) {
          return n(Z(/s\w{2}$/, a)) ? (Ej.b ? Ej.b(th) : Ej.call(null, th)).call(null, a) : (Ej.b ? Ej.b(U) : Ej.call(null, U)).call(null, a);
        }, function(a) {
          var b = (Ej.b ? Ej.b(U) : Ej.call(null, U)).call(null, a);
          return n(b) ? Z(/(l|i|(u\we))$/, a) : b;
        }]), Fj = M(/iev$/, "ief", /uct$/, "uc", /umpt$/, "um", /rpt$/, "rb", /urs$/, "ur", /istr$/, "ister", /metr$/, "meter", /olv$/, "olut", /([^aoi])ul$/, "$1l", /bex$/, "bic", /dex$/, "dic", /pex$/, "pic", /tex$/, "tic", /ax$/, "ac", /ex$/, "ec", /ix$/, "ic", /lux$/, "luc", /uad$/, "uas", /vad$/, "vas", /cid$/, "cis", /lid$/, "lis", /erid$/, "eris", /pand$/, "pans", /([^s])end$/, "$1ens", /ond$/, "ons", /lud$/, "lus", /rud$/, "rus", /([^pt])her$/, "$1hes", /mit$/, "mis", /([^m])ent$/, "$1ens", /ert$/, "ers", /([^n])et$/, "$1es", /(yt|yz)$/, "ys");
        function Gj(a) {
          return function(b) {
            var c = y(b);
            b = Cc(b);
            c = Ph(a, c, "");
            var d = H(c) < H(a);
            b = d ? (d = 1 < H(c)) ? (Ej.b ? Ej.b(b) : Ej.call(null, b)).call(null, c) : d : d;
            return n(b) ? c : null;
          };
        }
        function Hj(a) {
          var b = Nd(function(b2) {
            return n(Z(y(b2), a)) ? b2 : null;
          }, de(Fj));
          if (n(b)) {
            var c = L(b, 0), b = L(b, 1);
            return Ph(a, c, b);
          }
          return a;
        }
        var Ij = ve("atque quoque neque itaque absque apsque abusque adaeque adusque denique deque susque oblique peraeque plenisque quandoque quisque quaeque cuiusque cuique quemque quamque quaque quique quorumque quarumque quibusque quosque quasque quotusquisque quousque ubique undique usque uterque utique utroque utribique torque coque concoque contorque detorque decoque excoque extorque obtorque optorque retorque recoque attorque incoque intorque praetorque".split(" ")), Jj = new Q(null, 19, 5, R, [/ibus$/, /ius$/, /ae$/, /am$/, /as$/, /em$/, /es$/, /ia$/, /is$/, /nt$/, /os$/, /ud$/, /um$/, /us$/, /a$/, /e$/, /i$/, /o$/, /u$/], null), Kj = new Q(null, 25, 5, R, [M(/iuntur$/, "$1i"), M(/erunt$/, "$1i"), M(/untur$/, "$1i"), M(/iunt$/, "$1i"), M(/unt$/, "$1i"), M(/beris$/, "$1bi"), M(/bor$/, "$1bi"), M(/bo$/, "$1bi"), M(/ero$/, "$1eri"), M(/mini$/), M(/ntur$/), M(/stis$/), M(/mur$/), M(/mus$/), M(/ris$/), M(/sti$/), M(/tis$/), M(/tur$/), M(/ns$/), M(/nt$/), M(/ri$/), M(/m$/), M(/r$/), M(/s$/), M(/t$/)], null);
        function Lj(a) {
          var b = Nd(function(b2) {
            return n(Z(b2, a)) ? b2 : null;
          }, Jj);
          return n(b) ? Ph(a, b, "") : a;
        }
        function Mj(a) {
          var b = Nd(function(b2) {
            return n(Z(y(b2), a)) ? b2 : null;
          }, Kj);
          if (n(b)) {
            var c = n(Cc(b)) ? Ag([u("(.{2,})"), u(y(b))].join("")) : y(b), d = function() {
              var a2 = Cc(b);
              return n(a2) ? a2 : "";
            }();
            return Ph(a, c, d);
          }
          return a;
        }
        var Nj = Kc("abcdefghijlmnprstuvyz".split(""), [new Q(null, 2, 5, R, [M("ia", "", vh), M("a", "", vh)], null), new Q(null, 1, 5, R, [M("bb", "b", W)], null), new Q(null, 3, 5, R, [M("ytic", "ys", W), M("ic", "", T), M("nc", "nt", T)], null), new Q(null, 6, 5, R, [M("dd", "d", W), M("ied", "y", T), M("ceed", "cess", W), M("eed", "ee", W), M("ed", "", T), M("hood", "", T)], null), new Q(null, 1, 5, R, [M("e", "", T)], null), new Q(null, 2, 5, R, [M("lief", "liev", W), M("if", "", T)], null), new Q(null, 4, 5, R, [M("ing", "", T), M("iag", "y", W), M("ag", "", T), M("gg", "g", W)], null), new Q(null, 3, 5, R, [M("th", "", vh), M("guish", "ct", W), M("ish", "", T)], null), new Q(null, 2, 5, R, [M("i", "", vh), M("i", "y", T)], null), new Q(null, 9, 5, R, [M("ij", "id", W), M("fuj", "fus", W), M("uj", "ud", W), M("oj", "od", W), M("hej", "her", W), M("verj", "vert", W), M("misj", "mit", W), M("nj", "nd", W), M("j", "s", W)], null), new Q(null, 13, 5, R, [M("ifiabl", "", W), M("iabl", "y", W), M("abl", "", T), M("ibl", "", W), M("bil", "bl", T), M("cl", "c", W), M("iful", "y", W), M("ful", "", T), M("ul", "", W), M("ial", "", T), M("ual", "", T), M("al", "", T), M("ll", "l", W)], null), new Q(null, 4, 5, R, [M("ium", "", W), M("um", "", vh), M("ism", "", T), M("mm", "m", W)], null), new Q(null, 8, 5, R, [M("sion", "j", T), M("xion", "ct", W), M("ion", "", T), M("ian", "", T), M("an", "", T), M("een", "", Zg), M("en", "", T), M("nn", "n", W)], null), new Q(null, 2, 5, R, [M("ship", "", T), M("pp", "p", W)], null), new Q(null, 9, 5, R, [M("er", "", T), M("ear", "", Zg), M("ar", "", W), M("ior", "", T), M("or", "", T), M("ur", "", T), M("rr", "r", W), M("tr", "t", T), M("ier", "y", T)], null), new Q(null, 9, 5, R, [M("ies", "y", T), M("sis", "s", W), M("is", "", T), M("ness", "", T), M("ss", "", Zg), M("ous", "", T), M("us", "", vh), M("s", "", T), M("s", "", W)], null), new Q(null, 14, 5, R, [M("plicat", "ply", W), M("at", "", T), M("ment", "", T), M("ent", "", T), M("ant", "", T), M("ript", "rib", W), M("orpt", "orb", W), M("duct", "duc", W), M("sumpt", "sum", W), M("cept", "ceiv", W), M("olut", "olv", W), M("sist", "", Zg), M("ist", "", T), M("tt", "t", W)], null), new Q(null, 2, 5, R, [M("iqu", "", W), M("ogu", "og", W)], null), new Q(null, 3, 5, R, [M("siv", "j", T), M("eiv", "", Zg), M("iv", "", T)], null), new Q(null, 17, 5, R, [M("bly", "bl", T), M("ily", "y", T), M("ply", "", Zg), M("ly", "", T), M("ogy", "og", W), M("phy", "ph", W), M("omy", "om", W), M("opy", "op", W), M("ity", "", T), M("ety", "", T), M("lty", "l", W), M("istry", "", W), M("ary", "", T), M("ory", "", T), M("ify", "", W), M("ncy", "nt", T), M("acy", "", T)], null), new Q(null, 2, 5, R, [M("iz", "", T), M("yz", "ys", W)], null)]);
        function Yj(a) {
          return Z(/[aeiouy]/, "" + u(a));
        }
        ea("clj_fuzzy.stemmers.lancaster", function(a) {
          a: {
            a = Sh(qi(a));
            for (var b = true; ; ) {
              var c;
              c = Dc(a);
              c = Nj.b ? Nj.b(c) : Nj.call(null, c);
              if (n(c)) {
                b: {
                  for (var d = 0; ; ) {
                    var e = Ic(c, d, C), g = y(e), h = Cc(e), k = Dc(e), m = H(a) - H(g);
                    if (null == w(e)) {
                      c = new Q(null, 2, 5, R, [false, a], null);
                      break b;
                    }
                    if (Ca(b) && E.a(k, vh)) {
                      d += 1;
                    } else {
                      if (0 > m || Ld(a.substring(m), g)) {
                        d += 1;
                      } else {
                        if (E.a(k, Zg)) {
                          c = new Q(null, 2, 5, R, [false, a], null);
                          break b;
                        }
                        e = [u(ld(a, m)), u(h)].join("");
                        g = e;
                        g = n(Yj(y(g))) ? 1 < H(g) : (h = 2 < H(g)) ? Yj(g) : h;
                        if (Ca(g)) {
                          d += 1;
                        } else {
                          c = E.a(k, T) ? new Q(null, 2, 5, R, [true, e], null) : new Q(null, 2, 5, R, [false, e], null);
                          break b;
                        }
                      }
                    }
                  }
                }
                a = L(c, 0);
                c = L(c, 1);
                if (n(a)) {
                  a = c, b = false;
                } else {
                  a = c;
                  break a;
                }
              } else {
                break a;
              }
            }
          }
          return a;
        });
        ea("clj_fuzzy.stemmers.lovins", function(a) {
          a = Ph(Sh(a), /[^a-zA-Z']/, "");
          var b = Nd(Gj(a), de(Dj));
          a = Ph(n(b) ? b : a, /([bdglmnprst])\1{1,}$/, "$1");
          return Hj(a);
        });
        ea("clj_fuzzy.stemmers.porter", function(a) {
          if (!(3 > H(a))) {
            a = Sh(a);
            a = n(Z(/^y/, a)) ? 2 > H(a) ? Rh(a) : [u(Rh(ld(a, 1))), u(Sh(a.substring(1)))].join("") : a;
            var b = kj(/(ss|i)es$/, a), c = L(b, 0), b = L(b, 1), d = kj(/([^s])s$/, a), e = L(d, 0), d = L(d, 1);
            a = n(c) ? [u(c), u(b)].join("") : n(e) ? [u(e), u(d)].join("") : a;
            n(Z(/eed$/, a)) ? (c = ld(a, H(a) - 3), c = fj.b ? fj.b(c) : fj.call(null, c), a = n(c) ? Th(a) : a) : n(Z(/(ed|ing)$/, a)) && (c = kj(/(ed|ing)$/, a), b = L(c, 0), L(c, 1), a = n(ij.b ? ij.b(b) : ij.call(null, b)) ? n(Z(/(at|bl|iz)$/, b)) ? [u(b), u("e")].join("") : n(Z(/([^aeiouylsz])\1$/, b)) ? Th(b) : n(jj.b ? jj.b(b) : jj.call(null, b)) ? [u(b), u("e")].join("") : b : a);
            c = zg(/y$/, a);
            b = Th(a);
            a = n(n(c) ? ij.b ? ij.b(b) : ij.call(null, b) : c) ? [u(b), u("i")].join("") : a;
            a = lj(a, Yi, aj);
            a = lj(a, Zi, bj);
            c = kj($i, a);
            b = L(c, 0);
            L(c, 1);
            n(n(b) ? hj.b ? hj.b(b) : hj.call(null, b) : b) ? a = b : (b = kj(/(s|t)(ion)$/, a), c = L(b, 0), b = L(b, 1), b = [u(c), u(b)].join(""), a = n(n(c) ? hj.b ? hj.b(b) : hj.call(null, b) : c) ? b : a);
            n(Z(/e$/, a)) && (c = Th(a), b = hj.b ? hj.b(c) : hj.call(null, c), n(b) || (b = gj.b ? gj.b(c) : gj.call(null, c), b = n(b) ? Ca(jj.b ? jj.b(c) : jj.call(null, c)) : b), a = n(b) ? c : a);
            c = Z(/ll$/, a);
            c = n(c) ? hj.b ? hj.b(a) : hj.call(null, a) : c;
            a = n(c) ? Th(a) : a;
            a = E.a("Y", y(a)) ? [u("y"), u(Rd(1, a))].join("") : a;
          }
          return a;
        });
        ea("clj_fuzzy.stemmers.schinke", function(a) {
          a = qi(Sh(a));
          a = Uh(a, M(/j/, "i", /v/, "u"));
          var b;
          b = Z(/que$/, a);
          b = n(b) ? si(a, Ij) : b;
          b = n(b) ? false : Ph(a, /que$/, "");
          if (n(b)) {
            a = Lj(b);
            var c = Mj(b);
            return new pa(null, 2, [Mh, 1 < H(a) ? a : b, ah, 1 < H(c) ? c : b], null);
          }
          return new pa(null, 2, [Mh, a, ah, a], null);
        });
        function Zj(a, b) {
          var c = Jd(Mf, a, b);
          return F(c, $d(function(a2) {
            return function(b2) {
              return a2 === b2;
            };
          }(c), b));
        }
        var ak = function ak2() {
          switch (arguments.length) {
            case 1:
              return ak2.b(arguments[0]);
            case 2:
              return ak2.a(arguments[0], arguments[1]);
            default:
              return ak2.m(arguments[0], arguments[1], new x(Array.prototype.slice.call(arguments, 2), 0));
          }
        };
        ak.b = function(a) {
          return a;
        };
        ak.a = function(a, b) {
          for (; ; ) {
            if (H(b) < H(a)) {
              var c = a;
              a = b;
              b = c;
            } else {
              return Ka(function(a2, b2) {
                return function(a3, c2) {
                  return ed(b2, c2) ? a3 : Qc.a(a3, c2);
                };
              }(a, b), a, a);
            }
          }
        };
        ak.m = function(a, b, c) {
          a = Zj(function(a2) {
            return -H(a2);
          }, Ec.m(c, b, xc([a], 0)));
          return Ka(ak, y(a), ec(a));
        };
        ak.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          c = D(c);
          return ak.m(b, a, c);
        };
        ak.v = 2;
        var bk = function bk2() {
          switch (arguments.length) {
            case 1:
              return bk2.b(arguments[0]);
            case 2:
              return bk2.a(arguments[0], arguments[1]);
            default:
              return bk2.m(arguments[0], arguments[1], new x(Array.prototype.slice.call(arguments, 2), 0));
          }
        };
        bk.b = function(a) {
          return a;
        };
        bk.a = function(a, b) {
          return H(a) < H(b) ? Ka(function(a2, d) {
            return ed(b, d) ? Qc.a(a2, d) : a2;
          }, a, a) : Ka(Qc, a, b);
        };
        bk.m = function(a, b, c) {
          return Ka(bk, a, Ec.a(c, b));
        };
        bk.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          c = D(c);
          return bk.m(b, a, c);
        };
        bk.v = 2;
        function ck(a, b) {
          var c = Kf(a), d = Kf(b), e = H(ak.a(c, d)), c = H(c) < H(d) ? Ka(Ec, d, c) : Ka(Ec, c, d);
          return 1 - e / H(c);
        }
        function dk(a, b, c) {
          return Ka(function(a2, c2) {
            var g = L(c2, 0), h = L(c2, 1), k = L(c2, 2);
            E.a(k, b) || (g = g < h ? g : h, h = Pc(a2), g = (g < h ? g : h) + 1);
            return Ec.a(a2, g);
          }, new Q(null, 1, 5, R, [y(a) + 1], null), P.aa(xe, a, D(a), c));
        }
        function ek(a, b, c, d) {
          a = Kf(a);
          b = Kf(b);
          var e = H(ak.a(a, b));
          return e / (e + c * H(bk.a(a, b)) + d * H(bk.a(b, a)));
        }
        function fk(a, b, c, d) {
          a = Kf(a);
          var e = Kf(b);
          b = H(ak.a(a, e));
          var g = H(bk.a(a, e));
          a = H(bk.a(e, a));
          return b / (b + d * (c * (g < a ? g : a) + Math.pow(1 - c, g > a ? g : a)));
        }
        var gk = function gk2() {
          return gk2.m(arguments[0], arguments[1], 2 < arguments.length ? new x(Array.prototype.slice.call(arguments, 2), 0) : null);
        };
        gk.m = function(a, b, c) {
          var d = cd(c) ? Id(Df, c) : c;
          c = Ic(d, Ch, 1);
          var e = Ic(d, $g, 1), d = Ic(d, Dh, false);
          return (n(d) ? fk : ek).call(null, a, b, c, e);
        };
        gk.v = 2;
        gk.A = function(a) {
          var b = y(a), c = D(a);
          a = y(c);
          c = D(c);
          return gk.m(b, a, c);
        };
        function hk(a, b) {
          return H(a) >= H(b) ? new Q(null, 2, 5, R, [a, b], null) : new Q(null, 2, 5, R, [b, a], null);
        }
        function ik(a) {
          a = (a / 2 | 0) - 1;
          return 0 < a ? a : 0;
        }
        function jk(a, b, c, d, e, g, h) {
          for (var k = h; ; ) {
            var m = Od(xa).call(null, d);
            if (n(n(m) ? d <= e : m)) {
              Ca(Hc(h, d)) && E.a(b, Hc(c, d)) ? (g = Jc.i(g, a, b), k = Jc.i(k, d, Hc(c, d)), d = null) : d += 1;
            } else {
              return new Q(null, 2, 5, R, [g, k], null);
            }
          }
        }
        function kk(a, b) {
          for (var c = hk(a, b), d = L(c, 0), c = L(c, 1), e = H(d), g = H(c), h = ik(e), k = 0, m = we(Ud(e, null)), q = we(Ud(e, null)); ; ) {
            if (k < e) {
              var p = function() {
                var a2 = k - h;
                return 0 < a2 ? a2 : 0;
              }(), z = function() {
                var a2 = k + h + 1;
                return a2 < g ? a2 : g;
              }(), q = jk(k, Hc(d, k), c, p, z, m, q), m = L(q, 0), q = L(q, 1), k = k + 1;
            } else {
              return new Q(null, 2, 5, R, [$d(xa, m), $d(xa, q)], null);
            }
          }
        }
        function lk(a, b) {
          var c = H(a) - H(b), d = de(Yd.a(a, Fd.a(b, Ud(c, null))));
          return H(Zd(function() {
            return function(a2) {
              return Ld(y(a2), Cc(a2));
            };
          }(c, d), d)) / 2;
        }
        function mk(a, b) {
          var c = kk(a, b), d = L(c, 0), e = L(c, 1), c = H(d), d = lk(d, e);
          return 0 === c ? 0 : (c / H(a) + c / H(b) + (c - d) / c) / 3;
        }
        function nk(a, b) {
          if (E.a(a, b)) {
            return 1;
          }
          if (2 > H(a) && 2 > H(b)) {
            return 0;
          }
          var c = Rh(Ph(a, /\s+/, "")), c = Kf(ee(2, 1, c)), d = Rh(Ph(b, /\s+/, "")), d = Kf(ee(2, 1, d)), e = H(c) + H(d);
          return 2 * H(ak.a(c, d)) / e;
        }
        ea("clj_fuzzy.metrics.levenshtein", function(a, b) {
          return Rc(a) && Rc(b) ? 0 : Rc(a) ? H(b) : Rc(b) ? H(a) : Pc(Ka(function(a2, d) {
            return dk(a2, d, b);
          }, P.i(function(a2, b2) {
            return b2;
          }, F(null, b), new Pf(null, 0, Number.MAX_VALUE, 1, null)), a));
        });
        ea("clj_fuzzy.metrics.dice", nk);
        ea("clj_fuzzy.metrics.sorensen", nk);
        ea("clj_fuzzy.metrics.mra_comparison", function(a, b) {
          var c = sj(a), d = sj(b), e = H(c) - H(d);
          if (3 > Math.abs(e)) {
            var e = H(c) + H(d), e = 4 >= e ? 5 : 4 < e && 7 >= e ? 4 : 7 < e && 11 >= e ? 3 : 2, g, h;
            g = H(c);
            h = H(d);
            h = g > h ? new Q(null, 2, 5, R, [c, d], null) : new Q(null, 2, 5, R, [d, c], null);
            g = L(h, 0);
            h = L(h, 1);
            h = rj(qj(g, h));
            g = pj(P.a(y, h));
            h = pj(P.a(Cc, h));
            g = qj(sd(g), sd(h));
            g = 6 - H(pj(rj(g)));
            return new pa(null, 4, [Bh, e, uh, g, Xg, new Q(null, 2, 5, R, [c, d], null), Oh, g >= e], null);
          }
          return null;
        });
        ea("clj_fuzzy.metrics.jaccard", ck);
        ea("clj_fuzzy.metrics.tanimoto", ck);
        ea("clj_fuzzy.metrics.hamming", function(a, b) {
          var c = H(a), d = H(b);
          return E.a(c, d) ? H($d(function() {
            return function(a2) {
              return E.a(y(a2), Cc(a2));
            };
          }(c, d), de(Yd.a(a, b)))) : null;
        });
        ea("clj_fuzzy.metrics.jaro", mk);
        ea("clj_fuzzy.metrics.jaro_winkler", function(a, b) {
          var c = mk(a, b);
          a: {
            for (var d = 0, e = 0; ; ) {
              if (4 > d) {
                E.a(Hc(a, d), Hc(b, d)) ? (e += 1, d += 1) : d = 5;
              } else {
                break a;
              }
            }
          }
          return c + 0.1 * e * (1 - c);
        });
        ea("clj_fuzzy.metrics.tversky", gk);
        function ok(a, b) {
          return function() {
            function c(a2) {
              var b2 = null;
              if (0 < arguments.length) {
                for (var b2 = 0, c2 = Array(arguments.length - 0); b2 < c2.length; ) {
                  c2[b2] = arguments[b2 + 0], ++b2;
                }
                b2 = new x(c2, 0);
              }
              return d.call(this, b2);
            }
            function d(c2) {
              var d2 = Qd(b, c2);
              c2 = y(Rd(b, c2));
              c2 = Rg(c2);
              c2 = be(w(c2));
              return Id(a, Fd.a(d2, c2));
            }
            c.v = 0;
            c.A = function(a2) {
              a2 = w(a2);
              return d(a2);
            };
            c.m = d;
            return c;
          }();
        }
        var pk = function pk2() {
          switch (arguments.length) {
            case 1:
              return pk2.b(arguments[0]);
            case 2:
              return pk2.a(arguments[0], arguments[1]);
            default:
              throw Error([u("Invalid arity: "), u(arguments.length)].join(""));
          }
        };
        ea("clj_fuzzy.js.convert_keyword_fn", pk);
        pk.b = function(a) {
          return ok(a, 0);
        };
        pk.a = function(a, b) {
          return ok(a, b);
        };
        pk.v = 2;
        ea("clj_fuzzy.js.clj_to_js", Og);
      })();
      (function() {
        var js = clj_fuzzy.js, mra = clj_fuzzy.metrics.mra_comparison, tversky = clj_fuzzy.metrics.tversky, dm = clj_fuzzy.phonetics.double_metaphone, schinke = clj_fuzzy.stemmers.schinke;
        clj_fuzzy.metrics.mra_comparison = function() {
          return js.clj_to_js(mra.apply(null, arguments));
        };
        clj_fuzzy.phonetics.double_metaphone = function() {
          return js.clj_to_js(dm.apply(null, arguments));
        };
        clj_fuzzy.stemmers.schinke = function() {
          return js.clj_to_js(schinke.apply(null, arguments));
        };
        clj_fuzzy.metrics.tversky = js.convert_keyword_fn(tversky, 2);
        delete clj_fuzzy.js;
      })();
      if (typeof exports !== "undefined") {
        if (typeof module !== "undefined" && module.exports)
          exports = module.exports = clj_fuzzy;
        exports.clj_fuzzy = clj_fuzzy;
      } else if (typeof define === "function" && define.amd)
        define("clj_fuzzy", [], function() {
          return clj_fuzzy;
        });
    }
  });

  // node_modules/lodash.get/index.js
  var require_lodash = __commonJS({
    "node_modules/lodash.get/index.js"(exports, module) {
      init_globals();
      var FUNC_ERROR_TEXT = "Expected a function";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var INFINITY = 1 / 0;
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var symbolTag = "[object Symbol]";
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      var reLeadingDot = /^\./;
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reEscapeChar = /\\(\\)?/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {
          }
        }
        return result;
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var Symbol2 = root.Symbol;
      var splice = arrayProto.splice;
      var Map2 = getNative(root, "Map");
      var nativeCreate = getNative(Object, "create");
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function Hash(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        return getMapData(this, key)["delete"](key);
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq2(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseGet(object, path) {
        path = isKey(path, object) ? [path] : castPath(path);
        var index = 0, length = path.length;
        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return index && index == length ? object : void 0;
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function castPath(value) {
        return isArray(value) ? value : stringToPath(value);
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type2 = typeof value;
        if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      function isKeyable(value) {
        var type2 = typeof value;
        return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var stringToPath = memoize(function(string) {
        string = toString(string);
        var result = [];
        if (reLeadingDot.test(string)) {
          result.push("");
        }
        string.replace(rePropName, function(match, number2, quote, string2) {
          result.push(quote ? string2.replace(reEscapeChar, "$1") : number2 || match);
        });
        return result;
      });
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result);
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function eq2(value, other) {
        return value === other || value !== value && other !== other;
      }
      var isArray = Array.isArray;
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isObject(value) {
        var type2 = typeof value;
        return !!value && (type2 == "object" || type2 == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      function get2(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet(object, path);
        return result === void 0 ? defaultValue : result;
      }
      module.exports = get2;
    }
  });

  // node_modules/its-set/dist/index.js
  var require_dist = __commonJS({
    "node_modules/its-set/dist/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.itsSet = itsSet;
      var _lodash = require_lodash();
      var _lodash2 = _interopRequireDefault(_lodash);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function itsSet(val) {
        var checkVal = function checkVal2(v) {
          return typeof v !== "undefined" && v !== null;
        };
        if (!checkVal(val))
          return false;
        if (val.constructor === Array) {
          return val.every(function(v) {
            return checkVal(v);
          });
        } else if (arguments.length === 2) {
          return checkVal((0, _lodash2.default)(arguments[0], arguments[1]));
        }
        return true;
      }
      exports.default = itsSet;
    }
  });

  // node_modules/words-to-numbers/dist/fuzzy.js
  var require_fuzzy = __commonJS({
    "node_modules/words-to-numbers/dist/fuzzy.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _cljFuzzy = require_clj_fuzzy();
      var _cljFuzzy2 = _interopRequireDefault(_cljFuzzy);
      var _itsSet = require_dist();
      var _itsSet2 = _interopRequireDefault(_itsSet);
      var _constants = require_constants();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports.default = function(word, haystack) {
        return (haystack || _constants.ALL_WORDS).map(function(numberWord) {
          return {
            word: numberWord,
            score: _cljFuzzy2.default.metrics.jaro(numberWord, word)
          };
        }).reduce(function(acc, stat) {
          return !(0, _itsSet2.default)(acc.score) || stat.score > acc.score ? stat : acc;
        }, {}).word;
      };
    }
  });

  // node_modules/words-to-numbers/dist/parser.js
  var require_parser = __commonJS({
    "node_modules/words-to-numbers/dist/parser.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _extends2 = require_extends();
      var _extends3 = _interopRequireDefault(_extends2);
      var _constants = require_constants();
      var _fuzzy = require_fuzzy();
      var _fuzzy2 = _interopRequireDefault(_fuzzy);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var SKIP = 0;
      var ADD = 1;
      var START_NEW_REGION = 2;
      var NOPE = 3;
      var canAddTokenToEndOfSubRegion = function canAddTokenToEndOfSubRegion2(subRegion, currentToken, _ref) {
        var impliedHundreds = _ref.impliedHundreds;
        var tokens = subRegion.tokens;
        var prevToken = tokens[0];
        if (!prevToken)
          return true;
        if (prevToken.type === _constants.TOKEN_TYPE.MAGNITUDE && currentToken.type === _constants.TOKEN_TYPE.UNIT)
          return true;
        if (prevToken.type === _constants.TOKEN_TYPE.MAGNITUDE && currentToken.type === _constants.TOKEN_TYPE.TEN)
          return true;
        if (impliedHundreds && subRegion.type === _constants.TOKEN_TYPE.MAGNITUDE && prevToken.type === _constants.TOKEN_TYPE.TEN && currentToken.type === _constants.TOKEN_TYPE.UNIT)
          return true;
        if (impliedHundreds && subRegion.type === _constants.TOKEN_TYPE.MAGNITUDE && prevToken.type === _constants.TOKEN_TYPE.UNIT && currentToken.type === _constants.TOKEN_TYPE.TEN)
          return true;
        if (prevToken.type === _constants.TOKEN_TYPE.TEN && currentToken.type === _constants.TOKEN_TYPE.UNIT)
          return true;
        if (!impliedHundreds && prevToken.type === _constants.TOKEN_TYPE.TEN && currentToken.type === _constants.TOKEN_TYPE.UNIT)
          return true;
        if (prevToken.type === _constants.TOKEN_TYPE.MAGNITUDE && currentToken.type === _constants.TOKEN_TYPE.MAGNITUDE)
          return true;
        if (!impliedHundreds && prevToken.type === _constants.TOKEN_TYPE.TEN && currentToken.type === _constants.TOKEN_TYPE.TEN)
          return false;
        if (impliedHundreds && prevToken.type === _constants.TOKEN_TYPE.TEN && currentToken.type === _constants.TOKEN_TYPE.TEN)
          return true;
        return false;
      };
      var getSubRegionType = function getSubRegionType2(subRegion, currentToken) {
        if (!subRegion) {
          return { type: currentToken.type };
        }
        var prevToken = subRegion.tokens[0];
        var isHundred = prevToken.type === _constants.TOKEN_TYPE.TEN && currentToken.type === _constants.TOKEN_TYPE.UNIT || prevToken.type === _constants.TOKEN_TYPE.TEN && currentToken.type === _constants.TOKEN_TYPE.TEN || prevToken.type === _constants.TOKEN_TYPE.UNIT && currentToken.type === _constants.TOKEN_TYPE.TEN && _constants.NUMBER[prevToken.lowerCaseValue] > 9 || prevToken.type === _constants.TOKEN_TYPE.UNIT && currentToken.type === _constants.TOKEN_TYPE.UNIT || prevToken.type === _constants.TOKEN_TYPE.TEN && currentToken.type === _constants.TOKEN_TYPE.UNIT && subRegion.type === _constants.TOKEN_TYPE.MAGNITUDE;
        if (subRegion.type === _constants.TOKEN_TYPE.MAGNITUDE)
          return { type: _constants.TOKEN_TYPE.MAGNITUDE, isHundred };
        if (isHundred)
          return { type: _constants.TOKEN_TYPE.HUNDRED, isHundred };
        return { type: currentToken.type, isHundred };
      };
      var checkIfTokenFitsSubRegion = function checkIfTokenFitsSubRegion2(subRegion, token, options2) {
        var _getSubRegionType = getSubRegionType(subRegion, token);
        var type2 = _getSubRegionType.type;
        var isHundred = _getSubRegionType.isHundred;
        if (!subRegion)
          return { action: START_NEW_REGION, type: type2, isHundred };
        if (canAddTokenToEndOfSubRegion(subRegion, token, options2)) {
          return { action: ADD, type: type2, isHundred };
        }
        return { action: START_NEW_REGION, type: type2, isHundred };
      };
      var getSubRegions = function getSubRegions2(region, options2) {
        var subRegions = [];
        var currentSubRegion = void 0;
        var tokensCount = region.tokens.length;
        var i = tokensCount - 1;
        while (i >= 0) {
          var token = region.tokens[i];
          var _checkIfTokenFitsSubR = checkIfTokenFitsSubRegion(currentSubRegion, token, options2);
          var action = _checkIfTokenFitsSubR.action;
          var type2 = _checkIfTokenFitsSubR.type;
          var isHundred = _checkIfTokenFitsSubR.isHundred;
          token.type = isHundred ? _constants.TOKEN_TYPE.HUNDRED : token.type;
          switch (action) {
            case ADD: {
              currentSubRegion.type = type2;
              currentSubRegion.tokens.unshift(token);
              break;
            }
            case START_NEW_REGION: {
              currentSubRegion = {
                tokens: [token],
                type: type2
              };
              subRegions.unshift(currentSubRegion);
              break;
            }
          }
          i--;
        }
        return subRegions;
      };
      var canAddTokenToEndOfRegion = function canAddTokenToEndOfRegion2(region, currentToken, _ref2) {
        var impliedHundreds = _ref2.impliedHundreds;
        var tokens = region.tokens;
        var prevToken = tokens[tokens.length - 1];
        if (!impliedHundreds && prevToken.type === _constants.TOKEN_TYPE.UNIT && currentToken.type === _constants.TOKEN_TYPE.UNIT && !region.hasDecimal)
          return false;
        if (!impliedHundreds && prevToken.type === _constants.TOKEN_TYPE.UNIT && currentToken.type === _constants.TOKEN_TYPE.TEN)
          return false;
        if (!impliedHundreds && prevToken.type === _constants.TOKEN_TYPE.TEN && currentToken.type === _constants.TOKEN_TYPE.TEN)
          return false;
        return true;
      };
      var checkIfTokenFitsRegion = function checkIfTokenFitsRegion2(region, token, options2) {
        var isDecimal = _constants.DECIMALS.includes(token.lowerCaseValue);
        if ((!region || !region.tokens.length) && isDecimal) {
          return START_NEW_REGION;
        }
        var isPunctuation = _constants.PUNCTUATION.includes(token.lowerCaseValue);
        if (isPunctuation)
          return SKIP;
        var isJoiner = _constants.JOINERS.includes(token.lowerCaseValue);
        if (isJoiner)
          return SKIP;
        if (isDecimal && !region.hasDecimal) {
          return ADD;
        }
        var isNumberWord = _constants.NUMBER_WORDS.includes(token.lowerCaseValue);
        if (isNumberWord) {
          if (!region)
            return START_NEW_REGION;
          if (canAddTokenToEndOfRegion(region, token, options2)) {
            return ADD;
          }
          return START_NEW_REGION;
        }
        return NOPE;
      };
      var checkBlacklist = function checkBlacklist2(tokens) {
        return tokens.length === 1 && _constants.BLACKLIST_SINGULAR_WORDS.includes(tokens[0].lowerCaseValue);
      };
      var matchRegions = function matchRegions2(tokens, options2) {
        var regions = [];
        if (checkBlacklist(tokens))
          return regions;
        var i = 0;
        var currentRegion = void 0;
        var tokensCount = tokens.length;
        while (i < tokensCount) {
          var token = tokens[i];
          var tokenFits = checkIfTokenFitsRegion(currentRegion, token, options2);
          switch (tokenFits) {
            case SKIP: {
              break;
            }
            case ADD: {
              if (currentRegion) {
                currentRegion.end = token.end;
                currentRegion.tokens.push(token);
                if (token.type === _constants.TOKEN_TYPE.DECIMAL) {
                  currentRegion.hasDecimal = true;
                }
              }
              break;
            }
            case START_NEW_REGION: {
              currentRegion = {
                start: token.start,
                end: token.end,
                tokens: [token]
              };
              regions.push(currentRegion);
              if (token.type === _constants.TOKEN_TYPE.DECIMAL) {
                currentRegion.hasDecimal = true;
              }
              break;
            }
            case NOPE:
            default: {
              currentRegion = null;
              break;
            }
          }
          i++;
        }
        return regions.map(function(region) {
          return (0, _extends3.default)({}, region, { subRegions: getSubRegions(region, options2) });
        });
      };
      var getTokenType = function getTokenType2(chunk) {
        if (_constants.UNIT_KEYS.includes(chunk.toLowerCase()))
          return _constants.TOKEN_TYPE.UNIT;
        if (_constants.TEN_KEYS.includes(chunk.toLowerCase()))
          return _constants.TOKEN_TYPE.TEN;
        if (_constants.MAGNITUDE_KEYS.includes(chunk.toLowerCase()))
          return _constants.TOKEN_TYPE.MAGNITUDE;
        if (_constants.DECIMALS.includes(chunk.toLowerCase()))
          return _constants.TOKEN_TYPE.DECIMAL;
      };
      exports.default = function(text, options2) {
        var tokens = text.split(/(\w+|\s|[[:punct:]])/i).reduce(function(acc, chunk) {
          var unfuzzyChunk = chunk.length && options2.fuzzy && !_constants.PUNCTUATION.includes(chunk) ? (0, _fuzzy2.default)(chunk) : chunk;
          var start = acc.length ? acc[acc.length - 1].end + 1 : 0;
          var end = start + chunk.length;
          return end !== start ? acc.concat({
            start,
            end: end - 1,
            value: unfuzzyChunk,
            lowerCaseValue: unfuzzyChunk.toLowerCase(),
            type: getTokenType(unfuzzyChunk, options2)
          }) : acc;
        }, []);
        var regions = matchRegions(tokens, options2);
        return regions;
      };
    }
  });

  // node_modules/core-js/library/modules/_add-to-unscopables.js
  var require_add_to_unscopables = __commonJS({
    "node_modules/core-js/library/modules/_add-to-unscopables.js"(exports, module) {
      init_globals();
      module.exports = function() {
      };
    }
  });

  // node_modules/core-js/library/modules/_iter-step.js
  var require_iter_step = __commonJS({
    "node_modules/core-js/library/modules/_iter-step.js"(exports, module) {
      init_globals();
      module.exports = function(done, value) {
        return { value, done: !!done };
      };
    }
  });

  // node_modules/core-js/library/modules/es6.array.iterator.js
  var require_es6_array_iterator = __commonJS({
    "node_modules/core-js/library/modules/es6.array.iterator.js"(exports, module) {
      init_globals();
      var addToUnscopables = require_add_to_unscopables();
      var step = require_iter_step();
      var Iterators = require_iterators();
      var toIObject = require_to_iobject();
      module.exports = require_iter_define()(Array, "Array", function(iterated, kind) {
        this._t = toIObject(iterated);
        this._i = 0;
        this._k = kind;
      }, function() {
        var O = this._t;
        var kind = this._k;
        var index = this._i++;
        if (!O || index >= O.length) {
          this._t = void 0;
          return step(1);
        }
        if (kind == "keys")
          return step(0, index);
        if (kind == "values")
          return step(0, O[index]);
        return step(0, [index, O[index]]);
      }, "values");
      Iterators.Arguments = Iterators.Array;
      addToUnscopables("keys");
      addToUnscopables("values");
      addToUnscopables("entries");
    }
  });

  // node_modules/core-js/library/modules/web.dom.iterable.js
  var require_web_dom_iterable = __commonJS({
    "node_modules/core-js/library/modules/web.dom.iterable.js"() {
      init_globals();
      require_es6_array_iterator();
      var global2 = require_global();
      var hide = require_hide();
      var Iterators = require_iterators();
      var TO_STRING_TAG = require_wks()("toStringTag");
      var DOMIterables = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(",");
      for (i = 0; i < DOMIterables.length; i++) {
        NAME = DOMIterables[i];
        Collection = global2[NAME];
        proto = Collection && Collection.prototype;
        if (proto && !proto[TO_STRING_TAG])
          hide(proto, TO_STRING_TAG, NAME);
        Iterators[NAME] = Iterators.Array;
      }
      var NAME;
      var Collection;
      var proto;
      var i;
    }
  });

  // node_modules/core-js/library/modules/_wks-ext.js
  var require_wks_ext = __commonJS({
    "node_modules/core-js/library/modules/_wks-ext.js"(exports) {
      init_globals();
      exports.f = require_wks();
    }
  });

  // node_modules/core-js/library/fn/symbol/iterator.js
  var require_iterator = __commonJS({
    "node_modules/core-js/library/fn/symbol/iterator.js"(exports, module) {
      init_globals();
      require_es6_string_iterator();
      require_web_dom_iterable();
      module.exports = require_wks_ext().f("iterator");
    }
  });

  // node_modules/babel-runtime/core-js/symbol/iterator.js
  var require_iterator2 = __commonJS({
    "node_modules/babel-runtime/core-js/symbol/iterator.js"(exports, module) {
      init_globals();
      module.exports = { "default": require_iterator(), __esModule: true };
    }
  });

  // node_modules/core-js/library/modules/_meta.js
  var require_meta = __commonJS({
    "node_modules/core-js/library/modules/_meta.js"(exports, module) {
      init_globals();
      var META = require_uid()("meta");
      var isObject = require_is_object();
      var has = require_has();
      var setDesc = require_object_dp().f;
      var id = 0;
      var isExtensible = Object.isExtensible || function() {
        return true;
      };
      var FREEZE = !require_fails()(function() {
        return isExtensible(Object.preventExtensions({}));
      });
      var setMeta = function(it) {
        setDesc(it, META, { value: {
          i: "O" + ++id,
          w: {}
        } });
      };
      var fastKey = function(it, create) {
        if (!isObject(it))
          return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
        if (!has(it, META)) {
          if (!isExtensible(it))
            return "F";
          if (!create)
            return "E";
          setMeta(it);
        }
        return it[META].i;
      };
      var getWeak = function(it, create) {
        if (!has(it, META)) {
          if (!isExtensible(it))
            return true;
          if (!create)
            return false;
          setMeta(it);
        }
        return it[META].w;
      };
      var onFreeze = function(it) {
        if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META))
          setMeta(it);
        return it;
      };
      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey,
        getWeak,
        onFreeze
      };
    }
  });

  // node_modules/core-js/library/modules/_wks-define.js
  var require_wks_define = __commonJS({
    "node_modules/core-js/library/modules/_wks-define.js"(exports, module) {
      init_globals();
      var global2 = require_global();
      var core = require_core();
      var LIBRARY = require_library();
      var wksExt = require_wks_ext();
      var defineProperty = require_object_dp().f;
      module.exports = function(name) {
        var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global2.Symbol || {});
        if (name.charAt(0) != "_" && !(name in $Symbol))
          defineProperty($Symbol, name, { value: wksExt.f(name) });
      };
    }
  });

  // node_modules/core-js/library/modules/_enum-keys.js
  var require_enum_keys = __commonJS({
    "node_modules/core-js/library/modules/_enum-keys.js"(exports, module) {
      init_globals();
      var getKeys = require_object_keys();
      var gOPS = require_object_gops();
      var pIE = require_object_pie();
      module.exports = function(it) {
        var result = getKeys(it);
        var getSymbols = gOPS.f;
        if (getSymbols) {
          var symbols = getSymbols(it);
          var isEnum = pIE.f;
          var i = 0;
          var key;
          while (symbols.length > i)
            if (isEnum.call(it, key = symbols[i++]))
              result.push(key);
        }
        return result;
      };
    }
  });

  // node_modules/core-js/library/modules/_is-array.js
  var require_is_array = __commonJS({
    "node_modules/core-js/library/modules/_is-array.js"(exports, module) {
      init_globals();
      var cof = require_cof();
      module.exports = Array.isArray || function isArray(arg) {
        return cof(arg) == "Array";
      };
    }
  });

  // node_modules/core-js/library/modules/_object-gopn.js
  var require_object_gopn = __commonJS({
    "node_modules/core-js/library/modules/_object-gopn.js"(exports) {
      init_globals();
      var $keys = require_object_keys_internal();
      var hiddenKeys = require_enum_bug_keys().concat("length", "prototype");
      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return $keys(O, hiddenKeys);
      };
    }
  });

  // node_modules/core-js/library/modules/_object-gopn-ext.js
  var require_object_gopn_ext = __commonJS({
    "node_modules/core-js/library/modules/_object-gopn-ext.js"(exports, module) {
      init_globals();
      var toIObject = require_to_iobject();
      var gOPN = require_object_gopn().f;
      var toString = {}.toString;
      var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      var getWindowNames = function(it) {
        try {
          return gOPN(it);
        } catch (e) {
          return windowNames.slice();
        }
      };
      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(it) : gOPN(toIObject(it));
      };
    }
  });

  // node_modules/core-js/library/modules/_object-gopd.js
  var require_object_gopd = __commonJS({
    "node_modules/core-js/library/modules/_object-gopd.js"(exports) {
      init_globals();
      var pIE = require_object_pie();
      var createDesc = require_property_desc();
      var toIObject = require_to_iobject();
      var toPrimitive = require_to_primitive();
      var has = require_has();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var gOPD = Object.getOwnPropertyDescriptor;
      exports.f = require_descriptors() ? gOPD : function getOwnPropertyDescriptor(O, P) {
        O = toIObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE)
          try {
            return gOPD(O, P);
          } catch (e) {
          }
        if (has(O, P))
          return createDesc(!pIE.f.call(O, P), O[P]);
      };
    }
  });

  // node_modules/core-js/library/modules/es6.symbol.js
  var require_es6_symbol = __commonJS({
    "node_modules/core-js/library/modules/es6.symbol.js"() {
      init_globals();
      var global2 = require_global();
      var has = require_has();
      var DESCRIPTORS = require_descriptors();
      var $export = require_export();
      var redefine = require_redefine();
      var META = require_meta().KEY;
      var $fails = require_fails();
      var shared = require_shared();
      var setToStringTag = require_set_to_string_tag();
      var uid = require_uid();
      var wks = require_wks();
      var wksExt = require_wks_ext();
      var wksDefine = require_wks_define();
      var enumKeys = require_enum_keys();
      var isArray = require_is_array();
      var anObject = require_an_object();
      var isObject = require_is_object();
      var toObject = require_to_object();
      var toIObject = require_to_iobject();
      var toPrimitive = require_to_primitive();
      var createDesc = require_property_desc();
      var _create = require_object_create();
      var gOPNExt = require_object_gopn_ext();
      var $GOPD = require_object_gopd();
      var $GOPS = require_object_gops();
      var $DP = require_object_dp();
      var $keys = require_object_keys();
      var gOPD = $GOPD.f;
      var dP = $DP.f;
      var gOPN = gOPNExt.f;
      var $Symbol = global2.Symbol;
      var $JSON = global2.JSON;
      var _stringify2 = $JSON && $JSON.stringify;
      var PROTOTYPE = "prototype";
      var HIDDEN = wks("_hidden");
      var TO_PRIMITIVE = wks("toPrimitive");
      var isEnum = {}.propertyIsEnumerable;
      var SymbolRegistry = shared("symbol-registry");
      var AllSymbols = shared("symbols");
      var OPSymbols = shared("op-symbols");
      var ObjectProto = Object[PROTOTYPE];
      var USE_NATIVE = typeof $Symbol == "function" && !!$GOPS.f;
      var QObject = global2.QObject;
      var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
      var setSymbolDesc = DESCRIPTORS && $fails(function() {
        return _create(dP({}, "a", {
          get: function() {
            return dP(this, "a", { value: 7 }).a;
          }
        })).a != 7;
      }) ? function(it, key, D) {
        var protoDesc = gOPD(ObjectProto, key);
        if (protoDesc)
          delete ObjectProto[key];
        dP(it, key, D);
        if (protoDesc && it !== ObjectProto)
          dP(ObjectProto, key, protoDesc);
      } : dP;
      var wrap = function(tag) {
        var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
        sym._k = tag;
        return sym;
      };
      var isSymbol = USE_NATIVE && typeof $Symbol.iterator == "symbol" ? function(it) {
        return typeof it == "symbol";
      } : function(it) {
        return it instanceof $Symbol;
      };
      var $defineProperty = function defineProperty(it, key, D) {
        if (it === ObjectProto)
          $defineProperty(OPSymbols, key, D);
        anObject(it);
        key = toPrimitive(key, true);
        anObject(D);
        if (has(AllSymbols, key)) {
          if (!D.enumerable) {
            if (!has(it, HIDDEN))
              dP(it, HIDDEN, createDesc(1, {}));
            it[HIDDEN][key] = true;
          } else {
            if (has(it, HIDDEN) && it[HIDDEN][key])
              it[HIDDEN][key] = false;
            D = _create(D, { enumerable: createDesc(0, false) });
          }
          return setSymbolDesc(it, key, D);
        }
        return dP(it, key, D);
      };
      var $defineProperties = function defineProperties(it, P) {
        anObject(it);
        var keys = enumKeys(P = toIObject(P));
        var i = 0;
        var l = keys.length;
        var key;
        while (l > i)
          $defineProperty(it, key = keys[i++], P[key]);
        return it;
      };
      var $create = function create(it, P) {
        return P === void 0 ? _create(it) : $defineProperties(_create(it), P);
      };
      var $propertyIsEnumerable = function propertyIsEnumerable(key) {
        var E = isEnum.call(this, key = toPrimitive(key, true));
        if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))
          return false;
        return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
      };
      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
        it = toIObject(it);
        key = toPrimitive(key, true);
        if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))
          return;
        var D = gOPD(it, key);
        if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))
          D.enumerable = true;
        return D;
      };
      var $getOwnPropertyNames = function getOwnPropertyNames(it) {
        var names2 = gOPN(toIObject(it));
        var result = [];
        var i = 0;
        var key;
        while (names2.length > i) {
          if (!has(AllSymbols, key = names2[i++]) && key != HIDDEN && key != META)
            result.push(key);
        }
        return result;
      };
      var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
        var IS_OP = it === ObjectProto;
        var names2 = gOPN(IS_OP ? OPSymbols : toIObject(it));
        var result = [];
        var i = 0;
        var key;
        while (names2.length > i) {
          if (has(AllSymbols, key = names2[i++]) && (IS_OP ? has(ObjectProto, key) : true))
            result.push(AllSymbols[key]);
        }
        return result;
      };
      if (!USE_NATIVE) {
        $Symbol = function Symbol2() {
          if (this instanceof $Symbol)
            throw TypeError("Symbol is not a constructor!");
          var tag = uid(arguments.length > 0 ? arguments[0] : void 0);
          var $set = function(value) {
            if (this === ObjectProto)
              $set.call(OPSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag))
              this[HIDDEN][tag] = false;
            setSymbolDesc(this, tag, createDesc(1, value));
          };
          if (DESCRIPTORS && setter)
            setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
          return wrap(tag);
        };
        redefine($Symbol[PROTOTYPE], "toString", function toString() {
          return this._k;
        });
        $GOPD.f = $getOwnPropertyDescriptor;
        $DP.f = $defineProperty;
        require_object_gopn().f = gOPNExt.f = $getOwnPropertyNames;
        require_object_pie().f = $propertyIsEnumerable;
        $GOPS.f = $getOwnPropertySymbols;
        if (DESCRIPTORS && !require_library()) {
          redefine(ObjectProto, "propertyIsEnumerable", $propertyIsEnumerable, true);
        }
        wksExt.f = function(name) {
          return wrap(wks(name));
        };
      }
      $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
      for (es6Symbols = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), j = 0; es6Symbols.length > j; )
        wks(es6Symbols[j++]);
      var es6Symbols;
      var j;
      for (wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k; )
        wksDefine(wellKnownSymbols[k++]);
      var wellKnownSymbols;
      var k;
      $export($export.S + $export.F * !USE_NATIVE, "Symbol", {
        "for": function(key) {
          return has(SymbolRegistry, key += "") ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
        },
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym))
            throw TypeError(sym + " is not a symbol!");
          for (var key in SymbolRegistry)
            if (SymbolRegistry[key] === sym)
              return key;
        },
        useSetter: function() {
          setter = true;
        },
        useSimple: function() {
          setter = false;
        }
      });
      $export($export.S + $export.F * !USE_NATIVE, "Object", {
        create: $create,
        defineProperty: $defineProperty,
        defineProperties: $defineProperties,
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
        getOwnPropertyNames: $getOwnPropertyNames,
        getOwnPropertySymbols: $getOwnPropertySymbols
      });
      var FAILS_ON_PRIMITIVES = $fails(function() {
        $GOPS.f(1);
      });
      $export($export.S + $export.F * FAILS_ON_PRIMITIVES, "Object", {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          return $GOPS.f(toObject(it));
        }
      });
      $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
        var S = $Symbol();
        return _stringify2([S]) != "[null]" || _stringify2({ a: S }) != "{}" || _stringify2(Object(S)) != "{}";
      })), "JSON", {
        stringify: function stringify(it) {
          var args = [it];
          var i = 1;
          var replacer, $replacer;
          while (arguments.length > i)
            args.push(arguments[i++]);
          $replacer = replacer = args[1];
          if (!isObject(replacer) && it === void 0 || isSymbol(it))
            return;
          if (!isArray(replacer))
            replacer = function(key, value) {
              if (typeof $replacer == "function")
                value = $replacer.call(this, key, value);
              if (!isSymbol(value))
                return value;
            };
          args[1] = replacer;
          return _stringify2.apply($JSON, args);
        }
      });
      $Symbol[PROTOTYPE][TO_PRIMITIVE] || require_hide()($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
      setToStringTag($Symbol, "Symbol");
      setToStringTag(Math, "Math", true);
      setToStringTag(global2.JSON, "JSON", true);
    }
  });

  // node_modules/core-js/library/modules/es6.object.to-string.js
  var require_es6_object_to_string = __commonJS({
    "node_modules/core-js/library/modules/es6.object.to-string.js"() {
      init_globals();
    }
  });

  // node_modules/core-js/library/modules/es7.symbol.async-iterator.js
  var require_es7_symbol_async_iterator = __commonJS({
    "node_modules/core-js/library/modules/es7.symbol.async-iterator.js"() {
      init_globals();
      require_wks_define()("asyncIterator");
    }
  });

  // node_modules/core-js/library/modules/es7.symbol.observable.js
  var require_es7_symbol_observable = __commonJS({
    "node_modules/core-js/library/modules/es7.symbol.observable.js"() {
      init_globals();
      require_wks_define()("observable");
    }
  });

  // node_modules/core-js/library/fn/symbol/index.js
  var require_symbol = __commonJS({
    "node_modules/core-js/library/fn/symbol/index.js"(exports, module) {
      init_globals();
      require_es6_symbol();
      require_es6_object_to_string();
      require_es7_symbol_async_iterator();
      require_es7_symbol_observable();
      module.exports = require_core().Symbol;
    }
  });

  // node_modules/babel-runtime/core-js/symbol.js
  var require_symbol2 = __commonJS({
    "node_modules/babel-runtime/core-js/symbol.js"(exports, module) {
      init_globals();
      module.exports = { "default": require_symbol(), __esModule: true };
    }
  });

  // node_modules/babel-runtime/helpers/typeof.js
  var require_typeof = __commonJS({
    "node_modules/babel-runtime/helpers/typeof.js"(exports) {
      init_globals();
      exports.__esModule = true;
      var _iterator = require_iterator2();
      var _iterator2 = _interopRequireDefault(_iterator);
      var _symbol = require_symbol2();
      var _symbol2 = _interopRequireDefault(_symbol);
      var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
      };
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function(obj) {
        return typeof obj === "undefined" ? "undefined" : _typeof(obj);
      } : function(obj) {
        return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
      };
    }
  });

  // node_modules/words-to-numbers/dist/util.js
  var require_util2 = __commonJS({
    "node_modules/words-to-numbers/dist/util.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var splice = exports.splice = function splice2(str, index, count, add) {
        var i = index;
        if (i < 0) {
          i = str.length + i;
          if (i < 0) {
            i = 0;
          }
        }
        return str.slice(0, i) + (add || "") + str.slice(i + count);
      };
    }
  });

  // node_modules/words-to-numbers/dist/compiler.js
  var require_compiler = __commonJS({
    "node_modules/words-to-numbers/dist/compiler.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _typeof2 = require_typeof();
      var _typeof3 = _interopRequireDefault(_typeof2);
      var _extends2 = require_extends();
      var _extends3 = _interopRequireDefault(_extends2);
      var _util = require_util2();
      var _constants = require_constants();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var getNumber = function getNumber2(region) {
        var sum = 0;
        var decimalReached = false;
        var decimalUnits = [];
        region.subRegions.forEach(function(subRegion) {
          var tokens = subRegion.tokens;
          var type2 = subRegion.type;
          var subRegionSum = 0;
          if (type2 === _constants.TOKEN_TYPE.DECIMAL) {
            decimalReached = true;
            return;
          }
          if (decimalReached) {
            decimalUnits.push(subRegion);
            return;
          }
          switch (type2) {
            case _constants.TOKEN_TYPE.MAGNITUDE:
            case _constants.TOKEN_TYPE.HUNDRED: {
              var _ret = function() {
                subRegionSum = 1;
                var tokensCount = tokens.length;
                tokens.reduce(function(acc, token, i) {
                  if (token.type === _constants.TOKEN_TYPE.HUNDRED) {
                    var _ret2 = function() {
                      var tokensToAdd = tokensCount - 1 ? tokens.slice(i + 1) : [];
                      tokensToAdd = tokensToAdd.filter(function(tokenToAdd, j) {
                        return j === 0 || tokensToAdd[j - 1].type > tokenToAdd.type;
                      });
                      var tokensToAddSum = tokensToAdd.reduce(function(acc2, tokenToAdd) {
                        return acc2 + _constants.NUMBER[tokenToAdd.lowerCaseValue];
                      }, 0);
                      return {
                        v: acc.concat((0, _extends3.default)({}, tokens[i + 1], {
                          numberValue: tokensToAddSum + _constants.NUMBER[token.lowerCaseValue] * 100
                        }))
                      };
                    }();
                    if ((typeof _ret2 === "undefined" ? "undefined" : (0, _typeof3.default)(_ret2)) === "object")
                      return _ret2.v;
                  }
                  if (i > 0 && tokens[i - 1].type === _constants.TOKEN_TYPE.HUNDRED)
                    return acc;
                  if (i > 1 && tokens[i - 1].type === _constants.TOKEN_TYPE.TEN && tokens[i - 2].type === _constants.TOKEN_TYPE.HUNDRED)
                    return acc;
                  return acc.concat({ token, numberValue: _constants.NUMBER[token.lowerCaseValue] });
                }, []).forEach(function(_ref) {
                  var numberValue = _ref.numberValue;
                  subRegionSum *= numberValue;
                });
                return "break";
              }();
              if (_ret === "break")
                break;
            }
            case _constants.TOKEN_TYPE.UNIT:
            case _constants.TOKEN_TYPE.TEN: {
              tokens.forEach(function(token) {
                subRegionSum += _constants.NUMBER[token.lowerCaseValue];
              });
              break;
            }
          }
          sum += subRegionSum;
        });
        var currentDecimalPlace = 1;
        decimalUnits.forEach(function(_ref2) {
          var tokens = _ref2.tokens;
          tokens.forEach(function(_ref3) {
            var lowerCaseValue = _ref3.lowerCaseValue;
            sum += _constants.NUMBER[lowerCaseValue] / Math.pow(10, currentDecimalPlace);
            currentDecimalPlace += 1;
          });
        });
        return sum;
      };
      var replaceRegionsInText = function replaceRegionsInText2(regions, text) {
        var replaced = text;
        var offset = 0;
        regions.forEach(function(region) {
          var length = region.end - region.start + 1;
          var replaceWith = "" + getNumber(region);
          replaced = (0, _util.splice)(replaced, region.start + offset, length, replaceWith);
          offset -= length - replaceWith.length;
        });
        return replaced;
      };
      exports.default = function(_ref4) {
        var regions = _ref4.regions;
        var text = _ref4.text;
        if (!regions)
          return text;
        if (regions[0].end - regions[0].start === text.length - 1)
          return getNumber(regions[0]);
        return replaceRegionsInText(regions, text);
      };
    }
  });

  // node_modules/words-to-numbers/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/words-to-numbers/dist/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.wordsToNumbers = wordsToNumbers2;
      var _parser = require_parser();
      var _parser2 = _interopRequireDefault(_parser);
      var _compiler = require_compiler();
      var _compiler2 = _interopRequireDefault(_compiler);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function wordsToNumbers2(text) {
        var options2 = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
        var regions = (0, _parser2.default)(text, options2);
        if (!regions.length)
          return text;
        var compiled = (0, _compiler2.default)({ text, regions });
        return compiled;
      }
      exports.default = wordsToNumbers2;
    }
  });

  // node_modules/words-to-numbers/index.js
  var require_words_to_numbers = __commonJS({
    "node_modules/words-to-numbers/index.js"(exports, module) {
      init_globals();
      module.exports = require_dist2();
    }
  });

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/tslib/tslib.js"(exports, module) {
      init_globals();
      var __extends;
      var __assign;
      var __rest;
      var __decorate;
      var __param;
      var __metadata;
      var __awaiter;
      var __generator;
      var __exportStar;
      var __values;
      var __read;
      var __spread;
      var __spreadArrays;
      var __spreadArray;
      var __await;
      var __asyncGenerator;
      var __asyncDelegator;
      var __asyncValues;
      var __makeTemplateObject;
      var __importStar;
      var __importDefault;
      var __classPrivateFieldGet;
      var __classPrivateFieldSet;
      var __classPrivateFieldIn;
      var __createBinding;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v) {
            return exports2[id] = previous ? previous(id, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p))
              d[p] = b[p];
        };
        __extends = function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate = function(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding(o, m, p);
        };
        __createBinding = Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          var desc = Object.getOwnPropertyDescriptor(m, k);
          if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m[k];
            } };
          }
          Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __values = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
          return ar;
        };
        __spreadArrays = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __spreadArray = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
        __await = function(v) {
          return this instanceof __await ? (this.v = v, this) : new __await(v);
        };
        __asyncGenerator = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        };
        __importStar = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet = function(receiver, state, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
        };
        __classPrivateFieldSet = function(receiver, state, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends);
        exporter("__assign", __assign);
        exporter("__rest", __rest);
        exporter("__decorate", __decorate);
        exporter("__param", __param);
        exporter("__metadata", __metadata);
        exporter("__awaiter", __awaiter);
        exporter("__generator", __generator);
        exporter("__exportStar", __exportStar);
        exporter("__createBinding", __createBinding);
        exporter("__values", __values);
        exporter("__read", __read);
        exporter("__spread", __spread);
        exporter("__spreadArrays", __spreadArrays);
        exporter("__spreadArray", __spreadArray);
        exporter("__await", __await);
        exporter("__asyncGenerator", __asyncGenerator);
        exporter("__asyncDelegator", __asyncDelegator);
        exporter("__asyncValues", __asyncValues);
        exporter("__makeTemplateObject", __makeTemplateObject);
        exporter("__importStar", __importStar);
        exporter("__importDefault", __importDefault);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn);
      });
    }
  });

  // node_modules/@retorquere/bibtex-parser/grammar.js
  var require_grammar = __commonJS({
    "node_modules/@retorquere/bibtex-parser/grammar.js"(exports, module) {
      init_globals();
      function peg$subclass(child, parent) {
        function C() {
          this.constructor = child;
        }
        C.prototype = parent.prototype;
        child.prototype = new C();
      }
      function peg$SyntaxError(message, expected, found, location) {
        var self2 = Error.call(this, message);
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
        }
        self2.expected = expected;
        self2.found = found;
        self2.location = location;
        self2.name = "SyntaxError";
        return self2;
      }
      peg$subclass(peg$SyntaxError, Error);
      function peg$padEnd(str, targetLength, padString) {
        padString = padString || " ";
        if (str.length > targetLength) {
          return str;
        }
        targetLength -= str.length;
        padString += padString.repeat(targetLength);
        return str + padString.slice(0, targetLength);
      }
      peg$SyntaxError.prototype.format = function(sources) {
        var str = "Error: " + this.message;
        if (this.location) {
          var src = null;
          var k;
          for (k = 0; k < sources.length; k++) {
            if (sources[k].source === this.location.source) {
              src = sources[k].text.split(/\r\n|\n|\r/g);
              break;
            }
          }
          var s = this.location.start;
          var loc = this.location.source + ":" + s.line + ":" + s.column;
          if (src) {
            var e = this.location.end;
            var filler = peg$padEnd("", s.line.toString().length, " ");
            var line = src[s.line - 1];
            var last = s.line === e.line ? e.column : line.length + 1;
            var hatLen = last - s.column || 1;
            str += "\n --> " + loc + "\n" + filler + " |\n" + s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
          } else {
            str += "\n at " + loc;
          }
        }
        return str;
      };
      peg$SyntaxError.buildMessage = function(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return '"' + literalEscape(expectation.text) + '"';
          },
          class: function(expectation) {
            var escapedParts = expectation.parts.map(function(part) {
              return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
            });
            return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
          },
          any: function() {
            return "any character";
          },
          end: function() {
            return "end of input";
          },
          other: function(expectation) {
            return expectation.description;
          }
        };
        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function classEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected2) {
          var descriptions = expected2.map(describeExpectation);
          var i, j;
          descriptions.sort();
          if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }
            descriptions.length = j;
          }
          switch (descriptions.length) {
            case 1:
              return descriptions[0];
            case 2:
              return descriptions[0] + " or " + descriptions[1];
            default:
              return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
          }
        }
        function describeFound(found2) {
          return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
      };
      function peg$parse(input, options2) {
        options2 = options2 !== void 0 ? options2 : {};
        var peg$FAILED = {};
        var peg$source = options2.grammarSource;
        var peg$startRuleFunctions = { Bibliography: peg$parseBibliography };
        var peg$startRuleFunction = peg$parseBibliography;
        var peg$c0 = "@";
        var peg$c1 = "comment";
        var peg$c2 = "{";
        var peg$c3 = "}";
        var peg$c4 = "preamble";
        var peg$c5 = "string";
        var peg$c6 = ",";
        var peg$c7 = '"';
        var peg$c8 = "{\\verb";
        var peg$c9 = "\\begin{";
        var peg$c10 = "\\end{";
        var peg$c11 = "{\\";
        var peg$c12 = "\\";
        var peg$c13 = "$";
        var peg$c14 = "$$";
        var peg$c15 = "\\[";
        var peg$c16 = "\\]";
        var peg$c17 = "%";
        var peg$c18 = "newcommand";
        var peg$c19 = "href";
        var peg$c20 = "begin";
        var peg$c21 = "end";
        var peg$c22 = "[";
        var peg$c23 = "]";
        var peg$c24 = "=";
        var peg$c25 = "#";
        var peg$r0 = /^[^\n\r]/;
        var peg$r1 = /^[\n\r]/;
        var peg$r2 = /^[^@]/;
        var peg$r3 = /^[^{}]/;
        var peg$r4 = /^[_A-Za-z]/;
        var peg$r5 = /^[({]/;
        var peg$r6 = /^[})]/;
        var peg$r7 = /^[^ \t\r\n,]/;
        var peg$r8 = /^[_:a-zA-Z0-9\-]/;
        var peg$r9 = /^[^{}"]/;
        var peg$r10 = /^[a-zA-Z]/;
        var peg$r11 = /^[^\^_${}\\]/;
        var peg$r12 = /^[^\^_${}"\\]/;
        var peg$r13 = /^[0-9]/;
        var peg$r14 = /^[a-zA-Z0-9]/;
        var peg$r15 = /^[ij]/;
        var peg$r16 = /^[^\r\n]/;
        var peg$r17 = /^[_\^]/;
        var peg$r18 = /^[^A-Za-z0-9\t\r\n]/;
        var peg$r19 = /^[A-Za-z]/;
        var peg$r20 = /^[^\]]/;
        var peg$r21 = /^[^ \t\^_${}\\]/;
        var peg$r22 = /^[a-zA-Z\-_]/;
        var peg$r23 = /^[a-zA-Z0-9\-&_:]/;
        var peg$r24 = /^['`"=~\^.]/;
        var peg$r25 = /^['`"=~\^.cbuvdrHk]/;
        var peg$r26 = /^[\r\n]/;
        var peg$r27 = /^[ \t]/;
        var peg$r28 = /^[ \t\n\r]/;
        var peg$e0 = peg$literalExpectation("@", false);
        var peg$e1 = peg$literalExpectation("comment", true);
        var peg$e2 = peg$classExpectation(["\n", "\r"], true, false);
        var peg$e3 = peg$classExpectation(["\n", "\r"], false, false);
        var peg$e4 = peg$classExpectation(["@"], true, false);
        var peg$e5 = peg$literalExpectation("{", false);
        var peg$e6 = peg$classExpectation(["{", "}"], true, false);
        var peg$e7 = peg$literalExpectation("}", false);
        var peg$e8 = peg$classExpectation(["_", ["A", "Z"], ["a", "z"]], false, false);
        var peg$e9 = peg$classExpectation(["(", "{"], false, false);
        var peg$e10 = peg$classExpectation(["}", ")"], false, false);
        var peg$e11 = peg$literalExpectation("preamble", true);
        var peg$e12 = peg$literalExpectation("string", true);
        var peg$e13 = peg$classExpectation([" ", "	", "\r", "\n", ","], true, false);
        var peg$e14 = peg$literalExpectation(",", false);
        var peg$e15 = peg$classExpectation(["_", ":", ["a", "z"], ["A", "Z"], ["0", "9"], "-"], false, false);
        var peg$e16 = peg$literalExpectation('"', false);
        var peg$e17 = peg$classExpectation(["{", "}", '"'], true, false);
        var peg$e18 = peg$literalExpectation("{\\verb", false);
        var peg$e19 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
        var peg$e20 = peg$classExpectation(["^", "_", "$", "{", "}", "\\"], true, false);
        var peg$e21 = peg$classExpectation(["^", "_", "$", "{", "}", '"', "\\"], true, false);
        var peg$e22 = peg$classExpectation([["0", "9"]], false, false);
        var peg$e23 = peg$literalExpectation("\\begin{", false);
        var peg$e24 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
        var peg$e25 = peg$literalExpectation("\\end{", false);
        var peg$e26 = peg$literalExpectation("{\\", false);
        var peg$e27 = peg$literalExpectation("\\", false);
        var peg$e28 = peg$classExpectation(["i", "j"], false, false);
        var peg$e29 = peg$literalExpectation("$", false);
        var peg$e30 = peg$literalExpectation("$$", false);
        var peg$e31 = peg$literalExpectation("\\[", false);
        var peg$e32 = peg$literalExpectation("\\]", false);
        var peg$e33 = peg$literalExpectation("%", false);
        var peg$e34 = peg$classExpectation(["\r", "\n"], true, false);
        var peg$e35 = peg$classExpectation(["_", "^"], false, false);
        var peg$e36 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "	", "\r", "\n"], true, false);
        var peg$e37 = peg$literalExpectation("newcommand", false);
        var peg$e38 = peg$literalExpectation("href", false);
        var peg$e39 = peg$literalExpectation("begin", false);
        var peg$e40 = peg$literalExpectation("end", false);
        var peg$e41 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false);
        var peg$e42 = peg$literalExpectation("[", false);
        var peg$e43 = peg$classExpectation(["]"], true, false);
        var peg$e44 = peg$literalExpectation("]", false);
        var peg$e45 = peg$classExpectation([" ", "	", "^", "_", "$", "{", "}", "\\"], true, false);
        var peg$e46 = peg$classExpectation([["a", "z"], ["A", "Z"], "-", "_"], false, false);
        var peg$e47 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "&", "_", ":"], false, false);
        var peg$e48 = peg$classExpectation(["'", "`", '"', "=", "~", "^", "."], false, false);
        var peg$e49 = peg$classExpectation(["'", "`", '"', "=", "~", "^", ".", "c", "b", "u", "v", "d", "r", "H", "k"], false, false);
        var peg$e50 = peg$literalExpectation("=", false);
        var peg$e51 = peg$literalExpectation("#", false);
        var peg$e52 = peg$classExpectation(["\r", "\n"], false, false);
        var peg$e53 = peg$otherExpectation("Mandatory Horizontal Whitespace");
        var peg$e54 = peg$classExpectation([" ", "	"], false, false);
        var peg$e55 = peg$otherExpectation("Optional Horizontal Whitespace");
        var peg$e56 = peg$otherExpectation("Mandatory Vertical Whitespace");
        var peg$e57 = peg$otherExpectation("Optional Vertical Whitespace");
        var peg$e58 = peg$otherExpectation("Mandatory Whitespace");
        var peg$e59 = peg$classExpectation([" ", "	", "\n", "\r"], false, false);
        var peg$e60 = peg$otherExpectation("Optional Whitespace");
        var peg$f0 = function(r) {
          return {
            kind: "Bibliography",
            loc: location(),
            source: text(),
            children: r
          };
        };
        var peg$f1 = function(v) {
          return {
            kind: "BracedComment",
            loc: location(),
            source: text(),
            value: v.slice(1, -1)
          };
        };
        var peg$f2 = function(v) {
          return {
            kind: "LineComment",
            loc: location(),
            source: text(),
            value: normalizeWhitespace(v)
          };
        };
        var peg$f3 = function(v) {
          return {
            kind: "NonEntryText",
            loc: location(),
            source: text(),
            value: normalizeWhitespace(v)
          };
        };
        var peg$f4 = function(n) {
          return n;
        };
        var peg$f5 = function(comment) {
          return "{" + comment.join("") + "}";
        };
        var peg$f6 = function(type2, id, fields) {
          return {
            kind: "Entry",
            id: id || "",
            type: type2.toLowerCase(),
            loc: location(),
            source: text(),
            fields
          };
        };
        var peg$f7 = function(opener, v, closer) {
          switch (opener + closer) {
            case "{}":
            case "()":
              break;
            default:
              throw new Error(`Unbalanced opener-closer for preamble: ${opener}...${closer}`);
              break;
          }
          return {
            kind: "PreambleExpression",
            loc: location(),
            source: text(),
            value: v.reduce((a, b) => a.concat(b), [])
          };
        };
        var peg$f8 = function(k, v) {
          return {
            kind: "StringDeclaration",
            loc: location(),
            source: text(),
            name: k,
            value: v.reduce((a, b) => a.concat(b), [])
          };
        };
        var peg$f9 = function(id) {
          return id;
        };
        var peg$f10 = function(name) {
          return isVerbatimField(name) && unnestFields.includes(name);
        };
        var peg$f11 = function(name, value) {
          return {
            kind: "Field",
            loc: location(),
            source: text(),
            name,
            loc: location(),
            value: [protect(value)]
          };
        };
        var peg$f12 = function(name) {
          return isVerbatimField(name);
        };
        var peg$f13 = function(name, value) {
          return {
            kind: "Field",
            loc: location(),
            source: text(),
            name,
            loc: location(),
            value: [protect(value)]
          };
        };
        var peg$f14 = function(name, value) {
          if (unnestFields.includes(name) && Array.isArray(value) && value.length === 1 && value[0].kind === "Block") {
            if (options2.unnestMode === "preserve") {
              value[0].case = "preserve";
            } else {
              value = value[0].value;
            }
          }
          return handle_markup_switches({
            kind: "Field",
            loc: location(),
            source: text(),
            name,
            value
          });
        };
        var peg$f15 = function(name) {
          return name.toLowerCase();
        };
        var peg$f16 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: normalizeWhitespace((v || "").trim()),
            mode: "verbatim"
          });
        };
        var peg$f17 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: normalizeWhitespace(v.join("").trim()),
            mode: "verbatim"
          });
        };
        var peg$f18 = function(v) {
          return v;
        };
        var peg$f19 = function(v) {
          return "{" + v + "}";
        };
        var peg$f20 = function(v) {
          return v;
        };
        var peg$f21 = function(v) {
          return "{" + v + "}";
        };
        var peg$f22 = function() {
          return math.set(false);
        };
        var peg$f23 = function(v) {
          return v.reduce((a, b) => a.concat(b), []);
        };
        var peg$f24 = function(v) {
          return v;
        };
        var peg$f25 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: v.join("").trim(),
            mode: "verbatim"
          });
        };
        var peg$f26 = function(v) {
          return v;
        };
        var peg$f27 = function(v) {
          return v;
        };
        var peg$f28 = function(v) {
          return v;
        };
        var peg$f29 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: normalizeWhitespace(v),
            mode: math.on ? "math" : "text"
          });
        };
        var peg$f30 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: normalizeWhitespace(v),
            mode: math.on ? "math" : "text"
          });
        };
        var peg$f31 = function(v) {
          return {
            kind: "Number",
            loc: location(),
            source: text(),
            value: parseInt(v, 10)
          };
        };
        var peg$f32 = function(v) {
          return {
            kind: "StringReference",
            loc: location(),
            source: text(),
            name: v
          };
        };
        var peg$f33 = function(env, v, cenv) {
          return env === cenv;
        };
        var peg$f34 = function(env, v, cenv) {
          if (markup[env]) {
            return {
              kind: "Block",
              loc: location(),
              source: text(),
              value: v,
              markup: { [markup[env]]: true }
            };
          } else {
            return {
              kind: "Environment",
              loc: location(),
              source: text(),
              value: v,
              env
            };
          }
        };
        var peg$f35 = function(mark, char) {
          return {
            kind: "DiacriticCommand",
            loc: location(),
            source: text(),
            mark,
            dotless: !!char[1],
            character: char[1] || char[0]
          };
        };
        var peg$f36 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: v.join("").trim(),
            mode: "verbatim"
          });
        };
        var peg$f37 = function(v) {
          const block = {
            kind: "Block",
            loc: location(),
            source: text(),
            value: v,
            markup: {},
            case: "protect"
          };
          let leadingcmd = block.value.length && (block.value[0].kind.endsWith("Command") || block.value[0].kind === "Environment") ? block.value[0] : null;
          let leadingcmdblockarg = leadingcmd && leadingcmd.kind === "RegularCommand" && leadingcmd.arguments.required.length && leadingcmd.arguments.required[0].kind === "Block" && leadingcmd.arguments.required[0];
          if (leadingcmd) {
            delete block.case;
            if (leadingcmdblockarg && leadingcmdblockarg.case === "protect")
              delete leadingcmdblockarg.case;
            if (markup[leadingcmd.command]) {
              block.markup[markup[leadingcmd.command]] = true;
              block.value.shift();
            }
          }
          return handle_markup_switches(block);
        };
        var peg$f38 = function() {
          return !math.on;
        };
        var peg$f39 = function(mode) {
          return math.set(true);
        };
        var peg$f40 = function(mode, v) {
          return math.set(false);
        };
        var peg$f41 = function(mode, v) {
          return {
            kind: mode == "$$" ? "DisplayMath" : "InlineMath",
            loc: location(),
            source: text(),
            value: v,
            case: "protect",
            markup: {}
          };
        };
        var peg$f42 = function(v) {
          return {
            kind: "LineComment",
            loc: location(),
            source: text(),
            value: v
          };
        };
        var peg$f43 = function(mode, v) {
          if (v.kind === "Block")
            v = v.value;
          return {
            kind: mode === "_" ? "SubscriptCommand" : "SuperscriptCommand",
            loc: location(),
            source: text(),
            value: v
          };
        };
        var peg$f44 = function(mark, char) {
          return {
            kind: "DiacriticCommand",
            loc: location(),
            source: text(),
            mark,
            dotless: !!char[1],
            character: char[1] || char[0]
          };
        };
        var peg$f45 = function(mark, char) {
          return {
            kind: "DiacriticCommand",
            loc: location(),
            source: text(),
            mark,
            dotless: !!char[1],
            character: char[1] || char[0]
          };
        };
        var peg$f46 = function(mark, v) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: mark,
            arguments: {
              optional: [],
              required: [protect(v)]
            }
          };
        };
        var peg$f47 = function(v) {
          return {
            kind: "SymbolCommand",
            loc: location(),
            source: text(),
            command: v
          };
        };
        var peg$f48 = function(cmd, name) {
          return name.value.length == 1 && name.value[0].kind === "RegularCommand";
        };
        var peg$f49 = function(cmd, name, optional, def) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional: [],
              required: [name, def]
            }
          };
        };
        var peg$f50 = function(cmd, url2, label3) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional: [],
              required: [url2, label3]
            }
          };
        };
        var peg$f51 = function(cmd) {
          return verbatimCommands.includes(cmd) && has_arguments[cmd] === 2;
        };
        var peg$f52 = function(cmd, optional, req1, req2) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional,
              required: [protect(req1), protect(req2)]
            }
          };
        };
        var peg$f53 = function(cmd) {
          return verbatimCommands.includes(cmd) && has_arguments[cmd] === 1;
        };
        var peg$f54 = function(cmd, optional, req) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional,
              required: [protect(req)]
            }
          };
        };
        var peg$f55 = function(cmd) {
          return has_arguments[cmd] === 2;
        };
        var peg$f56 = function(cmd, optional, req1, req2) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional,
              required: [req1, req2]
            }
          };
        };
        var peg$f57 = function(cmd) {
          return has_arguments[cmd] === 1;
        };
        var peg$f58 = function(cmd, optional, req) {
          let m;
          if (req.kind === "Block") {
            switch (cmd) {
              case "textsuperscript":
              case "sp":
                req.markup.sup = true;
                break;
              case "textsubscript":
              case "sb":
                req.markup.sub = true;
                break;
              case "textsc":
                req.markup.smallCaps = true;
                break;
              case "enquote":
              case "mkbibquote":
                req.markup.enquote = true;
                break;
              case "textbf":
              case "mkbibbold":
                req.markup.bold = true;
                break;
              case "emph":
              case "textit":
              case "mkbibitalic":
              case "mkbibemph":
                req.markup.italics = true;
                break;
              default:
                if (m = cmd.match(/^((sub)*)section$/)) {
                  req.markup[`h${m[1].length / 3 + 1}`] = true;
                }
            }
          }
          if (cmd === "bibcyr")
            delete req.case;
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional,
              required: [req]
            }
          };
        };
        var peg$f59 = function(cmd, optional) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional,
              required: []
            }
          };
        };
        var peg$f60 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: v,
            mode: math.on ? "math" : "text"
          });
        };
        var peg$f61 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: normalizeWhitespace([v]),
            mode: math.on ? "math" : "text"
          });
        };
        var peg$f62 = function(v) {
          return v;
        };
        var peg$currPos = 0;
        var peg$savedPos = 0;
        var peg$posDetailsCache = [{ line: 1, column: 1 }];
        var peg$maxFailPos = 0;
        var peg$maxFailExpected = [];
        var peg$silentFails = 0;
        var peg$result;
        if ("startRule" in options2) {
          if (!(options2.startRule in peg$startRuleFunctions)) {
            throw new Error(`Can't start parsing from rule "` + options2.startRule + '".');
          }
          peg$startRuleFunction = peg$startRuleFunctions[options2.startRule];
        }
        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }
        function offset() {
          return peg$savedPos;
        }
        function range() {
          return {
            source: peg$source,
            start: peg$savedPos,
            end: peg$currPos
          };
        }
        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function expected(description, location2) {
          location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildStructuredError(
            [peg$otherExpectation(description)],
            input.substring(peg$savedPos, peg$currPos),
            location2
          );
        }
        function error(message, location2) {
          location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildSimpleError(message, location2);
        }
        function peg$literalExpectation(text2, ignoreCase) {
          return { type: "literal", text: text2, ignoreCase };
        }
        function peg$classExpectation(parts, inverted, ignoreCase) {
          return { type: "class", parts, inverted, ignoreCase };
        }
        function peg$anyExpectation() {
          return { type: "any" };
        }
        function peg$endExpectation() {
          return { type: "end" };
        }
        function peg$otherExpectation(description) {
          return { type: "other", description };
        }
        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos];
          var p;
          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }
            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };
            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }
              p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
          }
        }
        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos);
          var endPosDetails = peg$computePosDetails(endPos);
          return {
            source: peg$source,
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }
        function peg$fail(expected2) {
          if (peg$currPos < peg$maxFailPos) {
            return;
          }
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
          peg$maxFailExpected.push(expected2);
        }
        function peg$buildSimpleError(message, location2) {
          return new peg$SyntaxError(message, null, null, location2);
        }
        function peg$buildStructuredError(expected2, found, location2) {
          return new peg$SyntaxError(
            peg$SyntaxError.buildMessage(expected2, found),
            expected2,
            found,
            location2
          );
        }
        function peg$parseBibliography() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parse__();
          s2 = [];
          s3 = peg$parseNode();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseNode();
          }
          s3 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f0(s2);
          return s0;
        }
        function peg$parseComment() {
          var s0, s1, s2, s3, s4, s5, s6, s7;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c0;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e0);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1) {
              s3 = input.substr(peg$currPos, 7);
              peg$currPos += 7;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e1);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__h();
              s5 = peg$parseBracedComment();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f1(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 64) {
              s1 = peg$c0;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1) {
                s3 = input.substr(peg$currPos, 7);
                peg$currPos += 7;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e1);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__h();
                s5 = [];
                if (peg$r0.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                  }
                }
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$r0.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e2);
                    }
                  }
                }
                s6 = [];
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$r1.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e3);
                    }
                  }
                }
                peg$savedPos = s0;
                s0 = peg$f2(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              if (peg$r2.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e4);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                if (peg$r0.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                  }
                }
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  if (peg$r0.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e2);
                    }
                  }
                }
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  if (peg$r1.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e3);
                    }
                  }
                }
                peg$savedPos = s0;
                s0 = peg$f3(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
          return s0;
        }
        function peg$parseNode() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseComment();
          if (s1 === peg$FAILED) {
            s1 = peg$parsePreambleExpression();
            if (s1 === peg$FAILED) {
              s1 = peg$parseStringDeclaration();
              if (s1 === peg$FAILED) {
                s1 = peg$parseEntry();
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f4(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseBracedComment() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c2;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e5);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseBracedComment();
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$r3.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e6);
                }
              }
              if (s3 === peg$FAILED) {
                s3 = peg$parseBracedComment();
              }
            }
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f5(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseEntry() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c0;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e0);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$currPos;
            s4 = [];
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e8);
              }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$r4.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e8);
                  }
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s3 = input.substring(s3, peg$currPos);
            } else {
              s3 = s4;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (peg$r5.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e9);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parseEntryId();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s8 = peg$parse__();
                s9 = [];
                s10 = peg$parseField();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parseField();
                }
                s10 = peg$parse__();
                if (peg$r6.test(input.charAt(peg$currPos))) {
                  s11 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e10);
                  }
                }
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse__();
                  peg$savedPos = s0;
                  s0 = peg$f6(s3, s7, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parsePreambleExpression() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c0;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e0);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c4) {
              s3 = input.substr(peg$currPos, 8);
              peg$currPos += 8;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e11);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (peg$r5.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e9);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = [];
                s8 = peg$parseEnvironment();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseBlock();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseMath();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseCommand();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseText();
                      }
                    }
                  }
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseEnvironment();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseBlock();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseMath();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseCommand();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parseText();
                        }
                      }
                    }
                  }
                }
                s8 = peg$parse__();
                if (peg$r6.test(input.charAt(peg$currPos))) {
                  s9 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e10);
                  }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse__();
                  peg$savedPos = s0;
                  s0 = peg$f7(s5, s7, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseStringDeclaration() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c0;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e0);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c5) {
              s3 = input.substr(peg$currPos, 6);
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e12);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (peg$r5.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e9);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parseVariableName();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseFieldSeparator();
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parseRegularValue();
                    if (s10 !== peg$FAILED) {
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseRegularValue();
                      }
                    } else {
                      s9 = peg$FAILED;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse__();
                      if (peg$r6.test(input.charAt(peg$currPos))) {
                        s11 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e10);
                        }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse__();
                        peg$savedPos = s0;
                        s0 = peg$f8(s7, s9);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseEntryId() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$parse__();
          s2 = peg$currPos;
          s3 = [];
          if (peg$r7.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e13);
            }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e13);
              }
            }
          }
          s2 = input.substring(s2, peg$currPos);
          s3 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e14);
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f9(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseField() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8;
          s0 = peg$currPos;
          s1 = peg$parseFieldName();
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$f10(s1);
            if (s2) {
              s2 = void 0;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseFieldSeparator();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s4 = peg$c2;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s6 = peg$c2;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e5);
                    }
                  }
                  peg$silentFails--;
                  if (s6 !== peg$FAILED) {
                    peg$currPos = s5;
                    s5 = void 0;
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseVerbatimFieldValue();
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s7 = peg$c3;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e7);
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseFieldTerminator();
                        peg$savedPos = s0;
                        s0 = peg$f11(s1, s6);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFieldName();
            if (s1 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s2 = peg$f12(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseFieldSeparator();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseVerbatimFieldValue();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseFieldTerminator();
                    peg$savedPos = s0;
                    s0 = peg$f13(s1, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseFieldName();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseFieldSeparator();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseFieldValue();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseFieldTerminator();
                    peg$savedPos = s0;
                    s0 = peg$f14(s1, s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
          return s0;
        }
        function peg$parseFieldName() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$parse__();
          s2 = peg$currPos;
          s3 = [];
          if (peg$r8.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e15);
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$r8.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e15);
                }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseVerbatimFieldValue() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c7;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e16);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseVerbatimString();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c7;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e16);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f16(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c2;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseVerbatimText();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseVerbatimText();
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c3;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f17(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseVerbatimText() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = [];
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e6);
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$r3.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e6);
                }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
          } else {
            s1 = s2;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f18(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c2;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = [];
              s4 = peg$parseVerbatimText();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseVerbatimText();
              }
              s2 = input.substring(s2, peg$currPos);
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c3;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f19(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseVerbatimString() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = [];
          if (peg$r9.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e17);
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$r9.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e17);
                }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
          } else {
            s1 = s2;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f20(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c2;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = [];
              s4 = peg$parseVerbatimString();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseVerbatimString();
              }
              s2 = input.substring(s2, peg$currPos);
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c3;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f21(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseFieldValue() {
          var s0, s1, s2, s3;
          s0 = peg$parseNumber();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$f22();
            if (s1) {
              s1 = void 0;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseRegularValue();
              if (s3 === peg$FAILED) {
                s3 = peg$parseStringValue();
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseRegularValue();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseStringValue();
                }
              }
              peg$savedPos = s0;
              s0 = peg$f23(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseRegularValue() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c7;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e16);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseEnvironment();
            if (s3 === peg$FAILED) {
              s3 = peg$parseBlock();
              if (s3 === peg$FAILED) {
                s3 = peg$parseMath();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseCommand();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseTextNoQuotes();
                  }
                }
              }
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseEnvironment();
              if (s3 === peg$FAILED) {
                s3 = peg$parseBlock();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseMath();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseCommand();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseTextNoQuotes();
                    }
                  }
                }
              }
            }
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c7;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e16);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseConcat();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f24(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c8) {
              s1 = peg$c8;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e18);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              if (peg$r10.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e19);
                }
              }
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = void 0;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseVerbatimText();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseVerbatimText();
                }
                if (input.charCodeAt(peg$currPos) === 125) {
                  s4 = peg$c3;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e7);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseConcat();
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f25(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c2;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseEnvironment();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseBlock();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseMath();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseCommand();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseText();
                      }
                    }
                  }
                }
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseEnvironment();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseBlock();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseMath();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseCommand();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parseText();
                        }
                      }
                    }
                  }
                }
                if (input.charCodeAt(peg$currPos) === 125) {
                  s3 = peg$c3;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e7);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseConcat();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f26(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseStringReference();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseConcat();
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f27(s1);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
          return s0;
        }
        function peg$parseStringValue() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = peg$parseStringReference();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseConcat();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f28(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseText() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$r11.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e20);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$r11.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e20);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f29(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseTextNoQuotes() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$r12.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e21);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$r12.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e21);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f30(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseNumber() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = [];
          if (peg$r13.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e22);
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$r13.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e22);
                }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
          } else {
            s1 = s2;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f31(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseStringReference() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseVariableName();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f32(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseEnvironment() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c9) {
            s1 = peg$c9;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e23);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$r14.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e24);
              }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$r14.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e24);
                  }
                }
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = input.substring(s2, peg$currPos);
            } else {
              s2 = s3;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c3;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseEnvironment();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseBlock();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseCommand();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseMath();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseText();
                      }
                    }
                  }
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseEnvironment();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseBlock();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseCommand();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseMath();
                        if (s5 === peg$FAILED) {
                          s5 = peg$parseText();
                        }
                      }
                    }
                  }
                }
                if (input.substr(peg$currPos, 5) === peg$c10) {
                  s5 = peg$c10;
                  peg$currPos += 5;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e25);
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = [];
                  if (peg$r14.test(input.charAt(peg$currPos))) {
                    s8 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e24);
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      if (peg$r14.test(input.charAt(peg$currPos))) {
                        s8 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e24);
                        }
                      }
                    }
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s6 = input.substring(s6, peg$currPos);
                  } else {
                    s6 = s7;
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s7 = peg$c3;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e7);
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s8 = peg$f33(s2, s4, s6);
                      if (s8) {
                        s8 = void 0;
                      } else {
                        s8 = peg$FAILED;
                      }
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f34(s2, s4, s6);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseBlock() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c11) {
            s1 = peg$c11;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e26);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseExtendedDiacritic();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (peg$r14.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e24);
                }
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s5 = peg$c12;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                  }
                }
                if (s5 !== peg$FAILED) {
                  if (peg$r15.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e28);
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s5 = peg$c3;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e7);
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f35(s2, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c8) {
              s1 = peg$c8;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e18);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              if (peg$r10.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e19);
                }
              }
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = void 0;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseVerbatimText();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseVerbatimText();
                }
                if (input.charCodeAt(peg$currPos) === 125) {
                  s4 = peg$c3;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e7);
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f36(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c2;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseEnvironment();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseBlock();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseCommand();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseMath();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseText();
                      }
                    }
                  }
                }
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseEnvironment();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseBlock();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseCommand();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseMath();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parseText();
                        }
                      }
                    }
                  }
                }
                if (input.charCodeAt(peg$currPos) === 125) {
                  s3 = peg$c3;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e7);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f37(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
          return s0;
        }
        function peg$parseMath() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$f38();
          if (s1) {
            s1 = void 0;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 36) {
              s2 = peg$c13;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e29);
              }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c14) {
                s2 = peg$c14;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e30);
                }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c15) {
                  s2 = peg$c15;
                  peg$currPos += 2;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                  }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s3 = peg$f39(s2);
              if (s3) {
                s3 = void 0;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseBlock();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseCommand();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseText();
                  }
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseBlock();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseCommand();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseText();
                    }
                  }
                }
                if (input.charCodeAt(peg$currPos) === 36) {
                  s5 = peg$c13;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e29);
                  }
                }
                if (s5 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c14) {
                    s5 = peg$c14;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e30);
                    }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c16) {
                      s5 = peg$c16;
                      peg$currPos += 2;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e32);
                      }
                    }
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s6 = peg$f40(s2, s4);
                  if (s6) {
                    s6 = void 0;
                  } else {
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f41(s2, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseLineComment() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 37) {
            s1 = peg$c17;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e33);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__h();
            s3 = peg$currPos;
            s4 = [];
            if (peg$r16.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e34);
              }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$r16.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e34);
                  }
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s3 = input.substring(s3, peg$currPos);
            } else {
              s3 = s4;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseEOL();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseEOL();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f42(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseCommand() {
          var s0;
          s0 = peg$parseScriptCommand();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDiacriticCommand();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRegularCommand();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSymbolCommand();
              }
            }
          }
          return s0;
        }
        function peg$parseScriptCommand() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (peg$r17.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e35);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__h();
            s3 = peg$parseArgument();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f43(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseDiacriticCommand() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c12;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e27);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSimpleDiacritic();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (peg$r14.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e24);
                }
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s5 = peg$c12;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                  }
                }
                if (s5 !== peg$FAILED) {
                  if (peg$r15.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e28);
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f44(s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c12;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e27);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseExtendedDiacritic();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s3 = peg$c2;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                if (s3 !== peg$FAILED) {
                  if (peg$r14.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e24);
                    }
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                      s5 = peg$c12;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e27);
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      if (peg$r15.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e28);
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s5 = peg$c3;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e7);
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f45(s2, s4);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c12;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e27);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseExtendedDiacritic();
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s4 = peg$c2;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e5);
                    }
                  }
                  peg$silentFails--;
                  if (s4 !== peg$FAILED) {
                    peg$currPos = s3;
                    s3 = void 0;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseRegularValue();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f46(s2, s4);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
          return s0;
        }
        function peg$parseSymbolCommand() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c12;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e27);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            if (peg$r18.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e36);
              }
            }
            if (s3 !== peg$FAILED) {
              s2 = input.substring(s2, peg$currPos);
            } else {
              s2 = s3;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f47(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseRegularCommand() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c12;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e27);
            }
          }
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c18) {
              s2 = peg$c18;
              peg$currPos += 10;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e37);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseBlock();
              if (s3 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s4 = peg$f48(s2, s3);
                if (s4) {
                  s4 = void 0;
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseOptionalArgument();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseOptionalArgument();
                  }
                  s6 = peg$parseArgument();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f49(s2, s3, s5, s6);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c12;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e27);
              }
            }
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c19) {
                s2 = peg$c19;
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e38);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse__h();
                s4 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 123) {
                  s5 = peg$c2;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                peg$silentFails--;
                if (s5 !== peg$FAILED) {
                  peg$currPos = s4;
                  s4 = void 0;
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseVerbatimFieldValue();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseArgument();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f50(s2, s5, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c12;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e27);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 5) === peg$c20) {
                  s3 = peg$c20;
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e39);
                  }
                }
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                  s2 = void 0;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 3) === peg$c21) {
                    s4 = peg$c21;
                    peg$currPos += 3;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e40);
                    }
                  }
                  peg$silentFails--;
                  if (s4 === peg$FAILED) {
                    s3 = void 0;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = [];
                    if (peg$r19.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e41);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        if (peg$r19.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e41);
                          }
                        }
                      }
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      s4 = input.substring(s4, peg$currPos);
                    } else {
                      s4 = s5;
                    }
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s5 = peg$f51(s4);
                      if (s5) {
                        s5 = void 0;
                      } else {
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        s7 = peg$parseOptionalArgument();
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parseOptionalArgument();
                        }
                        s7 = peg$parse__h();
                        s8 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 123) {
                          s9 = peg$c2;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e5);
                          }
                        }
                        peg$silentFails--;
                        if (s9 !== peg$FAILED) {
                          peg$currPos = s8;
                          s8 = void 0;
                        } else {
                          s8 = peg$FAILED;
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseVerbatimFieldValue();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseVerbatimFieldValue();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f52(s4, s6, s9, s10);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s1 = peg$c12;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 5) === peg$c20) {
                    s3 = peg$c20;
                    peg$currPos += 5;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e39);
                    }
                  }
                  peg$silentFails--;
                  if (s3 === peg$FAILED) {
                    s2 = void 0;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 3) === peg$c21) {
                      s4 = peg$c21;
                      peg$currPos += 3;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e40);
                      }
                    }
                    peg$silentFails--;
                    if (s4 === peg$FAILED) {
                      s3 = void 0;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$currPos;
                      s5 = [];
                      if (peg$r19.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e41);
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          if (peg$r19.test(input.charAt(peg$currPos))) {
                            s6 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e41);
                            }
                          }
                        }
                      } else {
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        s4 = input.substring(s4, peg$currPos);
                      } else {
                        s4 = s5;
                      }
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s5 = peg$f53(s4);
                        if (s5) {
                          s5 = void 0;
                        } else {
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = [];
                          s7 = peg$parseOptionalArgument();
                          while (s7 !== peg$FAILED) {
                            s6.push(s7);
                            s7 = peg$parseOptionalArgument();
                          }
                          s7 = peg$parse__h();
                          s8 = peg$currPos;
                          peg$silentFails++;
                          if (input.charCodeAt(peg$currPos) === 123) {
                            s9 = peg$c2;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e5);
                            }
                          }
                          peg$silentFails--;
                          if (s9 !== peg$FAILED) {
                            peg$currPos = s8;
                            s8 = void 0;
                          } else {
                            s8 = peg$FAILED;
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseVerbatimFieldValue();
                            if (s9 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f54(s4, s6, s9);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s1 = peg$c12;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e27);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 5) === peg$c20) {
                      s3 = peg$c20;
                      peg$currPos += 5;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e39);
                      }
                    }
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                      s2 = void 0;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 3) === peg$c21) {
                        s4 = peg$c21;
                        peg$currPos += 3;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e40);
                        }
                      }
                      peg$silentFails--;
                      if (s4 === peg$FAILED) {
                        s3 = void 0;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$currPos;
                        s5 = [];
                        if (peg$r19.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e41);
                          }
                        }
                        if (s6 !== peg$FAILED) {
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            if (peg$r19.test(input.charAt(peg$currPos))) {
                              s6 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e41);
                              }
                            }
                          }
                        } else {
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          s4 = input.substring(s4, peg$currPos);
                        } else {
                          s4 = s5;
                        }
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = peg$currPos;
                          s5 = peg$f55(s4);
                          if (s5) {
                            s5 = void 0;
                          } else {
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parseOptionalArgument();
                            while (s7 !== peg$FAILED) {
                              s6.push(s7);
                              s7 = peg$parseOptionalArgument();
                            }
                            s7 = peg$parse__h();
                            s8 = peg$parseArgument();
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parseArgument();
                              if (s9 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f56(s4, s6, s8, s9);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                      s1 = peg$c12;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e27);
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 5) === peg$c20) {
                        s3 = peg$c20;
                        peg$currPos += 5;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e39);
                        }
                      }
                      peg$silentFails--;
                      if (s3 === peg$FAILED) {
                        s2 = void 0;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 3) === peg$c21) {
                          s4 = peg$c21;
                          peg$currPos += 3;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e40);
                          }
                        }
                        peg$silentFails--;
                        if (s4 === peg$FAILED) {
                          s3 = void 0;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = [];
                          if (peg$r19.test(input.charAt(peg$currPos))) {
                            s6 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e41);
                            }
                          }
                          if (s6 !== peg$FAILED) {
                            while (s6 !== peg$FAILED) {
                              s5.push(s6);
                              if (peg$r19.test(input.charAt(peg$currPos))) {
                                s6 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$e41);
                                }
                              }
                            }
                          } else {
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s4 = input.substring(s4, peg$currPos);
                          } else {
                            s4 = s5;
                          }
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = peg$currPos;
                            s5 = peg$f57(s4);
                            if (s5) {
                              s5 = void 0;
                            } else {
                              s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                              s6 = [];
                              s7 = peg$parseOptionalArgument();
                              while (s7 !== peg$FAILED) {
                                s6.push(s7);
                                s7 = peg$parseOptionalArgument();
                              }
                              s7 = peg$parse__h();
                              s8 = peg$parseArgument();
                              if (s8 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f58(s4, s6, s8);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 92) {
                        s1 = peg$c12;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e27);
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 5) === peg$c20) {
                          s3 = peg$c20;
                          peg$currPos += 5;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e39);
                          }
                        }
                        peg$silentFails--;
                        if (s3 === peg$FAILED) {
                          s2 = void 0;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = peg$currPos;
                          peg$silentFails++;
                          if (input.substr(peg$currPos, 3) === peg$c21) {
                            s4 = peg$c21;
                            peg$currPos += 3;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e40);
                            }
                          }
                          peg$silentFails--;
                          if (s4 === peg$FAILED) {
                            s3 = void 0;
                          } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = [];
                            if (peg$r19.test(input.charAt(peg$currPos))) {
                              s6 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e41);
                              }
                            }
                            if (s6 !== peg$FAILED) {
                              while (s6 !== peg$FAILED) {
                                s5.push(s6);
                                if (peg$r19.test(input.charAt(peg$currPos))) {
                                  s6 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s6 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$e41);
                                  }
                                }
                              }
                            } else {
                              s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                              s4 = input.substring(s4, peg$currPos);
                            } else {
                              s4 = s5;
                            }
                            if (s4 !== peg$FAILED) {
                              s5 = [];
                              s6 = peg$parseOptionalArgument();
                              while (s6 !== peg$FAILED) {
                                s5.push(s6);
                                s6 = peg$parseOptionalArgument();
                              }
                              s6 = peg$parse__();
                              peg$savedPos = s0;
                              s0 = peg$f59(s4, s5);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseOptionalArgument() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c22;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e42);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__h();
            s3 = peg$currPos;
            s4 = [];
            if (peg$r20.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e43);
              }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$r20.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e43);
                  }
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s3 = input.substring(s3, peg$currPos);
            } else {
              s3 = s4;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__h();
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c23;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e44);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f60(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseArgument() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = peg$parse__h();
          if (peg$r21.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e45);
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f61(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseBlock();
            if (s1 === peg$FAILED) {
              s1 = peg$parseCommand();
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f62(s1);
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parseVariableName() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (peg$r22.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e46);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$r23.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e47);
              }
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$r23.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e47);
                }
              }
            }
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
          return s0;
        }
        function peg$parseSimpleDiacritic() {
          var s0;
          if (peg$r24.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e48);
            }
          }
          return s0;
        }
        function peg$parseExtendedDiacritic() {
          var s0;
          if (peg$r25.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e49);
            }
          }
          return s0;
        }
        function peg$parseFieldSeparator() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c24;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e50);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse__();
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseFieldTerminator() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c6;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e14);
            }
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parse__h();
          s4 = [];
          s5 = peg$parseLineComment();
          if (s5 === peg$FAILED) {
            s5 = peg$parseEOL();
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseLineComment();
            if (s5 === peg$FAILED) {
              s5 = peg$parseEOL();
            }
          }
          s1 = [s1, s2, s3, s4];
          s0 = s1;
          return s0;
        }
        function peg$parseConcat() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 35) {
            s2 = peg$c25;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e51);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse__();
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseEOL() {
          var s0;
          if (peg$r26.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e52);
            }
          }
          return s0;
        }
        function peg$parse_h() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$r27.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e54);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$r27.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e54);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e53);
            }
          }
          return s0;
        }
        function peg$parse__h() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$r27.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e54);
            }
          }
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r27.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e54);
              }
            }
          }
          peg$silentFails--;
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e55);
          }
          return s0;
        }
        function peg$parse_v() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$r26.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e52);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$r26.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e52);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e56);
            }
          }
          return s0;
        }
        function peg$parse__v() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$r26.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e52);
            }
          }
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r26.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e52);
              }
            }
          }
          peg$silentFails--;
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e57);
          }
          return s0;
        }
        function peg$parse_() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$r28.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e59);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$r28.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e59);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e58);
            }
          }
          return s0;
        }
        function peg$parse__() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$r28.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e59);
            }
          }
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r28.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e59);
              }
            }
          }
          peg$silentFails--;
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e60);
          }
          return s0;
        }
        const markup = {
          sl: "italics",
          em: "italics",
          it: "italics",
          itshape: "italics",
          bf: "bold",
          bfseries: "bold",
          sc: "smallCaps",
          scshape: "smallCaps",
          tt: "fixedWidth",
          texttt: "fixedWidth",
          rm: "roman",
          sf: "sansSerif",
          verb: "verbatim"
        };
        const unnestFields = (options2.unnestFields || []).map((field) => field.toLowerCase());
        const verbatimFields = (options2.verbatimFields || ["urlraw", "url", "doi", "file", "files", "eprint", "verba", "verbb", "verbc"]).map((field) => typeof field === "string" ? field.toLowerCase() : field);
        const verbatimCommands = options2.verbatimCommands || ["texttt", "url"];
        function isVerbatimField(name) {
          return verbatimFields.find((p) => typeof p === "string" ? name === p : name.match(p));
        }
        function normalizeWhitespace(textArr) {
          if (typeof textArr === "string")
            textArr = Array.from(textArr);
          return textArr.reduce((prev, curr) => {
            if (/\s/.test(curr)) {
              if (/\s/.test(prev[prev.length - 1])) {
                return prev;
              } else {
                return prev + " ";
              }
            }
            return prev + curr;
          }, "");
        }
        const has_arguments = {
          ElsevierGlyph: 1,
          end: 1,
          begin: 1,
          bibcyr: 1,
          bibstring: 1,
          chsf: 1,
          cite: 1,
          cyrchar: 1,
          ding: 1,
          emph: 1,
          enquote: 1,
          frac: 2,
          href: 2,
          hspace: 1,
          mathrm: 1,
          mbox: 1,
          mkbibbold: 1,
          mkbibemph: 1,
          mkbibitalic: 1,
          mkbibquote: 1,
          newcommand: 2,
          noopsort: 1,
          ocirc: 1,
          section: 1,
          sb: 1,
          sp: 1,
          subsection: 1,
          subsubsection: 1,
          subsubsubsection: 1,
          t: 1,
          textbf: 1,
          textit: 1,
          textrm: 1,
          textsc: 1,
          textsubscript: 1,
          textsuperscript: 1,
          texttt: 1,
          url: 1,
          vphantom: 1,
          vspace: 1
        };
        if (options2.combiningDiacritics) {
          for (const cmd of options2.combiningDiacritics) {
            has_arguments[cmd] = 1;
          }
        }
        function say() {
          console.log(JSON.stringify(Array.from(arguments), null, 2));
          return true;
        }
        function peek(n) {
          return input.substr(peg$savedPos, n);
        }
        const math = {
          on: false,
          set: function(state) {
            this.on = state;
            return true;
          }
        };
        function basicTextConversions(node) {
          if (node.kind !== "Text")
            throw new Error(node.kind + " is not a Text node");
          switch (node.mode) {
            case "verbatim":
              break;
            case "math":
              node.value = node.value.replace(/~/g, "\xA0");
              break;
            case "text":
              node.value = node.value.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/</g, "\xA1").replace(/>/g, "\xBF").replace(/~/g, "\xA0").replace(/``/g, options2.markup.enquote.open).replace(/''/g, options2.markup.enquote.close);
              break;
            default:
              throw new Error(`Unexpected text mode ${node.mode}`);
          }
          return node;
        }
        function protect(v) {
          let source2;
          if (Array.isArray(v)) {
            source2 = v.map((e) => e.source).join("");
          } else {
            v = [v];
            source2 = v.source;
          }
          return {
            kind: "Block",
            value: v,
            markup: {},
            case: "protect",
            source: source2
          };
        }
        function handle_markup_switches(block) {
          const value = block.value;
          if (!Array.isArray(value))
            return block;
          block.value = [];
          const pseudo = {
            block: null,
            markup: {}
          };
          function pseudo_block() {
            pseudo.block = {
              kind: "Block",
              loc: location(),
              source: "",
              value: [],
              markup: JSON.parse(JSON.stringify(pseudo.markup)),
              pseudo: true
            };
            block.value.push(pseudo.block);
          }
          for (const node of value) {
            if (node.kind === "Environment" || node.kind === "Block") {
              block.value.push(node);
              if (Object.keys(pseudo.markup).length) {
                pseudo_block();
              } else {
                pseudo.block = null;
              }
              continue;
            }
            if (node.kind === "RegularCommand" && markup[node.command]) {
              if (pseudo.markup.italics) {
                delete pseudo.markup.italics;
                if (markup[node.command] !== "italics")
                  pseudo.markup[markup[node.command]] = true;
              } else {
                pseudo.markup[markup[node.command]] = true;
              }
              if (Object.keys(pseudo.markup).length) {
                pseudo_block();
              } else {
                pseudo.block = null;
              }
            }
            if (pseudo.block) {
              pseudo.block.source += node.source;
              pseudo.block.value.push(node);
            } else {
              block.value.push(node);
            }
          }
          block.value = block.value.filter((node) => !(node.pseudo && node.value.length === 0));
          return block;
        }
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
          }
          throw peg$buildStructuredError(
            peg$maxFailExpected,
            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
            peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
          );
        }
      }
      module.exports = {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    }
  });

  // node_modules/@retorquere/bibtex-parser/chunker.js
  var require_chunker = __commonJS({
    "node_modules/@retorquere/bibtex-parser/chunker.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.promises = exports.parse = void 0;
      var ParseError = class extends Error {
        constructor(message, parser) {
          message += ` @ ${parser.pos}`;
          if (parser.parsing)
            message += ` in ${JSON.stringify(parser.parsing)}`;
          super(message);
          this.name = "ParseError";
        }
      };
      var letter = new RegExp("[" + [
        /\u0041-\u005A\u00C0-\u00D6\u00D8-\u00DE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A/.source,
        /\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC/.source,
        /\u0061-\u007A\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A/.source,
        /\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F/.source,
        /\u00AA\u00BA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source
      ].join("") + "]");
      var BibtexParser = class {
        constructor() {
          this.pos = 0;
          this.entries = 0;
          this.parsing = null;
          this.chunks = [];
        }
        parse(input, options2 = {}) {
          this.max_entries = options2.max_entries || 0;
          this.input = input;
          this.bibtex();
          return this.chunks;
        }
        async parseAsync(input, options2 = {}) {
          this.max_entries = options2.max_entries || 0;
          this.input = input;
          await this.bibtexAsync();
          return this.chunks;
        }
        isWhitespace(s, horizontalOnly = false) {
          return s === " " || s === "	" || !horizontalOnly && (s === "\r" || s === "\n");
        }
        match(s) {
          this.skipWhitespace();
          if (this.input.substr(this.pos, s.length) !== s) {
            throw new ParseError(`Token mismatch, expected ${JSON.stringify(s)}, found ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
          }
          this.pos += s.length;
          this.skipWhitespace();
        }
        tryMatch(s) {
          this.skipWhitespace();
          return this.input.substr(this.pos, s.length) === s;
        }
        skipWhitespace() {
          while (this.pos < this.input.length && this.isWhitespace(this.input[this.pos]))
            this.pos++;
          if (this.input[this.pos] === "%") {
            while (this.pos < this.input.length && this.input[this.pos] !== "\n")
              this.pos++;
            while (this.pos < this.input.length && this.isWhitespace(this.input[this.pos]))
              this.pos++;
          }
        }
        value_braces() {
          let bracecount = 0;
          this.match("{");
          const start = this.pos;
          let math = false;
          while (true) {
            switch (this.input[this.pos]) {
              case "\\":
                this.pos += 1;
                break;
              case "{":
                bracecount++;
                break;
              case "}":
                if (bracecount === 0) {
                  if (math)
                    throw new ParseError("Unclosed math section", this);
                  this.pos++;
                  return this.input.substring(start, this.pos - 1);
                }
                bracecount--;
                break;
              case "$":
                math = !math;
                break;
            }
            this.pos++;
            if (this.pos >= this.input.length) {
              throw new ParseError(`Unterminated brace-value ${JSON.stringify(this.input.substr(start, 20))}`, this);
            }
          }
        }
        value_quotes() {
          this.match('"');
          const start = this.pos;
          let bracecount = 0;
          while (true) {
            switch (this.input[this.pos]) {
              case "\\":
                this.pos += 1;
                break;
              case "{":
                bracecount++;
                break;
              case "}":
                bracecount--;
                break;
              case '"':
                if (bracecount <= 0) {
                  this.pos++;
                  return this.input.substring(start, this.pos - 1);
                }
            }
            this.pos++;
            if (this.pos >= this.input.length) {
              throw new ParseError(`Unterminated quote-value ${JSON.stringify(this.input.substr(start, 20))}`, this);
            }
          }
        }
        single_value() {
          if (this.tryMatch("{")) {
            return this.value_braces();
          } else if (this.tryMatch('"')) {
            return this.value_quotes();
          } else {
            return this.key();
          }
        }
        value() {
          const values = [];
          values.push(this.single_value());
          while (this.tryMatch("#")) {
            this.match("#");
            values.push(this.single_value());
          }
          return values.join("");
        }
        key(allowUnicode = false) {
          const start = this.pos;
          while (true) {
            if (this.pos === this.input.length) {
              throw new ParseError("Runaway key", this);
            }
            if (this.input[this.pos].match(/['a-zA-Z0-9&;_:\\./-]/)) {
              this.pos++;
            } else if (allowUnicode && this.input[this.pos].match(letter)) {
              this.pos++;
            } else {
              return this.input.substring(start, this.pos);
            }
          }
        }
        key_equals_value() {
          const key = this.key();
          if (!this.tryMatch("=")) {
            throw new ParseError(`... = value expected, equals sign missing: ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
          }
          this.match("=");
          const val = this.value();
          return [key, val];
        }
        key_value_list() {
          this.key_equals_value();
          while (this.tryMatch(",")) {
            this.match(",");
            if (this.tryMatch("}")) {
              break;
            }
            this.key_equals_value();
          }
        }
        entry(_d) {
          this.parsing = this.key(true);
          this.match(",");
          this.key_value_list();
        }
        directive() {
          this.match("@");
          return `@${this.key()}`.toLowerCase();
        }
        string() {
          this.key_equals_value();
        }
        preamble() {
          this.value();
        }
        comment() {
          while (this.isWhitespace(this.input[this.pos], true))
            this.pos++;
          if (this.input[this.pos] === "{") {
            this.value_braces();
            return;
          }
          while (this.input[this.pos] !== "\n" && this.pos < this.input.length)
            this.pos++;
        }
        hasMore() {
          if (this.max_entries && this.entries >= this.max_entries)
            return false;
          return this.pos < this.input.length;
        }
        bibtex() {
          while (this.hasMore()) {
            this.parseNext();
          }
        }
        bibtexAsync() {
          return this.hasMore() ? new Promise((resolve) => resolve(this.parseNext())).then(() => this.bibtexAsync()) : Promise.resolve(null);
        }
        parseNext() {
          const chunk = {
            offset: {
              pos: this.pos,
              line: this.input.substring(0, this.pos).split("\n").length - 1
            },
            error: null,
            text: null
          };
          this.skipWhitespace();
          if (this.pos >= this.input.length)
            return;
          let guard = "";
          try {
            const d = this.directive();
            switch (d) {
              case "@string":
                this.match("{");
                this.string();
                this.match("}");
                chunk.stringDeclaration = true;
                break;
              case "@preamble":
                this.match("{");
                this.preamble();
                this.match("}");
                chunk.preamble = true;
                break;
              case "@comment":
                this.comment();
                chunk.comment = true;
                break;
              default:
                if (this.tryMatch("{")) {
                  guard = "{}";
                } else if (this.tryMatch("(")) {
                  guard = "()";
                } else {
                  throw new ParseError(`Token mismatch, expected '{' or '(', found ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
                }
                this.match(guard[0]);
                this.entry(d);
                this.match(guard[1]);
                chunk.entry = true;
                this.entries++;
                break;
            }
          } catch (err) {
            if (err.name !== "ParseError")
              throw err;
            chunk.error = err.message;
            this.pos = chunk.offset.pos + 1;
            while (this.pos < this.input.length && this.input[this.pos] !== "@")
              this.pos++;
          }
          const text = this.input.substring(chunk.offset.pos, this.pos);
          const last = this.chunks.length - 1;
          if (chunk.error && this.chunks.length && this.chunks[last].error) {
            this.chunks[last].text += text;
          } else {
            chunk.text = text;
            this.chunks.push(chunk);
          }
        }
      };
      function parse3(input, options2 = {}) {
        return new BibtexParser().parse(input, options2);
      }
      exports.parse = parse3;
      exports.promises = {
        async parse(input, options2 = {}) {
          return await new BibtexParser().parseAsync(input, options2);
        }
      };
    }
  });

  // node_modules/@retorquere/bibtex-parser/jabref.js
  var require_jabref = __commonJS({
    "node_modules/@retorquere/bibtex-parser/jabref.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parse = void 0;
      function decode(s, sep = ";") {
        s = s.replace(/\r?\n/g, "");
        let pos = 0;
        const records = [""];
        while (pos < s.length) {
          switch (s[pos]) {
            case "\\":
              pos++;
              records[0] += s[pos];
              break;
            case sep:
              records.unshift("");
              break;
            default:
              records[0] += s[pos];
          }
          pos++;
        }
        return records.reverse().filter((record) => record);
      }
      function parse3(comments) {
        const result = {
          root: [],
          groups: {}
        };
        const levels = [];
        const decoded = {
          fileDirectory: null,
          groupsversion: null,
          groupstree: null,
          grouping: null,
          databaseType: null
        };
        comments = comments.filter((comment) => {
          const m = comment.match(/^jabref-meta:\s*([^:]+):([\s\S]*)/);
          if (m) {
            decoded[m[1]] = decode(m[2]);
            return false;
          }
          return true;
        });
        if (decoded.groupsversion)
          result.groupsversion = parseInt(decoded.groupsversion[0].trim()) || decoded.groupsversion[0];
        if (decoded.fileDirectory)
          result.fileDirectory = decoded.fileDirectory[0];
        if (decoded.databaseType)
          result.databaseType = decoded.databaseType[0];
        for (const tree of ["groupstree", "grouping"]) {
          if (!decoded[tree])
            continue;
          for (const encoded of decoded[tree]) {
            const fields = decode(encoded);
            const level_type_name = decode(fields.shift(), ":");
            const m = /^([0-9]+) (.+)/.exec(level_type_name[0]);
            if (!m)
              break;
            const level = parseInt(m[1]);
            const type2 = m[2];
            if (type2 === "AllEntriesGroup")
              continue;
            const name = level_type_name[1];
            const intersection = decode(fields.shift())[0];
            const keys = tree === "grouping" ? [] : fields.map((field) => decode(field)[0]);
            const group = {
              name,
              entries: keys,
              groups: []
            };
            result.groups[name] = result.groups[name] || group;
            if (levels.length < level) {
              levels.push(group);
            } else {
              levels[level - 1] = group;
            }
            if (level === 1) {
              result.root.push(group);
            } else {
              const parent = levels[level - 2];
              switch (intersection) {
                case "0":
                  break;
                case "1":
                  group.entries = group.entries.filter((key) => parent.entries.includes(key));
                  break;
                case "2":
                  group.entries = group.entries.concat(parent.entries.filter((key) => !group.entries.includes(key)));
                  break;
              }
              levels[level - 2].groups.push(group);
            }
          }
        }
        return { comments, jabref: result };
      }
      exports.parse = parse3;
    }
  });

  // node_modules/unicode2latex/tables/ascii.json
  var require_ascii = __commonJS({
    "node_modules/unicode2latex/tables/ascii.json"(exports, module) {
      module.exports = {
        "#": { math: "\\#", text: "\\#" },
        $: { math: "\\$", text: "\\$" },
        "%": { math: "\\%", text: "\\%" },
        "&": { math: "\\&", text: "\\&" },
        "/\u200B": { text: "\\slash", commandspacer: true },
        "<": { math: "<" },
        ">": { math: ">" },
        "\\": { math: "\\backslash", text: "\\textbackslash", commandspacer: true },
        "^": { math: "\\sphat", text: "\\^" },
        _: { math: "\\_", text: "\\_" },
        i\uFE20a\uFE21: { text: "\\t{ia}" },
        "{": { math: "\\lbrace", text: "\\{" },
        "}": { math: "\\rbrace", text: "\\}" },
        "~": { math: "\\sptilde", text: "\\textasciitilde", commandspacer: true },
        "\xA0": { math: "~", space: true, text: "~" },
        "\xA1": { text: "\\textexclamdown", commandspacer: true },
        "\xA2": { math: "\\cent", text: "\\textcent", commandspacer: true, textpackages: ["textcomp"] },
        "\xA3": { math: "\\pounds", text: "\\textsterling", commandspacer: true, textpackages: ["textcomp"] },
        "\xA4": { text: "\\textcurrency", commandspacer: true, textpackages: ["textcomp"] },
        "\xA5": { math: "\\yen", text: "\\textyen", commandspacer: true, textpackages: ["textcomp"] },
        "\xA6": { text: "\\textbrokenbar", commandspacer: true, textpackages: ["textcomp"] },
        "\xA7": { text: "\\textsection", commandspacer: true, textpackages: ["textcomp"] },
        "\xA8": { math: "\\spddot", text: "\\textasciidieresis", commandspacer: true },
        "\xA9": { text: "\\textcopyright", commandspacer: true, textpackages: ["textcomp"] },
        \u00AA: { text: "\\textordfeminine", commandspacer: true, textpackages: ["textcomp"] },
        "\xAB": { text: "\\guillemotleft", commandspacer: true },
        "\xAC": { math: "\\lnot" },
        "\xAD": { math: "\\-", text: "\\-" },
        "\xAE": { math: "\\circledR", text: "\\textregistered", commandspacer: true, textpackages: ["textcomp"] },
        "\xAF": { text: "\\textasciimacron", commandspacer: true },
        "\xB0": { math: "^\\circ", text: "\\textdegree", commandspacer: true, textpackages: ["textcomp"] },
        "\xB1": { math: "\\pm" },
        "\xB2": { math: "^{2}" },
        "\xB3": { math: "^{3}" },
        "\xB4": { text: "\\textasciiacute", commandspacer: true },
        \u00B5: { text: "\\textmu", commandspacer: true },
        "\xB6": { text: "\\textparagraph", commandspacer: true, textpackages: ["textcomp"] },
        "\xB7": { math: "\\cdot" },
        "\xB8": { text: "\\c", commandspacer: true },
        "\xB9": { math: "^{1}" },
        \u00BA: { text: "\\textordmasculine", commandspacer: true, textpackages: ["textcomp"] },
        "\xBB": { text: "\\guillemotright", commandspacer: true },
        "\xBC": { math: "\\frac{1}{4}" },
        "\xBD": { math: "\\frac{1}{2}" },
        "\xBE": { math: "\\frac{3}{4}" },
        "\xBF": { text: "\\textquestiondown", commandspacer: true },
        \u00C0: { text: "\\`A" },
        \u00C1: { text: "\\'A" },
        \u00C2: { text: "\\^A" },
        \u00C3: { text: "\\~A" },
        \u00C4: { text: '\\"A' },
        \u00C5: { text: "\\AA", commandspacer: true },
        \u00C6: { text: "\\AE", commandspacer: true },
        \u00C7: { text: "\\c{C}" },
        \u00C8: { text: "\\`E" },
        \u00C9: { text: "\\'E" },
        \u00CA: { text: "\\^E" },
        \u00CB: { text: '\\"E' },
        \u00CC: { text: "\\`I" },
        \u00CD: { text: "\\'I" },
        \u00CE: { text: "\\^I" },
        \u00CF: { text: '\\"I' },
        \u00D0: { text: "\\DH", commandspacer: true },
        \u00D1: { text: "\\~N" },
        \u00D2: { text: "\\`O" },
        \u00D3: { text: "\\'O" },
        \u00D4: { text: "\\^O" },
        \u00D5: { text: "\\~O" },
        \u00D6: { text: '\\"O' },
        "\xD7": { math: "\\times", text: "\\texttimes", commandspacer: true },
        \u00D8: { text: "\\O", commandspacer: true },
        \u00D9: { text: "\\`U" },
        \u00DA: { text: "\\'U" },
        \u00DB: { text: "\\^U" },
        \u00DC: { text: '\\"U' },
        \u00DD: { text: "\\'Y" },
        \u00DE: { text: "\\TH", commandspacer: true },
        \u00DF: { text: "\\ss", commandspacer: true },
        \u00E0: { text: "\\`a" },
        \u00E1: { text: "\\'a" },
        \u00E2: { text: "\\^a" },
        \u00E3: { text: "\\~a" },
        \u00E4: { text: '\\"a' },
        \u00E5: { text: "\\aa", commandspacer: true },
        \u00E6: { text: "\\ae", commandspacer: true },
        \u00E7: { text: "\\c{c}" },
        \u00E8: { text: "\\`e" },
        \u00E9: { text: "\\'e" },
        \u00EA: { text: "\\^e" },
        \u00EB: { text: '\\"e' },
        \u00EC: { text: "\\`i" },
        \u00ED: { text: "\\'i" },
        \u00EE: { text: "\\^i" },
        \u00EF: { text: '\\"i' },
        \u00F0: { math: "\\eth", mathpackages: ["amssymb", "arevmath"], text: "\\dh", commandspacer: true },
        \u00F1: { text: "\\~n" },
        \u00F2: { text: "\\`o" },
        \u00F3: { text: "\\'o" },
        \u00F4: { text: "\\^o" },
        \u00F5: { text: "\\~o" },
        \u00F6: { text: '\\"o' },
        "\xF7": { math: "\\div" },
        \u00F8: { text: "\\o", commandspacer: true },
        \u00F9: { text: "\\`u" },
        \u00FA: { text: "\\'u" },
        \u00FB: { text: "\\^u" },
        \u00FC: { text: '\\"u' },
        \u00FD: { text: "\\'y" },
        \u00FE: { text: "\\th", commandspacer: true },
        \u00FF: { text: '\\"y' },
        \u0100: { text: "\\=A" },
        \u0101: { text: "\\=a" },
        \u0102: { text: "\\u{A}" },
        \u0103: { text: "\\u{a}" },
        \u0104: { text: "\\k{A}" },
        \u0105: { text: "\\k{a}" },
        \u0106: { text: "\\'C" },
        \u0107: { text: "\\'c" },
        \u0108: { text: "\\^C" },
        \u0109: { text: "\\^c" },
        \u010A: { text: "\\.C" },
        \u010B: { text: "\\.c" },
        \u010C: { text: "\\v{C}" },
        \u010D: { text: "\\v{c}" },
        \u010E: { text: "\\v{D}" },
        \u010F: { text: "\\v{d}" },
        \u0110: { text: "\\DJ", commandspacer: true },
        \u0111: { text: "\\dj", commandspacer: true },
        \u0112: { text: "\\=E" },
        \u0113: { text: "\\=e" },
        \u0114: { text: "\\u{E}" },
        \u0115: { text: "\\u{e}" },
        \u0116: { text: "\\.E" },
        \u0117: { text: "\\.e" },
        \u0118: { text: "\\k{E}" },
        \u0119: { text: "\\k{e}" },
        \u011A: { text: "\\v{E}" },
        \u011B: { text: "\\v{e}" },
        \u011C: { text: "\\^G" },
        \u011D: { text: "\\^g" },
        \u011E: { text: "\\u{G}" },
        \u011F: { text: "\\u{g}" },
        \u0120: { text: "\\.G" },
        \u0121: { text: "\\.g" },
        \u0122: { text: "\\c{G}" },
        \u0123: { text: "\\c{g}" },
        \u0124: { text: "\\^H" },
        \u0125: { text: "\\^h" },
        \u0126: { text: "{\\fontencoding{LELA}\\selectfont\\char40}" },
        \u0127: { math: "\\Elzxh" },
        \u0128: { text: "\\~I" },
        \u0129: { text: "\\~i" },
        \u012A: { text: "\\=I" },
        \u012B: { text: "\\=i" },
        \u012C: { text: "\\u{I}" },
        \u012D: { text: "{\\u \\i}" },
        \u012E: { text: "\\k{I}" },
        \u012F: { text: "\\k{i}" },
        \u0130: { text: "\\.I" },
        \u0131: { math: "\\imath", text: "\\i", commandspacer: true },
        \u0132: { text: "IJ" },
        \u0133: { text: "ij" },
        \u0134: { text: "\\^J" },
        \u0135: { text: "\\^\\j", commandspacer: true },
        \u0136: { text: "\\c{K}" },
        \u0137: { text: "\\c{k}" },
        \u0138: { text: "{\\fontencoding{LELA}\\selectfont\\char91}" },
        \u0139: { text: "\\'L" },
        \u013A: { text: "\\'l" },
        \u013B: { text: "\\c{L}" },
        \u013C: { text: "\\c{l}" },
        \u013D: { text: "\\v{L}" },
        \u013E: { text: "\\v{l}" },
        \u013F: { text: "{\\fontencoding{LELA}\\selectfont\\char201}" },
        \u0140: { text: "{\\fontencoding{LELA}\\selectfont\\char202}" },
        \u0141: { text: "\\L", commandspacer: true },
        \u0142: { text: "\\l", commandspacer: true },
        \u0143: { text: "\\'N" },
        \u0144: { text: "\\'n" },
        \u0145: { text: "\\c{N}" },
        \u0146: { text: "\\c{n}" },
        \u0147: { text: "\\v{N}" },
        \u0148: { text: "\\v{n}" },
        \u0149: { text: "'n" },
        \u014A: { text: "\\NG", commandspacer: true },
        \u014B: { text: "\\ng", commandspacer: true },
        \u014C: { text: "\\=O" },
        \u014D: { text: "\\=o" },
        \u014E: { text: "\\u{O}" },
        \u014F: { text: "\\u{o}" },
        \u0150: { text: "\\H{O}" },
        \u0151: { text: "\\H{o}" },
        \u0152: { text: "\\OE", commandspacer: true },
        \u0153: { text: "\\oe", commandspacer: true },
        \u0154: { text: "\\'R" },
        \u0155: { text: "\\'r" },
        \u0156: { text: "\\c{R}" },
        \u0157: { text: "\\c{r}" },
        \u0158: { text: "\\v{R}" },
        \u0159: { text: "\\v{r}" },
        \u015A: { text: "\\'S" },
        \u015B: { text: "\\'s" },
        \u015C: { text: "\\^S" },
        \u015D: { text: "\\^s" },
        \u015E: { text: "\\c{S}" },
        \u015F: { text: "\\c{s}" },
        \u0160: { text: "\\v{S}" },
        \u0161: { text: "\\v{s}" },
        \u0162: { text: "\\c{T}" },
        \u0163: { text: "\\c{t}" },
        \u0164: { text: "\\v{T}" },
        \u0165: { text: "\\v{t}" },
        \u0166: { text: "{\\fontencoding{LELA}\\selectfont\\char47}" },
        \u0167: { text: "{\\fontencoding{LELA}\\selectfont\\char63}" },
        \u0168: { text: "\\~U" },
        \u0169: { text: "\\~u" },
        \u016A: { text: "\\=U" },
        \u016B: { text: "\\=u" },
        \u016C: { text: "\\u{U}" },
        \u016D: { text: "\\u{u}" },
        \u016E: { text: "\\r{U}" },
        \u016F: { text: "\\r{u}" },
        \u0170: { text: "\\H{U}" },
        \u0171: { text: "\\H{u}" },
        \u0172: { text: "\\k{U}" },
        \u0173: { text: "\\k{u}" },
        \u0174: { text: "\\^W" },
        \u0175: { text: "\\^w" },
        \u0176: { text: "\\^Y" },
        \u0177: { text: "\\^y" },
        \u0178: { text: '\\"Y' },
        \u0179: { text: "\\'Z" },
        \u017A: { text: "\\'z" },
        \u017B: { text: "\\.Z" },
        \u017C: { text: "\\.z" },
        \u017D: { text: "\\v{Z}" },
        \u017E: { text: "\\v{z}" },
        \u017F: { text: "s" },
        \u0192: { math: "f" },
        \u0195: { text: "\\texthvlig", commandspacer: true },
        \u019E: { text: "\\textnrleg", commandspacer: true },
        \u01AA: { text: "\\textesh", commandspacer: true },
        \u01B5: { math: "\\Zbar" },
        \u01BA: { text: "{\\fontencoding{LELA}\\selectfont\\char195}" },
        \u01C2: { text: "\\textdoublepipe", commandspacer: true },
        \u01CD: { text: "\\v{A}" },
        \u01CE: { text: "\\v{a}" },
        \u01CF: { text: "\\v{I}" },
        \u01D0: { text: "\\v{i}" },
        \u01D1: { text: "\\v{O}" },
        \u01D2: { text: "\\v{o}" },
        \u01D3: { text: "\\v{U}" },
        \u01D4: { text: "\\v{u}" },
        \u01E6: { text: "\\v{G}" },
        \u01E7: { text: "\\v{g}" },
        \u01E8: { text: "\\v{K}" },
        \u01E9: { text: "\\v{k}" },
        \u01EA: { text: "\\k{O}" },
        \u01EB: { text: "\\k{o}" },
        \u01F0: { text: "\\v{j}" },
        \u01F4: { text: "\\'G" },
        \u01F5: { text: "\\'g" },
        \u0228: { text: "\\c{E}" },
        \u0229: { text: "\\c{e}" },
        "\u0237": { math: "\\jmath" },
        \u0250: { math: "\\Elztrna" },
        \u0252: { math: "\\Elztrnsa" },
        \u0254: { math: "\\Elzopeno" },
        \u0256: { math: "\\Elzrtld" },
        \u0258: { text: "{\\fontencoding{LEIP}\\selectfont\\char61}" },
        \u0259: { math: "\\Elzschwa" },
        \u025B: { math: "\\varepsilon" },
        \u0261: { text: "g" },
        \u0263: { math: "\\Elzpgamma" },
        \u0264: { math: "\\Elzpbgam" },
        \u0265: { math: "\\Elztrnh" },
        \u026C: { math: "\\Elzbtdl" },
        \u026D: { math: "\\Elzrtll" },
        \u026F: { math: "\\Elztrnm" },
        \u0270: { math: "\\Elztrnmlr" },
        \u0271: { math: "\\Elzltlmr" },
        \u0272: { text: "\\Elzltln", commandspacer: true },
        \u0273: { math: "\\Elzrtln" },
        \u0277: { math: "\\Elzclomeg" },
        \u0278: { text: "\\textphi", commandspacer: true },
        \u0279: { math: "\\Elztrnr" },
        \u027A: { math: "\\Elztrnrl" },
        \u027B: { math: "\\Elzrttrnr" },
        \u027C: { math: "\\Elzrl" },
        \u027D: { math: "\\Elzrtlr" },
        \u027E: { math: "\\Elzfhr" },
        \u027F: { text: "{\\fontencoding{LEIP}\\selectfont\\char202}" },
        \u0282: { math: "\\Elzrtls" },
        \u0283: { math: "\\Elzesh" },
        \u0287: { math: "\\Elztrnt" },
        \u0288: { math: "\\Elzrtlt" },
        \u028A: { math: "\\Elzpupsil" },
        \u028B: { math: "\\Elzpscrv" },
        \u028C: { math: "\\Elzinvv" },
        \u028D: { math: "\\Elzinvw" },
        \u028E: { math: "\\Elztrny" },
        \u0290: { math: "\\Elzrtlz" },
        \u0292: { math: "\\Elzyogh" },
        \u0294: { math: "\\Elzglst" },
        \u0295: { math: "\\Elzreglst" },
        \u0296: { math: "\\Elzinglst" },
        \u029E: { text: "\\textturnk", commandspacer: true },
        \u02A4: { math: "\\Elzdyogh" },
        \u02A7: { math: "\\Elztesh" },
        \u02B0: { math: "^{h}", text: "\\textsuperscript{h}" },
        \u02B2: { math: "^{j}", text: "\\textsuperscript{j}" },
        \u02B3: { math: "^{r}", text: "\\textsuperscript{r}" },
        \u02B7: { math: "^{w}", text: "\\textsuperscript{w}" },
        \u02B8: { math: "^{y}", text: "\\textsuperscript{y}" },
        "\u02B9": { text: "'" },
        \u02BB: { text: "'" },
        \u02BC: { text: "'" },
        \u02BD: { text: "'" },
        \u02BF: { text: "\\lasp", commandspacer: true, textpackages: ["mathscinet"] },
        "\u02C6": { text: "\\textasciicircum", commandspacer: true },
        "\u02C7": { text: "\\textasciicaron", commandspacer: true },
        "\u02C8": { math: "\\Elzverts" },
        "\u02C9": { text: "-" },
        "\u02CC": { math: "\\Elzverti" },
        \u02D0: { math: "\\Elzlmrk" },
        \u02D1: { math: "\\Elzhlmrk" },
        "\u02D2": { math: "\\Elzsbrhr" },
        "\u02D3": { math: "\\Elzsblhr" },
        "\u02D4": { math: "\\Elzrais" },
        "\u02D5": { math: "\\Elzlow" },
        "\u02D8": { text: "\\textasciibreve", commandspacer: true },
        "\u02D9": { text: "\\textperiodcentered", commandspacer: true, textpackages: ["textcomp"] },
        "\u02DA": { text: "\\r{}" },
        "\u02DB": { text: "\\k{}" },
        "\u02DC": { text: "\\texttildelow", commandspacer: true },
        "\u02DD": { text: "\\H{}" },
        \u02E1: { math: "^{l}", text: "\\textsuperscript{l}" },
        \u02E2: { math: "^{s}", text: "\\textsuperscript{s}" },
        \u02E3: { math: "^{x}", text: "\\textsuperscript{x}" },
        "\u02E5": { text: "\\tone{55}" },
        "\u02E6": { text: "\\tone{44}" },
        "\u02E7": { text: "\\tone{33}" },
        "\u02E8": { text: "\\tone{22}" },
        "\u02E9": { text: "\\tone{11}" },
        "\u0300": { math: "\\grave", combiningdiacritic: true, text: "\\`" },
        "\u0300\u0304": { text: "\\textgravemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0300": { text: "\\textgravemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0300\u0307": { text: "\\textgravedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0300": { text: "\\textgravedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301": { math: "\\acute", combiningdiacritic: true, text: "\\'" },
        "\u0301\u0304": { text: "\\textacutemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0301": { text: "\\textacutemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301\u030C": { text: "\\textacutewedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030C\u0301": { text: "\\textacutewedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0302": { math: "\\hat", combiningdiacritic: true, text: "\\^" },
        "\u0302\u0307": { text: "\\textcircumdot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0302": { text: "\\textcircumdot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0303": { math: "\\tilde", combiningdiacritic: true, text: "\\~" },
        "\u0303\u0307": { text: "\\texttildedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0303": { text: "\\texttildedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304": { math: "\\bar", combiningdiacritic: true, text: "\\=" },
        "\u0305": { math: "\\overline", combiningdiacritic: true },
        "\u0306": { math: "\\breve", combiningdiacritic: true, text: "\\u", commandspacer: true },
        "\u0306\u0304": { text: "\\textbrevemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0306": { text: "\\textbrevemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307": { math: "\\dot", combiningdiacritic: true, text: "\\." },
        "\u0307\u0301": { text: "\\textdotacute", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301\u0307": { text: "\\textdotacute", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0306": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0306\u0307": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0308": { math: "\\ddot", combiningdiacritic: true, text: '\\"' },
        "\u0309": { math: "\\ovhook" },
        "\u030A": { math: "\\mathring", combiningdiacritic: true, text: "\\r", commandspacer: true },
        "\u030A\u0304": { text: "\\textringmacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u030A": { text: "\\textringmacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030B": { text: "\\H", commandspacer: true, combiningdiacritic: true },
        "\u030C": { math: "\\check", text: "\\v", commandspacer: true, combiningdiacritic: true },
        "\u030D": { text: "\\textvbaraccent", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030E": { text: "\\textdoublevbaraccent", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030F": { text: "\\textdoublegrave", commandspacer: true, combiningdiacritic: true },
        "\u0310": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0311": { text: "{\\fontencoding{LECO}\\selectfont\\char177}" },
        "\u0312": { math: "\\oturnedcomma" },
        "\u0315": { math: "\\ocommatopright" },
        "\u0316": { text: "\\textsubgrave", commandspacer: true, combiningdiacritic: true },
        "\u0318": { text: "\\textadvancing", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0319": { text: "\\textretracting", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031A": { math: "\\droang", text: "\\textcorner", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031C": { text: "\\textsublhalfring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031D": { text: "\\textraising", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031E": { text: "\\textlowering", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031F": { text: "\\textsubplus", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0321": { math: "\\Elzpalh" },
        "\u0322": { text: "\\Elzrh", commandspacer: true },
        "\u0323": { text: "\\d", commandspacer: true, combiningdiacritic: true },
        "\u0324": { text: "\\textsubumlaut", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0325": { text: "\\textsubring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0327": { text: "\\c", commandspacer: true, combiningdiacritic: true },
        "\u0328": { text: "\\k", commandspacer: true, combiningdiacritic: true },
        "\u0329": { text: "\\textsyllabic", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032A": { math: "\\Elzsbbrg", text: "\\textsubbridge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032B": { text: "{\\fontencoding{LECO}\\selectfont\\char203}" },
        "\u032C": { text: "\\textsubwedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032F": { text: "\\textsubarch", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0330": { math: "\\utilde", text: "\\textsubtilde", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0331": { math: "\\underbar", combiningdiacritic: true, text: "\\textsubbar", commandspacer: true, textpackages: ["tipa"] },
        "\u0332": { math: "\\underline" },
        "\u0334": { text: "\\textsuperimposetilde", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0335": { text: "\\Elzxl", commandspacer: true },
        "\u0336": { text: "\\Elzbar", commandspacer: true },
        "\u0337": { text: "{\\fontencoding{LECO}\\selectfont\\char215}" },
        "\u0338": { math: "\\not" },
        "\u0339": { text: "\\textsubrhalfring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033A": { text: "\\textinvsubbridge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033B": { text: "\\textsubsquare", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033C": { text: "\\textseagull", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033D": { text: "\\textovercross", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0361": { text: "{\\fontencoding{LECO}\\selectfont\\char225}" },
        "\u0374": { text: "'" },
        "\u0375": { text: "," },
        "\u037E": { text: ";" },
        \u0386: { text: "\\'A" },
        \u0388: { text: "\\'E" },
        \u0389: { text: "\\'H" },
        \u038A: { text: "{\\'{}I}" },
        \u038C: { text: "{\\'{}O}" },
        \u038E: { math: "\\mathrm{'Y}" },
        \u038F: { math: "\\mathrm{'\\Omega}" },
        \u0390: { math: "\\acute{\\ddot{\\iota}}" },
        \u0391: { math: "A" },
        \u0392: { math: "B" },
        \u0393: { math: "\\Gamma" },
        \u0394: { math: "\\Delta" },
        \u0395: { math: "E" },
        \u0396: { math: "Z" },
        \u0397: { math: "H" },
        \u0398: { math: "\\Theta" },
        \u0399: { math: "I" },
        \u039A: { math: "K" },
        \u039B: { math: "\\Lambda" },
        \u039C: { math: "M" },
        \u039D: { math: "N" },
        \u039E: { math: "\\Xi" },
        \u039F: { math: "O" },
        \u03A0: { math: "\\Pi" },
        \u03A1: { math: "P" },
        \u03A3: { math: "\\Sigma" },
        \u03A4: { math: "T" },
        \u03A5: { math: "\\Upsilon" },
        \u03A6: { math: "\\Phi" },
        \u03A7: { math: "X" },
        \u03A8: { math: "\\Psi" },
        \u03A9: { math: "\\Omega" },
        \u03AA: { math: "\\mathrm{\\ddot{I}}" },
        \u03AB: { math: "\\mathrm{\\ddot{Y}}" },
        \u03AC: { text: "{\\'$\\alpha$}" },
        \u03AD: { math: "\\acute{\\epsilon}" },
        \u03AE: { math: "\\acute{\\eta}" },
        \u03AF: { math: "\\acute{\\iota}" },
        \u03B0: { math: "\\acute{\\ddot{\\upsilon}}" },
        \u03B1: { math: "\\alpha" },
        \u03B2: { math: "\\beta" },
        \u03B3: { math: "\\gamma" },
        \u03B4: { math: "\\delta" },
        \u03B5: { math: "\\epsilon" },
        \u03B6: { math: "\\zeta" },
        \u03B7: { math: "\\eta" },
        \u03B8: { math: "\\theta", text: "\\texttheta", commandspacer: true },
        \u03B9: { math: "\\iota" },
        \u03BA: { math: "\\kappa" },
        \u03BB: { math: "\\lambda" },
        \u03BC: { math: "\\mu" },
        \u03BD: { math: "\\nu" },
        \u03BE: { math: "\\xi" },
        \u03BF: { math: "o" },
        \u03C0: { math: "\\pi" },
        \u03C1: { math: "\\rho" },
        \u03C2: { math: "\\varsigma" },
        \u03C3: { math: "\\sigma" },
        \u03C4: { math: "\\tau" },
        \u03C5: { math: "\\upsilon" },
        \u03C6: { math: "\\varphi" },
        \u03C7: { math: "\\chi" },
        \u03C8: { math: "\\psi" },
        \u03C9: { math: "\\omega" },
        \u03CA: { math: "\\ddot{\\iota}" },
        \u03CB: { math: "\\ddot{\\upsilon}" },
        \u03CC: { text: "\\'o" },
        \u03CD: { math: "\\acute{\\upsilon}" },
        \u03CE: { math: "\\acute{\\omega}" },
        \u03D0: { math: "\\varbeta", text: "\\Pisymbol{ppi022}{87}" },
        \u03D1: { math: "\\vartheta", text: "\\textvartheta", commandspacer: true },
        \u03D2: { math: "\\Upsilon" },
        \u03D5: { math: "\\phi" },
        \u03D6: { math: "\\varpi" },
        "\u03D8": { math: "\\Qoppa" },
        "\u03D9": { math: "\\qoppa" },
        \u03DA: { math: "\\Stigma" },
        \u03DB: { math: "\\stigma" },
        \u03DC: { math: "\\Digamma" },
        \u03DD: { math: "\\digamma" },
        \u03DE: { math: "\\Koppa" },
        \u03DF: { math: "\\koppa" },
        \u03E0: { math: "\\Sampi" },
        \u03E1: { math: "\\sampi" },
        \u03F0: { math: "\\varkappa" },
        \u03F1: { math: "\\varrho" },
        "\u03F4": { math: "\\upvarTheta", text: "\\textTheta", commandspacer: true },
        "\u03F5": { math: "\\epsilon" },
        "\u03F6": { math: "\\backepsilon" },
        \u0401: { text: "\\cyrchar\\CYRYO", commandspacer: true },
        \u0402: { text: "\\cyrchar\\CYRDJE", commandspacer: true },
        \u0403: { text: "\\cyrchar{\\'\\CYRG}" },
        \u0404: { text: "\\cyrchar\\CYRIE", commandspacer: true },
        \u0405: { text: "\\cyrchar\\CYRDZE", commandspacer: true },
        \u0406: { text: "\\cyrchar\\CYRII", commandspacer: true },
        \u0407: { text: "\\cyrchar\\CYRYI", commandspacer: true },
        \u0408: { text: "\\cyrchar\\CYRJE", commandspacer: true },
        \u0409: { text: "\\cyrchar\\CYRLJE", commandspacer: true },
        \u040A: { text: "\\cyrchar\\CYRNJE", commandspacer: true },
        \u040B: { text: "\\cyrchar\\CYRTSHE", commandspacer: true },
        \u040C: { text: "\\cyrchar{\\'\\CYRK}" },
        \u040E: { text: "\\cyrchar\\CYRUSHRT", commandspacer: true },
        \u040F: { text: "\\cyrchar\\CYRDZHE", commandspacer: true },
        \u0410: { text: "\\cyrchar\\CYRA", commandspacer: true },
        \u0411: { text: "\\cyrchar\\CYRB", commandspacer: true },
        \u0412: { text: "\\cyrchar\\CYRV", commandspacer: true },
        \u0413: { text: "\\cyrchar\\CYRG", commandspacer: true },
        \u0414: { text: "\\cyrchar\\CYRD", commandspacer: true },
        \u0415: { text: "\\cyrchar\\CYRE", commandspacer: true },
        \u0416: { text: "\\cyrchar\\CYRZH", commandspacer: true },
        \u0417: { text: "\\cyrchar\\CYRZ", commandspacer: true },
        \u0418: { text: "\\cyrchar\\CYRI", commandspacer: true },
        \u0419: { text: "\\cyrchar\\CYRISHRT", commandspacer: true },
        \u041A: { text: "\\cyrchar\\CYRK", commandspacer: true },
        \u041B: { text: "\\cyrchar\\CYRL", commandspacer: true },
        \u041C: { text: "\\cyrchar\\CYRM", commandspacer: true },
        \u041D: { text: "\\cyrchar\\CYRN", commandspacer: true },
        \u041E: { text: "\\cyrchar\\CYRO", commandspacer: true },
        \u041F: { text: "\\cyrchar\\CYRP", commandspacer: true },
        \u0420: { text: "\\cyrchar\\CYRR", commandspacer: true },
        \u0421: { text: "\\cyrchar\\CYRS", commandspacer: true },
        \u0422: { text: "\\cyrchar\\CYRT", commandspacer: true },
        \u0423: { text: "\\cyrchar\\CYRU", commandspacer: true },
        \u0424: { text: "\\cyrchar\\CYRF", commandspacer: true },
        \u0425: { text: "\\cyrchar\\CYRH", commandspacer: true },
        \u0426: { text: "\\cyrchar\\CYRC", commandspacer: true },
        \u0427: { text: "\\cyrchar\\CYRCH", commandspacer: true },
        \u0428: { text: "\\cyrchar\\CYRSH", commandspacer: true },
        \u0429: { text: "\\cyrchar\\CYRSHCH", commandspacer: true },
        \u042A: { text: "\\cyrchar\\CYRHRDSN", commandspacer: true },
        \u042B: { text: "\\cyrchar\\CYRERY", commandspacer: true },
        \u042C: { text: "\\cyrchar\\CYRSFTSN", commandspacer: true },
        \u042D: { text: "\\cyrchar\\CYREREV", commandspacer: true },
        \u042E: { text: "\\cyrchar\\CYRYU", commandspacer: true },
        \u042F: { text: "\\cyrchar\\CYRYA", commandspacer: true },
        \u0430: { text: "\\cyrchar\\cyra", commandspacer: true },
        \u0431: { text: "\\cyrchar\\cyrb", commandspacer: true },
        \u0432: { text: "\\cyrchar\\cyrv", commandspacer: true },
        \u0433: { text: "\\cyrchar\\cyrg", commandspacer: true },
        \u0434: { text: "\\cyrchar\\cyrd", commandspacer: true },
        \u0435: { text: "\\cyrchar\\cyre", commandspacer: true },
        \u0436: { text: "\\cyrchar\\cyrzh", commandspacer: true },
        \u0437: { text: "\\cyrchar\\cyrz", commandspacer: true },
        \u0438: { text: "\\cyrchar\\cyri", commandspacer: true },
        \u0439: { text: "\\cyrchar\\cyrishrt", commandspacer: true },
        \u043A: { text: "\\cyrchar\\cyrk", commandspacer: true },
        \u043B: { text: "\\cyrchar\\cyrl", commandspacer: true },
        \u043C: { text: "\\cyrchar\\cyrm", commandspacer: true },
        \u043D: { text: "\\cyrchar\\cyrn", commandspacer: true },
        \u043E: { text: "\\cyrchar\\cyro", commandspacer: true },
        \u043F: { text: "\\cyrchar\\cyrp", commandspacer: true },
        \u0440: { text: "\\cyrchar\\cyrr", commandspacer: true },
        \u0441: { text: "\\cyrchar\\cyrs", commandspacer: true },
        \u0442: { text: "\\cyrchar\\cyrt", commandspacer: true },
        \u0443: { text: "\\cyrchar\\cyru", commandspacer: true },
        \u0444: { text: "\\cyrchar\\cyrf", commandspacer: true },
        \u0445: { text: "\\cyrchar\\cyrh", commandspacer: true },
        \u0446: { text: "\\cyrchar\\cyrc", commandspacer: true },
        \u0447: { text: "\\cyrchar\\cyrch", commandspacer: true },
        \u0448: { text: "\\cyrchar\\cyrsh", commandspacer: true },
        \u0449: { text: "\\cyrchar\\cyrshch", commandspacer: true },
        \u044A: { text: "\\cyrchar\\cyrhrdsn", commandspacer: true },
        \u044B: { text: "\\cyrchar\\cyrery", commandspacer: true },
        \u044C: { text: "\\cyrchar\\cyrsftsn", commandspacer: true },
        \u044D: { text: "\\cyrchar\\cyrerev", commandspacer: true },
        \u044E: { text: "\\cyrchar\\cyryu", commandspacer: true },
        \u044F: { text: "\\cyrchar\\cyrya", commandspacer: true },
        \u0451: { text: "\\cyrchar\\cyryo", commandspacer: true },
        \u0452: { text: "\\cyrchar\\cyrdje", commandspacer: true },
        \u0453: { text: "\\cyrchar{\\'\\cyrg}" },
        \u0454: { text: "\\cyrchar\\cyrie", commandspacer: true },
        \u0455: { text: "\\cyrchar\\cyrdze", commandspacer: true },
        \u0456: { text: "\\cyrchar\\cyrii", commandspacer: true },
        \u0457: { text: "\\cyrchar\\cyryi", commandspacer: true },
        \u0458: { text: "\\cyrchar\\cyrje", commandspacer: true },
        \u0459: { text: "\\cyrchar\\cyrlje", commandspacer: true },
        \u045A: { text: "\\cyrchar\\cyrnje", commandspacer: true },
        \u045B: { text: "\\cyrchar\\cyrtshe", commandspacer: true },
        \u045C: { text: "\\cyrchar{\\'\\cyrk}" },
        \u045E: { text: "\\cyrchar\\cyrushrt", commandspacer: true },
        \u045F: { text: "\\cyrchar\\cyrdzhe", commandspacer: true },
        \u0460: { text: "\\cyrchar\\CYROMEGA", commandspacer: true },
        \u0461: { text: "\\cyrchar\\cyromega", commandspacer: true },
        \u0462: { text: "\\cyrchar\\CYRYAT", commandspacer: true },
        \u0464: { text: "\\cyrchar\\CYRIOTE", commandspacer: true },
        \u0465: { text: "\\cyrchar\\cyriote", commandspacer: true },
        \u0466: { text: "\\cyrchar\\CYRLYUS", commandspacer: true },
        \u0467: { text: "\\cyrchar\\cyrlyus", commandspacer: true },
        \u0468: { text: "\\cyrchar\\CYRIOTLYUS", commandspacer: true },
        \u0469: { text: "\\cyrchar\\cyriotlyus", commandspacer: true },
        \u046A: { text: "\\cyrchar\\CYRBYUS", commandspacer: true },
        \u046C: { text: "\\cyrchar\\CYRIOTBYUS", commandspacer: true },
        \u046D: { text: "\\cyrchar\\cyriotbyus", commandspacer: true },
        \u046E: { text: "\\cyrchar\\CYRKSI", commandspacer: true },
        \u046F: { text: "\\cyrchar\\cyrksi", commandspacer: true },
        \u0470: { text: "\\cyrchar\\CYRPSI", commandspacer: true },
        \u0471: { text: "\\cyrchar\\cyrpsi", commandspacer: true },
        \u0472: { text: "\\cyrchar\\CYRFITA", commandspacer: true },
        \u0474: { text: "\\cyrchar\\CYRIZH", commandspacer: true },
        \u0478: { text: "\\cyrchar\\CYRUK", commandspacer: true },
        \u0479: { text: "\\cyrchar\\cyruk", commandspacer: true },
        \u047A: { text: "\\cyrchar\\CYROMEGARND", commandspacer: true },
        \u047B: { text: "\\cyrchar\\cyromegarnd", commandspacer: true },
        \u047C: { text: "\\cyrchar\\CYROMEGATITLO", commandspacer: true },
        \u047D: { text: "\\cyrchar\\cyromegatitlo", commandspacer: true },
        \u047E: { text: "\\cyrchar\\CYROT", commandspacer: true },
        \u047F: { text: "\\cyrchar\\cyrot", commandspacer: true },
        \u0480: { text: "\\cyrchar\\CYRKOPPA", commandspacer: true },
        \u0481: { text: "\\cyrchar\\cyrkoppa", commandspacer: true },
        "\u0482": { text: "\\cyrchar\\cyrthousands", commandspacer: true },
        "\u0488": { text: "\\cyrchar\\cyrhundredthousands", commandspacer: true },
        "\u0489": { text: "\\cyrchar\\cyrmillions", commandspacer: true },
        \u048C: { text: "\\cyrchar\\CYRSEMISFTSN", commandspacer: true },
        \u048D: { text: "\\cyrchar\\cyrsemisftsn", commandspacer: true },
        \u048E: { text: "\\cyrchar\\CYRRTICK", commandspacer: true },
        \u048F: { text: "\\cyrchar\\cyrrtick", commandspacer: true },
        \u0490: { text: "\\cyrchar\\CYRGUP", commandspacer: true },
        \u0491: { text: "\\cyrchar\\cyrgup", commandspacer: true },
        \u0492: { text: "\\cyrchar\\CYRGHCRS", commandspacer: true },
        \u0493: { text: "\\cyrchar\\cyrghcrs", commandspacer: true },
        \u0494: { text: "\\cyrchar\\CYRGHK", commandspacer: true },
        \u0495: { text: "\\cyrchar\\cyrghk", commandspacer: true },
        \u0496: { text: "\\cyrchar\\CYRZHDSC", commandspacer: true },
        \u0497: { text: "\\cyrchar\\cyrzhdsc", commandspacer: true },
        \u0498: { text: "\\cyrchar\\CYRZDSC", commandspacer: true },
        \u0499: { text: "\\cyrchar\\cyrzdsc", commandspacer: true },
        \u049A: { text: "\\cyrchar\\CYRKDSC", commandspacer: true },
        \u049B: { text: "\\cyrchar\\cyrkdsc", commandspacer: true },
        \u049C: { text: "\\cyrchar\\CYRKVCRS", commandspacer: true },
        \u049D: { text: "\\cyrchar\\cyrkvcrs", commandspacer: true },
        \u049E: { text: "\\cyrchar\\CYRKHCRS", commandspacer: true },
        \u049F: { text: "\\cyrchar\\cyrkhcrs", commandspacer: true },
        \u04A0: { text: "\\cyrchar\\CYRKBEAK", commandspacer: true },
        \u04A1: { text: "\\cyrchar\\cyrkbeak", commandspacer: true },
        \u04A2: { text: "\\cyrchar\\CYRNDSC", commandspacer: true },
        \u04A3: { text: "\\cyrchar\\cyrndsc", commandspacer: true },
        \u04A4: { text: "\\cyrchar\\CYRNG", commandspacer: true },
        \u04A5: { text: "\\cyrchar\\cyrng", commandspacer: true },
        \u04A6: { text: "\\cyrchar\\CYRPHK", commandspacer: true },
        \u04A7: { text: "\\cyrchar\\cyrphk", commandspacer: true },
        \u04A8: { text: "\\cyrchar\\CYRABHHA", commandspacer: true },
        \u04A9: { text: "\\cyrchar\\cyrabhha", commandspacer: true },
        \u04AA: { text: "\\cyrchar\\CYRSDSC", commandspacer: true },
        \u04AB: { text: "\\cyrchar\\cyrsdsc", commandspacer: true },
        \u04AC: { text: "\\cyrchar\\CYRTDSC", commandspacer: true },
        \u04AD: { text: "\\cyrchar\\cyrtdsc", commandspacer: true },
        \u04AE: { text: "\\cyrchar\\CYRY", commandspacer: true },
        \u04AF: { text: "\\cyrchar\\cyry", commandspacer: true },
        \u04B0: { text: "\\cyrchar\\CYRYHCRS", commandspacer: true },
        \u04B1: { text: "\\cyrchar\\cyryhcrs", commandspacer: true },
        \u04B2: { text: "\\cyrchar\\CYRHDSC", commandspacer: true },
        \u04B3: { text: "\\cyrchar\\cyrhdsc", commandspacer: true },
        \u04B4: { text: "\\cyrchar\\CYRTETSE", commandspacer: true },
        \u04B5: { text: "\\cyrchar\\cyrtetse", commandspacer: true },
        \u04B6: { text: "\\cyrchar\\CYRCHRDSC", commandspacer: true },
        \u04B7: { text: "\\cyrchar\\cyrchrdsc", commandspacer: true },
        \u04B8: { text: "\\cyrchar\\CYRCHVCRS", commandspacer: true },
        \u04B9: { text: "\\cyrchar\\cyrchvcrs", commandspacer: true },
        \u04BA: { text: "\\cyrchar\\CYRSHHA", commandspacer: true },
        \u04BB: { text: "\\cyrchar\\cyrshha", commandspacer: true },
        \u04BC: { text: "\\cyrchar\\CYRABHCH", commandspacer: true },
        \u04BD: { text: "\\cyrchar\\cyrabhch", commandspacer: true },
        \u04BE: { text: "\\cyrchar\\CYRABHCHDSC", commandspacer: true },
        \u04BF: { text: "\\cyrchar\\cyrabhchdsc", commandspacer: true },
        \u04C0: { text: "\\cyrchar\\CYRpalochka", commandspacer: true },
        \u04C3: { text: "\\cyrchar\\CYRKHK", commandspacer: true },
        \u04C4: { text: "\\cyrchar\\cyrkhk", commandspacer: true },
        \u04C7: { text: "\\cyrchar\\CYRNHK", commandspacer: true },
        \u04C8: { text: "\\cyrchar\\cyrnhk", commandspacer: true },
        \u04CB: { text: "\\cyrchar\\CYRCHLDSC", commandspacer: true },
        \u04CC: { text: "\\cyrchar\\cyrchldsc", commandspacer: true },
        \u04D4: { text: "\\cyrchar\\CYRAE", commandspacer: true },
        \u04D5: { text: "\\cyrchar\\cyrae", commandspacer: true },
        \u04D8: { text: "\\cyrchar\\CYRSCHWA", commandspacer: true },
        \u04D9: { text: "\\cyrchar\\cyrschwa", commandspacer: true },
        \u04E0: { text: "\\cyrchar\\CYRABHDZE", commandspacer: true },
        \u04E1: { text: "\\cyrchar\\cyrabhdze", commandspacer: true },
        \u04E8: { text: "\\cyrchar\\CYROTLD", commandspacer: true },
        \u04E9: { text: "\\cyrchar\\cyrotld", commandspacer: true },
        "\u0871": { math: "\\\\backslash" },
        "\u1D43": { math: "^{a}", text: "\\textsuperscript{a}" },
        "\u1D47": { math: "^{b}", text: "\\textsuperscript{b}" },
        "\u1D48": { math: "^{d}", text: "\\textsuperscript{d}" },
        "\u1D49": { math: "^{e}", text: "\\textsuperscript{e}" },
        "\u1D4D": { math: "^{g}", text: "\\textsuperscript{g}" },
        "\u1D4F": { math: "^{k}", text: "\\textsuperscript{k}" },
        "\u1D50": { math: "^{m}", text: "\\textsuperscript{m}" },
        "\u1D52": { math: "^{o}", text: "\\textsuperscript{o}" },
        "\u1D56": { math: "^{p}", text: "\\textsuperscript{p}" },
        "\u1D57": { math: "^{t}", text: "\\textsuperscript{t}" },
        "\u1D58": { math: "^{u}", text: "\\textsuperscript{u}" },
        "\u1D5B": { math: "^{v}", text: "\\textsuperscript{v}" },
        "\u1D9C": { math: "^{c}", text: "\\textsuperscript{c}" },
        "\u1DA0": { math: "^{f}", text: "\\textsuperscript{f}" },
        "\u1DBB": { math: "^{z}", text: "\\textsuperscript{z}" },
        \u1E02: { text: "\\.B" },
        \u1E03: { text: "\\.b" },
        \u1E04: { text: "\\d{B}" },
        \u1E05: { text: "\\d{b}" },
        \u1E06: { text: "\\b{B}" },
        \u1E07: { text: "\\b{b}" },
        \u1E0A: { text: "\\.D" },
        \u1E0B: { text: "\\.d" },
        \u1E0C: { text: "\\d{D}" },
        \u1E0D: { text: "\\d{d}" },
        \u1E0E: { text: "\\b{D}" },
        \u1E0F: { text: "\\b{d}" },
        \u1E10: { text: "\\c{D}" },
        \u1E11: { text: "\\c{d}" },
        \u1E1C: { text: "\\c{\\u{E}}" },
        \u1E1D: { text: "\\c{\\u{e}}" },
        \u1E1E: { text: "\\.F" },
        \u1E1F: { text: "\\.f" },
        \u1E20: { text: "\\=G" },
        \u1E21: { text: "\\=g" },
        \u1E22: { text: "\\.H" },
        \u1E23: { text: "\\.h" },
        \u1E24: { text: "\\d{H}" },
        \u1E25: { text: "\\d{h}" },
        \u1E26: { text: '\\"H' },
        \u1E27: { text: '\\"h' },
        \u1E28: { text: "\\c{H}" },
        \u1E29: { text: "\\c{h}" },
        \u1E30: { text: "\\'K" },
        \u1E31: { text: "\\'k" },
        \u1E32: { text: "\\d{K}" },
        \u1E33: { text: "\\d{k}" },
        \u1E34: { text: "\\b{K}" },
        \u1E35: { text: "\\b{k}" },
        \u1E36: { text: "\\d{L}" },
        \u1E37: { text: "\\d{l}" },
        \u1E3A: { text: "\\b{L}" },
        \u1E3B: { text: "\\b{l}" },
        \u1E3E: { text: "\\'M" },
        \u1E3F: { text: "\\'m" },
        \u1E40: { text: "\\.M" },
        \u1E41: { text: "\\.m" },
        \u1E42: { text: "\\d{M}" },
        \u1E43: { text: "\\d{m}" },
        \u1E44: { text: "\\.N" },
        \u1E45: { text: "\\.n" },
        \u1E46: { text: "\\d{N}" },
        \u1E47: { text: "\\d{n}" },
        \u1E48: { text: "\\b{N}" },
        \u1E49: { text: "\\b{n}" },
        \u1E54: { text: "\\'P" },
        \u1E55: { text: "\\'p" },
        \u1E56: { text: "\\.P" },
        \u1E57: { text: "\\.p" },
        \u1E58: { text: "\\.R" },
        \u1E59: { text: "\\.r" },
        \u1E5A: { text: "\\d{R}" },
        \u1E5B: { text: "\\d{r}" },
        \u1E5E: { text: "\\b{R}" },
        \u1E5F: { text: "\\b{r}" },
        \u1E60: { text: "\\.S" },
        \u1E61: { text: "\\.s" },
        \u1E62: { text: "\\d{S}" },
        \u1E63: { text: "\\d{s}" },
        \u1E6A: { text: "\\.T" },
        \u1E6B: { text: "\\.t" },
        \u1E6C: { text: "\\d{T}" },
        \u1E6D: { text: "\\d{t}" },
        \u1E6E: { text: "\\b{T}" },
        \u1E6F: { text: "\\b{t}" },
        \u1E7C: { text: "\\~V" },
        \u1E7D: { text: "\\~v" },
        \u1E7E: { text: "\\d{V}" },
        \u1E7F: { text: "\\d{v}" },
        \u1E80: { text: "\\`W" },
        \u1E81: { text: "\\`w" },
        \u1E82: { text: "\\'W" },
        \u1E83: { text: "\\'w" },
        \u1E84: { text: '\\"W' },
        \u1E85: { text: '\\"w' },
        \u1E86: { text: "\\.W" },
        \u1E87: { text: "\\.w" },
        \u1E88: { text: "\\d{W}" },
        \u1E89: { text: "\\d{w}" },
        \u1E8A: { text: "\\.X" },
        \u1E8B: { text: "\\.x" },
        \u1E8C: { text: '\\"X' },
        \u1E8D: { text: '\\"x' },
        \u1E8E: { text: "\\.Y" },
        \u1E8F: { text: "\\.y" },
        \u1E90: { text: "\\^Z" },
        \u1E91: { text: "\\^z" },
        \u1E92: { text: "\\d{Z}" },
        \u1E93: { text: "\\d{z}" },
        \u1E94: { text: "\\b{Z}" },
        \u1E95: { text: "\\b{z}" },
        \u1E96: { text: "\\b{h}" },
        \u1E97: { text: '\\"t' },
        \u1E98: { text: "\\r{w}" },
        \u1E99: { text: "\\r{y}" },
        \u1EA0: { text: "\\d{A}" },
        \u1EA1: { text: "\\d{a}" },
        \u1EB8: { text: "\\d{E}" },
        \u1EB9: { text: "\\d{e}" },
        \u1EBC: { text: "\\~E" },
        \u1EBD: { text: "\\~e" },
        \u1ECA: { text: "\\d{I}" },
        \u1ECB: { text: "\\d{i}" },
        \u1ECC: { text: "\\d{O}" },
        \u1ECD: { text: "\\d{o}" },
        \u1EE4: { text: "\\d{U}" },
        \u1EE5: { text: "\\d{u}" },
        \u1EF2: { text: "\\`Y" },
        \u1EF3: { text: "\\`y" },
        \u1EF4: { text: "\\d{Y}" },
        \u1EF5: { text: "\\d{y}" },
        \u1EF8: { text: "\\~Y" },
        \u1EF9: { text: "\\~y" },
        "\u2000": { text: "\\hspace{0.6em}", space: true },
        "\u2001": { math: "\\quad", space: true },
        "\u2002": { text: "\\hspace{0.6em}", space: true },
        "\u2003": { math: "\\quad", space: true },
        "\u2004": { text: "\\;", space: true },
        "\u2005": { text: "\\hspace{0.25em}", space: true },
        "\u2006": { text: "\\hspace{0.166em}", space: true },
        "\u2007": { text: "\\hphantom{0}", space: true },
        "\u2008": { text: "\\hphantom{,}", space: true },
        "\u2009": { text: "\\,", space: true },
        "\u200A": { math: "\\mkern1mu", space: true },
        "\u200B": { text: "\\hspace{0pt}", space: true },
        "\u200C": { text: "{\\aftergroup\\ignorespaces}" },
        "\u2010": { text: "-" },
        "\u2011": { text: "-" },
        "\u2012": { text: "-" },
        "\u2013": { text: "\\textendash", commandspacer: true },
        "\u2014": { text: "\\textemdash", commandspacer: true },
        "\u2015": { math: "\\horizbar", text: "\\rule{1em}{1pt}" },
        "\u2016": { math: "\\Vert" },
        "\u2017": { math: "\\twolowline" },
        "\u2018": { text: "`" },
        "\u2019": { text: "'" },
        "\u201A": { text: "," },
        "\u201B": { math: "\\Elzreapos" },
        "\u201C": { text: "``" },
        "\u201D": { text: "''" },
        "\u201E": { text: ",," },
        "\u201F": { text: "\\quotedblbase", commandspacer: true },
        "\u2020": { math: "\\dagger", text: "\\textdagger", commandspacer: true, textpackages: ["textcomp"] },
        "\u2021": { math: "\\ddagger", text: "\\textdaggerdbl", commandspacer: true, textpackages: ["textcomp"] },
        "\u2022": { math: "\\bullet", text: "\\textbullet", commandspacer: true, textpackages: ["textcomp"] },
        "\u2023": { text: ">" },
        "\u2024": { text: "." },
        "\u2025": { math: "\\enleadertwodots", text: ".." },
        "\u2026": { math: "\\ldots", text: "\\ldots", commandspacer: true },
        "\u2027": { text: "-" },
        "\u202F": { text: "\\,", space: true },
        "\u2030": { text: "\\textperthousand", commandspacer: true, textpackages: ["textcomp"] },
        "\u2031": { text: "\\textpertenthousand", commandspacer: true, textpackages: ["textcomp"] },
        "\u2032": { math: "{'}" },
        "\u2033": { math: "{''}" },
        "\u2034": { math: "{'''}" },
        "\u2035": { math: "\\backprime" },
        "\u2036": { math: "\\backdprime" },
        "\u2037": { math: "\\backtrprime" },
        "\u2038": { math: "\\caretinsert" },
        "\u2039": { text: "\\guilsinglleft", commandspacer: true },
        "\u203A": { text: "\\guilsinglright", commandspacer: true },
        "\u203C": { math: "\\Exclam" },
        "\u203E": { text: "-" },
        "\u2043": { math: "\\hyphenbullet" },
        "\u2044": { math: "\\fracslash" },
        "\u2047": { math: "\\Question" },
        "\u2048": { text: "?!" },
        "\u2049": { text: "!?" },
        "\u204A": { text: "7" },
        "\u2050": { math: "\\closure" },
        "\u2057": { math: "''''" },
        "\u205F": { math: "\\:", space: true, text: "\\:" },
        "\u2060": { text: "\\nolinebreak", commandspacer: true },
        "\u2070": { math: "^{0}" },
        "\u2071": { math: "^{i}", text: "\\textsuperscript{i}" },
        "\u2074": { math: "^{4}" },
        "\u2075": { math: "^{5}" },
        "\u2076": { math: "^{6}" },
        "\u2077": { math: "^{7}" },
        "\u2078": { math: "^{8}" },
        "\u2079": { math: "^{9}" },
        "\u207A": { math: "^{+}" },
        "\u207B": { math: "^{-}" },
        "\u207C": { math: "^{=}" },
        "\u207D": { math: "^{(}" },
        "\u207E": { math: "^{)}" },
        \u207F: { math: "^{n}", text: "\\textsuperscript{n}" },
        "\u2080": { math: "_{0}" },
        "\u2081": { math: "_{1}" },
        "\u2082": { math: "_{2}" },
        "\u2083": { math: "_{3}" },
        "\u2084": { math: "_{4}" },
        "\u2085": { math: "_{5}" },
        "\u2086": { math: "_{6}" },
        "\u2087": { math: "_{7}" },
        "\u2088": { math: "_{8}" },
        "\u2089": { math: "_{9}" },
        "\u208A": { math: "_{+}" },
        "\u208B": { math: "_{-}" },
        "\u208C": { math: "_{=}" },
        "\u208D": { math: "_{(}" },
        "\u208E": { math: "_{)}" },
        "\u2090": { math: "_{a}", text: "\\textsubscript{a}" },
        "\u2091": { math: "_{e}", text: "\\textsubscript{e}" },
        "\u2092": { math: "_{o}", text: "\\textsubscript{o}" },
        "\u2093": { math: "_{x}", text: "\\textsubscript{x}" },
        "\u2094": { text: "\\textsubscript{\\textschwa}", textpackages: ["tipa"] },
        "\u2095": { math: "_{h}", text: "\\textsubscript{h}" },
        "\u2096": { math: "_{k}", text: "\\textsubscript{k}" },
        "\u2097": { math: "_{l}", text: "\\textsubscript{l}" },
        "\u2098": { math: "_{m}", text: "\\textsubscript{m}" },
        "\u2099": { math: "_{n}", text: "\\textsubscript{n}" },
        "\u209A": { math: "_{p}", text: "\\textsubscript{p}" },
        "\u209B": { math: "_{s}", text: "\\textsubscript{s}" },
        "\u209C": { math: "_{t}", text: "\\textsubscript{t}" },
        "\u20A7": { text: "\\ensuremath{\\Elzpes}" },
        "\u20AC": { math: "\\euro", text: "\\texteuro", commandspacer: true },
        "\u20D0": { math: "\\lvec" },
        "\u20D1": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
        "\u20D2": { math: "\\vertoverlay" },
        "\u20D6": { math: "\\LVec" },
        "\u20D7": { math: "\\vec" },
        "\u20DB": { math: "\\dddot" },
        "\u20DC": { math: "\\ddddot" },
        "\u20DD": { math: "\\enclosecircle" },
        "\u20DE": { math: "\\enclosesquare" },
        "\u20DF": { math: "\\enclosediamond" },
        "\u20E1": { math: "\\overleftrightarrow" },
        "\u20E4": { math: "\\enclosetriangle" },
        "\u20E7": { math: "\\annuity" },
        "\u20E8": { math: "\\threeunderdot" },
        "\u20E9": { math: "\\widebridgeabove" },
        "\u20EC": { math: "\\underrightharpoondown" },
        "\u20ED": { math: "\\underleftharpoondown" },
        "\u20EE": { math: "\\underleftarrow" },
        "\u20EF": { math: "\\underrightarrow" },
        "\u20F0": { math: "\\asteraccent" },
        "\u2100": { text: "a/c" },
        "\u2101": { text: "a/s" },
        \u2102: { math: "\\mathbb{C}" },
        "\u2103": { text: "\\textcelsius", commandspacer: true },
        "\u2105": { text: "c/o" },
        "\u2106": { text: "c/u" },
        \u2107: { math: "\\Euler" },
        "\u2109": { text: "F" },
        \u210A: { math: "\\mathscr{g}" },
        \u210B: { math: "\\mathscr{H}" },
        \u210C: { math: "\\mathfrak{H}" },
        \u210D: { math: "\\mathbb{H}" },
        \u210E: { math: "\\Planckconst" },
        \u210F: { math: "\\hslash" },
        \u2110: { math: "\\mathscr{I}" },
        \u2111: { math: "\\mathfrak{I}" },
        \u2112: { math: "\\mathscr{L}" },
        \u2113: { math: "\\mathscr{l}" },
        \u2115: { math: "\\mathbb{N}" },
        "\u2116": { text: "\\cyrchar\\textnumero", commandspacer: true },
        "\u2117": { text: "\\textcircledP", commandspacer: true },
        "\u2118": { math: "\\wp" },
        \u2119: { math: "\\mathbb{P}" },
        \u211A: { math: "\\mathbb{Q}" },
        \u211B: { math: "\\mathscr{R}" },
        \u211C: { math: "\\mathfrak{R}" },
        \u211D: { math: "\\mathbb{R}" },
        "\u211E": { math: "\\Elzxrat" },
        "\u2120": { text: "\\textservicemark", commandspacer: true },
        "\u2121": { text: "TEL" },
        "\u2122": { text: "\\texttrademark", commandspacer: true, textpackages: ["textcomp"] },
        \u2124: { math: "\\mathbb{Z}" },
        \u2126: { math: "\\Omega" },
        "\u2127": { math: "\\mho" },
        \u2128: { math: "\\mathfrak{Z}" },
        "\u2129": { text: "\\textriota", commandspacer: true },
        \u212A: { text: "K" },
        \u212B: { math: "\\Angstroem", text: "\\AA", commandspacer: true },
        \u212C: { math: "\\mathscr{B}" },
        \u212D: { math: "\\mathfrak{C}" },
        "\u212E": { text: "\\textestimated", commandspacer: true },
        \u212F: { math: "\\mathscr{e}" },
        \u2130: { math: "\\mathscr{E}" },
        \u2131: { math: "\\mathscr{F}" },
        "\u2132": { math: "\\Finv" },
        \u2133: { math: "\\mathscr{M}" },
        \u2134: { math: "\\mathscr{o}" },
        \u2135: { math: "\\aleph" },
        \u2136: { math: "\\beth" },
        \u2137: { math: "\\gimel" },
        \u2138: { math: "\\daleth" },
        "\u213C": { math: "\\mathbb{\\pi}" },
        "\u213D": { math: "\\mathbb{\\gamma}" },
        "\u213E": { math: "\\mathbb{\\Gamma}" },
        "\u213F": { math: "\\mathbb{\\Pi}" },
        "\u2140": { math: "\\mathbb{\\Sigma}" },
        "\u2141": { math: "\\Game" },
        "\u2142": { math: "\\sansLturned" },
        "\u2143": { math: "\\sansLmirrored" },
        "\u2144": { math: "\\Yup" },
        "\u2145": { math: "\\CapitalDifferentialD" },
        "\u2146": { math: "\\DifferentialD" },
        "\u2147": { math: "\\ExponetialE" },
        "\u2148": { math: "\\ComplexI" },
        "\u2149": { math: "\\ComplexJ" },
        "\u214A": { math: "\\PropertyLine" },
        "\u214B": { math: "\\invamp" },
        "\u2150": { math: "\\frac{1}{7}" },
        "\u2151": { math: "\\frac{1}{9}" },
        "\u2152": { math: "\\frac{1}{10}" },
        "\u2153": { math: "\\frac{1}{3}" },
        "\u2154": { math: "\\frac{2}{3}" },
        "\u2155": { math: "\\frac{1}{5}" },
        "\u2156": { math: "\\frac{2}{5}" },
        "\u2157": { math: "\\frac{3}{5}" },
        "\u2158": { math: "\\frac{4}{5}" },
        "\u2159": { math: "\\frac{1}{6}" },
        "\u215A": { math: "\\frac{5}{6}" },
        "\u215B": { math: "\\frac{1}{8}" },
        "\u215C": { math: "\\frac{3}{8}" },
        "\u215D": { math: "\\frac{5}{8}" },
        "\u215E": { math: "\\frac{7}{8}" },
        "\u215F": { math: "\\frac{1}" },
        "\u2160": { text: "I" },
        "\u2161": { text: "II" },
        "\u2162": { text: "III" },
        "\u2163": { text: "IV" },
        "\u2164": { text: "V" },
        "\u2165": { text: "VI" },
        "\u2166": { text: "VII" },
        "\u2167": { text: "VIII" },
        "\u2168": { text: "IX" },
        "\u2169": { text: "X" },
        "\u216A": { text: "XI" },
        "\u216B": { text: "XII" },
        "\u216C": { text: "L" },
        "\u216D": { text: "C" },
        "\u216E": { text: "D" },
        "\u216F": { text: "M" },
        "\u2170": { text: "i" },
        "\u2171": { text: "ii" },
        "\u2172": { text: "iii" },
        "\u2173": { text: "iv" },
        "\u2174": { text: "v" },
        "\u2175": { text: "vi" },
        "\u2176": { text: "vii" },
        "\u2177": { text: "viii" },
        "\u2178": { text: "ix" },
        "\u2179": { text: "x" },
        "\u217A": { text: "xi" },
        "\u217B": { text: "xii" },
        "\u217C": { text: "l" },
        "\u217D": { text: "c" },
        "\u217E": { text: "d" },
        "\u217F": { text: "m" },
        "\u2189": { math: "\\frac{0}{3}" },
        "\u2190": { math: "\\leftarrow" },
        "\u2191": { math: "\\uparrow" },
        "\u2192": { math: "\\rightarrow", text: "\\textrightarrow", commandspacer: true, textpackages: ["textcomp"] },
        "\u2193": { math: "\\downarrow" },
        "\u2194": { math: "\\leftrightarrow" },
        "\u2195": { math: "\\updownarrow" },
        "\u2196": { math: "\\nwarrow" },
        "\u2197": { math: "\\nearrow" },
        "\u2198": { math: "\\searrow" },
        "\u2199": { math: "\\swarrow" },
        "\u219A": { math: "\\nleftarrow" },
        "\u219B": { math: "\\nrightarrow" },
        "\u219C": { math: "\\arrowwaveleft" },
        "\u219D": { math: "\\arrowwaveright" },
        "\u219E": { math: "\\twoheadleftarrow" },
        "\u219F": { math: "\\twoheaduparrow" },
        "\u21A0": { math: "\\twoheadrightarrow" },
        "\u21A1": { math: "\\twoheaddownarrow" },
        "\u21A2": { math: "\\leftarrowtail" },
        "\u21A3": { math: "\\rightarrowtail" },
        "\u21A4": { math: "\\mapsfrom" },
        "\u21A5": { math: "\\MapsUp" },
        "\u21A6": { math: "\\mapsto" },
        "\u21A7": { math: "\\MapsDown" },
        "\u21A8": { math: "\\updownarrowbar" },
        "\u21A9": { math: "\\hookleftarrow" },
        "\u21AA": { math: "\\hookrightarrow" },
        "\u21AB": { math: "\\looparrowleft" },
        "\u21AC": { math: "\\looparrowright" },
        "\u21AD": { math: "\\leftrightsquigarrow" },
        "\u21AE": { math: "\\nleftrightarrow" },
        "\u21AF": { math: "\\lightning" },
        "\u21B0": { math: "\\Lsh" },
        "\u21B1": { math: "\\Rsh" },
        "\u21B2": { math: "\\dlsh" },
        "\u21B3": { text: "\\reflectbox{\\carriagereturn}", textpackages: ["graphics", "unicode-math"] },
        "\u21B4": { math: "\\linefeed" },
        "\u21B5": { math: "\\carriagereturn" },
        "\u21B6": { math: "\\curvearrowleft" },
        "\u21B7": { math: "\\curvearrowright" },
        "\u21B8": { math: "\\barovernorthwestarrow" },
        "\u21B9": { math: "\\barleftarrowrightarrowba" },
        "\u21BA": { math: "\\circlearrowleft" },
        "\u21BB": { math: "\\circlearrowright" },
        "\u21BC": { math: "\\leftharpoonup" },
        "\u21BD": { math: "\\leftharpoondown" },
        "\u21BE": { math: "\\upharpoonright" },
        "\u21BF": { math: "\\upharpoonleft" },
        "\u21C0": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
        "\u21C1": { math: "\\rightharpoondown" },
        "\u21C2": { math: "\\downharpoonright" },
        "\u21C3": { math: "\\downharpoonleft" },
        "\u21C4": { math: "\\rightleftarrows" },
        "\u21C5": { math: "\\dblarrowupdown" },
        "\u21C6": { math: "\\leftrightarrows" },
        "\u21C7": { math: "\\leftleftarrows" },
        "\u21C8": { math: "\\upuparrows" },
        "\u21C9": { math: "\\rightrightarrows" },
        "\u21CA": { math: "\\downdownarrows" },
        "\u21CB": { math: "\\leftrightharpoons" },
        "\u21CC": { math: "\\rightleftharpoons" },
        "\u21CD": { math: "\\nLeftarrow" },
        "\u21CE": { math: "\\nLeftrightarrow" },
        "\u21CF": { math: "\\nRightarrow" },
        "\u21D0": { math: "\\Leftarrow" },
        "\u21D1": { math: "\\Uparrow" },
        "\u21D2": { math: "\\Rightarrow" },
        "\u21D3": { math: "\\Downarrow" },
        "\u21D4": { math: "\\Leftrightarrow" },
        "\u21D5": { math: "\\Updownarrow" },
        "\u21D6": { math: "\\Nwarrow" },
        "\u21D7": { math: "\\Nearrow" },
        "\u21D8": { math: "\\Searrow" },
        "\u21D9": { math: "\\Swarrow" },
        "\u21DA": { math: "\\Lleftarrow" },
        "\u21DB": { math: "\\Rrightarrow" },
        "\u21DC": { math: "\\leftsquigarrow" },
        "\u21DD": { math: "\\rightsquigarrow" },
        "\u21DE": { math: "\\nHuparrow" },
        "\u21DF": { math: "\\nHdownarrow" },
        "\u21E0": { math: "\\dashleftarrow" },
        "\u21E1": { math: "\\updasharrow" },
        "\u21E2": { math: "\\dashrightarrow" },
        "\u21E3": { math: "\\downdasharrow" },
        "\u21E4": { math: "\\LeftArrowBar" },
        "\u21E5": { math: "\\RightArrowBar" },
        "\u21E6": { math: "\\leftwhitearrow" },
        "\u21E7": { math: "\\upwhitearrow" },
        "\u21E8": { math: "\\rightwhitearrow" },
        "\u21E9": { math: "\\downwhitearrow" },
        "\u21EA": { math: "\\whitearrowupfrombar" },
        "\u21F4": { math: "\\circleonrightarrow" },
        "\u21F5": { math: "\\DownArrowUpArrow" },
        "\u21F6": { math: "\\rightthreearrows" },
        "\u21F7": { math: "\\nvleftarrow" },
        "\u21F8": { math: "\\pfun" },
        "\u21F9": { math: "\\nvleftrightarrow" },
        "\u21FA": { math: "\\nVleftarrow" },
        "\u21FB": { math: "\\ffun" },
        "\u21FC": { math: "\\nVleftrightarrow" },
        "\u21FD": { math: "\\leftarrowtriangle" },
        "\u21FE": { math: "\\rightarrowtriangle" },
        "\u21FF": { math: "\\leftrightarrowtriangle" },
        "\u2200": { math: "\\forall" },
        "\u2201": { math: "\\complement" },
        "\u2202": { math: "\\partial" },
        "\u2203": { math: "\\exists" },
        "\u2204": { math: "\\nexists" },
        "\u2205": { math: "\\varnothing" },
        "\u2206": { math: "\\increment" },
        "\u2207": { math: "\\nabla" },
        "\u2208": { math: "\\in" },
        "\u2209": { math: "\\not\\in" },
        "\u220A": { math: "\\smallin" },
        "\u220B": { math: "\\ni" },
        "\u220C": { math: "\\not\\ni" },
        "\u220D": { math: "\\smallni" },
        "\u220E": { math: "\\QED" },
        "\u220F": { math: "\\prod" },
        "\u2210": { math: "\\coprod" },
        "\u2211": { math: "\\sum" },
        "\u2212": { math: "-", text: "-" },
        "\u2213": { math: "\\mp" },
        "\u2214": { math: "\\dotplus" },
        "\u2215": { text: "/" },
        "\u2216": { math: "\\setminus" },
        "\u2217": { math: "{_\\ast}" },
        "\u2218": { math: "\\circ" },
        "\u2219": { math: "\\bullet" },
        "\u221A": { math: "\\surd" },
        "\u221B": { math: "\\sqrt[3]" },
        "\u221C": { math: "\\sqrt[4]" },
        "\u221D": { math: "\\propto" },
        "\u221E": { math: "\\infty" },
        "\u221F": { math: "\\rightangle" },
        "\u2220": { math: "\\angle" },
        "\u2221": { math: "\\measuredangle" },
        "\u2222": { math: "\\sphericalangle" },
        "\u2223": { math: "\\mid" },
        "\u2224": { math: "\\nmid" },
        "\u2225": { math: "\\parallel" },
        "\u2226": { math: "\\nparallel" },
        "\u2227": { math: "\\wedge" },
        "\u2228": { math: "\\vee" },
        "\u2229": { math: "\\cap" },
        "\u222A": { math: "\\cup" },
        "\u222B": { math: "\\int" },
        "\u222C": { math: "{\\int\\!\\int}" },
        "\u222D": { math: "{\\int\\!\\int\\!\\int}" },
        "\u222E": { math: "\\oint" },
        "\u222F": { math: "\\surfintegral" },
        "\u2230": { math: "\\volintegral" },
        "\u2231": { math: "\\clwintegral" },
        "\u2232": { math: "\\lcirclerightint", mathpackages: ["MnSymbol"] },
        "\u2233": { math: "\\rcirclerightint", mathpackages: ["MnSymbol"] },
        "\u2234": { math: "\\therefore" },
        "\u2235": { math: "\\because" },
        "\u2236": { math: ":" },
        "\u2237": { math: "\\Colon" },
        "\u2238": { math: "\\dotdiv", mathpackages: ["mathabx"] },
        "\u2239": { math: "\\eqcolon" },
        "\u223A": { math: "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" },
        "\u223B": { math: "\\homothetic" },
        "\u223C": { math: "\\sim" },
        "\u223D": { math: "\\backsim" },
        "\u223E": { math: "\\lazysinv" },
        "\u223F": { math: "\\AC" },
        "\u2240": { math: "\\wr" },
        "\u2241": { math: "\\not\\sim" },
        "\u2242": { math: "\\texteqsim", mathpackages: ["xecjk"] },
        "\u2242\u0338": { math: "\\NotEqualTilde" },
        "\u2243": { math: "\\simeq" },
        "\u2244": { math: "\\not\\simeq" },
        "\u2245": { math: "\\cong" },
        "\u2246": { math: "\\approxnotequal" },
        "\u2247": { math: "\\not\\cong" },
        "\u2248": { math: "\\approx" },
        "\u2249": { math: "\\not\\approx" },
        "\u224A": { math: "\\approxeq" },
        "\u224B": { math: "\\tildetrpl" },
        "\u224B\u0338": { math: "\\not\\apid" },
        "\u224C": { math: "\\allequal" },
        "\u224D": { math: "\\asymp" },
        "\u224E": { math: "\\Bumpeq" },
        "\u224E\u0338": { math: "\\NotHumpDownHump" },
        "\u224F": { math: "\\bumpeq" },
        "\u224F\u0338": { math: "\\NotHumpEqual" },
        "\u2250": { math: "\\doteq" },
        "\u2250\u0338": { math: "\\not\\doteq" },
        "\u2251": { math: "\\doteqdot" },
        "\u2252": { math: "\\fallingdotseq" },
        "\u2253": { math: "\\risingdotseq" },
        "\u2254": { math: "\\coloneq", text: ":=" },
        "\u2255": { math: "=:" },
        "\u2256": { math: "\\eqcirc" },
        "\u2257": { math: "\\circeq" },
        "\u2258": { math: "\\arceq" },
        "\u2259": { math: "\\estimates" },
        "\u225B": { math: "\\starequal" },
        "\u225C": { math: "\\triangleq" },
        "\u225D": { math: "\\eqdef" },
        "\u225E": { math: "\\measeq" },
        "\u2260": { math: "\\neq" },
        "\u2261": { math: "\\equiv" },
        "\u2262": { math: "\\not\\equiv" },
        "\u2263": { math: "\\Equiv" },
        "\u2264": { math: "\\leq" },
        "\u2265": { math: "\\geq" },
        "\u2266": { math: "\\leqq" },
        "\u2267": { math: "\\geqq" },
        "\u2268": { math: "\\lneqq" },
        "\u2268\uFE00": { math: "\\lvertneqq" },
        "\u2269": { math: "\\gneqq" },
        "\u2269\uFE00": { math: "\\gvertneqq" },
        "\u226A": { math: "\\ll" },
        "\u226A\u0338": { math: "\\NotLessLess" },
        "\u226B": { math: "\\gg" },
        "\u226B\u0338": { math: "\\NotGreaterGreater" },
        "\u226C": { math: "\\between" },
        "\u226D": { math: "{\\not\\kern-0.3em\\times}" },
        "\u226E": { math: "\\not<" },
        "\u226F": { math: "\\not>" },
        "\u2270": { math: "\\not\\leq" },
        "\u2271": { math: "\\not\\geq" },
        "\u2272": { math: "\\lessequivlnt" },
        "\u2273": { math: "\\greaterequivlnt" },
        "\u2276": { math: "\\lessgtr" },
        "\u2277": { math: "\\gtrless" },
        "\u2278": { math: "\\notlessgreater" },
        "\u2279": { math: "\\notgreaterless" },
        "\u227A": { math: "\\prec" },
        "\u227B": { math: "\\succ" },
        "\u227C": { math: "\\preccurlyeq" },
        "\u227D": { math: "\\succcurlyeq" },
        "\u227E": { math: "\\precapprox" },
        "\u227E\u0338": { math: "\\NotPrecedesTilde" },
        "\u227F": { math: "\\succapprox" },
        "\u227F\u0338": { math: "\\NotSucceedsTilde" },
        "\u2280": { math: "\\not\\prec" },
        "\u2281": { math: "\\not\\succ" },
        "\u2282": { math: "\\subset" },
        "\u2283": { math: "\\supset" },
        "\u2284": { math: "\\not\\subset" },
        "\u2285": { math: "\\not\\supset" },
        "\u2286": { math: "\\subseteq" },
        "\u2287": { math: "\\supseteq" },
        "\u2288": { math: "\\not\\subseteq" },
        "\u2289": { math: "\\not\\supseteq" },
        "\u228A": { math: "\\subsetneq" },
        "\u228A\uFE00": { math: "\\varsubsetneqq" },
        "\u228B": { math: "\\supsetneq" },
        "\u228B\uFE00": { math: "\\varsupsetneq" },
        "\u228C": { math: "\\cupleftarrow" },
        "\u228D": { math: "\\cupdot" },
        "\u228E": { math: "\\uplus" },
        "\u228F": { math: "\\sqsubset" },
        "\u228F\u0338": { math: "\\NotSquareSubset" },
        "\u2290": { math: "\\sqsupset" },
        "\u2290\u0338": { math: "\\NotSquareSuperset" },
        "\u2291": { math: "\\sqsubseteq" },
        "\u2292": { math: "\\sqsupseteq" },
        "\u2293": { math: "\\sqcap" },
        "\u2294": { math: "\\sqcup" },
        "\u2295": { math: "\\oplus" },
        "\u2296": { math: "\\ominus" },
        "\u2297": { math: "\\otimes" },
        "\u2298": { math: "\\oslash" },
        "\u2299": { math: "\\odot" },
        "\u229A": { math: "\\circledcirc" },
        "\u229B": { math: "\\circledast" },
        "\u229C": { math: "\\circledequal" },
        "\u229D": { math: "\\circleddash" },
        "\u229E": { math: "\\boxplus" },
        "\u229F": { math: "\\boxminus" },
        "\u22A0": { math: "\\boxtimes" },
        "\u22A1": { math: "\\boxdot" },
        "\u22A2": { math: "\\vdash" },
        "\u22A3": { math: "\\dashv" },
        "\u22A4": { math: "\\top" },
        "\u22A5": { math: "\\perp" },
        "\u22A6": { math: "\\assert" },
        "\u22A7": { math: "\\truestate" },
        "\u22A8": { math: "\\forcesextra" },
        "\u22A9": { math: "\\Vdash" },
        "\u22AA": { math: "\\Vvdash" },
        "\u22AB": { math: "\\VDash" },
        "\u22AC": { math: "\\nvdash" },
        "\u22AD": { math: "\\nvDash" },
        "\u22AE": { math: "\\nVdash" },
        "\u22AF": { math: "\\nVDash" },
        "\u22B0": { math: "\\prurel" },
        "\u22B1": { math: "\\scurel" },
        "\u22B2": { math: "\\vartriangleleft" },
        "\u22B3": { math: "\\vartriangleright" },
        "\u22B4": { math: "\\trianglelefteq" },
        "\u22B5": { math: "\\trianglerighteq" },
        "\u22B6": { math: "\\original" },
        "\u22B7": { math: "\\image" },
        "\u22B8": { math: "\\multimap" },
        "\u22B9": { math: "\\hermitconjmatrix" },
        "\u22BA": { math: "\\intercal" },
        "\u22BB": { math: "\\veebar" },
        "\u22BC": { math: "\\barwedge" },
        "\u22BD": { math: "\\barvee" },
        "\u22BE": { math: "\\rightanglearc" },
        "\u22BF": { math: "\\varlrtriangle" },
        "\u22C2": { math: "\\bigcap" },
        "\u22C3": { math: "\\bigcup" },
        "\u22C4": { math: "\\diamond" },
        "\u22C5": { math: "\\cdot" },
        "\u22C6": { math: "\\star" },
        "\u22C7": { math: "\\divideontimes" },
        "\u22C8": { math: "\\bowtie" },
        "\u22C9": { math: "\\ltimes" },
        "\u22CA": { math: "\\rtimes" },
        "\u22CB": { math: "\\leftthreetimes" },
        "\u22CC": { math: "\\rightthreetimes" },
        "\u22CD": { math: "\\backsimeq" },
        "\u22CE": { math: "\\curlyvee" },
        "\u22CF": { math: "\\curlywedge" },
        "\u22D0": { math: "\\Subset" },
        "\u22D1": { math: "\\Supset" },
        "\u22D2": { math: "\\Cap" },
        "\u22D3": { math: "\\Cup" },
        "\u22D4": { math: "\\pitchfork" },
        "\u22D5": { math: "\\hash" },
        "\u22D6": { math: "\\lessdot" },
        "\u22D7": { math: "\\gtrdot" },
        "\u22D8": { math: "\\verymuchless" },
        "\u22D9": { math: "\\verymuchgreater" },
        "\u22DA": { math: "\\lesseqgtr" },
        "\u22DB": { math: "\\gtreqless" },
        "\u22DC": { math: "\\eqless" },
        "\u22DD": { math: "\\eqgtr" },
        "\u22DE": { math: "\\curlyeqprec" },
        "\u22DF": { math: "\\curlyeqsucc" },
        "\u22E0": { math: "\\npreceq" },
        "\u22E1": { math: "\\nsucceq" },
        "\u22E2": { math: "\\not\\sqsubseteq" },
        "\u22E3": { math: "\\not\\sqsupseteq" },
        "\u22E4": { math: "\\sqsubsetneq" },
        "\u22E5": { math: "\\Elzsqspne" },
        "\u22E6": { math: "\\lnsim" },
        "\u22E7": { math: "\\gnsim" },
        "\u22E8": { math: "\\precedesnotsimilar" },
        "\u22E9": { math: "\\succnsim" },
        "\u22EA": { math: "\\ntriangleleft" },
        "\u22EB": { math: "\\ntriangleright" },
        "\u22EC": { math: "\\ntrianglelefteq" },
        "\u22ED": { math: "\\ntrianglerighteq" },
        "\u22EE": { math: "\\vdots" },
        "\u22EF": { math: "\\cdots" },
        "\u22F0": { math: "\\upslopeellipsis" },
        "\u22F1": { math: "\\downslopeellipsis" },
        "\u22F2": { math: "\\disin" },
        "\u22F3": { math: "\\varisins" },
        "\u22F4": { math: "\\isins" },
        "\u22F5": { math: "\\isindot" },
        "\u22F6": { math: "\\barin" },
        "\u22F7": { math: "\\isinobar" },
        "\u22F8": { math: "\\isinvb" },
        "\u22F9": { math: "\\isinE" },
        "\u22FA": { math: "\\nisd" },
        "\u22FB": { math: "\\varnis" },
        "\u22FC": { math: "\\nis" },
        "\u22FD": { math: "\\varniobar" },
        "\u22FE": { math: "\\niobar" },
        "\u22FF": { math: "\\bagmember" },
        "\u2300": { math: "\\diameter" },
        "\u2302": { math: "\\house" },
        "\u2305": { math: "\\varbarwedge", text: "\\barwedge", commandspacer: true },
        "\u2306": { math: "\\perspcorrespond" },
        "\u2308": { math: "\\lceil" },
        "\u2309": { math: "\\rceil" },
        "\u230A": { math: "\\lfloor" },
        "\u230B": { math: "\\rfloor" },
        "\u2310": { math: "\\invneg" },
        "\u2311": { math: "\\wasylozenge" },
        "\u2312": { math: "\\profline" },
        "\u2313": { math: "\\profsurf" },
        "\u2315": { math: "\\recorder" },
        "\u2316": { math: '{\\mathchar"2208}' },
        "\u2317": { math: "\\viewdata" },
        "\u2319": { math: "\\turnednot" },
        "\u231C": { math: "\\ulcorner" },
        "\u231D": { math: "\\urcorner" },
        "\u231E": { math: "\\llcorner" },
        "\u231F": { math: "\\lrcorner" },
        "\u2320": { math: "\\inttop" },
        "\u2321": { math: "\\intbottom" },
        "\u2322": { math: "\\frown" },
        "\u2323": { math: "\\smile" },
        "\u2329": { math: "\\langle" },
        "\u232A": { math: "\\rangle" },
        "\u232C": { math: "\\varhexagonlrbonds" },
        "\u2332": { math: "\\conictaper" },
        "\u2336": { math: "\\topbot" },
        "\u2339": { math: "\\APLinv" },
        "\u233F": { math: "\\notslash" },
        "\u2340": { math: "\\notbackslash" },
        "\u2347": { math: "\\APLleftarrowbox" },
        "\u2348": { math: "\\APLrightarrowbox" },
        "\u2349": { math: "\\invdiameter" },
        "\u2350": { math: "\\APLuparrowbox" },
        "\u2353": { math: "\\APLboxupcaret" },
        "\u2357": { math: "\\APLdownarrowbox" },
        "\u235D": { math: "\\APLcomment" },
        "\u235E": { math: "\\APLinput" },
        "\u235F": { math: "\\APLlog" },
        "\u2370": { math: "\\APLboxquestion" },
        "\u237C": { math: "\\rangledownzigzagarrow" },
        "\u2394": { math: "\\hexagon" },
        "\u239B": { math: "\\lparenuend" },
        "\u239C": { math: "\\lparenextender" },
        "\u239D": { math: "\\lparenlend" },
        "\u239E": { math: "\\rparenuend" },
        "\u239F": { math: "\\rparenextender" },
        "\u23A0": { math: "\\rparenlend" },
        "\u23A1": { math: "\\lbrackuend" },
        "\u23A2": { math: "\\lbrackextender" },
        "\u23A3": { math: "\\Elzdlcorn" },
        "\u23A4": { math: "\\rbrackuend" },
        "\u23A5": { math: "\\rbrackextender" },
        "\u23A6": { math: "\\rbracklend" },
        "\u23A7": { math: "\\lbraceuend" },
        "\u23A8": { math: "\\lbracemid" },
        "\u23A9": { math: "\\lbracelend" },
        "\u23AA": { math: "\\vbraceextender" },
        "\u23AB": { math: "\\rbraceuend" },
        "\u23AC": { math: "\\rbracemid" },
        "\u23AD": { math: "\\rbracelend" },
        "\u23AE": { math: "\\intextender" },
        "\u23AF": { math: "\\harrowextender" },
        "\u23B0": { math: "\\lmoustache" },
        "\u23B1": { math: "\\rmoustache" },
        "\u23B2": { math: "\\sumtop" },
        "\u23B3": { math: "\\sumbottom" },
        "\u23B4": { math: "\\overbracket" },
        "\u23B5": { math: "\\underbracket" },
        "\u23B6": { math: "\\bbrktbrk" },
        "\u23B7": { math: "\\sqrtbottom" },
        "\u23B8": { math: "\\lvboxline" },
        "\u23B9": { math: "\\rvboxline" },
        "\u23CE": { math: "\\varcarriagereturn" },
        "\u23DC": { math: "\\overparen" },
        "\u23DD": { math: "\\underparen" },
        "\u23DE": { math: "\\overbrace" },
        "\u23DF": { math: "\\underbrace" },
        "\u23E0": { math: "\\obrbrak" },
        "\u23E1": { math: "\\ubrbrak" },
        "\u23E2": { math: "\\trapezium" },
        "\u23E3": { math: "\\benzenr" },
        "\u23E4": { math: "\\strns" },
        "\u23E5": { math: "\\fltns" },
        "\u23E6": { math: "\\accurrent" },
        "\u23E7": { math: "\\elinters" },
        "\u2400": { text: "NUL" },
        "\u2401": { text: "SOH" },
        "\u2402": { text: "STX" },
        "\u2403": { text: "ETX" },
        "\u2404": { text: "EOT" },
        "\u2405": { text: "ENQ" },
        "\u2406": { text: "ACK" },
        "\u2407": { text: "BEL" },
        "\u2408": { text: "BS" },
        "\u2409": { text: "HT" },
        "\u240A": { text: "LF" },
        "\u240B": { text: "VT" },
        "\u240C": { text: "FF" },
        "\u240D": { text: "CR" },
        "\u240E": { text: "SO" },
        "\u240F": { text: "SI" },
        "\u2410": { text: "DLE" },
        "\u2411": { text: "DC1" },
        "\u2412": { text: "DC2" },
        "\u2413": { text: "DC3" },
        "\u2414": { text: "DC4" },
        "\u2415": { text: "NAK" },
        "\u2416": { text: "SYN" },
        "\u2417": { text: "ETB" },
        "\u2418": { text: "CAN" },
        "\u2419": { text: "EM" },
        "\u241A": { text: "SUB" },
        "\u241B": { text: "ESC" },
        "\u241C": { text: "FS" },
        "\u241D": { text: "GS" },
        "\u241E": { text: "RS" },
        "\u241F": { text: "US" },
        "\u2420": { text: "SP" },
        "\u2421": { text: "DEL" },
        "\u2423": { text: "\\textvisiblespace", commandspacer: true },
        "\u2424": { text: "NL" },
        "\u2425": { text: "///" },
        "\u2426": { text: "?" },
        "\u2460": { text: "\\ding{172}" },
        "\u2461": { text: "\\ding{173}" },
        "\u2462": { text: "\\ding{174}" },
        "\u2463": { text: "\\ding{175}" },
        "\u2464": { text: "\\ding{176}" },
        "\u2465": { text: "\\ding{177}" },
        "\u2466": { text: "\\ding{178}" },
        "\u2467": { text: "\\ding{179}" },
        "\u2468": { text: "\\ding{180}" },
        "\u2469": { text: "\\ding{181}" },
        "\u246A": { text: "(11)" },
        "\u246B": { text: "(12)" },
        "\u246C": { text: "(13)" },
        "\u246D": { text: "(14)" },
        "\u246E": { text: "(15)" },
        "\u246F": { text: "(16)" },
        "\u2470": { text: "(17)" },
        "\u2471": { text: "(18)" },
        "\u2472": { text: "(19)" },
        "\u2473": { text: "(20)" },
        "\u2474": { text: "(1)" },
        "\u2475": { text: "(2)" },
        "\u2476": { text: "(3)" },
        "\u2477": { text: "(4)" },
        "\u2478": { text: "(5)" },
        "\u2479": { text: "(6)" },
        "\u247A": { text: "(7)" },
        "\u247B": { text: "(8)" },
        "\u247C": { text: "(9)" },
        "\u247D": { text: "(10)" },
        "\u247E": { text: "(11)" },
        "\u247F": { text: "(12)" },
        "\u2480": { text: "(13)" },
        "\u2481": { text: "(14)" },
        "\u2482": { text: "(15)" },
        "\u2483": { text: "(16)" },
        "\u2484": { text: "(17)" },
        "\u2485": { text: "(18)" },
        "\u2486": { text: "(19)" },
        "\u2487": { text: "(20)" },
        "\u2488": { text: "1." },
        "\u2489": { text: "2." },
        "\u248A": { text: "3." },
        "\u248B": { text: "4." },
        "\u248C": { text: "5." },
        "\u248D": { text: "6." },
        "\u248E": { text: "7." },
        "\u248F": { text: "8." },
        "\u2490": { text: "9." },
        "\u2491": { text: "10." },
        "\u2492": { text: "11." },
        "\u2493": { text: "12." },
        "\u2494": { text: "13." },
        "\u2495": { text: "14." },
        "\u2496": { text: "15." },
        "\u2497": { text: "16." },
        "\u2498": { text: "17." },
        "\u2499": { text: "18." },
        "\u249A": { text: "19." },
        "\u249B": { text: "20." },
        "\u249C": { text: "(a)" },
        "\u249D": { text: "(b)" },
        "\u249E": { text: "(c)" },
        "\u249F": { text: "(d)" },
        "\u24A0": { text: "(e)" },
        "\u24A1": { text: "(f)" },
        "\u24A2": { text: "(g)" },
        "\u24A3": { text: "(h)" },
        "\u24A4": { text: "(i)" },
        "\u24A5": { text: "(j)" },
        "\u24A6": { text: "(k)" },
        "\u24A7": { text: "(l)" },
        "\u24A8": { text: "(m)" },
        "\u24A9": { text: "(n)" },
        "\u24AA": { text: "(o)" },
        "\u24AB": { text: "(p)" },
        "\u24AC": { text: "(q)" },
        "\u24AD": { text: "(r)" },
        "\u24AE": { text: "(s)" },
        "\u24AF": { text: "(t)" },
        "\u24B0": { text: "(u)" },
        "\u24B1": { text: "(v)" },
        "\u24B2": { text: "(w)" },
        "\u24B3": { text: "(x)" },
        "\u24B4": { text: "(y)" },
        "\u24B5": { text: "(z)" },
        "\u24B6": { text: "(A)" },
        "\u24B7": { text: "(B)" },
        "\u24B8": { text: "(C)" },
        "\u24B9": { text: "(D)" },
        "\u24BA": { text: "(E)" },
        "\u24BB": { text: "(F)" },
        "\u24BC": { text: "(G)" },
        "\u24BD": { text: "(H)" },
        "\u24BE": { text: "(I)" },
        "\u24BF": { text: "(J)" },
        "\u24C0": { text: "(K)" },
        "\u24C1": { text: "(L)" },
        "\u24C2": { text: "(M)" },
        "\u24C3": { text: "(N)" },
        "\u24C4": { text: "(O)" },
        "\u24C5": { text: "(P)" },
        "\u24C6": { text: "(Q)" },
        "\u24C7": { text: "(R)" },
        "\u24C8": { math: "\\circledS" },
        "\u24C9": { text: "(T)" },
        "\u24CA": { text: "(U)" },
        "\u24CB": { text: "(V)" },
        "\u24CC": { text: "(W)" },
        "\u24CD": { text: "(X)" },
        "\u24CE": { text: "(Y)" },
        "\u24CF": { text: "(Z)" },
        "\u24D0": { text: "(a)" },
        "\u24D1": { text: "(b)" },
        "\u24D2": { text: "(c)" },
        "\u24D3": { text: "(d)" },
        "\u24D4": { text: "(e)" },
        "\u24D5": { text: "(f)" },
        "\u24D6": { text: "(g)" },
        "\u24D7": { text: "(h)" },
        "\u24D8": { text: "(i)" },
        "\u24D9": { text: "(j)" },
        "\u24DA": { text: "(k)" },
        "\u24DB": { text: "(l)" },
        "\u24DC": { text: "(m)" },
        "\u24DD": { text: "(n)" },
        "\u24DE": { text: "(o)" },
        "\u24DF": { text: "(p)" },
        "\u24E0": { text: "(q)" },
        "\u24E1": { text: "(r)" },
        "\u24E2": { text: "(s)" },
        "\u24E3": { text: "(t)" },
        "\u24E4": { text: "(u)" },
        "\u24E5": { text: "(v)" },
        "\u24E6": { text: "(w)" },
        "\u24E7": { text: "(x)" },
        "\u24E8": { text: "(y)" },
        "\u24E9": { text: "(z)" },
        "\u24EA": { text: "(0)" },
        "\u2500": { text: "-" },
        "\u2501": { text: "=" },
        "\u2502": { text: "|" },
        "\u2503": { text: "|" },
        "\u2504": { text: "-" },
        "\u2505": { text: "=" },
        "\u2506": { math: "\\Elzdshfnc" },
        "\u2507": { text: "|" },
        "\u2508": { text: "-" },
        "\u2509": { text: "=" },
        "\u250A": { text: "|" },
        "\u250B": { text: "|" },
        "\u250C": { text: "+" },
        "\u250D": { text: "+" },
        "\u250E": { text: "+" },
        "\u250F": { text: "+" },
        "\u2510": { text: "+" },
        "\u2511": { text: "+" },
        "\u2512": { text: "+" },
        "\u2513": { text: "+" },
        "\u2514": { text: "+" },
        "\u2515": { text: "+" },
        "\u2516": { text: "+" },
        "\u2517": { text: "+" },
        "\u2518": { text: "+" },
        "\u2519": { math: "\\Elzsqfnw" },
        "\u251A": { text: "+" },
        "\u251B": { text: "+" },
        "\u251C": { text: "+" },
        "\u251D": { text: "+" },
        "\u251E": { text: "+" },
        "\u251F": { text: "+" },
        "\u2520": { text: "+" },
        "\u2521": { text: "+" },
        "\u2522": { text: "+" },
        "\u2523": { text: "+" },
        "\u2524": { text: "+" },
        "\u2525": { text: "+" },
        "\u2526": { text: "+" },
        "\u2527": { text: "+" },
        "\u2528": { text: "+" },
        "\u2529": { text: "+" },
        "\u252A": { text: "+" },
        "\u252B": { text: "+" },
        "\u252C": { text: "+" },
        "\u252D": { text: "+" },
        "\u252E": { text: "+" },
        "\u252F": { text: "+" },
        "\u2530": { text: "+" },
        "\u2531": { text: "+" },
        "\u2532": { text: "+" },
        "\u2533": { text: "+" },
        "\u2534": { text: "+" },
        "\u2535": { text: "+" },
        "\u2536": { text: "+" },
        "\u2537": { text: "+" },
        "\u2538": { text: "+" },
        "\u2539": { text: "+" },
        "\u253A": { text: "+" },
        "\u253B": { text: "+" },
        "\u253C": { text: "+" },
        "\u253D": { text: "+" },
        "\u253E": { text: "+" },
        "\u253F": { text: "+" },
        "\u2540": { text: "+" },
        "\u2541": { text: "+" },
        "\u2542": { text: "+" },
        "\u2543": { text: "+" },
        "\u2544": { text: "+" },
        "\u2545": { text: "+" },
        "\u2546": { text: "+" },
        "\u2547": { text: "+" },
        "\u2548": { text: "+" },
        "\u2549": { text: "+" },
        "\u254A": { text: "+" },
        "\u254B": { text: "+" },
        "\u254C": { text: "-" },
        "\u254D": { text: "=" },
        "\u254E": { text: "|" },
        "\u254F": { text: "|" },
        "\u2550": { text: "=" },
        "\u2551": { text: "|" },
        "\u2552": { text: "+" },
        "\u2553": { text: "+" },
        "\u2554": { text: "+" },
        "\u2555": { text: "+" },
        "\u2556": { text: "+" },
        "\u2557": { text: "+" },
        "\u2558": { text: "+" },
        "\u2559": { text: "+" },
        "\u255A": { text: "+" },
        "\u255B": { text: "+" },
        "\u255C": { text: "+" },
        "\u255D": { text: "+" },
        "\u255E": { text: "+" },
        "\u255F": { text: "+" },
        "\u2560": { text: "+" },
        "\u2561": { text: "+" },
        "\u2562": { text: "+" },
        "\u2563": { text: "+" },
        "\u2564": { text: "+" },
        "\u2565": { text: "+" },
        "\u2566": { text: "+" },
        "\u2567": { text: "+" },
        "\u2568": { text: "+" },
        "\u2569": { text: "+" },
        "\u256A": { text: "+" },
        "\u256B": { text: "+" },
        "\u256C": { text: "+" },
        "\u256D": { text: "+" },
        "\u256E": { text: "+" },
        "\u256F": { text: "+" },
        "\u2570": { text: "+" },
        "\u2571": { math: "\\diagup" },
        "\u2572": { text: "\\" },
        "\u2573": { text: "X" },
        "\u257C": { text: "-" },
        "\u257D": { text: "|" },
        "\u257E": { text: "-" },
        "\u257F": { text: "|" },
        "\u2580": { math: "\\blockuphalf" },
        "\u2584": { math: "\\blocklowhalf" },
        "\u2588": { math: "\\blockfull" },
        "\u258C": { math: "\\blocklefthalf" },
        "\u2590": { math: "\\blockrighthalf" },
        "\u2591": { math: "\\blockqtrshaded" },
        "\u2592": { math: "\\blockhalfshaded" },
        "\u2593": { math: "\\blockthreeqtrshaded" },
        "\u25A0": { math: "\\mdlgblksquare", text: "\\ding{110}" },
        "\u25A1": { math: "\\square" },
        "\u25A2": { math: "\\squoval" },
        "\u25A3": { math: "\\blackinwhitesquare" },
        "\u25A4": { math: "\\squarehfill" },
        "\u25A5": { math: "\\squarevfill" },
        "\u25A6": { math: "\\squarehvfill" },
        "\u25A7": { math: "\\squarenwsefill" },
        "\u25A8": { math: "\\squareneswfill" },
        "\u25A9": { math: "\\squarecrossfill" },
        "\u25AA": { math: "\\blacksquare" },
        "\u25AB": { math: "\\smwhtsquare" },
        "\u25AC": { math: "\\hrectangleblack" },
        "\u25AD": { math: "\\fbox{~~}" },
        "\u25AE": { math: "\\vrectangleblack" },
        "\u25AF": { math: "\\Elzvrecto" },
        "\u25B0": { math: "\\parallelogramblack" },
        "\u25B2": { math: "\\bigblacktriangleup", text: "\\ding{115}" },
        "\u25B3": { math: "\\bigtriangleup" },
        "\u25B4": { math: "\\blacktriangle" },
        "\u25B5": { math: "\\vartriangle" },
        "\u25B6": { math: "\\RHD" },
        "\u25B7": { math: "\\rhd" },
        "\u25B8": { math: "\\blacktriangleright" },
        "\u25B9": { math: "\\triangleright" },
        "\u25BA": { math: "\\blackpointerright" },
        "\u25BB": { math: "\\whitepointerright" },
        "\u25BC": { math: "\\bigblacktriangledown", text: "\\ding{116}" },
        "\u25BD": { math: "\\bigtriangledown" },
        "\u25BE": { math: "\\blacktriangledown" },
        "\u25BF": { math: "\\triangledown" },
        "\u25C0": { math: "\\LHD" },
        "\u25C1": { math: "\\lhd" },
        "\u25C2": { math: "\\blacktriangleleft" },
        "\u25C3": { math: "\\triangleleft" },
        "\u25C4": { math: "\\blackpointerleft" },
        "\u25C5": { math: "\\whitepointerleft" },
        "\u25C6": { math: "\\Diamondblack", text: "\\ding{117}" },
        "\u25C7": { math: "\\Diamond" },
        "\u25C8": { math: "\\blackinwhitediamond" },
        "\u25C9": { math: "\\fisheye" },
        "\u25CA": { math: "\\lozenge" },
        "\u25CB": { math: "\\bigcirc" },
        "\u25CC": { math: "\\dottedcircle" },
        "\u25CD": { math: "\\circlevertfill" },
        "\u25CE": { math: "\\bullseye" },
        "\u25CF": { math: "\\CIRCLE", text: "\\ding{108}" },
        "\u25D0": { math: "\\Elzcirfl" },
        "\u25D1": { math: "\\Elzcirfr" },
        "\u25D2": { math: "\\Elzcirfb" },
        "\u25D3": { math: "\\circletophalfblack" },
        "\u25D4": { math: "\\circleurquadblack" },
        "\u25D5": { math: "\\blackcircleulquadwhite" },
        "\u25D6": { math: "\\LEFTCIRCLE" },
        "\u25D7": { math: "\\RIGHTCIRCLE", text: "\\ding{119}" },
        "\u25D8": { math: "\\Elzrvbull" },
        "\u25D9": { math: "\\inversewhitecircle" },
        "\u25DA": { math: "\\invwhiteupperhalfcircle" },
        "\u25DB": { math: "\\invwhitelowerhalfcircle" },
        "\u25DC": { math: "\\ularc" },
        "\u25DD": { math: "\\urarc" },
        "\u25DE": { math: "\\lrarc" },
        "\u25DF": { math: "\\llarc" },
        "\u25E0": { math: "\\topsemicircle" },
        "\u25E1": { math: "\\botsemicircle" },
        "\u25E2": { math: "\\lrblacktriangle" },
        "\u25E3": { math: "\\llblacktriangle" },
        "\u25E4": { math: "\\ulblacktriangle" },
        "\u25E5": { math: "\\urblacktriangle" },
        "\u25E6": { math: "\\smwhtcircle" },
        "\u25E7": { math: "\\Elzsqfl" },
        "\u25E8": { math: "\\Elzsqfr" },
        "\u25E9": { math: "\\squareulblack" },
        "\u25EA": { math: "\\Elzsqfse" },
        "\u25EB": { math: "\\boxbar" },
        "\u25EC": { math: "\\trianglecdot" },
        "\u25ED": { math: "\\triangleleftblack" },
        "\u25EE": { math: "\\trianglerightblack" },
        "\u25EF": { math: "\\bigcirc" },
        "\u25F0": { math: "\\squareulquad" },
        "\u25F1": { math: "\\squarellquad" },
        "\u25F2": { math: "\\squarelrquad" },
        "\u25F3": { math: "\\squareurquad" },
        "\u25F4": { math: "\\circleulquad" },
        "\u25F5": { math: "\\circlellquad" },
        "\u25F6": { math: "\\circlelrquad" },
        "\u25F7": { math: "\\circleurquad" },
        "\u25F8": { math: "\\ultriangle" },
        "\u25F9": { math: "\\urtriangle" },
        "\u25FA": { math: "\\lltriangle" },
        "\u25FB": { math: "\\square" },
        "\u25FC": { math: "\\blacksquare" },
        "\u25FD": { math: "\\mdsmwhtsquare" },
        "\u25FE": { math: "\\mdsmblksquare" },
        "\u25FF": { math: "\\lrtriangle" },
        "\u2605": { math: "\\bigstar", text: "\\ding{72}" },
        "\u2606": { math: "\\bigwhitestar", text: "\\ding{73}" },
        "\u2609": { math: "\\Sun" },
        "\u260E": { text: "\\ding{37}" },
        "\u2610": { math: "\\Square" },
        "\u2611": { math: "\\CheckedBox" },
        "\u2612": { math: "\\XBox" },
        "\u2613": { text: "X" },
        "\u2615": { math: "\\steaming" },
        "\u261B": { text: "\\ding{42}" },
        "\u261E": { math: "\\pointright", text: "\\ding{43}" },
        "\u2620": { math: "\\skull" },
        "\u2621": { math: "\\danger" },
        "\u2622": { math: "\\radiation" },
        "\u2623": { math: "\\biohazard" },
        "\u262F": { math: "\\yinyang" },
        "\u2639": { math: "\\frownie" },
        "\u263A": { math: "\\smiley" },
        "\u263B": { math: "\\blacksmiley" },
        "\u263C": { math: "\\sun" },
        "\u263D": { text: "\\rightmoon", commandspacer: true, textpackages: ["wasysym"] },
        "\u263E": { text: "\\leftmoon", commandspacer: true, textpackages: ["wasysym"] },
        "\u263F": { math: "\\mercury", text: "\\mercury", commandspacer: true },
        "\u2640": { math: "\\female", text: "\\venus", commandspacer: true },
        "\u2641": { math: "\\earth" },
        "\u2642": { math: "\\male", text: "\\male", commandspacer: true },
        "\u2643": { math: "\\jupiter", text: "\\jupiter", commandspacer: true },
        "\u2644": { math: "\\saturn", text: "\\saturn", commandspacer: true },
        "\u2645": { math: "\\uranus", text: "\\uranus", commandspacer: true },
        "\u2646": { math: "\\neptune", text: "\\neptune", commandspacer: true },
        "\u2647": { math: "\\pluto", text: "\\pluto", commandspacer: true },
        "\u2648": { math: "\\aries", text: "\\aries", commandspacer: true },
        "\u2649": { math: "\\taurus", text: "\\taurus", commandspacer: true },
        "\u264A": { math: "\\gemini", text: "\\gemini", commandspacer: true },
        "\u264B": { math: "\\cancer", text: "\\cancer", commandspacer: true },
        "\u264C": { math: "\\leo", text: "\\leo", commandspacer: true },
        "\u264D": { math: "\\virgo", text: "\\virgo", commandspacer: true },
        "\u264E": { math: "\\libra", text: "\\libra", commandspacer: true },
        "\u264F": { math: "\\scorpio", text: "\\scorpio", commandspacer: true },
        "\u2650": { math: "\\sagittarius", text: "\\sagittarius", commandspacer: true },
        "\u2651": { math: "\\capricornus", text: "\\capricornus", commandspacer: true },
        "\u2652": { math: "\\aquarius", text: "\\aquarius", commandspacer: true },
        "\u2653": { math: "\\pisces", text: "\\pisces", commandspacer: true },
        "\u2660": { math: "\\spadesuit", text: "\\ding{171}" },
        "\u2661": { math: "\\heartsuit" },
        "\u2662": { math: "\\diamond" },
        "\u2663": { math: "\\clubsuit", text: "\\ding{168}" },
        "\u2664": { math: "\\varspadesuit" },
        "\u2665": { math: "\\varheartsuit", text: "\\ding{170}" },
        "\u2666": { math: "\\vardiamondsuit", text: "\\ding{169}" },
        "\u2667": { math: "\\varclubsuit" },
        "\u2669": { math: "\\quarternote", text: "\\quarternote", commandspacer: true },
        "\u266A": { math: "\\eighthnote", text: "\\eighthnote", commandspacer: true },
        "\u266B": { math: "\\twonotes" },
        "\u266C": { math: "\\sixteenthnote" },
        "\u266D": { math: "\\flat" },
        "\u266E": { math: "\\natural" },
        "\u266F": { math: "\\sharp" },
        "\u267B": { math: "\\recycle" },
        "\u267E": { math: "\\acidfree" },
        "\u2680": { math: "\\dicei" },
        "\u2681": { math: "\\diceii" },
        "\u2682": { math: "\\diceiii" },
        "\u2683": { math: "\\diceiv" },
        "\u2684": { math: "\\dicev" },
        "\u2685": { math: "\\dicevi" },
        "\u2686": { math: "\\circledrightdot" },
        "\u2687": { math: "\\circledtwodots" },
        "\u2688": { math: "\\blackcircledrightdot" },
        "\u2689": { math: "\\blackcircledtwodots" },
        "\u2693": { math: "\\anchor" },
        "\u2694": { math: "\\swords" },
        "\u26A0": { math: "\\warning" },
        "\u26A5": { math: "\\Hermaphrodite" },
        "\u26AA": { math: "\\medcirc" },
        "\u26AB": { math: "\\medbullet" },
        "\u26AC": { math: "\\mdsmwhtcircle" },
        "\u26B2": { math: "\\neuter" },
        "\u2701": { text: "\\ding{33}" },
        "\u2702": { text: "\\ding{34}" },
        "\u2703": { text: "\\ding{35}" },
        "\u2704": { text: "\\ding{36}" },
        "\u2706": { text: "\\ding{38}" },
        "\u2707": { text: "\\ding{39}" },
        "\u2708": { text: "\\ding{40}" },
        "\u2709": { text: "\\ding{41}" },
        "\u270C": { text: "\\ding{44}" },
        "\u270D": { text: "\\ding{45}" },
        "\u270E": { math: "\\pencil", text: "\\ding{46}" },
        "\u270F": { text: "\\ding{47}" },
        "\u2710": { text: "\\ding{48}" },
        "\u2711": { text: "\\ding{49}" },
        "\u2712": { text: "\\ding{50}" },
        "\u2713": { math: "\\checkmark", text: "\\ding{51}" },
        "\u2714": { text: "\\ding{52}" },
        "\u2715": { text: "\\ding{53}" },
        "\u2716": { text: "\\ding{54}" },
        "\u2717": { math: "\\ballotx", text: "\\ding{55}" },
        "\u2718": { text: "\\ding{56}" },
        "\u2719": { text: "\\ding{57}" },
        "\u271A": { text: "\\ding{58}" },
        "\u271B": { text: "\\ding{59}" },
        "\u271C": { text: "\\ding{60}" },
        "\u271D": { text: "\\ding{61}" },
        "\u271E": { text: "\\ding{62}" },
        "\u271F": { text: "\\ding{63}" },
        "\u2720": { math: "\\maltese", text: "\\ding{64}" },
        "\u2721": { text: "\\ding{65}" },
        "\u2722": { text: "\\ding{66}" },
        "\u2723": { text: "\\ding{67}" },
        "\u2724": { text: "\\ding{68}" },
        "\u2725": { text: "\\ding{69}" },
        "\u2726": { text: "\\ding{70}" },
        "\u2727": { text: "\\ding{71}" },
        "\u2729": { text: "\\ding{73}" },
        "\u272A": { math: "\\circledstar", text: "\\ding{74}" },
        "\u272B": { text: "\\ding{75}" },
        "\u272C": { text: "\\ding{76}" },
        "\u272D": { text: "\\ding{77}" },
        "\u272E": { text: "\\ding{78}" },
        "\u272F": { text: "\\ding{79}" },
        "\u2730": { text: "\\ding{80}" },
        "\u2731": { text: "\\ding{81}" },
        "\u2732": { text: "\\ding{82}" },
        "\u2733": { text: "\\ding{83}" },
        "\u2734": { text: "\\ding{84}" },
        "\u2735": { text: "\\ding{85}" },
        "\u2736": { math: "\\varstar", text: "\\ding{86}" },
        "\u2737": { text: "\\ding{87}" },
        "\u2738": { text: "\\ding{88}" },
        "\u2739": { text: "\\ding{89}" },
        "\u273A": { text: "\\ding{90}" },
        "\u273B": { text: "\\ding{91}" },
        "\u273C": { text: "\\ding{92}" },
        "\u273D": { math: "\\dingasterisk", text: "\\ding{93}" },
        "\u273E": { text: "\\ding{94}" },
        "\u273F": { text: "\\ding{95}" },
        "\u2740": { text: "\\ding{96}" },
        "\u2741": { text: "\\ding{97}" },
        "\u2742": { text: "\\ding{98}" },
        "\u2743": { text: "\\ding{99}" },
        "\u2744": { text: "\\ding{100}" },
        "\u2745": { text: "\\ding{101}" },
        "\u2746": { text: "\\ding{102}" },
        "\u2747": { text: "\\ding{103}" },
        "\u2748": { text: "\\ding{104}" },
        "\u2749": { text: "\\ding{105}" },
        "\u274A": { text: "\\ding{106}" },
        "\u274B": { text: "\\ding{107}" },
        "\u274D": { text: "\\ding{109}" },
        "\u274F": { text: "\\ding{111}" },
        "\u2750": { text: "\\ding{112}" },
        "\u2751": { text: "\\ding{113}" },
        "\u2752": { text: "\\ding{114}" },
        "\u2756": { text: "\\ding{118}" },
        "\u2758": { text: "\\ding{120}" },
        "\u2759": { text: "\\ding{121}" },
        "\u275A": { text: "\\ding{122}" },
        "\u275B": { text: "\\ding{123}" },
        "\u275C": { text: "\\ding{124}" },
        "\u275D": { text: "\\ding{125}" },
        "\u275E": { text: "\\ding{126}" },
        "\u2761": { text: "\\ding{161}" },
        "\u2762": { text: "\\ding{162}" },
        "\u2763": { text: "\\ding{163}" },
        "\u2764": { text: "\\ding{164}" },
        "\u2765": { text: "\\ding{165}" },
        "\u2766": { text: "\\ding{166}" },
        "\u2767": { text: "\\ding{167}" },
        "\u2772": { math: "\\lbrbrak" },
        "\u2773": { math: "\\rbrbrak" },
        "\u2776": { text: "\\ding{182}" },
        "\u2777": { text: "\\ding{183}" },
        "\u2778": { text: "\\ding{184}" },
        "\u2779": { text: "\\ding{185}" },
        "\u277A": { text: "\\ding{186}" },
        "\u277B": { text: "\\ding{187}" },
        "\u277C": { text: "\\ding{188}" },
        "\u277D": { text: "\\ding{189}" },
        "\u277E": { text: "\\ding{190}" },
        "\u277F": { text: "\\ding{191}" },
        "\u2780": { text: "\\ding{192}" },
        "\u2781": { text: "\\ding{193}" },
        "\u2782": { text: "\\ding{194}" },
        "\u2783": { text: "\\ding{195}" },
        "\u2784": { text: "\\ding{196}" },
        "\u2785": { text: "\\ding{197}" },
        "\u2786": { text: "\\ding{198}" },
        "\u2787": { text: "\\ding{199}" },
        "\u2788": { text: "\\ding{200}" },
        "\u2789": { text: "\\ding{201}" },
        "\u278A": { text: "\\ding{202}" },
        "\u278B": { text: "\\ding{203}" },
        "\u278C": { text: "\\ding{204}" },
        "\u278D": { text: "\\ding{205}" },
        "\u278E": { text: "\\ding{206}" },
        "\u278F": { text: "\\ding{207}" },
        "\u2790": { text: "\\ding{208}" },
        "\u2791": { text: "\\ding{209}" },
        "\u2792": { text: "\\ding{210}" },
        "\u2793": { text: "\\ding{211}" },
        "\u2794": { text: "\\ding{212}" },
        "\u2798": { text: "\\ding{216}" },
        "\u2799": { text: "\\ding{217}" },
        "\u279A": { text: "\\ding{218}" },
        "\u279B": { math: "\\draftingarrow", text: "\\ding{219}" },
        "\u279C": { text: "\\ding{220}" },
        "\u279D": { text: "\\ding{221}" },
        "\u279E": { text: "\\ding{222}" },
        "\u279F": { text: "\\ding{223}" },
        "\u27A0": { text: "\\ding{224}" },
        "\u27A1": { text: "\\ding{225}" },
        "\u27A2": { math: "\\arrowbullet", text: "\\ding{226}" },
        "\u27A3": { text: "\\ding{227}" },
        "\u27A4": { text: "\\ding{228}" },
        "\u27A5": { text: "\\ding{229}" },
        "\u27A6": { text: "\\ding{230}" },
        "\u27A7": { text: "\\ding{231}" },
        "\u27A8": { text: "\\ding{232}" },
        "\u27A9": { text: "\\ding{233}" },
        "\u27AA": { text: "\\ding{234}" },
        "\u27AB": { text: "\\ding{235}" },
        "\u27AC": { text: "\\ding{236}" },
        "\u27AD": { text: "\\ding{237}" },
        "\u27AE": { text: "\\ding{238}" },
        "\u27AF": { text: "\\ding{239}" },
        "\u27B1": { text: "\\ding{241}" },
        "\u27B2": { text: "\\ding{242}" },
        "\u27B3": { text: "\\ding{243}" },
        "\u27B4": { text: "\\ding{244}" },
        "\u27B5": { text: "\\ding{245}" },
        "\u27B6": { text: "\\ding{246}" },
        "\u27B7": { text: "\\ding{247}" },
        "\u27B8": { text: "\\ding{248}" },
        "\u27B9": { text: "\\ding{249}" },
        "\u27BA": { text: "\\ding{250}" },
        "\u27BB": { text: "\\ding{251}" },
        "\u27BC": { text: "\\ding{252}" },
        "\u27BD": { text: "\\ding{253}" },
        "\u27BE": { text: "\\ding{254}" },
        "\u27C0": { math: "\\threedangle" },
        "\u27C1": { math: "\\whiteinwhitetriangle" },
        "\u27C2": { math: "\\perp" },
        "\u27C3": { math: "\\subsetcirc" },
        "\u27C4": { math: "\\supsetcirc" },
        "\u27C5": { math: "\\Lbag" },
        "\u27C6": { math: "\\Rbag" },
        "\u27C7": { math: "\\veedot" },
        "\u27C8": { math: "\\bsolhsub" },
        "\u27C9": { math: "\\suphsol" },
        "\u27CC": { math: "\\longdivision" },
        "\u27D0": { math: "\\Diamonddot" },
        "\u27D1": { math: "\\wedgedot" },
        "\u27D2": { math: "\\upin" },
        "\u27D3": { math: "\\pullback" },
        "\u27D4": { math: "\\pushout" },
        "\u27D5": { math: "\\leftouterjoin" },
        "\u27D6": { math: "\\rightouterjoin" },
        "\u27D7": { math: "\\fullouterjoin" },
        "\u27D8": { math: "\\bigbot" },
        "\u27D9": { math: "\\bigtop" },
        "\u27DA": { math: "\\DashVDash" },
        "\u27DB": { math: "\\dashVdash" },
        "\u27DC": { math: "\\multimapinv" },
        "\u27DD": { math: "\\vlongdash" },
        "\u27DE": { math: "\\longdashv" },
        "\u27DF": { math: "\\cirbot" },
        "\u27E0": { math: "\\lozengeminus" },
        "\u27E1": { math: "\\concavediamond" },
        "\u27E2": { math: "\\concavediamondtickleft" },
        "\u27E3": { math: "\\concavediamondtickright" },
        "\u27E4": { math: "\\whitesquaretickleft" },
        "\u27E5": { math: "\\whitesquaretickright" },
        "\u27E6": { math: "\\llbracket" },
        "\u27E7": { math: "\\rrbracket" },
        "\u27E8": { math: "\\langle" },
        "\u27E9": { math: "\\rangle" },
        "\u27EA": { math: "\\lang" },
        "\u27EB": { math: "\\rang" },
        "\u27EC": { math: "\\Lbrbrak" },
        "\u27ED": { math: "\\Rbrbrak" },
        "\u27EE": { math: "\\lgroup" },
        "\u27EF": { math: "\\rgroup" },
        "\u27F0": { math: "\\UUparrow" },
        "\u27F1": { math: "\\DDownarrow" },
        "\u27F2": { math: "\\acwgapcirclearrow" },
        "\u27F3": { math: "\\cwgapcirclearrow" },
        "\u27F4": { math: "\\rightarrowonoplus" },
        "\u27F5": { math: "\\longleftarrow" },
        "\u27F6": { math: "\\longrightarrow" },
        "\u27F7": { math: "\\longleftrightarrow" },
        "\u27F8": { math: "\\Longleftarrow" },
        "\u27F9": { math: "\\Longrightarrow" },
        "\u27FA": { math: "\\Longleftrightarrow" },
        "\u27FB": { math: "\\longmapsfrom" },
        "\u27FC": { math: "\\longmapsto" },
        "\u27FD": { math: "\\Longmapsfrom" },
        "\u27FE": { math: "\\Longmapsto" },
        "\u27FF": { math: "\\sim\\joinrel\\leadsto" },
        "\u2900": { math: "\\psur" },
        "\u2901": { math: "\\nVtwoheadrightarrow" },
        "\u2902": { math: "\\nvLeftarrow" },
        "\u2903": { math: "\\nvRightarrow" },
        "\u2904": { math: "\\nvLeftrightarrow" },
        "\u2906": { math: "\\Mapsfrom" },
        "\u2907": { math: "\\Mapsto" },
        "\u2908": { math: "\\downarrowbarred" },
        "\u2909": { math: "\\uparrowbarred" },
        "\u290A": { math: "\\Uuparrow" },
        "\u290B": { math: "\\Ddownarrow" },
        "\u290C": { math: "\\leftbkarrow" },
        "\u290D": { math: "\\rightbkarrow" },
        "\u290E": { math: "\\leftdbkarrow" },
        "\u290F": { math: "\\dbkarow" },
        "\u2910": { math: "\\drbkarow" },
        "\u2911": { math: "\\rightdotarrow" },
        "\u2912": { math: "\\UpArrowBar" },
        "\u2913": { math: "\\DownArrowBar" },
        "\u2914": { math: "\\pinj" },
        "\u2915": { math: "\\finj" },
        "\u2916": { math: "\\bij" },
        "\u2917": { math: "\\nvtwoheadrightarrowtail" },
        "\u2918": { math: "\\nVtwoheadrightarrowtail" },
        "\u2919": { math: "\\lefttail" },
        "\u291A": { math: "\\righttail" },
        "\u291B": { math: "\\leftdbltail" },
        "\u291C": { math: "\\rightdbltail" },
        "\u291D": { math: "\\diamondleftarrow" },
        "\u291E": { math: "\\rightarrowdiamond" },
        "\u291F": { math: "\\diamondleftarrowbar" },
        "\u2920": { math: "\\barrightarrowdiamond" },
        "\u2921": { math: "\\nwsearrow" },
        "\u2922": { math: "\\neswarrow" },
        "\u292B": { math: "\\rdiagovfdiag" },
        "\u292C": { math: "\\fdiagovrdiag" },
        "\u292D": { math: "\\seovnearrow" },
        "\u292E": { math: "\\neovsearrow" },
        "\u292F": { math: "\\fdiagovnearrow" },
        "\u2930": { math: "\\rdiagovsearrow" },
        "\u2931": { math: "\\neovnwarrow" },
        "\u2932": { math: "\\nwovnearrow" },
        "\u2934": { math: "\\uprightcurvearrow" },
        "\u2935": { math: "\\downrightcurvedarrow" },
        "\u2938": { math: "\\cwrightarcarrow" },
        "\u2939": { math: "\\acwleftarcarrow" },
        "\u293A": { math: "\\acwoverarcarrow" },
        "\u293B": { math: "\\acwunderarcarrow" },
        "\u293C": { math: "\\curvearrowrightminus" },
        "\u293D": { math: "\\curvearrowleftplus" },
        "\u293E": { math: "\\cwundercurvearrow" },
        "\u293F": { math: "\\ccwundercurvearrow" },
        "\u2940": { math: "\\Elolarr" },
        "\u2941": { math: "\\Elorarr" },
        "\u2942": { math: "\\ElzRlarr" },
        "\u2943": { math: "\\leftarrowshortrightarrow" },
        "\u2944": { math: "\\ElzrLarr" },
        "\u2945": { math: "\\rightarrowplus" },
        "\u2946": { math: "\\leftarrowplus" },
        "\u2947": { math: "\\Elzrarrx" },
        "\u2948": { math: "\\leftrightarrowcircle" },
        "\u2949": { math: "\\twoheaduparrowcircle" },
        "\u294A": { math: "\\leftrightharpoon" },
        "\u294B": { math: "\\rightleftharpoon" },
        "\u294C": { math: "\\updownharpoonrightleft" },
        "\u294D": { math: "\\updownharpoonleftright" },
        "\u294E": { math: "\\LeftRightVector" },
        "\u294F": { math: "\\RightUpDownVector" },
        "\u2950": { math: "\\DownLeftRightVector" },
        "\u2951": { math: "\\LeftUpDownVector" },
        "\u2952": { math: "\\LeftVectorBar" },
        "\u2953": { math: "\\RightVectorBar" },
        "\u2954": { math: "\\RightUpVectorBar" },
        "\u2955": { math: "\\RightDownVectorBar" },
        "\u2956": { math: "\\DownLeftVectorBar" },
        "\u2957": { math: "\\DownRightVectorBar" },
        "\u2958": { math: "\\LeftUpVectorBar" },
        "\u2959": { math: "\\LeftDownVectorBar" },
        "\u295A": { math: "\\LeftTeeVector" },
        "\u295B": { math: "\\RightTeeVector" },
        "\u295C": { math: "\\RightUpTeeVector" },
        "\u295D": { math: "\\RightDownTeeVector" },
        "\u295E": { math: "\\DownLeftTeeVector" },
        "\u295F": { math: "\\DownRightTeeVector" },
        "\u2960": { math: "\\LeftUpTeeVector" },
        "\u2961": { math: "\\LeftDownTeeVector" },
        "\u2962": { math: "\\leftleftharpoons" },
        "\u2963": { math: "\\upupharpoons" },
        "\u2964": { math: "\\rightrightharpoons" },
        "\u2965": { math: "\\downdownharpoons" },
        "\u2966": { math: "\\leftrightharpoonsup" },
        "\u2967": { math: "\\leftrightharpoonsdown" },
        "\u2968": { math: "\\rightleftharpoonsup" },
        "\u2969": { math: "\\rightleftharpoonsdown" },
        "\u296A": { math: "\\leftbarharpoon" },
        "\u296B": { math: "\\barleftharpoon" },
        "\u296C": { math: "\\rightbarharpoon" },
        "\u296D": { math: "\\barrightharpoon" },
        "\u296E": { math: "\\UpEquilibrium" },
        "\u296F": { math: "\\ReverseUpEquilibrium" },
        "\u2970": { math: "\\RoundImplies" },
        "\u2971": { math: "\\equalrightarrow" },
        "\u2972": { math: "\\similarrightarrow" },
        "\u2973": { math: "\\leftarrowsimilar" },
        "\u2974": { math: "\\rightarrowsimilar" },
        "\u2975": { math: "\\rightarrowapprox" },
        "\u2976": { math: "\\ltlarr" },
        "\u2977": { math: "\\leftarrowless" },
        "\u2978": { math: "\\gtrarr" },
        "\u2979": { math: "\\subrarr" },
        "\u297A": { math: "\\leftarrowsubset" },
        "\u297B": { math: "\\suplarr" },
        "\u297E": { math: "\\upfishtail" },
        "\u297F": { math: "\\downfishtail" },
        "\u2980": { math: "\\Elztfnc" },
        "\u2981": { math: "\\spot" },
        "\u2982": { math: "\\typecolon" },
        "\u2983": { math: "\\lBrace" },
        "\u2984": { math: "\\rBrace" },
        "\u2986": { math: "\\Elroang" },
        "\u2987": { math: "\\limg" },
        "\u2988": { math: "\\rimg" },
        "\u2989": { math: "\\lblot" },
        "\u298A": { math: "\\rblot" },
        "\u298B": { math: "\\lbrackubar" },
        "\u298C": { math: "\\rbrackubar" },
        "\u298D": { math: "\\lbrackultick" },
        "\u298E": { math: "\\rbracklrtick" },
        "\u298F": { math: "\\lbracklltick" },
        "\u2990": { math: "\\rbrackurtick" },
        "\u2991": { math: "\\langledot" },
        "\u2992": { math: "\\rangledot" },
        "\u2993": { math: "<\\kern-0.58em(" },
        "\u2995": { math: "\\Lparengtr" },
        "\u2996": { math: "\\Rparenless" },
        "\u2997": { math: "\\lblkbrbrak" },
        "\u2998": { math: "\\rblkbrbrak" },
        "\u2999": { math: "\\Elzddfnc" },
        "\u299A": { math: "\\vzigzag" },
        "\u299B": { math: "\\measuredangleleft" },
        "\u299C": { math: "\\Angle" },
        "\u299D": { math: "\\rightanglemdot" },
        "\u299E": { math: "\\angles" },
        "\u299F": { math: "\\angdnr" },
        "\u29A0": { math: "\\Elzlpargt" },
        "\u29A1": { math: "\\sphericalangleup" },
        "\u29A2": { math: "\\turnangle" },
        "\u29A3": { math: "\\revangle" },
        "\u29A4": { math: "\\angleubar" },
        "\u29A5": { math: "\\revangleubar" },
        "\u29A6": { math: "\\wideangledown" },
        "\u29A7": { math: "\\wideangleup" },
        "\u29A8": { math: "\\measanglerutone" },
        "\u29A9": { math: "\\measanglelutonw" },
        "\u29AA": { math: "\\measanglerdtose" },
        "\u29AB": { math: "\\measangleldtosw" },
        "\u29AC": { math: "\\measangleurtone" },
        "\u29AD": { math: "\\measangleultonw" },
        "\u29AE": { math: "\\measangledrtose" },
        "\u29AF": { math: "\\measangledltosw" },
        "\u29B0": { math: "\\revemptyset" },
        "\u29B1": { math: "\\emptysetobar" },
        "\u29B2": { math: "\\emptysetocirc" },
        "\u29B3": { math: "\\emptysetoarr" },
        "\u29B4": { math: "\\emptysetoarrl" },
        "\u29B7": { math: "\\circledparallel" },
        "\u29B8": { math: "\\circledbslash" },
        "\u29B9": { math: "\\operp" },
        "\u29BA": { math: "\\obot" },
        "\u29BB": { math: "\\olcross" },
        "\u29BC": { math: "\\odotslashdot" },
        "\u29BD": { math: "\\uparrowoncircle" },
        "\u29BE": { math: "\\circledwhitebullet" },
        "\u29BF": { math: "\\circledbullet" },
        "\u29C0": { math: "\\circledless" },
        "\u29C1": { math: "\\circledgtr" },
        "\u29C2": { math: "\\cirscir" },
        "\u29C3": { math: "\\cirE" },
        "\u29C4": { math: "\\boxslash" },
        "\u29C5": { math: "\\boxbslash" },
        "\u29C6": { math: "\\boxast" },
        "\u29C7": { math: "\\boxcircle" },
        "\u29C8": { math: "\\boxbox" },
        "\u29C9": { math: "\\boxonbox" },
        "\u29CA": { math: "\\ElzLap" },
        "\u29CB": { math: "\\Elzdefas" },
        "\u29CC": { math: "\\triangles" },
        "\u29CD": { math: "\\triangleserifs" },
        "\u29CE": { math: "\\rtriltri" },
        "\u29CF": { math: "\\LeftTriangleBar" },
        "\u29CF\u0338": { math: "\\NotLeftTriangleBar" },
        "\u29D0": { math: "\\RightTriangleBar" },
        "\u29D0\u0338": { math: "\\NotRightTriangleBar" },
        "\u29D1": { math: "\\lfbowtie" },
        "\u29D2": { math: "\\rfbowtie" },
        "\u29D3": { math: "\\fbowtie" },
        "\u29D4": { math: "\\lftimes" },
        "\u29D5": { math: "\\rftimes" },
        "\u29D6": { math: "\\hourglass" },
        "\u29D7": { math: "\\blackhourglass" },
        "\u29D8": { math: "\\lvzigzag" },
        "\u29D9": { math: "\\rvzigzag" },
        "\u29DA": { math: "\\Lvzigzag" },
        "\u29DB": { math: "\\Rvzigzag" },
        "\u29DD": { math: "\\tieinfty" },
        "\u29DE": { math: "\\nvinfty" },
        "\u29DF": { math: "\\multimapboth" },
        "\u29E0": { math: "\\laplac" },
        "\u29E1": { math: "\\lrtriangleeq" },
        "\u29E2": { math: "\\shuffle" },
        "\u29E3": { math: "\\eparsl" },
        "\u29E4": { math: "\\smeparsl" },
        "\u29E5": { math: "\\eqvparsl" },
        "\u29E6": { math: "\\gleichstark" },
        "\u29E7": { math: "\\thermod" },
        "\u29E8": { math: "\\downtriangleleftblack" },
        "\u29E9": { math: "\\downtrianglerightblack" },
        "\u29EA": { math: "\\blackdiamonddownarrow" },
        "\u29EB": { math: "\\blacklozenge" },
        "\u29EC": { math: "\\circledownarrow" },
        "\u29ED": { math: "\\blackcircledownarrow" },
        "\u29EE": { math: "\\errbarsquare" },
        "\u29EF": { math: "\\errbarblacksquare" },
        "\u29F0": { math: "\\errbardiamond" },
        "\u29F1": { math: "\\errbarblackdiamond" },
        "\u29F2": { math: "\\errbarcircle" },
        "\u29F3": { math: "\\errbarblackcircle" },
        "\u29F4": { math: "\\RuleDelayed" },
        "\u29F5": { math: "\\setminus" },
        "\u29F6": { math: "\\dsol" },
        "\u29F7": { math: "\\rsolbar" },
        "\u29F8": { math: "\\xsol" },
        "\u29F9": { math: "\\zhide" },
        "\u29FA": { math: "\\doubleplus" },
        "\u29FB": { math: "\\tripleplus" },
        "\u29FC": { math: "\\lcurvyangle" },
        "\u29FD": { math: "\\rcurvyangle" },
        "\u29FE": { math: "\\tplus" },
        "\u29FF": { math: "\\tminus" },
        "\u2A00": { math: "\\bigodot" },
        "\u2A01": { math: "\\bigoplus" },
        "\u2A02": { math: "\\bigotimes" },
        "\u2A03": { math: "\\bigcupdot" },
        "\u2A04": { math: "\\Elxuplus" },
        "\u2A05": { math: "\\ElzThr" },
        "\u2A06": { math: "\\Elxsqcup" },
        "\u2A07": { math: "\\ElzInf" },
        "\u2A08": { math: "\\ElzSup" },
        "\u2A09": { math: "\\varprod" },
        "\u2A0A": { math: "\\modtwosum" },
        "\u2A0B": { math: "\\sumint" },
        "\u2A0C": { math: "\\iiiint" },
        "\u2A0D": { math: "\\ElzCint" },
        "\u2A0E": { math: "\\intBar" },
        "\u2A0F": { math: "\\clockoint" },
        "\u2A11": { math: "\\awint" },
        "\u2A12": { math: "\\rppolint" },
        "\u2A13": { math: "\\scpolint" },
        "\u2A14": { math: "\\npolint" },
        "\u2A15": { math: "\\pointint" },
        "\u2A16": { math: "\\sqrint" },
        "\u2A17": { math: "\\intlarhk" },
        "\u2A18": { math: "\\intx" },
        "\u2A19": { math: "\\intcap" },
        "\u2A1A": { math: "\\intcup" },
        "\u2A1B": { math: "\\upint" },
        "\u2A1C": { math: "\\lowint" },
        "\u2A1D": { math: "\\Join" },
        "\u2A1E": { math: "\\bigtriangleleft" },
        "\u2A1F": { math: "\\zcmp" },
        "\u2A20": { math: "\\zpipe" },
        "\u2A21": { math: "\\zproject" },
        "\u2A22": { math: "\\ringplus" },
        "\u2A23": { math: "\\plushat" },
        "\u2A24": { math: "\\simplus" },
        "\u2A26": { math: "\\plussim" },
        "\u2A27": { math: "\\plussubtwo" },
        "\u2A28": { math: "\\plustrif" },
        "\u2A29": { math: "\\commaminus" },
        "\u2A2B": { math: "\\minusfdots" },
        "\u2A2C": { math: "\\minusrdots" },
        "\u2A2F": { math: "\\ElzTimes" },
        "\u2A30": { math: "\\dottimes" },
        "\u2A31": { math: "\\timesbar" },
        "\u2A32": { math: "\\btimes" },
        "\u2A33": { math: "\\smashtimes" },
        "\u2A36": { math: "\\otimeshat" },
        "\u2A37": { math: "\\Otimes" },
        "\u2A38": { math: "\\odiv" },
        "\u2A39": { math: "\\triangleplus" },
        "\u2A3A": { math: "\\triangleminus" },
        "\u2A3B": { math: "\\triangletimes" },
        "\u2A3D": { math: "\\intprodr" },
        "\u2A3E": { math: "\\fcmp" },
        "\u2A3F": { math: "\\amalg" },
        "\u2A40": { math: "\\capdot" },
        "\u2A41": { math: "\\uminus" },
        "\u2A42": { math: "\\barcup" },
        "\u2A43": { math: "\\barcap" },
        "\u2A44": { math: "\\capwedge" },
        "\u2A45": { math: "\\cupvee" },
        "\u2A46": { math: "\\cupovercap" },
        "\u2A47": { math: "\\capovercup" },
        "\u2A48": { math: "\\cupbarcap" },
        "\u2A49": { math: "\\capbarcup" },
        "\u2A4A": { math: "\\twocups" },
        "\u2A4B": { math: "\\twocaps" },
        "\u2A4C": { math: "\\closedvarcup" },
        "\u2A4D": { math: "\\closedvarcap" },
        "\u2A4E": { math: "\\Sqcap" },
        "\u2A4F": { math: "\\Sqcup" },
        "\u2A50": { math: "\\closedvarcupsmashprod" },
        "\u2A51": { math: "\\wedgeodot" },
        "\u2A52": { math: "\\veeodot" },
        "\u2A53": { math: "\\ElzAnd" },
        "\u2A54": { math: "\\ElzOr" },
        "\u2A56": { math: "\\ElOr" },
        "\u2A57": { math: "\\bigslopedvee" },
        "\u2A58": { math: "\\bigslopedwedge" },
        "\u2A59": { math: "\\veeonwedge" },
        "\u2A5A": { math: "\\wedgemidvert" },
        "\u2A5B": { math: "\\veemidvert" },
        "\u2A5C": { math: "\\midbarwedge" },
        "\u2A5D": { math: "\\midbarvee" },
        "\u2A5E": { math: "\\perspcorrespond" },
        "\u2A5F": { math: "\\Elzminhat" },
        "\u2A60": { math: "\\wedgedoublebar" },
        "\u2A61": { math: "\\varveebar" },
        "\u2A62": { math: "\\doublebarvee" },
        "\u2A64": { math: "\\dsub" },
        "\u2A65": { math: "\\rsub" },
        "\u2A66": { math: "\\eqdot" },
        "\u2A67": { math: "\\dotequiv" },
        "\u2A68": { math: "\\equivVert" },
        "\u2A69": { math: "\\equivVvert" },
        "\u2A6A": { math: "\\dotsim" },
        "\u2A6B": { math: "\\simrdots" },
        "\u2A6C": { math: "\\simminussim" },
        "\u2A6D": { math: "\\congdot" },
        "\u2A6E": { math: "\\stackrel{*}{=}" },
        "\u2A6F": { math: "\\hatapprox" },
        "\u2A70": { math: "\\approxeqq" },
        "\u2A71": { math: "\\eqqplus" },
        "\u2A72": { math: "\\pluseqq" },
        "\u2A73": { math: "\\eqqsim" },
        "\u2A74": { math: "\\Coloneqq" },
        "\u2A75": { math: "\\Equal" },
        "\u2A76": { math: "\\Same" },
        "\u2A77": { math: "\\ddotseq" },
        "\u2A78": { math: "\\equivDD" },
        "\u2A79": { math: "\\ltcir" },
        "\u2A7A": { math: "\\gtcir" },
        "\u2A7B": { math: "\\ltquest" },
        "\u2A7C": { math: "\\gtquest" },
        "\u2A7D": { math: "\\leqslant", mathpackages: ["amssymb"] },
        "\u2A7D\u0338": { math: "\\nleqslant", mathpackages: ["amssymb"] },
        "\u2A7E": { math: "\\geqslant", mathpackages: ["amssymb"] },
        "\u2A7E\u0338": { math: "\\ngeqslant", mathpackages: ["amssymb"] },
        "\u2A7F": { math: "\\lesdot" },
        "\u2A80": { math: "\\gesdot" },
        "\u2A81": { math: "\\lesdoto" },
        "\u2A82": { math: "\\gesdoto" },
        "\u2A83": { math: "\\lesdotor" },
        "\u2A84": { math: "\\gesdotol" },
        "\u2A85": { math: "\\lessapprox" },
        "\u2A86": { math: "\\gtrapprox" },
        "\u2A87": { math: "\\lneq" },
        "\u2A88": { math: "\\gneq" },
        "\u2A89": { math: "\\lnapprox" },
        "\u2A8A": { math: "\\gnapprox" },
        "\u2A8B": { math: "\\lesseqqgtr" },
        "\u2A8C": { math: "\\gtreqqless" },
        "\u2A8D": { math: "\\lsime" },
        "\u2A8E": { math: "\\gsime" },
        "\u2A8F": { math: "\\lsimg" },
        "\u2A90": { math: "\\gsiml" },
        "\u2A91": { math: "\\lgE" },
        "\u2A92": { math: "\\glE" },
        "\u2A93": { math: "\\lesges" },
        "\u2A94": { math: "\\gesles" },
        "\u2A95": { math: "\\eqslantless" },
        "\u2A96": { math: "\\eqslantgtr" },
        "\u2A97": { math: "\\elsdot" },
        "\u2A98": { math: "\\egsdot" },
        "\u2A99": { math: "\\eqqless" },
        "\u2A9A": { math: "\\eqqgtr" },
        "\u2A9B": { math: "\\eqqslantless" },
        "\u2A9C": { math: "\\eqqslantgtr" },
        "\u2A9D": { math: "\\Pisymbol{ppi020}{117}" },
        "\u2A9E": { math: "\\Pisymbol{ppi020}{105}" },
        "\u2A9F": { math: "\\simlE" },
        "\u2AA0": { math: "\\simgE" },
        "\u2AA1": { math: "\\NestedLessLess" },
        "\u2AA1\u0338": { math: "\\NotNestedLessLess" },
        "\u2AA2": { math: "\\NestedGreaterGreater" },
        "\u2AA2\u0338": { math: "\\NotNestedGreaterGreater" },
        "\u2AA3": { math: "\\partialmeetcontraction" },
        "\u2AA4": { math: "\\glj" },
        "\u2AA5": { math: "\\gla" },
        "\u2AA6": { math: "\\leftslice" },
        "\u2AA7": { math: "\\rightslice" },
        "\u2AA8": { math: "\\lescc" },
        "\u2AA9": { math: "\\gescc" },
        "\u2AAA": { math: "\\smt" },
        "\u2AAB": { math: "\\lat" },
        "\u2AAC": { math: "\\smte" },
        "\u2AAD": { math: "\\late" },
        "\u2AAE": { math: "\\bumpeqq" },
        "\u2AAF": { math: "\\preceq" },
        "\u2AAF\u0338": { math: "\\not\\preceq" },
        "\u2AB0": { math: "\\succeq" },
        "\u2AB0\u0338": { math: "\\not\\succeq" },
        "\u2AB1": { math: "\\precneq" },
        "\u2AB2": { math: "\\succneq" },
        "\u2AB3": { math: "\\preceqq" },
        "\u2AB4": { math: "\\succeqq" },
        "\u2AB5": { math: "\\precneqq" },
        "\u2AB6": { math: "\\succneqq" },
        "\u2AB7": { math: "\\precapprox" },
        "\u2AB8": { math: "\\succapprox" },
        "\u2AB9": { math: "\\precnapprox" },
        "\u2ABA": { math: "\\succnapprox" },
        "\u2ABB": { math: "\\llcurly" },
        "\u2ABC": { math: "\\ggcurly" },
        "\u2ABD": { math: "\\subsetdot" },
        "\u2ABE": { math: "\\supsetdot" },
        "\u2ABF": { math: "\\subsetplus" },
        "\u2AC0": { math: "\\supsetplus" },
        "\u2AC1": { math: "\\submult" },
        "\u2AC2": { math: "\\supmult" },
        "\u2AC3": { math: "\\subedot" },
        "\u2AC4": { math: "\\supedot" },
        "\u2AC5": { math: "\\subseteqq" },
        "\u2AC5\u0338": { math: "\\nsubseteqq" },
        "\u2AC6": { math: "\\supseteqq" },
        "\u2AC6\u0338": { math: "\\nsupseteqq" },
        "\u2AC7": { math: "\\subsim" },
        "\u2AC8": { math: "\\supsim" },
        "\u2AC9": { math: "\\subsetapprox" },
        "\u2ACA": { math: "\\supsetapprox" },
        "\u2ACB": { math: "\\subsetneqq" },
        "\u2ACC": { math: "\\supsetneqq" },
        "\u2ACD": { math: "\\lsqhook" },
        "\u2ACE": { math: "\\rsqhook" },
        "\u2ACF": { math: "\\csub" },
        "\u2AD0": { math: "\\csup" },
        "\u2AD1": { math: "\\csube" },
        "\u2AD2": { math: "\\csupe" },
        "\u2AD3": { math: "\\subsup" },
        "\u2AD4": { math: "\\supsub" },
        "\u2AD5": { math: "\\subsub" },
        "\u2AD6": { math: "\\supsup" },
        "\u2AD7": { math: "\\suphsub" },
        "\u2AD8": { math: "\\supdsub" },
        "\u2AD9": { math: "\\forkv" },
        "\u2ADA": { math: "\\topfork" },
        "\u2ADB": { math: "\\mlcp" },
        "\u2ADC": { math: "\\forks" },
        "\u2ADD": { math: "\\forksnot" },
        "\u2ADD\u0338": { math: "\\forks" },
        "\u2ADE": { math: "\\shortlefttack" },
        "\u2ADF": { math: "\\shortdowntack" },
        "\u2AE0": { math: "\\shortuptack" },
        "\u2AE1": { math: "\\perps" },
        "\u2AE2": { math: "\\vDdash" },
        "\u2AE3": { math: "\\dashV" },
        "\u2AE4": { math: "\\Dashv" },
        "\u2AE5": { math: "\\DashV" },
        "\u2AE6": { math: "\\varVdash" },
        "\u2AE7": { math: "\\Barv" },
        "\u2AE8": { math: "\\vBar" },
        "\u2AE9": { math: "\\vBarv" },
        "\u2AEA": { math: "\\Top" },
        "\u2AEC": { math: "\\Not" },
        "\u2AED": { math: "\\bNot" },
        "\u2AEE": { math: "\\revnmid" },
        "\u2AEF": { math: "\\cirmid" },
        "\u2AF0": { math: "\\midcir" },
        "\u2AF1": { math: "\\topcir" },
        "\u2AF2": { math: "\\nhpar" },
        "\u2AF3": { math: "\\parsim" },
        "\u2AF4": { math: "\\interleave" },
        "\u2AF5": { math: "\\nhVvert" },
        "\u2AF6": { math: "\\Elztdcol" },
        "\u2AF7": { math: "\\lllnest" },
        "\u2AF8": { math: "\\gggnest" },
        "\u2AF9": { math: "\\leqqslant" },
        "\u2AFA": { math: "\\geqqslant" },
        "\u2AFB": { math: "\\trslash" },
        "\u2AFC": { math: "\\biginterleave" },
        "\u2AFD": { math: "{{/}\\!\\!{/}}" },
        "\u2AFD\u20E5": { math: "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}" },
        "\u2AFE": { math: "\\talloblong" },
        "\u2AFF": { math: "\\bigtalloblong" },
        "\u2B12": { math: "\\squaretopblack" },
        "\u2B13": { math: "\\squarebotblack" },
        "\u2B14": { math: "\\squareurblack" },
        "\u2B15": { math: "\\squarellblack" },
        "\u2B16": { math: "\\diamondleftblack" },
        "\u2B17": { math: "\\diamondrightblack" },
        "\u2B18": { math: "\\diamondtopblack" },
        "\u2B19": { math: "\\diamondbotblack" },
        "\u2B1A": { math: "\\dottedsquare" },
        "\u2B1B": { math: "\\blacksquare" },
        "\u2B1C": { math: "\\square" },
        "\u2B1D": { math: "\\vysmblksquare" },
        "\u2B1E": { math: "\\vysmwhtsquare" },
        "\u2B1F": { math: "\\pentagonblack" },
        "\u2B20": { math: "\\pentagon" },
        "\u2B21": { math: "\\varhexagon" },
        "\u2B22": { math: "\\varhexagonblack" },
        "\u2B23": { math: "\\hexagonblack" },
        "\u2B24": { math: "\\lgblkcircle" },
        "\u2B25": { math: "\\mdblkdiamond" },
        "\u2B26": { math: "\\mdwhtdiamond" },
        "\u2B27": { math: "\\mdblklozenge" },
        "\u2B28": { math: "\\mdwhtlozenge" },
        "\u2B29": { math: "\\smblkdiamond" },
        "\u2B2A": { math: "\\smblklozenge" },
        "\u2B2B": { math: "\\smwhtlozenge" },
        "\u2B2C": { math: "\\blkhorzoval" },
        "\u2B2D": { math: "\\whthorzoval" },
        "\u2B2E": { math: "\\blkvertoval" },
        "\u2B2F": { math: "\\whtvertoval" },
        "\u2B30": { math: "\\circleonleftarrow" },
        "\u2B31": { math: "\\leftthreearrows" },
        "\u2B32": { math: "\\leftarrowonoplus" },
        "\u2B33": { math: "\\longleftsquigarrow" },
        "\u2B34": { math: "\\nvtwoheadleftarrow" },
        "\u2B35": { math: "\\nVtwoheadleftarrow" },
        "\u2B36": { math: "\\twoheadmapsfrom" },
        "\u2B37": { math: "\\twoheadleftdbkarrow" },
        "\u2B38": { math: "\\leftdotarrow" },
        "\u2B39": { math: "\\nvleftarrowtail" },
        "\u2B3A": { math: "\\nVleftarrowtail" },
        "\u2B3B": { math: "\\twoheadleftarrowtail" },
        "\u2B3C": { math: "\\nvtwoheadleftarrowtail" },
        "\u2B3D": { math: "\\nVtwoheadleftarrowtail" },
        "\u2B3E": { math: "\\leftarrowx" },
        "\u2B3F": { math: "\\leftcurvedarrow" },
        "\u2B40": { math: "\\equalleftarrow" },
        "\u2B41": { math: "\\bsimilarleftarrow" },
        "\u2B42": { math: "\\leftarrowbackapprox" },
        "\u2B43": { math: "\\rightarrowgtr" },
        "\u2B44": { math: "\\rightarrowsupset" },
        "\u2B45": { math: "\\LLeftarrow" },
        "\u2B46": { math: "\\RRightarrow" },
        "\u2B47": { math: "\\bsimilarrightarrow" },
        "\u2B48": { math: "\\rightarrowbackapprox" },
        "\u2B49": { math: "\\similarleftarrow" },
        "\u2B4A": { math: "\\leftarrowapprox" },
        "\u2B4B": { math: "\\leftarrowbsimilar" },
        "\u2B4C": { math: "\\rightarrowbsimilar" },
        "\u2B50": { math: "\\medwhitestar" },
        "\u2B51": { math: "\\medblackstar" },
        "\u2B52": { math: "\\smwhitestar" },
        "\u2B53": { math: "\\rightpentagonblack" },
        "\u2B54": { math: "\\rightpentagon" },
        "\u3008": { math: "\\langle" },
        "\u3009": { math: "\\rangle" },
        "\u3012": { math: "\\postalmark" },
        "\u3014": { math: "\\lbrbrak" },
        "\u3015": { math: "\\rbrbrak" },
        "\u301A": { math: "\\openbracketleft" },
        "\u301B": { math: "\\openbracketright" },
        "\u3030": { math: "\\hzigzag" },
        \uFB00: { text: "ff" },
        \uFB01: { text: "fi" },
        \uFB02: { text: "fl" },
        \uFB03: { text: "ffi" },
        \uFB04: { text: "ffl" },
        \uFB05: { text: "st" },
        \uFB06: { text: "st" },
        "\uFFFD": { text: "\\dbend", commandspacer: true },
        "\u{1D400}": { math: "\\mathbf{A}" },
        "\u{1D401}": { math: "\\mathbf{B}" },
        "\u{1D402}": { math: "\\mathbf{C}" },
        "\u{1D403}": { math: "\\mathbf{D}" },
        "\u{1D404}": { math: "\\mathbf{E}" },
        "\u{1D405}": { math: "\\mathbf{F}" },
        "\u{1D406}": { math: "\\mathbf{G}" },
        "\u{1D407}": { math: "\\mathbf{H}" },
        "\u{1D408}": { math: "\\mathbf{I}" },
        "\u{1D409}": { math: "\\mathbf{J}" },
        "\u{1D40A}": { math: "\\mathbf{K}" },
        "\u{1D40B}": { math: "\\mathbf{L}" },
        "\u{1D40C}": { math: "\\mathbf{M}" },
        "\u{1D40D}": { math: "\\mathbf{N}" },
        "\u{1D40E}": { math: "\\mathbf{O}" },
        "\u{1D40F}": { math: "\\mathbf{P}" },
        "\u{1D410}": { math: "\\mathbf{Q}" },
        "\u{1D411}": { math: "\\mathbf{R}" },
        "\u{1D412}": { math: "\\mathbf{S}" },
        "\u{1D413}": { math: "\\mathbf{T}" },
        "\u{1D414}": { math: "\\mathbf{U}" },
        "\u{1D415}": { math: "\\mathbf{V}" },
        "\u{1D416}": { math: "\\mathbf{W}" },
        "\u{1D417}": { math: "\\mathbf{X}" },
        "\u{1D418}": { math: "\\mathbf{Y}" },
        "\u{1D419}": { math: "\\mathbf{Z}" },
        "\u{1D41A}": { math: "\\mathbf{a}" },
        "\u{1D41B}": { math: "\\mathbf{b}" },
        "\u{1D41C}": { math: "\\mathbf{c}" },
        "\u{1D41D}": { math: "\\mathbf{d}" },
        "\u{1D41E}": { math: "\\mathbf{e}" },
        "\u{1D41F}": { math: "\\mathbf{f}" },
        "\u{1D420}": { math: "\\mathbf{g}" },
        "\u{1D421}": { math: "\\mathbf{h}" },
        "\u{1D422}": { math: "\\mathbf{i}" },
        "\u{1D423}": { math: "\\mathbf{j}" },
        "\u{1D424}": { math: "\\mathbf{k}" },
        "\u{1D425}": { math: "\\mathbf{l}" },
        "\u{1D426}": { math: "\\mathbf{m}" },
        "\u{1D427}": { math: "\\mathbf{n}" },
        "\u{1D428}": { math: "\\mathbf{o}" },
        "\u{1D429}": { math: "\\mathbf{p}" },
        "\u{1D42A}": { math: "\\mathbf{q}" },
        "\u{1D42B}": { math: "\\mathbf{r}" },
        "\u{1D42C}": { math: "\\mathbf{s}" },
        "\u{1D42D}": { math: "\\mathbf{t}" },
        "\u{1D42E}": { math: "\\mathbf{u}" },
        "\u{1D42F}": { math: "\\mathbf{v}" },
        "\u{1D430}": { math: "\\mathbf{w}" },
        "\u{1D431}": { math: "\\mathbf{x}" },
        "\u{1D432}": { math: "\\mathbf{y}" },
        "\u{1D433}": { math: "\\mathbf{z}" },
        "\u{1D434}": { math: "\\mathsl{A}" },
        "\u{1D435}": { math: "\\mathsl{B}" },
        "\u{1D436}": { math: "\\mathsl{C}" },
        "\u{1D437}": { math: "\\mathsl{D}" },
        "\u{1D438}": { math: "\\mathsl{E}" },
        "\u{1D439}": { math: "\\mathsl{F}" },
        "\u{1D43A}": { math: "\\mathsl{G}" },
        "\u{1D43B}": { math: "\\mathsl{H}" },
        "\u{1D43C}": { math: "\\mathsl{I}" },
        "\u{1D43D}": { math: "\\mathsl{J}" },
        "\u{1D43E}": { math: "\\mathsl{K}" },
        "\u{1D43F}": { math: "\\mathsl{L}" },
        "\u{1D440}": { math: "\\mathsl{M}" },
        "\u{1D441}": { math: "\\mathsl{N}" },
        "\u{1D442}": { math: "\\mathsl{O}" },
        "\u{1D443}": { math: "\\mathsl{P}" },
        "\u{1D444}": { math: "\\mathsl{Q}" },
        "\u{1D445}": { math: "\\mathsl{R}" },
        "\u{1D446}": { math: "\\mathsl{S}" },
        "\u{1D447}": { math: "\\mathsl{T}" },
        "\u{1D448}": { math: "\\mathsl{U}" },
        "\u{1D449}": { math: "\\mathsl{V}" },
        "\u{1D44A}": { math: "\\mathsl{W}" },
        "\u{1D44B}": { math: "\\mathsl{X}" },
        "\u{1D44C}": { math: "\\mathsl{Y}" },
        "\u{1D44D}": { math: "\\mathsl{Z}" },
        "\u{1D44E}": { math: "\\mathsl{a}" },
        "\u{1D44F}": { math: "\\mathsl{b}" },
        "\u{1D450}": { math: "\\mathsl{c}" },
        "\u{1D451}": { math: "\\mathsl{d}" },
        "\u{1D452}": { math: "\\mathsl{e}" },
        "\u{1D453}": { math: "\\mathsl{f}" },
        "\u{1D454}": { math: "\\mathsl{g}" },
        "\u{1D456}": { math: "\\mathsl{i}" },
        "\u{1D457}": { math: "\\mathsl{j}" },
        "\u{1D458}": { math: "\\mathsl{k}" },
        "\u{1D459}": { math: "\\mathsl{l}" },
        "\u{1D45A}": { math: "\\mathsl{m}" },
        "\u{1D45B}": { math: "\\mathsl{n}" },
        "\u{1D45C}": { math: "\\mathsl{o}" },
        "\u{1D45D}": { math: "\\mathsl{p}" },
        "\u{1D45E}": { math: "\\mathsl{q}" },
        "\u{1D45F}": { math: "\\mathsl{r}" },
        "\u{1D460}": { math: "\\mathsl{s}" },
        "\u{1D461}": { math: "\\mathsl{t}" },
        "\u{1D462}": { math: "\\mathsl{u}" },
        "\u{1D463}": { math: "\\mathsl{v}" },
        "\u{1D464}": { math: "\\mathsl{w}" },
        "\u{1D465}": { math: "\\mathsl{x}" },
        "\u{1D466}": { math: "\\mathsl{y}" },
        "\u{1D467}": { math: "\\mathsl{z}" },
        "\u{1D468}": { math: "\\mathbit{A}" },
        "\u{1D469}": { math: "\\mathbit{B}" },
        "\u{1D46A}": { math: "\\mathbit{C}" },
        "\u{1D46B}": { math: "\\mathbit{D}" },
        "\u{1D46C}": { math: "\\mathbit{E}" },
        "\u{1D46D}": { math: "\\mathbit{F}" },
        "\u{1D46E}": { math: "\\mathbit{G}" },
        "\u{1D46F}": { math: "\\mathbit{H}" },
        "\u{1D470}": { math: "\\mathbit{I}" },
        "\u{1D471}": { math: "\\mathbit{J}" },
        "\u{1D472}": { math: "\\mathbit{K}" },
        "\u{1D473}": { math: "\\mathbit{L}" },
        "\u{1D474}": { math: "\\mathbit{M}" },
        "\u{1D475}": { math: "\\mathbit{N}" },
        "\u{1D476}": { math: "\\mathbit{O}" },
        "\u{1D477}": { math: "\\mathbit{P}" },
        "\u{1D478}": { math: "\\mathbit{Q}" },
        "\u{1D479}": { math: "\\mathbit{R}" },
        "\u{1D47A}": { math: "\\mathbit{S}" },
        "\u{1D47B}": { math: "\\mathbit{T}" },
        "\u{1D47C}": { math: "\\mathbit{U}" },
        "\u{1D47D}": { math: "\\mathbit{V}" },
        "\u{1D47E}": { math: "\\mathbit{W}" },
        "\u{1D47F}": { math: "\\mathbit{X}" },
        "\u{1D480}": { math: "\\mathbit{Y}" },
        "\u{1D481}": { math: "\\mathbit{Z}" },
        "\u{1D482}": { math: "\\mathbit{a}" },
        "\u{1D483}": { math: "\\mathbit{b}" },
        "\u{1D484}": { math: "\\mathbit{c}" },
        "\u{1D485}": { math: "\\mathbit{d}" },
        "\u{1D486}": { math: "\\mathbit{e}" },
        "\u{1D487}": { math: "\\mathbit{f}" },
        "\u{1D488}": { math: "\\mathbit{g}" },
        "\u{1D489}": { math: "\\mathbit{h}" },
        "\u{1D48A}": { math: "\\mathbit{i}" },
        "\u{1D48B}": { math: "\\mathbit{j}" },
        "\u{1D48C}": { math: "\\mathbit{k}" },
        "\u{1D48D}": { math: "\\mathbit{l}" },
        "\u{1D48E}": { math: "\\mathbit{m}" },
        "\u{1D48F}": { math: "\\mathbit{n}" },
        "\u{1D490}": { math: "\\mathbit{o}" },
        "\u{1D491}": { math: "\\mathbit{p}" },
        "\u{1D492}": { math: "\\mathbit{q}" },
        "\u{1D493}": { math: "\\mathbit{r}" },
        "\u{1D494}": { math: "\\mathbit{s}" },
        "\u{1D495}": { math: "\\mathbit{t}" },
        "\u{1D496}": { math: "\\mathbit{u}" },
        "\u{1D497}": { math: "\\mathbit{v}" },
        "\u{1D498}": { math: "\\mathbit{w}" },
        "\u{1D499}": { math: "\\mathbit{x}" },
        "\u{1D49A}": { math: "\\mathbit{y}" },
        "\u{1D49B}": { math: "\\mathbit{z}" },
        "\u{1D49C}": { math: "\\mathscr{A}" },
        "\u{1D49E}": { math: "\\mathscr{C}" },
        "\u{1D49F}": { math: "\\mathscr{D}" },
        "\u{1D4A2}": { math: "\\mathscr{G}" },
        "\u{1D4A5}": { math: "\\mathscr{J}" },
        "\u{1D4A6}": { math: "\\mathscr{K}" },
        "\u{1D4A9}": { math: "\\mathscr{N}" },
        "\u{1D4AA}": { math: "\\mathscr{O}" },
        "\u{1D4AB}": { math: "\\mathscr{P}" },
        "\u{1D4AC}": { math: "\\mathscr{Q}" },
        "\u{1D4AE}": { math: "\\mathscr{S}" },
        "\u{1D4AF}": { math: "\\mathscr{T}" },
        "\u{1D4B0}": { math: "\\mathscr{U}" },
        "\u{1D4B1}": { math: "\\mathscr{V}" },
        "\u{1D4B2}": { math: "\\mathscr{W}" },
        "\u{1D4B3}": { math: "\\mathscr{X}" },
        "\u{1D4B4}": { math: "\\mathscr{Y}" },
        "\u{1D4B5}": { math: "\\mathscr{Z}" },
        "\u{1D4B6}": { math: "\\mathscr{a}" },
        "\u{1D4B7}": { math: "\\mathscr{b}" },
        "\u{1D4B8}": { math: "\\mathscr{c}" },
        "\u{1D4B9}": { math: "\\mathscr{d}" },
        "\u{1D4BB}": { math: "\\mathscr{f}" },
        "\u{1D4BD}": { math: "\\mathscr{h}" },
        "\u{1D4BE}": { math: "\\mathscr{i}" },
        "\u{1D4BF}": { math: "\\mathscr{j}" },
        "\u{1D4C0}": { math: "\\mathscr{k}" },
        "\u{1D4C1}": { math: "\\mathscr{l}" },
        "\u{1D4C2}": { math: "\\mathscr{m}" },
        "\u{1D4C3}": { math: "\\mathscr{n}" },
        "\u{1D4C5}": { math: "\\mathscr{p}" },
        "\u{1D4C6}": { math: "\\mathscr{q}" },
        "\u{1D4C7}": { math: "\\mathscr{r}" },
        "\u{1D4C8}": { math: "\\mathscr{s}" },
        "\u{1D4C9}": { math: "\\mathscr{t}" },
        "\u{1D4CA}": { math: "\\mathscr{u}" },
        "\u{1D4CB}": { math: "\\mathscr{v}" },
        "\u{1D4CC}": { math: "\\mathscr{w}" },
        "\u{1D4CD}": { math: "\\mathscr{x}" },
        "\u{1D4CE}": { math: "\\mathscr{y}" },
        "\u{1D4CF}": { math: "\\mathscr{z}" },
        "\u{1D4D0}": { math: "\\mathmit{A}" },
        "\u{1D4D1}": { math: "\\mathmit{B}" },
        "\u{1D4D2}": { math: "\\mathmit{C}" },
        "\u{1D4D3}": { math: "\\mathmit{D}" },
        "\u{1D4D4}": { math: "\\mathmit{E}" },
        "\u{1D4D5}": { math: "\\mathmit{F}" },
        "\u{1D4D6}": { math: "\\mathmit{G}" },
        "\u{1D4D7}": { math: "\\mathmit{H}" },
        "\u{1D4D8}": { math: "\\mathmit{I}" },
        "\u{1D4D9}": { math: "\\mathmit{J}" },
        "\u{1D4DA}": { math: "\\mathmit{K}" },
        "\u{1D4DB}": { math: "\\mathmit{L}" },
        "\u{1D4DC}": { math: "\\mathmit{M}" },
        "\u{1D4DD}": { math: "\\mathmit{N}" },
        "\u{1D4DE}": { math: "\\mathmit{O}" },
        "\u{1D4DF}": { math: "\\mathmit{P}" },
        "\u{1D4E0}": { math: "\\mathmit{Q}" },
        "\u{1D4E1}": { math: "\\mathmit{R}" },
        "\u{1D4E2}": { math: "\\mathmit{S}" },
        "\u{1D4E3}": { math: "\\mathmit{T}" },
        "\u{1D4E4}": { math: "\\mathmit{U}" },
        "\u{1D4E5}": { math: "\\mathmit{V}" },
        "\u{1D4E6}": { math: "\\mathmit{W}" },
        "\u{1D4E7}": { math: "\\mathmit{X}" },
        "\u{1D4E8}": { math: "\\mathmit{Y}" },
        "\u{1D4E9}": { math: "\\mathmit{Z}" },
        "\u{1D4EA}": { math: "\\mathmit{a}" },
        "\u{1D4EB}": { math: "\\mathmit{b}" },
        "\u{1D4EC}": { math: "\\mathmit{c}" },
        "\u{1D4ED}": { math: "\\mathmit{d}" },
        "\u{1D4EE}": { math: "\\mathmit{e}" },
        "\u{1D4EF}": { math: "\\mathmit{f}" },
        "\u{1D4F0}": { math: "\\mathmit{g}" },
        "\u{1D4F1}": { math: "\\mathmit{h}" },
        "\u{1D4F2}": { math: "\\mathmit{i}" },
        "\u{1D4F3}": { math: "\\mathmit{j}" },
        "\u{1D4F4}": { math: "\\mathmit{k}" },
        "\u{1D4F5}": { math: "\\mathmit{l}" },
        "\u{1D4F6}": { math: "\\mathmit{m}" },
        "\u{1D4F7}": { math: "\\mathmit{n}" },
        "\u{1D4F8}": { math: "\\mathmit{o}" },
        "\u{1D4F9}": { math: "\\mathmit{p}" },
        "\u{1D4FA}": { math: "\\mathmit{q}" },
        "\u{1D4FB}": { math: "\\mathmit{r}" },
        "\u{1D4FC}": { math: "\\mathmit{s}" },
        "\u{1D4FD}": { math: "\\mathmit{t}" },
        "\u{1D4FE}": { math: "\\mathmit{u}" },
        "\u{1D4FF}": { math: "\\mathmit{v}" },
        "\u{1D500}": { math: "\\mathmit{w}" },
        "\u{1D501}": { math: "\\mathmit{x}" },
        "\u{1D502}": { math: "\\mathmit{y}" },
        "\u{1D503}": { math: "\\mathmit{z}" },
        "\u{1D504}": { math: "\\mathfrak{A}" },
        "\u{1D505}": { math: "\\mathfrak{B}" },
        "\u{1D507}": { math: "\\mathfrak{D}" },
        "\u{1D508}": { math: "\\mathfrak{E}" },
        "\u{1D509}": { math: "\\mathfrak{F}" },
        "\u{1D50A}": { math: "\\mathfrak{G}" },
        "\u{1D50D}": { math: "\\mathfrak{J}" },
        "\u{1D50E}": { math: "\\mathfrak{K}" },
        "\u{1D50F}": { math: "\\mathfrak{L}" },
        "\u{1D510}": { math: "\\mathfrak{M}" },
        "\u{1D511}": { math: "\\mathfrak{N}" },
        "\u{1D512}": { math: "\\mathfrak{O}" },
        "\u{1D513}": { math: "\\mathfrak{P}" },
        "\u{1D514}": { math: "\\mathfrak{Q}" },
        "\u{1D516}": { math: "\\mathfrak{S}" },
        "\u{1D517}": { math: "\\mathfrak{T}" },
        "\u{1D518}": { math: "\\mathfrak{U}" },
        "\u{1D519}": { math: "\\mathfrak{V}" },
        "\u{1D51A}": { math: "\\mathfrak{W}" },
        "\u{1D51B}": { math: "\\mathfrak{X}" },
        "\u{1D51C}": { math: "\\mathfrak{Y}" },
        "\u{1D51E}": { math: "\\mathfrak{a}" },
        "\u{1D51F}": { math: "\\mathfrak{b}" },
        "\u{1D520}": { math: "\\mathfrak{c}" },
        "\u{1D521}": { math: "\\mathfrak{d}" },
        "\u{1D522}": { math: "\\mathfrak{e}" },
        "\u{1D523}": { math: "\\mathfrak{f}" },
        "\u{1D524}": { math: "\\mathfrak{g}" },
        "\u{1D525}": { math: "\\mathfrak{h}" },
        "\u{1D526}": { math: "\\mathfrak{i}" },
        "\u{1D527}": { math: "\\mathfrak{j}" },
        "\u{1D528}": { math: "\\mathfrak{k}" },
        "\u{1D529}": { math: "\\mathfrak{l}" },
        "\u{1D52A}": { math: "\\mathfrak{m}" },
        "\u{1D52B}": { math: "\\mathfrak{n}" },
        "\u{1D52C}": { math: "\\mathfrak{o}" },
        "\u{1D52D}": { math: "\\mathfrak{p}" },
        "\u{1D52E}": { math: "\\mathfrak{q}" },
        "\u{1D52F}": { math: "\\mathfrak{r}" },
        "\u{1D530}": { math: "\\mathfrak{s}" },
        "\u{1D531}": { math: "\\mathfrak{t}" },
        "\u{1D532}": { math: "\\mathfrak{u}" },
        "\u{1D533}": { math: "\\mathfrak{v}" },
        "\u{1D534}": { math: "\\mathfrak{w}" },
        "\u{1D535}": { math: "\\mathfrak{x}" },
        "\u{1D536}": { math: "\\mathfrak{y}" },
        "\u{1D537}": { math: "\\mathfrak{z}" },
        "\u{1D538}": { math: "\\mathbb{A}" },
        "\u{1D539}": { math: "\\mathbb{B}" },
        "\u{1D53B}": { math: "\\mathbb{D}" },
        "\u{1D53C}": { math: "\\mathbb{E}" },
        "\u{1D53D}": { math: "\\mathbb{F}" },
        "\u{1D53E}": { math: "\\mathbb{G}" },
        "\u{1D540}": { math: "\\mathbb{I}" },
        "\u{1D541}": { math: "\\mathbb{J}" },
        "\u{1D542}": { math: "\\mathbb{K}" },
        "\u{1D543}": { math: "\\mathbb{L}" },
        "\u{1D544}": { math: "\\mathbb{M}" },
        "\u{1D546}": { math: "\\mathbb{O}" },
        "\u{1D54A}": { math: "\\mathbb{S}" },
        "\u{1D54B}": { math: "\\mathbb{T}" },
        "\u{1D54C}": { math: "\\mathbb{U}" },
        "\u{1D54D}": { math: "\\mathbb{V}" },
        "\u{1D54E}": { math: "\\mathbb{W}" },
        "\u{1D54F}": { math: "\\mathbb{X}" },
        "\u{1D550}": { math: "\\mathbb{Y}" },
        "\u{1D552}": { math: "\\mathbb{a}" },
        "\u{1D553}": { math: "\\mathbb{b}" },
        "\u{1D554}": { math: "\\mathbb{c}" },
        "\u{1D555}": { math: "\\mathbb{d}" },
        "\u{1D556}": { math: "\\mathbb{e}" },
        "\u{1D557}": { math: "\\mathbb{f}" },
        "\u{1D558}": { math: "\\mathbb{g}" },
        "\u{1D559}": { math: "\\mathbb{h}" },
        "\u{1D55A}": { math: "\\mathbb{i}" },
        "\u{1D55B}": { math: "\\mathbb{j}" },
        "\u{1D55C}": { math: "\\mathbb{k}" },
        "\u{1D55D}": { math: "\\mathbb{l}" },
        "\u{1D55E}": { math: "\\mathbb{m}" },
        "\u{1D55F}": { math: "\\mathbb{n}" },
        "\u{1D560}": { math: "\\mathbb{o}" },
        "\u{1D561}": { math: "\\mathbb{p}" },
        "\u{1D562}": { math: "\\mathbb{q}" },
        "\u{1D563}": { math: "\\mathbb{r}" },
        "\u{1D564}": { math: "\\mathbb{s}" },
        "\u{1D565}": { math: "\\mathbb{t}" },
        "\u{1D566}": { math: "\\mathbb{u}" },
        "\u{1D567}": { math: "\\mathbb{v}" },
        "\u{1D568}": { math: "\\mathbb{w}" },
        "\u{1D569}": { math: "\\mathbb{x}" },
        "\u{1D56A}": { math: "\\mathbb{y}" },
        "\u{1D56B}": { math: "\\mathbb{z}" },
        "\u{1D56C}": { math: "\\mathslbb{A}" },
        "\u{1D56D}": { math: "\\mathslbb{B}" },
        "\u{1D56E}": { math: "\\mathslbb{C}" },
        "\u{1D56F}": { math: "\\mathslbb{D}" },
        "\u{1D570}": { math: "\\mathslbb{E}" },
        "\u{1D571}": { math: "\\mathslbb{F}" },
        "\u{1D572}": { math: "\\mathslbb{G}" },
        "\u{1D573}": { math: "\\mathslbb{H}" },
        "\u{1D574}": { math: "\\mathslbb{I}" },
        "\u{1D575}": { math: "\\mathslbb{J}" },
        "\u{1D576}": { math: "\\mathslbb{K}" },
        "\u{1D577}": { math: "\\mathslbb{L}" },
        "\u{1D578}": { math: "\\mathslbb{M}" },
        "\u{1D579}": { math: "\\mathslbb{N}" },
        "\u{1D57A}": { math: "\\mathslbb{O}" },
        "\u{1D57B}": { math: "\\mathslbb{P}" },
        "\u{1D57C}": { math: "\\mathslbb{Q}" },
        "\u{1D57D}": { math: "\\mathslbb{R}" },
        "\u{1D57E}": { math: "\\mathslbb{S}" },
        "\u{1D57F}": { math: "\\mathslbb{T}" },
        "\u{1D580}": { math: "\\mathslbb{U}" },
        "\u{1D581}": { math: "\\mathslbb{V}" },
        "\u{1D582}": { math: "\\mathslbb{W}" },
        "\u{1D583}": { math: "\\mathslbb{X}" },
        "\u{1D584}": { math: "\\mathslbb{Y}" },
        "\u{1D585}": { math: "\\mathslbb{Z}" },
        "\u{1D586}": { math: "\\mathslbb{a}" },
        "\u{1D587}": { math: "\\mathslbb{b}" },
        "\u{1D588}": { math: "\\mathslbb{c}" },
        "\u{1D589}": { math: "\\mathslbb{d}" },
        "\u{1D58A}": { math: "\\mathslbb{e}" },
        "\u{1D58B}": { math: "\\mathslbb{f}" },
        "\u{1D58C}": { math: "\\mathslbb{g}" },
        "\u{1D58D}": { math: "\\mathslbb{h}" },
        "\u{1D58E}": { math: "\\mathslbb{i}" },
        "\u{1D58F}": { math: "\\mathslbb{j}" },
        "\u{1D590}": { math: "\\mathslbb{k}" },
        "\u{1D591}": { math: "\\mathslbb{l}" },
        "\u{1D592}": { math: "\\mathslbb{m}" },
        "\u{1D593}": { math: "\\mathslbb{n}" },
        "\u{1D594}": { math: "\\mathslbb{o}" },
        "\u{1D595}": { math: "\\mathslbb{p}" },
        "\u{1D596}": { math: "\\mathslbb{q}" },
        "\u{1D597}": { math: "\\mathslbb{r}" },
        "\u{1D598}": { math: "\\mathslbb{s}" },
        "\u{1D599}": { math: "\\mathslbb{t}" },
        "\u{1D59A}": { math: "\\mathslbb{u}" },
        "\u{1D59B}": { math: "\\mathslbb{v}" },
        "\u{1D59C}": { math: "\\mathslbb{w}" },
        "\u{1D59D}": { math: "\\mathslbb{x}" },
        "\u{1D59E}": { math: "\\mathslbb{y}" },
        "\u{1D59F}": { math: "\\mathslbb{z}" },
        "\u{1D5A0}": { math: "\\mathsf{A}" },
        "\u{1D5A1}": { math: "\\mathsf{B}" },
        "\u{1D5A2}": { math: "\\mathsf{C}" },
        "\u{1D5A3}": { math: "\\mathsf{D}" },
        "\u{1D5A4}": { math: "\\mathsf{E}" },
        "\u{1D5A5}": { math: "\\mathsf{F}" },
        "\u{1D5A6}": { math: "\\mathsf{G}" },
        "\u{1D5A7}": { math: "\\mathsf{H}" },
        "\u{1D5A8}": { math: "\\mathsf{I}" },
        "\u{1D5A9}": { math: "\\mathsf{J}" },
        "\u{1D5AA}": { math: "\\mathsf{K}" },
        "\u{1D5AB}": { math: "\\mathsf{L}" },
        "\u{1D5AC}": { math: "\\mathsf{M}" },
        "\u{1D5AD}": { math: "\\mathsf{N}" },
        "\u{1D5AE}": { math: "\\mathsf{O}" },
        "\u{1D5AF}": { math: "\\mathsf{P}" },
        "\u{1D5B0}": { math: "\\mathsf{Q}" },
        "\u{1D5B1}": { math: "\\mathsf{R}" },
        "\u{1D5B2}": { math: "\\mathsf{S}" },
        "\u{1D5B3}": { math: "\\mathsf{T}" },
        "\u{1D5B4}": { math: "\\mathsf{U}" },
        "\u{1D5B5}": { math: "\\mathsf{V}" },
        "\u{1D5B6}": { math: "\\mathsf{W}" },
        "\u{1D5B7}": { math: "\\mathsf{X}" },
        "\u{1D5B8}": { math: "\\mathsf{Y}" },
        "\u{1D5B9}": { math: "\\mathsf{Z}" },
        "\u{1D5BA}": { math: "\\mathsf{a}" },
        "\u{1D5BB}": { math: "\\mathsf{b}" },
        "\u{1D5BC}": { math: "\\mathsf{c}" },
        "\u{1D5BD}": { math: "\\mathsf{d}" },
        "\u{1D5BE}": { math: "\\mathsf{e}" },
        "\u{1D5BF}": { math: "\\mathsf{f}" },
        "\u{1D5C0}": { math: "\\mathsf{g}" },
        "\u{1D5C1}": { math: "\\mathsf{h}" },
        "\u{1D5C2}": { math: "\\mathsf{i}" },
        "\u{1D5C3}": { math: "\\mathsf{j}" },
        "\u{1D5C4}": { math: "\\mathsf{k}" },
        "\u{1D5C5}": { math: "\\mathsf{l}" },
        "\u{1D5C6}": { math: "\\mathsf{m}" },
        "\u{1D5C7}": { math: "\\mathsf{n}" },
        "\u{1D5C8}": { math: "\\mathsf{o}" },
        "\u{1D5C9}": { math: "\\mathsf{p}" },
        "\u{1D5CA}": { math: "\\mathsf{q}" },
        "\u{1D5CB}": { math: "\\mathsf{r}" },
        "\u{1D5CC}": { math: "\\mathsf{s}" },
        "\u{1D5CD}": { math: "\\mathsf{t}" },
        "\u{1D5CE}": { math: "\\mathsf{u}" },
        "\u{1D5CF}": { math: "\\mathsf{v}" },
        "\u{1D5D0}": { math: "\\mathsf{w}" },
        "\u{1D5D1}": { math: "\\mathsf{x}" },
        "\u{1D5D2}": { math: "\\mathsf{y}" },
        "\u{1D5D3}": { math: "\\mathsf{z}" },
        "\u{1D5D4}": { math: "\\mathsfbf{A}" },
        "\u{1D5D5}": { math: "\\mathsfbf{B}" },
        "\u{1D5D6}": { math: "\\mathsfbf{C}" },
        "\u{1D5D7}": { math: "\\mathsfbf{D}" },
        "\u{1D5D8}": { math: "\\mathsfbf{E}" },
        "\u{1D5D9}": { math: "\\mathsfbf{F}" },
        "\u{1D5DA}": { math: "\\mathsfbf{G}" },
        "\u{1D5DB}": { math: "\\mathsfbf{H}" },
        "\u{1D5DC}": { math: "\\mathsfbf{I}" },
        "\u{1D5DD}": { math: "\\mathsfbf{J}" },
        "\u{1D5DE}": { math: "\\mathsfbf{K}" },
        "\u{1D5DF}": { math: "\\mathsfbf{L}" },
        "\u{1D5E0}": { math: "\\mathsfbf{M}" },
        "\u{1D5E1}": { math: "\\mathsfbf{N}" },
        "\u{1D5E2}": { math: "\\mathsfbf{O}" },
        "\u{1D5E3}": { math: "\\mathsfbf{P}" },
        "\u{1D5E4}": { math: "\\mathsfbf{Q}" },
        "\u{1D5E5}": { math: "\\mathsfbf{R}" },
        "\u{1D5E6}": { math: "\\mathsfbf{S}" },
        "\u{1D5E7}": { math: "\\mathsfbf{T}" },
        "\u{1D5E8}": { math: "\\mathsfbf{U}" },
        "\u{1D5E9}": { math: "\\mathsfbf{V}" },
        "\u{1D5EA}": { math: "\\mathsfbf{W}" },
        "\u{1D5EB}": { math: "\\mathsfbf{X}" },
        "\u{1D5EC}": { math: "\\mathsfbf{Y}" },
        "\u{1D5ED}": { math: "\\mathsfbf{Z}" },
        "\u{1D5EE}": { math: "\\mathsfbf{a}" },
        "\u{1D5EF}": { math: "\\mathsfbf{b}" },
        "\u{1D5F0}": { math: "\\mathsfbf{c}" },
        "\u{1D5F1}": { math: "\\mathsfbf{d}" },
        "\u{1D5F2}": { math: "\\mathsfbf{e}" },
        "\u{1D5F3}": { math: "\\mathsfbf{f}" },
        "\u{1D5F4}": { math: "\\mathsfbf{g}" },
        "\u{1D5F5}": { math: "\\mathsfbf{h}" },
        "\u{1D5F6}": { math: "\\mathsfbf{i}" },
        "\u{1D5F7}": { math: "\\mathsfbf{j}" },
        "\u{1D5F8}": { math: "\\mathsfbf{k}" },
        "\u{1D5F9}": { math: "\\mathsfbf{l}" },
        "\u{1D5FA}": { math: "\\mathsfbf{m}" },
        "\u{1D5FB}": { math: "\\mathsfbf{n}" },
        "\u{1D5FC}": { math: "\\mathsfbf{o}" },
        "\u{1D5FD}": { math: "\\mathsfbf{p}" },
        "\u{1D5FE}": { math: "\\mathsfbf{q}" },
        "\u{1D5FF}": { math: "\\mathsfbf{r}" },
        "\u{1D600}": { math: "\\mathsfbf{s}" },
        "\u{1D601}": { math: "\\mathsfbf{t}" },
        "\u{1D602}": { math: "\\mathsfbf{u}" },
        "\u{1D603}": { math: "\\mathsfbf{v}" },
        "\u{1D604}": { math: "\\mathsfbf{w}" },
        "\u{1D605}": { math: "\\mathsfbf{x}" },
        "\u{1D606}": { math: "\\mathsfbf{y}" },
        "\u{1D607}": { math: "\\mathsfbf{z}" },
        "\u{1D608}": { math: "\\mathsfsl{A}" },
        "\u{1D609}": { math: "\\mathsfsl{B}" },
        "\u{1D60A}": { math: "\\mathsfsl{C}" },
        "\u{1D60B}": { math: "\\mathsfsl{D}" },
        "\u{1D60C}": { math: "\\mathsfsl{E}" },
        "\u{1D60D}": { math: "\\mathsfsl{F}" },
        "\u{1D60E}": { math: "\\mathsfsl{G}" },
        "\u{1D60F}": { math: "\\mathsfsl{H}" },
        "\u{1D610}": { math: "\\mathsfsl{I}" },
        "\u{1D611}": { math: "\\mathsfsl{J}" },
        "\u{1D612}": { math: "\\mathsfsl{K}" },
        "\u{1D613}": { math: "\\mathsfsl{L}" },
        "\u{1D614}": { math: "\\mathsfsl{M}" },
        "\u{1D615}": { math: "\\mathsfsl{N}" },
        "\u{1D616}": { math: "\\mathsfsl{O}" },
        "\u{1D617}": { math: "\\mathsfsl{P}" },
        "\u{1D618}": { math: "\\mathsfsl{Q}" },
        "\u{1D619}": { math: "\\mathsfsl{R}" },
        "\u{1D61A}": { math: "\\mathsfsl{S}" },
        "\u{1D61B}": { math: "\\mathsfsl{T}" },
        "\u{1D61C}": { math: "\\mathsfsl{U}" },
        "\u{1D61D}": { math: "\\mathsfsl{V}" },
        "\u{1D61E}": { math: "\\mathsfsl{W}" },
        "\u{1D61F}": { math: "\\mathsfsl{X}" },
        "\u{1D620}": { math: "\\mathsfsl{Y}" },
        "\u{1D621}": { math: "\\mathsfsl{Z}" },
        "\u{1D622}": { math: "\\mathsfsl{a}" },
        "\u{1D623}": { math: "\\mathsfsl{b}" },
        "\u{1D624}": { math: "\\mathsfsl{c}" },
        "\u{1D625}": { math: "\\mathsfsl{d}" },
        "\u{1D626}": { math: "\\mathsfsl{e}" },
        "\u{1D627}": { math: "\\mathsfsl{f}" },
        "\u{1D628}": { math: "\\mathsfsl{g}" },
        "\u{1D629}": { math: "\\mathsfsl{h}" },
        "\u{1D62A}": { math: "\\mathsfsl{i}" },
        "\u{1D62B}": { math: "\\mathsfsl{j}" },
        "\u{1D62C}": { math: "\\mathsfsl{k}" },
        "\u{1D62D}": { math: "\\mathsfsl{l}" },
        "\u{1D62E}": { math: "\\mathsfsl{m}" },
        "\u{1D62F}": { math: "\\mathsfsl{n}" },
        "\u{1D630}": { math: "\\mathsfsl{o}" },
        "\u{1D631}": { math: "\\mathsfsl{p}" },
        "\u{1D632}": { math: "\\mathsfsl{q}" },
        "\u{1D633}": { math: "\\mathsfsl{r}" },
        "\u{1D634}": { math: "\\mathsfsl{s}" },
        "\u{1D635}": { math: "\\mathsfsl{t}" },
        "\u{1D636}": { math: "\\mathsfsl{u}" },
        "\u{1D637}": { math: "\\mathsfsl{v}" },
        "\u{1D638}": { math: "\\mathsfsl{w}" },
        "\u{1D639}": { math: "\\mathsfsl{x}" },
        "\u{1D63A}": { math: "\\mathsfsl{y}" },
        "\u{1D63B}": { math: "\\mathsfsl{z}" },
        "\u{1D63C}": { math: "\\mathsfbfsl{A}" },
        "\u{1D63D}": { math: "\\mathsfbfsl{B}" },
        "\u{1D63E}": { math: "\\mathsfbfsl{C}" },
        "\u{1D63F}": { math: "\\mathsfbfsl{D}" },
        "\u{1D640}": { math: "\\mathsfbfsl{E}" },
        "\u{1D641}": { math: "\\mathsfbfsl{F}" },
        "\u{1D642}": { math: "\\mathsfbfsl{G}" },
        "\u{1D643}": { math: "\\mathsfbfsl{H}" },
        "\u{1D644}": { math: "\\mathsfbfsl{I}" },
        "\u{1D645}": { math: "\\mathsfbfsl{J}" },
        "\u{1D646}": { math: "\\mathsfbfsl{K}" },
        "\u{1D647}": { math: "\\mathsfbfsl{L}" },
        "\u{1D648}": { math: "\\mathsfbfsl{M}" },
        "\u{1D649}": { math: "\\mathsfbfsl{N}" },
        "\u{1D64A}": { math: "\\mathsfbfsl{O}" },
        "\u{1D64B}": { math: "\\mathsfbfsl{P}" },
        "\u{1D64C}": { math: "\\mathsfbfsl{Q}" },
        "\u{1D64D}": { math: "\\mathsfbfsl{R}" },
        "\u{1D64E}": { math: "\\mathsfbfsl{S}" },
        "\u{1D64F}": { math: "\\mathsfbfsl{T}" },
        "\u{1D650}": { math: "\\mathsfbfsl{U}" },
        "\u{1D651}": { math: "\\mathsfbfsl{V}" },
        "\u{1D652}": { math: "\\mathsfbfsl{W}" },
        "\u{1D653}": { math: "\\mathsfbfsl{X}" },
        "\u{1D654}": { math: "\\mathsfbfsl{Y}" },
        "\u{1D655}": { math: "\\mathsfbfsl{Z}" },
        "\u{1D656}": { math: "\\mathsfbfsl{a}" },
        "\u{1D657}": { math: "\\mathsfbfsl{b}" },
        "\u{1D658}": { math: "\\mathsfbfsl{c}" },
        "\u{1D659}": { math: "\\mathsfbfsl{d}" },
        "\u{1D65A}": { math: "\\mathsfbfsl{e}" },
        "\u{1D65B}": { math: "\\mathsfbfsl{f}" },
        "\u{1D65C}": { math: "\\mathsfbfsl{g}" },
        "\u{1D65D}": { math: "\\mathsfbfsl{h}" },
        "\u{1D65E}": { math: "\\mathsfbfsl{i}" },
        "\u{1D65F}": { math: "\\mathsfbfsl{j}" },
        "\u{1D660}": { math: "\\mathsfbfsl{k}" },
        "\u{1D661}": { math: "\\mathsfbfsl{l}" },
        "\u{1D662}": { math: "\\mathsfbfsl{m}" },
        "\u{1D663}": { math: "\\mathsfbfsl{n}" },
        "\u{1D664}": { math: "\\mathsfbfsl{o}" },
        "\u{1D665}": { math: "\\mathsfbfsl{p}" },
        "\u{1D666}": { math: "\\mathsfbfsl{q}" },
        "\u{1D667}": { math: "\\mathsfbfsl{r}" },
        "\u{1D668}": { math: "\\mathsfbfsl{s}" },
        "\u{1D669}": { math: "\\mathsfbfsl{t}" },
        "\u{1D66A}": { math: "\\mathsfbfsl{u}" },
        "\u{1D66B}": { math: "\\mathsfbfsl{v}" },
        "\u{1D66C}": { math: "\\mathsfbfsl{w}" },
        "\u{1D66D}": { math: "\\mathsfbfsl{x}" },
        "\u{1D66E}": { math: "\\mathsfbfsl{y}" },
        "\u{1D66F}": { math: "\\mathsfbfsl{z}" },
        "\u{1D670}": { math: "\\mathtt{A}" },
        "\u{1D671}": { math: "\\mathtt{B}" },
        "\u{1D672}": { math: "\\mathtt{C}" },
        "\u{1D673}": { math: "\\mathtt{D}" },
        "\u{1D674}": { math: "\\mathtt{E}" },
        "\u{1D675}": { math: "\\mathtt{F}" },
        "\u{1D676}": { math: "\\mathtt{G}" },
        "\u{1D677}": { math: "\\mathtt{H}" },
        "\u{1D678}": { math: "\\mathtt{I}" },
        "\u{1D679}": { math: "\\mathtt{J}" },
        "\u{1D67A}": { math: "\\mathtt{K}" },
        "\u{1D67B}": { math: "\\mathtt{L}" },
        "\u{1D67C}": { math: "\\mathtt{M}" },
        "\u{1D67D}": { math: "\\mathtt{N}" },
        "\u{1D67E}": { math: "\\mathtt{O}" },
        "\u{1D67F}": { math: "\\mathtt{P}" },
        "\u{1D680}": { math: "\\mathtt{Q}" },
        "\u{1D681}": { math: "\\mathtt{R}" },
        "\u{1D682}": { math: "\\mathtt{S}" },
        "\u{1D683}": { math: "\\mathtt{T}" },
        "\u{1D684}": { math: "\\mathtt{U}" },
        "\u{1D685}": { math: "\\mathtt{V}" },
        "\u{1D686}": { math: "\\mathtt{W}" },
        "\u{1D687}": { math: "\\mathtt{X}" },
        "\u{1D688}": { math: "\\mathtt{Y}" },
        "\u{1D689}": { math: "\\mathtt{Z}" },
        "\u{1D68A}": { math: "\\mathtt{a}" },
        "\u{1D68B}": { math: "\\mathtt{b}" },
        "\u{1D68C}": { math: "\\mathtt{c}" },
        "\u{1D68D}": { math: "\\mathtt{d}" },
        "\u{1D68E}": { math: "\\mathtt{e}" },
        "\u{1D68F}": { math: "\\mathtt{f}" },
        "\u{1D690}": { math: "\\mathtt{g}" },
        "\u{1D691}": { math: "\\mathtt{h}" },
        "\u{1D692}": { math: "\\mathtt{i}" },
        "\u{1D693}": { math: "\\mathtt{j}" },
        "\u{1D694}": { math: "\\mathtt{k}" },
        "\u{1D695}": { math: "\\mathtt{l}" },
        "\u{1D696}": { math: "\\mathtt{m}" },
        "\u{1D697}": { math: "\\mathtt{n}" },
        "\u{1D698}": { math: "\\mathtt{o}" },
        "\u{1D699}": { math: "\\mathtt{p}" },
        "\u{1D69A}": { math: "\\mathtt{q}" },
        "\u{1D69B}": { math: "\\mathtt{r}" },
        "\u{1D69C}": { math: "\\mathtt{s}" },
        "\u{1D69D}": { math: "\\mathtt{t}" },
        "\u{1D69E}": { math: "\\mathtt{u}" },
        "\u{1D69F}": { math: "\\mathtt{v}" },
        "\u{1D6A0}": { math: "\\mathtt{w}" },
        "\u{1D6A1}": { math: "\\mathtt{x}" },
        "\u{1D6A2}": { math: "\\mathtt{y}" },
        "\u{1D6A3}": { math: "\\mathtt{z}" },
        "\u{1D6A4}": { math: "\\imath" },
        "\u{1D6A5}": { math: "\\jmath" },
        "\u{1D6A8}": { math: "\\mathbf{A}" },
        "\u{1D6A9}": { math: "\\mathbf{B}" },
        "\u{1D6AA}": { math: "\\mathbf{\\Gamma}" },
        "\u{1D6AB}": { math: "\\mathbf{\\Delta}" },
        "\u{1D6AC}": { math: "\\mathbf{E}" },
        "\u{1D6AD}": { math: "\\mathbf{Z}" },
        "\u{1D6AE}": { math: "\\mathbf{H}" },
        "\u{1D6AF}": { math: "\\mathbf{\\Theta}" },
        "\u{1D6B0}": { math: "\\mathbf{I}" },
        "\u{1D6B1}": { math: "\\mathbf{K}" },
        "\u{1D6B2}": { math: "\\mathbf{\\Lambda}" },
        "\u{1D6B3}": { math: "M" },
        "\u{1D6B4}": { math: "N" },
        "\u{1D6B5}": { math: "\\mathbf{\\Xi}" },
        "\u{1D6B6}": { math: "O" },
        "\u{1D6B7}": { math: "\\mathbf{\\Pi}" },
        "\u{1D6B8}": { math: "\\mathbf{P}" },
        "\u{1D6B9}": { math: "\\mathbf{\\vartheta}" },
        "\u{1D6BA}": { math: "\\mathbf{\\Sigma}" },
        "\u{1D6BB}": { math: "\\mathbf{T}" },
        "\u{1D6BC}": { math: "\\mathbf{\\Upsilon}" },
        "\u{1D6BD}": { math: "\\mathbf{\\Phi}" },
        "\u{1D6BE}": { math: "\\mathbf{X}" },
        "\u{1D6BF}": { math: "\\mathbf{\\Psi}" },
        "\u{1D6C0}": { math: "\\mathbf{\\Omega}" },
        "\u{1D6C1}": { math: "\\mathbf{\\nabla}" },
        "\u{1D6C2}": { math: "\\mathbf{\\alpha}" },
        "\u{1D6C3}": { math: "\\mathbf{\\beta}" },
        "\u{1D6C4}": { math: "\\mathbf{\\gamma}" },
        "\u{1D6C5}": { math: "\\mathbf{\\delta}" },
        "\u{1D6C6}": { math: "\\mathbf{\\epsilon}" },
        "\u{1D6C7}": { math: "\\mathbf{\\zeta}" },
        "\u{1D6C8}": { math: "\\mathbf{\\eta}" },
        "\u{1D6C9}": { math: "\\mathbf{\\theta}" },
        "\u{1D6CA}": { math: "\\mathbf{I}" },
        "\u{1D6CB}": { math: "\\mathbf{K}" },
        "\u{1D6CC}": { math: "\\mathbf{\\lambda}" },
        "\u{1D6CD}": { math: "M" },
        "\u{1D6CE}": { math: "N" },
        "\u{1D6CF}": { math: "\\mathbf{\\xi}" },
        "\u{1D6D0}": { math: "O" },
        "\u{1D6D1}": { math: "\\mathbf{\\pi}" },
        "\u{1D6D2}": { math: "\\mathbf{P}" },
        "\u{1D6D3}": { math: "\\mathbf{\\varsigma}" },
        "\u{1D6D4}": { math: "\\mathbf{\\sigma}" },
        "\u{1D6D5}": { math: "\\mathbf{T}" },
        "\u{1D6D6}": { math: "\\mathbf{\\upsilon}" },
        "\u{1D6D7}": { math: "\\mathbf{\\phi}" },
        "\u{1D6D8}": { math: "\\mathbf{X}" },
        "\u{1D6D9}": { math: "\\mathbf{\\psi}" },
        "\u{1D6DA}": { math: "\\mathbf{\\omega}" },
        "\u{1D6DB}": { math: "\\partial" },
        "\u{1D6DC}": { math: "\\in" },
        "\u{1D6DD}": { math: "\\mathbf{\\vartheta}" },
        "\u{1D6DE}": { math: "\\mathbf{\\varkappa}" },
        "\u{1D6DF}": { math: "\\mathbf{\\phi}" },
        "\u{1D6E0}": { math: "\\mathbf{\\varrho}" },
        "\u{1D6E1}": { math: "\\mathbf{\\varpi}" },
        "\u{1D6E2}": { math: "\\mathsl{A}" },
        "\u{1D6E3}": { math: "\\mathsl{B}" },
        "\u{1D6E4}": { math: "\\mathsl{\\Gamma}" },
        "\u{1D6E5}": { math: "\\mathsl{\\Delta}" },
        "\u{1D6E6}": { math: "\\mathsl{E}" },
        "\u{1D6E7}": { math: "\\mathsl{Z}" },
        "\u{1D6E8}": { math: "\\mathsl{H}" },
        "\u{1D6E9}": { math: "\\mathsl{\\Theta}" },
        "\u{1D6EA}": { math: "\\mathsl{I}" },
        "\u{1D6EB}": { math: "\\mathsl{K}" },
        "\u{1D6EC}": { math: "\\mathsl{\\Lambda}" },
        "\u{1D6ED}": { math: "M" },
        "\u{1D6EE}": { math: "N" },
        "\u{1D6EF}": { math: "\\mathsl{\\Xi}" },
        "\u{1D6F0}": { math: "O" },
        "\u{1D6F1}": { math: "\\mathsl{\\Pi}" },
        "\u{1D6F2}": { math: "\\mathsl{P}" },
        "\u{1D6F3}": { math: "\\mathsl{\\Theta}" },
        "\u{1D6F4}": { math: "\\mathsl{\\Sigma}" },
        "\u{1D6F5}": { math: "\\mathsl{T}" },
        "\u{1D6F6}": { math: "\\mathsl{\\Upsilon}" },
        "\u{1D6F7}": { math: "\\mathsl{\\Phi}" },
        "\u{1D6F8}": { math: "\\mathsl{X}" },
        "\u{1D6F9}": { math: "\\mathsl{\\Psi}" },
        "\u{1D6FA}": { math: "\\mathsl{\\Omega}" },
        "\u{1D6FB}": { math: "\\mathsl{\\nabla}" },
        "\u{1D6FC}": { math: "\\mathsl{A}" },
        "\u{1D6FD}": { math: "\\mathsl{B}" },
        "\u{1D6FE}": { math: "\\mathsl{\\gamma}" },
        "\u{1D6FF}": { math: "\\mathsl{\\delta}" },
        "\u{1D700}": { math: "\\mathsl{E}" },
        "\u{1D701}": { math: "\\mathsl{Z}" },
        "\u{1D702}": { math: "\\mathsl{H}" },
        "\u{1D703}": { math: "\\mathsl{\\theta}" },
        "\u{1D704}": { math: "\\mathsl{I}" },
        "\u{1D705}": { math: "\\mathsl{K}" },
        "\u{1D706}": { math: "\\mathsl{\\lambda}" },
        "\u{1D707}": { math: "\\mu" },
        "\u{1D708}": { math: "\\nu" },
        "\u{1D709}": { math: "\\mathsl{\\xi}" },
        "\u{1D70A}": { math: "o" },
        "\u{1D70B}": { math: "\\mathsl{\\pi}" },
        "\u{1D70C}": { math: "\\mathsl{P}" },
        "\u{1D70D}": { math: "\\mathsl{\\varsigma}" },
        "\u{1D70E}": { math: "\\mathsl{\\sigma}" },
        "\u{1D70F}": { math: "\\mathsl{T}" },
        "\u{1D710}": { math: "\\mathsl{\\upsilon}" },
        "\u{1D711}": { math: "\\mathsl{\\varphi}" },
        "\u{1D712}": { math: "\\mathsl{X}" },
        "\u{1D713}": { math: "\\mathsl{\\psi}" },
        "\u{1D714}": { math: "\\mathsl{\\omega}" },
        "\u{1D715}": { math: "\\partial" },
        "\u{1D716}": { math: "\\in" },
        "\u{1D717}": { math: "\\mathsl{\\vartheta}" },
        "\u{1D718}": { math: "\\mathsl{\\varkappa}" },
        "\u{1D719}": { math: "\\mathsl{\\phi}" },
        "\u{1D71A}": { math: "\\mathsl{\\varrho}" },
        "\u{1D71B}": { math: "\\mathsl{\\varpi}" },
        "\u{1D71C}": { math: "\\mathbit{A}" },
        "\u{1D71D}": { math: "\\mathbit{B}" },
        "\u{1D71E}": { math: "\\mathbit{\\Gamma}" },
        "\u{1D71F}": { math: "\\mathbit{\\Delta}" },
        "\u{1D720}": { math: "\\mathbit{E}" },
        "\u{1D721}": { math: "\\mathbit{Z}" },
        "\u{1D722}": { math: "\\mathbit{H}" },
        "\u{1D723}": { math: "\\mathbit{\\Theta}" },
        "\u{1D724}": { math: "\\mathbit{I}" },
        "\u{1D725}": { math: "\\mathbit{K}" },
        "\u{1D726}": { math: "\\mathbit{\\Lambda}" },
        "\u{1D727}": { math: "M" },
        "\u{1D728}": { math: "N" },
        "\u{1D729}": { math: "\\mathbit{\\Xi}" },
        "\u{1D72A}": { math: "O" },
        "\u{1D72B}": { math: "\\mathbit{\\Pi}" },
        "\u{1D72C}": { math: "\\mathbit{P}" },
        "\u{1D72D}": { math: "\\mathbit{O}" },
        "\u{1D72E}": { math: "\\mathbit{\\Sigma}" },
        "\u{1D72F}": { math: "\\mathbit{T}" },
        "\u{1D730}": { math: "\\mathbit{\\Upsilon}" },
        "\u{1D731}": { math: "\\mathbit{\\Phi}" },
        "\u{1D732}": { math: "\\mathbit{X}" },
        "\u{1D733}": { math: "\\mathbit{\\Psi}" },
        "\u{1D734}": { math: "\\mathbit{\\Omega}" },
        "\u{1D735}": { math: "\\mathbit{\\nabla}" },
        "\u{1D736}": { math: "\\mathbit{\\alpha}" },
        "\u{1D737}": { math: "\\mathbit{\\beta}" },
        "\u{1D738}": { math: "\\mathbit{\\gamma}" },
        "\u{1D739}": { math: "\\mathbit{\\delta}" },
        "\u{1D73A}": { math: "\\mathbit{\\epsilon}" },
        "\u{1D73B}": { math: "\\mathbit{\\zeta}" },
        "\u{1D73C}": { math: "\\mathbit{\\eta}" },
        "\u{1D73D}": { math: "\\mathbit{\\theta}" },
        "\u{1D73E}": { math: "\\mathbit{\\imath}" },
        "\u{1D73F}": { math: "\\mathbit{\\kappa}" },
        "\u{1D740}": { math: "\\mathbit{\\lambda}" },
        "\u{1D741}": { math: "\\mu" },
        "\u{1D742}": { math: "N" },
        "\u{1D743}": { math: "\\mathbit{\\xi}" },
        "\u{1D744}": { math: "O" },
        "\u{1D745}": { math: "\\mathbit{\\pi}" },
        "\u{1D746}": { math: "\\mathbit{\\rho}" },
        "\u{1D747}": { math: "\\mathbit{\\varsigma}" },
        "\u{1D748}": { math: "\\mathbit{\\sigma}" },
        "\u{1D749}": { math: "\\mathbit{\\tau}" },
        "\u{1D74A}": { math: "\\mathbit{\\upsilon}" },
        "\u{1D74B}": { math: "\\mathbit{\\varphi}" },
        "\u{1D74C}": { math: "\\mathbit{\\chi}" },
        "\u{1D74D}": { math: "\\mathbit{\\psi}" },
        "\u{1D74E}": { math: "\\mathbit{\\omega}" },
        "\u{1D74F}": { math: "\\partial" },
        "\u{1D750}": { math: "\\in" },
        "\u{1D751}": { math: "\\mathbit{\\vartheta}" },
        "\u{1D752}": { math: "\\mathbit{\\varkappa}" },
        "\u{1D753}": { math: "\\mathbit{\\phi}" },
        "\u{1D754}": { math: "\\mathbit{\\varrho}" },
        "\u{1D755}": { math: "\\mathbit{\\varpi}" },
        "\u{1D756}": { math: "\\mathsfbf{A}" },
        "\u{1D757}": { math: "\\mathsfbf{B}" },
        "\u{1D758}": { math: "\\mathsfbf{\\Gamma}" },
        "\u{1D759}": { math: "\\mathsfbf{\\Delta}" },
        "\u{1D75A}": { math: "\\mathsfbf{E}" },
        "\u{1D75B}": { math: "\\mathsfbf{Z}" },
        "\u{1D75C}": { math: "\\mathsfbf{H}" },
        "\u{1D75D}": { math: "\\mathsfbf{\\Theta}" },
        "\u{1D75E}": { math: "\\mathsfbf{I}" },
        "\u{1D75F}": { math: "\\mathsfbf{K}" },
        "\u{1D760}": { math: "\\mathsfbf{\\Lambda}" },
        "\u{1D761}": { math: "M" },
        "\u{1D762}": { math: "N" },
        "\u{1D763}": { math: "\\mathsfbf{\\Xi}" },
        "\u{1D764}": { math: "O" },
        "\u{1D765}": { math: "\\mathsfbf{\\Pi}" },
        "\u{1D766}": { math: "\\mathsfbf{P}" },
        "\u{1D767}": { math: "\\mathsfbf{\\Theta}" },
        "\u{1D768}": { math: "\\mathsfbf{\\Sigma}" },
        "\u{1D769}": { math: "\\mathsfbf{T}" },
        "\u{1D76A}": { math: "\\mathsfbf{\\Upsilon}" },
        "\u{1D76B}": { math: "\\mathsfbf{\\Phi}" },
        "\u{1D76C}": { math: "\\mathsfbf{X}" },
        "\u{1D76D}": { math: "\\mathsfbf{\\Psi}" },
        "\u{1D76E}": { math: "\\mathsfbf{\\Omega}" },
        "\u{1D76F}": { math: "\\mathsfbf{\\nabla}" },
        "\u{1D770}": { math: "\\mathsfbf{\\alpha}" },
        "\u{1D771}": { math: "\\mathsfbf{\\beta}" },
        "\u{1D772}": { math: "\\mathsfbf{\\gamma}" },
        "\u{1D773}": { math: "\\mathsfbf{\\delta}" },
        "\u{1D774}": { math: "\\mathsfbf{\\varepsilon}" },
        "\u{1D775}": { math: "\\mathsfbf{\\zeta}" },
        "\u{1D776}": { math: "\\mathsfbf{\\eta}" },
        "\u{1D777}": { math: "\\mathsfbf{\\theta}" },
        "\u{1D778}": { math: "\\mathsfbf{\\imath}" },
        "\u{1D779}": { math: "\\mathsfbf{\\kappa}" },
        "\u{1D77A}": { math: "\\mathsfbf{\\lambda}" },
        "\u{1D77B}": { math: "\\mu" },
        "\u{1D77C}": { math: "\\nu" },
        "\u{1D77D}": { math: "\\mathsfbf{\\xi}" },
        "\u{1D77E}": { math: "o" },
        "\u{1D77F}": { math: "\\mathsfbf{\\pi}" },
        "\u{1D780}": { math: "\\mathsfbf{\\rho}" },
        "\u{1D781}": { math: "\\mathsfbf{\\varsigma}" },
        "\u{1D782}": { math: "\\mathsfbf{\\sigma}" },
        "\u{1D783}": { math: "\\mathsfbf{\\tau}" },
        "\u{1D784}": { math: "\\mathsfbf{\\upsilon}" },
        "\u{1D785}": { math: "\\mathsfbf{\\varphi}" },
        "\u{1D786}": { math: "\\mathsfbf{\\chi}" },
        "\u{1D787}": { math: "\\mathsfbf{\\psi}" },
        "\u{1D788}": { math: "\\mathsfbf{\\omega}" },
        "\u{1D789}": { math: "\\partial" },
        "\u{1D78A}": { math: "\\in" },
        "\u{1D78B}": { math: "\\mathsfbf{\\vartheta}" },
        "\u{1D78C}": { math: "\\mathsfbf{\\varkappa}" },
        "\u{1D78D}": { math: "\\mathsfbf{\\phi}" },
        "\u{1D78E}": { math: "\\mathsfbf{\\varrho}" },
        "\u{1D78F}": { math: "\\mathsfbf{\\varpi}" },
        "\u{1D790}": { math: "\\mathsfbfsl{A}" },
        "\u{1D791}": { math: "\\mathsfbfsl{B}" },
        "\u{1D792}": { math: "\\mathsfbfsl{\\Gamma}" },
        "\u{1D793}": { math: "\\mathsfbfsl{\\Delta}" },
        "\u{1D794}": { math: "\\mathsfbfsl{E}" },
        "\u{1D795}": { math: "\\mathsfbfsl{Z}" },
        "\u{1D796}": { math: "\\mathsfbfsl{H}" },
        "\u{1D797}": { math: "\\mathsfbfsl{\\Theta}" },
        "\u{1D798}": { math: "\\mathsfbfsl{I}" },
        "\u{1D799}": { math: "\\mathsfbfsl{K}" },
        "\u{1D79A}": { math: "\\mathsfbfsl{\\Lambda}" },
        "\u{1D79B}": { math: "\\mathsfbfsl{M}" },
        "\u{1D79C}": { math: "\\mathsfbfsl{N}" },
        "\u{1D79D}": { math: "\\mathsfbfsl{\\Xi}" },
        "\u{1D79E}": { math: "\\mathsfbfsl{O}" },
        "\u{1D79F}": { math: "\\mathsfbfsl{\\Pi}" },
        "\u{1D7A0}": { math: "\\mathsfbfsl{P}" },
        "\u{1D7A1}": { math: "\\mathsfbfsl{\\Theta}" },
        "\u{1D7A2}": { math: "\\mathsfbfsl{\\Sigma}" },
        "\u{1D7A3}": { math: "\\mathsfbfsl{T}" },
        "\u{1D7A4}": { math: "\\mathsfbfsl{\\Upsilon}" },
        "\u{1D7A5}": { math: "\\mathsfbfsl{\\Phi}" },
        "\u{1D7A6}": { math: "\\mathsfbfsl{X}" },
        "\u{1D7A7}": { math: "\\mathsfbfsl{\\Psi}" },
        "\u{1D7A8}": { math: "\\mathsfbfsl{\\Omega}" },
        "\u{1D7A9}": { math: "\\mathsfbfsl{\\nabla}" },
        "\u{1D7AA}": { math: "\\mathsfbfsl{\\alpha}" },
        "\u{1D7AB}": { math: "\\mathsfbfsl{\\beta}" },
        "\u{1D7AC}": { math: "\\mathsfbfsl{\\gamma}" },
        "\u{1D7AD}": { math: "\\mathsfbfsl{\\delta}" },
        "\u{1D7AE}": { math: "\\mathsfbfsl{\\varepsilon}" },
        "\u{1D7AF}": { math: "\\mathsfbfsl{\\zeta}" },
        "\u{1D7B0}": { math: "\\mathsfbfsl{\\eta}" },
        "\u{1D7B1}": { math: "\\mathsfbfsl{\\theta}" },
        "\u{1D7B2}": { math: "\\mathsfbfsl{\\imath}" },
        "\u{1D7B3}": { math: "\\mathsfbfsl{\\kappa}" },
        "\u{1D7B4}": { math: "\\mathsfbfsl{\\lambda}" },
        "\u{1D7B5}": { math: "\\mu" },
        "\u{1D7B6}": { math: "\\nu" },
        "\u{1D7B7}": { math: "\\mathsfbfsl{\\xi}" },
        "\u{1D7B8}": { math: "o" },
        "\u{1D7B9}": { math: "\\mathsfbfsl{\\pi}" },
        "\u{1D7BA}": { math: "\\mathsfbfsl{\\rho}" },
        "\u{1D7BB}": { math: "\\mathsfbfsl{\\varsigma}" },
        "\u{1D7BC}": { math: "\\mathsfbfsl{\\sigma}" },
        "\u{1D7BD}": { math: "\\mathsfbfsl{\\tau}" },
        "\u{1D7BE}": { math: "\\mathsfbfsl{\\upsilon}" },
        "\u{1D7BF}": { math: "\\mathsfbfsl{\\varphi}" },
        "\u{1D7C0}": { math: "\\mathsfbfsl{\\chi}" },
        "\u{1D7C1}": { math: "\\mathsfbfsl{\\psi}" },
        "\u{1D7C2}": { math: "\\mathsfbfsl{\\omega}" },
        "\u{1D7C3}": { math: "\\partial" },
        "\u{1D7C4}": { math: "\\in" },
        "\u{1D7C5}": { math: "\\mathsfbfsl{\\vartheta}" },
        "\u{1D7C6}": { math: "\\mathsfbfsl{\\varkappa}" },
        "\u{1D7C7}": { math: "\\mathsfbfsl{\\phi}" },
        "\u{1D7C8}": { math: "\\mathsfbfsl{\\varrho}" },
        "\u{1D7C9}": { math: "\\mathsfbfsl{\\varpi}" },
        "\u{1D7CA}": { math: "\\mbfDigamma" },
        "\u{1D7CB}": { math: "\\mbfdigamma" },
        "\u{1D7CE}": { math: "\\mathbf{0}" },
        "\u{1D7CF}": { math: "\\mathbf{1}" },
        "\u{1D7D0}": { math: "\\mathbf{2}" },
        "\u{1D7D1}": { math: "\\mathbf{3}" },
        "\u{1D7D2}": { math: "\\mathbf{4}" },
        "\u{1D7D3}": { math: "\\mathbf{5}" },
        "\u{1D7D4}": { math: "\\mathbf{6}" },
        "\u{1D7D5}": { math: "\\mathbf{7}" },
        "\u{1D7D6}": { math: "\\mathbf{8}" },
        "\u{1D7D7}": { math: "\\mathbf{9}" },
        "\u{1D7D8}": { math: "\\mathbb{0}" },
        "\u{1D7D9}": { math: "\\mathbb{1}" },
        "\u{1D7DA}": { math: "\\mathbb{2}" },
        "\u{1D7DB}": { math: "\\mathbb{3}" },
        "\u{1D7DC}": { math: "\\mathbb{4}" },
        "\u{1D7DD}": { math: "\\mathbb{5}" },
        "\u{1D7DE}": { math: "\\mathbb{6}" },
        "\u{1D7DF}": { math: "\\mathbb{7}" },
        "\u{1D7E0}": { math: "\\mathbb{8}" },
        "\u{1D7E1}": { math: "\\mathbb{9}" },
        "\u{1D7E2}": { math: "\\mathsf{0}" },
        "\u{1D7E3}": { math: "\\mathsf{1}" },
        "\u{1D7E4}": { math: "\\mathsf{2}" },
        "\u{1D7E5}": { math: "\\mathsf{3}" },
        "\u{1D7E6}": { math: "\\mathsf{4}" },
        "\u{1D7E7}": { math: "\\mathsf{5}" },
        "\u{1D7E8}": { math: "\\mathsf{6}" },
        "\u{1D7E9}": { math: "\\mathsf{7}" },
        "\u{1D7EA}": { math: "\\mathsf{8}" },
        "\u{1D7EB}": { math: "\\mathsf{9}" },
        "\u{1D7EC}": { math: "\\mathsfbf{0}" },
        "\u{1D7ED}": { math: "\\mathsfbf{1}" },
        "\u{1D7EE}": { math: "\\mathsfbf{2}" },
        "\u{1D7EF}": { math: "\\mathsfbf{3}" },
        "\u{1D7F0}": { math: "\\mathsfbf{4}" },
        "\u{1D7F1}": { math: "\\mathsfbf{5}" },
        "\u{1D7F2}": { math: "\\mathsfbf{6}" },
        "\u{1D7F3}": { math: "\\mathsfbf{7}" },
        "\u{1D7F4}": { math: "\\mathsfbf{8}" },
        "\u{1D7F5}": { math: "\\mathsfbf{9}" },
        "\u{1D7F6}": { math: "\\mathtt{0}" },
        "\u{1D7F7}": { math: "\\mathtt{1}" },
        "\u{1D7F8}": { math: "\\mathtt{2}" },
        "\u{1D7F9}": { math: "\\mathtt{3}" },
        "\u{1D7FA}": { math: "\\mathtt{4}" },
        "\u{1D7FB}": { math: "\\mathtt{5}" },
        "\u{1D7FC}": { math: "\\mathtt{6}" },
        "\u{1D7FD}": { math: "\\mathtt{7}" },
        "\u{1D7FE}": { math: "\\mathtt{8}" },
        "\u{1D7FF}": { math: "\\mathtt{9}" }
      };
    }
  });

  // node_modules/unicode2latex/tables/ascii-bibtex-creator.json
  var require_ascii_bibtex_creator = __commonJS({
    "node_modules/unicode2latex/tables/ascii-bibtex-creator.json"(exports, module) {
      module.exports = {
        "#": { math: "\\#", text: "\\#" },
        $: { math: "\\$", text: "\\$" },
        "%": { math: "\\%", text: "\\%" },
        "&": { math: "\\&", text: "\\&" },
        "/\u200B": { text: "{\\slash}" },
        "<": { math: "<" },
        ">": { math: ">" },
        "\\": { math: "\\backslash", text: "{\\textbackslash}" },
        "^": { math: "\\sphat", text: "\\^" },
        _: { math: "\\_", text: "\\_" },
        i\uFE20a\uFE21: { text: "\\t{ia}" },
        "{": { math: "\\lbrace", text: "\\{" },
        "}": { math: "\\rbrace", text: "\\}" },
        "~": { math: "\\sptilde", text: "{\\textasciitilde}" },
        "\xA0": { math: "~", space: true, text: "~" },
        "\xA1": { text: "{\\textexclamdown}" },
        "\xA2": { math: "\\cent", text: "{\\textcent}", textpackages: ["textcomp"] },
        "\xA3": { math: "\\pounds", text: "{\\textsterling}", textpackages: ["textcomp"] },
        "\xA4": { text: "{\\textcurrency}", textpackages: ["textcomp"] },
        "\xA5": { math: "\\yen", text: "{\\textyen}", textpackages: ["textcomp"] },
        "\xA6": { text: "{\\textbrokenbar}", textpackages: ["textcomp"] },
        "\xA7": { text: "{\\textsection}", textpackages: ["textcomp"] },
        "\xA8": { math: "\\spddot", text: "{\\textasciidieresis}" },
        "\xA9": { text: "{\\textcopyright}", textpackages: ["textcomp"] },
        \u00AA: { text: "{\\textordfeminine}", textpackages: ["textcomp"] },
        "\xAB": { text: "{\\guillemotleft}" },
        "\xAC": { math: "\\lnot" },
        "\xAD": { math: "\\-", text: "\\-" },
        "\xAE": { math: "\\circledR", text: "{\\textregistered}", textpackages: ["textcomp"] },
        "\xAF": { text: "{\\textasciimacron}" },
        "\xB0": { math: "^\\circ", text: "{\\textdegree}", textpackages: ["textcomp"] },
        "\xB1": { math: "\\pm" },
        "\xB2": { math: "^{2}" },
        "\xB3": { math: "^{3}" },
        "\xB4": { text: "{\\textasciiacute}" },
        \u00B5: { text: "{\\textmu}" },
        "\xB6": { text: "{\\textparagraph}", textpackages: ["textcomp"] },
        "\xB7": { math: "\\cdot" },
        "\xB8": { text: "{\\c}" },
        "\xB9": { math: "^{1}" },
        \u00BA: { text: "{\\textordmasculine}", textpackages: ["textcomp"] },
        "\xBB": { text: "{\\guillemotright}" },
        "\xBC": { math: "\\frac{1}{4}" },
        "\xBD": { math: "\\frac{1}{2}" },
        "\xBE": { math: "\\frac{3}{4}" },
        "\xBF": { text: "{\\textquestiondown}" },
        \u00C0: { text: "{\\`A}" },
        \u00C1: { text: "{\\'A}" },
        \u00C2: { text: "{\\^A}" },
        \u00C3: { text: "{\\~A}" },
        \u00C4: { text: '{\\"A}' },
        \u00C5: { text: "{\\AA}" },
        \u00C6: { text: "{\\AE}" },
        \u00C7: { text: "{\\c C}" },
        \u00C8: { text: "{\\`E}" },
        \u00C9: { text: "{\\'E}" },
        \u00CA: { text: "{\\^E}" },
        \u00CB: { text: '{\\"E}' },
        \u00CC: { text: "{\\`I}" },
        \u00CD: { text: "{\\'I}" },
        \u00CE: { text: "{\\^I}" },
        \u00CF: { text: '{\\"I}' },
        \u00D0: { text: "{\\DH}" },
        \u00D1: { text: "{\\~N}" },
        \u00D2: { text: "{\\`O}" },
        \u00D3: { text: "{\\'O}" },
        \u00D4: { text: "{\\^O}" },
        \u00D5: { text: "{\\~O}" },
        \u00D6: { text: '{\\"O}' },
        "\xD7": { math: "\\times", text: "{\\texttimes}" },
        \u00D8: { text: "{\\O}" },
        \u00D9: { text: "{\\`U}" },
        \u00DA: { text: "{\\'U}" },
        \u00DB: { text: "{\\^U}" },
        \u00DC: { text: '{\\"U}' },
        \u00DD: { text: "{\\'Y}" },
        \u00DE: { text: "{\\TH}" },
        \u00DF: { text: "{\\ss}" },
        \u00E0: { text: "{\\`a}" },
        \u00E1: { text: "{\\'a}" },
        \u00E2: { text: "{\\^a}" },
        \u00E3: { text: "{\\~a}" },
        \u00E4: { text: '{\\"a}' },
        \u00E5: { text: "{\\aa}" },
        \u00E6: { text: "{\\ae}" },
        \u00E7: { text: "{\\c c}" },
        \u00E8: { text: "{\\`e}" },
        \u00E9: { text: "{\\'e}" },
        \u00EA: { text: "{\\^e}" },
        \u00EB: { text: '{\\"e}' },
        \u00EC: { text: "{\\`i}" },
        \u00ED: { text: "{\\'i}" },
        \u00EE: { text: "{\\^i}" },
        \u00EF: { text: '{\\"i}' },
        \u00F0: { math: "\\eth", mathpackages: ["amssymb", "arevmath"], text: "{\\dh}" },
        \u00F1: { text: "{\\~n}" },
        \u00F2: { text: "{\\`o}" },
        \u00F3: { text: "{\\'o}" },
        \u00F4: { text: "{\\^o}" },
        \u00F5: { text: "{\\~o}" },
        \u00F6: { text: '{\\"o}' },
        "\xF7": { math: "\\div" },
        \u00F8: { text: "{\\o}" },
        \u00F9: { text: "{\\`u}" },
        \u00FA: { text: "{\\'u}" },
        \u00FB: { text: "{\\^u}" },
        \u00FC: { text: '{\\"u}' },
        \u00FD: { text: "{\\'y}" },
        \u00FE: { text: "{\\th}" },
        \u00FF: { text: '{\\"y}' },
        \u0100: { text: "{\\=A}" },
        \u0101: { text: "{\\=a}" },
        \u0102: { text: "{\\u A}" },
        \u0103: { text: "{\\u a}" },
        \u0104: { text: "{\\k{A}}" },
        \u0105: { text: "{\\k{a}}" },
        \u0106: { text: "{\\'C}" },
        \u0107: { text: "{\\'c}" },
        \u0108: { text: "{\\^C}" },
        \u0109: { text: "{\\^c}" },
        \u010A: { text: "{\\.C}" },
        \u010B: { text: "{\\.c}" },
        \u010C: { text: "{\\v C}" },
        \u010D: { text: "{\\v c}" },
        \u010E: { text: "{\\v D}" },
        \u010F: { text: "{\\v d}" },
        \u0110: { text: "{\\DJ}" },
        \u0111: { text: "{\\dj}" },
        \u0112: { text: "{\\=E}" },
        \u0113: { text: "{\\=e}" },
        \u0114: { text: "{\\u E}" },
        \u0115: { text: "{\\u e}" },
        \u0116: { text: "{\\.E}" },
        \u0117: { text: "{\\.e}" },
        \u0118: { text: "{\\k{E}}" },
        \u0119: { text: "{\\k{e}}" },
        \u011A: { text: "{\\v E}" },
        \u011B: { text: "{\\v e}" },
        \u011C: { text: "{\\^G}" },
        \u011D: { text: "{\\^g}" },
        \u011E: { text: "{\\u G}" },
        \u011F: { text: "{\\u g}" },
        \u0120: { text: "{\\.G}" },
        \u0121: { text: "{\\.g}" },
        \u0122: { text: "{\\c G}" },
        \u0123: { text: "{\\c g}" },
        \u0124: { text: "{\\^H}" },
        \u0125: { text: "{\\^h}" },
        \u0126: { text: "{\\fontencoding{LELA}\\selectfont\\char40}" },
        \u0127: { math: "\\Elzxh" },
        \u0128: { text: "{\\~I}" },
        \u0129: { text: "{\\~i}" },
        \u012A: { text: "{\\=I}" },
        \u012B: { text: "{\\=i}" },
        \u012C: { text: "{\\u I}" },
        \u012D: { text: "{\\u \\i}" },
        \u012E: { text: "{\\k{I}}" },
        \u012F: { text: "{\\k{i}}" },
        \u0130: { text: "{\\.I}" },
        \u0131: { math: "\\imath", text: "{\\i}" },
        \u0132: { text: "IJ" },
        \u0133: { text: "ij" },
        \u0134: { text: "{\\^J}" },
        \u0135: { text: "{\\^\\j}" },
        \u0136: { text: "{\\c K}" },
        \u0137: { text: "{\\c k}" },
        \u0138: { text: "{\\fontencoding{LELA}\\selectfont\\char91}" },
        \u0139: { text: "{\\'L}" },
        \u013A: { text: "{\\'l}" },
        \u013B: { text: "{\\c L}" },
        \u013C: { text: "{\\c l}" },
        \u013D: { text: "{\\v L}" },
        \u013E: { text: "{\\v l}" },
        \u013F: { text: "{\\fontencoding{LELA}\\selectfont\\char201}" },
        \u0140: { text: "{\\fontencoding{LELA}\\selectfont\\char202}" },
        \u0141: { text: "{\\L}" },
        \u0142: { text: "{\\l}" },
        \u0143: { text: "{\\'N}" },
        \u0144: { text: "{\\'n}" },
        \u0145: { text: "{\\c N}" },
        \u0146: { text: "{\\c n}" },
        \u0147: { text: "{\\v N}" },
        \u0148: { text: "{\\v n}" },
        \u0149: { text: "'n" },
        \u014A: { text: "{\\NG}" },
        \u014B: { text: "{\\ng}" },
        \u014C: { text: "{\\=O}" },
        \u014D: { text: "{\\=o}" },
        \u014E: { text: "{\\u O}" },
        \u014F: { text: "{\\u o}" },
        \u0150: { text: "{\\H O}" },
        \u0151: { text: "{\\H o}" },
        \u0152: { text: "{\\OE}" },
        \u0153: { text: "{\\oe}" },
        \u0154: { text: "{\\'R}" },
        \u0155: { text: "{\\'r}" },
        \u0156: { text: "{\\c R}" },
        \u0157: { text: "{\\c r}" },
        \u0158: { text: "{\\v R}" },
        \u0159: { text: "{\\v r}" },
        \u015A: { text: "{\\'S}" },
        \u015B: { text: "{\\'s}" },
        \u015C: { text: "{\\^S}" },
        \u015D: { text: "{\\^s}" },
        \u015E: { text: "{\\c S}" },
        \u015F: { text: "{\\c s}" },
        \u0160: { text: "{\\v S}" },
        \u0161: { text: "{\\v s}" },
        \u0162: { text: "{\\c T}" },
        \u0163: { text: "{\\c t}" },
        \u0164: { text: "{\\v T}" },
        \u0165: { text: "{\\v t}" },
        \u0166: { text: "{\\fontencoding{LELA}\\selectfont\\char47}" },
        \u0167: { text: "{\\fontencoding{LELA}\\selectfont\\char63}" },
        \u0168: { text: "{\\~U}" },
        \u0169: { text: "{\\~u}" },
        \u016A: { text: "{\\=U}" },
        \u016B: { text: "{\\=u}" },
        \u016C: { text: "{\\u U}" },
        \u016D: { text: "{\\u u}" },
        \u016E: { text: "{\\r{U}}" },
        \u016F: { text: "{\\r{u}}" },
        \u0170: { text: "{\\H U}" },
        \u0171: { text: "{\\H u}" },
        \u0172: { text: "{\\k{U}}" },
        \u0173: { text: "{\\k{u}}" },
        \u0174: { text: "{\\^W}" },
        \u0175: { text: "{\\^w}" },
        \u0176: { text: "{\\^Y}" },
        \u0177: { text: "{\\^y}" },
        \u0178: { text: '{\\"Y}' },
        \u0179: { text: "{\\'Z}" },
        \u017A: { text: "{\\'z}" },
        \u017B: { text: "{\\.Z}" },
        \u017C: { text: "{\\.z}" },
        \u017D: { text: "{\\v Z}" },
        \u017E: { text: "{\\v z}" },
        \u017F: { text: "s" },
        \u0192: { math: "f" },
        \u0195: { text: "{\\texthvlig}" },
        \u019E: { text: "{\\textnrleg}" },
        \u01AA: { text: "{\\textesh}" },
        \u01B5: { math: "\\Zbar" },
        \u01BA: { text: "{\\fontencoding{LELA}\\selectfont\\char195}" },
        \u01C2: { text: "{\\textdoublepipe}" },
        \u01CD: { text: "{\\v A}" },
        \u01CE: { text: "{\\v a}" },
        \u01CF: { text: "{\\v I}" },
        \u01D0: { text: "{\\v i}" },
        \u01D1: { text: "{\\v O}" },
        \u01D2: { text: "{\\v o}" },
        \u01D3: { text: "{\\v U}" },
        \u01D4: { text: "{\\v u}" },
        \u01E6: { text: "{\\v G}" },
        \u01E7: { text: "{\\v g}" },
        \u01E8: { text: "{\\v K}" },
        \u01E9: { text: "{\\v k}" },
        \u01EA: { text: "{\\k{O}}" },
        \u01EB: { text: "{\\k{o}}" },
        \u01F0: { text: "{\\v j}" },
        \u01F4: { text: "{\\'G}" },
        \u01F5: { text: "{\\'g}" },
        \u0228: { text: "{\\c E}" },
        \u0229: { text: "{\\c e}" },
        "\u0237": { math: "\\jmath" },
        \u0250: { math: "\\Elztrna" },
        \u0252: { math: "\\Elztrnsa" },
        \u0254: { math: "\\Elzopeno" },
        \u0256: { math: "\\Elzrtld" },
        \u0258: { text: "{\\fontencoding{LEIP}\\selectfont\\char61}" },
        \u0259: { math: "\\Elzschwa" },
        \u025B: { math: "\\varepsilon" },
        \u0261: { text: "g" },
        \u0263: { math: "\\Elzpgamma" },
        \u0264: { math: "\\Elzpbgam" },
        \u0265: { math: "\\Elztrnh" },
        \u026C: { math: "\\Elzbtdl" },
        \u026D: { math: "\\Elzrtll" },
        \u026F: { math: "\\Elztrnm" },
        \u0270: { math: "\\Elztrnmlr" },
        \u0271: { math: "\\Elzltlmr" },
        \u0272: { text: "{\\Elzltln}" },
        \u0273: { math: "\\Elzrtln" },
        \u0277: { math: "\\Elzclomeg" },
        \u0278: { text: "{\\textphi}" },
        \u0279: { math: "\\Elztrnr" },
        \u027A: { math: "\\Elztrnrl" },
        \u027B: { math: "\\Elzrttrnr" },
        \u027C: { math: "\\Elzrl" },
        \u027D: { math: "\\Elzrtlr" },
        \u027E: { math: "\\Elzfhr" },
        \u027F: { text: "{\\fontencoding{LEIP}\\selectfont\\char202}" },
        \u0282: { math: "\\Elzrtls" },
        \u0283: { math: "\\Elzesh" },
        \u0287: { math: "\\Elztrnt" },
        \u0288: { math: "\\Elzrtlt" },
        \u028A: { math: "\\Elzpupsil" },
        \u028B: { math: "\\Elzpscrv" },
        \u028C: { math: "\\Elzinvv" },
        \u028D: { math: "\\Elzinvw" },
        \u028E: { math: "\\Elztrny" },
        \u0290: { math: "\\Elzrtlz" },
        \u0292: { math: "\\Elzyogh" },
        \u0294: { math: "\\Elzglst" },
        \u0295: { math: "\\Elzreglst" },
        \u0296: { math: "\\Elzinglst" },
        \u029E: { text: "{\\textturnk}" },
        \u02A4: { math: "\\Elzdyogh" },
        \u02A7: { math: "\\Elztesh" },
        \u02B0: { math: "^{h}", text: "\\textsuperscript{h}" },
        \u02B2: { math: "^{j}", text: "\\textsuperscript{j}" },
        \u02B3: { math: "^{r}", text: "\\textsuperscript{r}" },
        \u02B7: { math: "^{w}", text: "\\textsuperscript{w}" },
        \u02B8: { math: "^{y}", text: "\\textsuperscript{y}" },
        "\u02B9": { text: "'" },
        \u02BB: { text: "'" },
        \u02BC: { text: "'" },
        \u02BD: { text: "'" },
        \u02BF: { text: "{\\lasp}", textpackages: ["mathscinet"] },
        "\u02C6": { text: "{\\textasciicircum}" },
        "\u02C7": { text: "{\\textasciicaron}" },
        "\u02C8": { math: "\\Elzverts" },
        "\u02C9": { text: "-" },
        "\u02CC": { math: "\\Elzverti" },
        \u02D0: { math: "\\Elzlmrk" },
        \u02D1: { math: "\\Elzhlmrk" },
        "\u02D2": { math: "\\Elzsbrhr" },
        "\u02D3": { math: "\\Elzsblhr" },
        "\u02D4": { math: "\\Elzrais" },
        "\u02D5": { math: "\\Elzlow" },
        "\u02D8": { text: "{\\textasciibreve}" },
        "\u02D9": { text: "{\\textperiodcentered}", textpackages: ["textcomp"] },
        "\u02DA": { text: "{\\r{}}" },
        "\u02DB": { text: "{\\k{}}" },
        "\u02DC": { text: "{\\texttildelow}" },
        "\u02DD": { text: "{\\H{}}" },
        \u02E1: { math: "^{l}", text: "\\textsuperscript{l}" },
        \u02E2: { math: "^{s}", text: "\\textsuperscript{s}" },
        \u02E3: { math: "^{x}", text: "\\textsuperscript{x}" },
        "\u02E5": { text: "\\tone{55}" },
        "\u02E6": { text: "\\tone{44}" },
        "\u02E7": { text: "\\tone{33}" },
        "\u02E8": { text: "\\tone{22}" },
        "\u02E9": { text: "\\tone{11}" },
        "\u0300": { math: "\\grave", combiningdiacritic: true, text: "\\`" },
        "\u0300\u0304": { text: "{\\textgravemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0300": { text: "{\\textgravemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0300\u0307": { text: "{\\textgravedot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0300": { text: "{\\textgravedot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301": { math: "\\acute", combiningdiacritic: true, text: "\\'" },
        "\u0301\u0304": { text: "{\\textacutemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0301": { text: "{\\textacutemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301\u030C": { text: "{\\textacutewedge}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030C\u0301": { text: "{\\textacutewedge}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0302": { math: "\\hat", combiningdiacritic: true, text: "\\^" },
        "\u0302\u0307": { text: "{\\textcircumdot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0302": { text: "{\\textcircumdot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0303": { math: "\\tilde", combiningdiacritic: true, text: "\\~" },
        "\u0303\u0307": { text: "{\\texttildedot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0303": { text: "{\\texttildedot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304": { math: "\\bar", combiningdiacritic: true, text: "\\=" },
        "\u0305": { math: "\\overline", combiningdiacritic: true },
        "\u0306": { math: "\\breve", combiningdiacritic: true, text: "{\\u}" },
        "\u0306\u0304": { text: "{\\textbrevemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0306": { text: "{\\textbrevemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307": { math: "\\dot", combiningdiacritic: true, text: "\\." },
        "\u0307\u0301": { text: "{\\textdotacute}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301\u0307": { text: "{\\textdotacute}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0306": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0306\u0307": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0308": { math: "\\ddot", combiningdiacritic: true, text: '\\"' },
        "\u0309": { math: "\\ovhook" },
        "\u030A": { math: "\\mathring", combiningdiacritic: true, text: "{\\r}" },
        "\u030A\u0304": { text: "{\\textringmacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u030A": { text: "{\\textringmacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030B": { text: "{\\H}", combiningdiacritic: true },
        "\u030C": { math: "\\check", text: "{\\v}", combiningdiacritic: true },
        "\u030D": { text: "{\\textvbaraccent}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030E": { text: "{\\textdoublevbaraccent}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030F": { text: "{\\textdoublegrave}", combiningdiacritic: true },
        "\u0310": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0311": { text: "{\\fontencoding{LECO}\\selectfont\\char177}" },
        "\u0312": { math: "\\oturnedcomma" },
        "\u0315": { math: "\\ocommatopright" },
        "\u0316": { text: "{\\textsubgrave}", combiningdiacritic: true },
        "\u0318": { text: "{\\textadvancing}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0319": { text: "{\\textretracting}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031A": { math: "\\droang", text: "{\\textcorner}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031C": { text: "{\\textsublhalfring}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031D": { text: "{\\textraising}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031E": { text: "{\\textlowering}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031F": { text: "{\\textsubplus}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0321": { math: "\\Elzpalh" },
        "\u0322": { text: "{\\Elzrh}" },
        "\u0323": { text: "{\\d}", combiningdiacritic: true },
        "\u0324": { text: "{\\textsubumlaut}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0325": { text: "{\\textsubring}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0327": { text: "{\\c}", combiningdiacritic: true },
        "\u0328": { text: "{\\k}", combiningdiacritic: true },
        "\u0329": { text: "{\\textsyllabic}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032A": { math: "\\Elzsbbrg", text: "{\\textsubbridge}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032B": { text: "{\\fontencoding{LECO}\\selectfont\\char203}" },
        "\u032C": { text: "{\\textsubwedge}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032F": { text: "{\\textsubarch}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0330": { math: "\\utilde", text: "{\\textsubtilde}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0331": { math: "\\underbar", combiningdiacritic: true, text: "{\\textsubbar}", textpackages: ["tipa"] },
        "\u0332": { math: "\\underline" },
        "\u0334": { text: "{\\textsuperimposetilde}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0335": { text: "{\\Elzxl}" },
        "\u0336": { text: "{\\Elzbar}" },
        "\u0337": { text: "{\\fontencoding{LECO}\\selectfont\\char215}" },
        "\u0338": { math: "\\not" },
        "\u0339": { text: "{\\textsubrhalfring}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033A": { text: "{\\textinvsubbridge}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033B": { text: "{\\textsubsquare}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033C": { text: "{\\textseagull}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033D": { text: "{\\textovercross}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0361": { text: "{\\fontencoding{LECO}\\selectfont\\char225}" },
        "\u0374": { text: "'" },
        "\u0375": { text: "," },
        "\u037E": { text: ";" },
        \u0386: { text: "{\\'A}" },
        \u0388: { text: "{\\'E}" },
        \u0389: { text: "{\\'H}" },
        \u038A: { text: "{\\'{}I}" },
        \u038C: { text: "{\\'{}O}" },
        \u038E: { math: "\\mathrm{'Y}" },
        \u038F: { math: "\\mathrm{'\\Omega}" },
        \u0390: { math: "\\acute{\\ddot{\\iota}}" },
        \u0391: { math: "A" },
        \u0392: { math: "B" },
        \u0393: { math: "\\Gamma" },
        \u0394: { math: "\\Delta" },
        \u0395: { math: "E" },
        \u0396: { math: "Z" },
        \u0397: { math: "H" },
        \u0398: { math: "\\Theta" },
        \u0399: { math: "I" },
        \u039A: { math: "K" },
        \u039B: { math: "\\Lambda" },
        \u039C: { math: "M" },
        \u039D: { math: "N" },
        \u039E: { math: "\\Xi" },
        \u039F: { math: "O" },
        \u03A0: { math: "\\Pi" },
        \u03A1: { math: "P" },
        \u03A3: { math: "\\Sigma" },
        \u03A4: { math: "T" },
        \u03A5: { math: "\\Upsilon" },
        \u03A6: { math: "\\Phi" },
        \u03A7: { math: "X" },
        \u03A8: { math: "\\Psi" },
        \u03A9: { math: "\\Omega" },
        \u03AA: { math: "\\mathrm{\\ddot{I}}" },
        \u03AB: { math: "\\mathrm{\\ddot{Y}}" },
        \u03AC: { text: "{\\'$\\alpha$}" },
        \u03AD: { math: "\\acute{\\epsilon}" },
        \u03AE: { math: "\\acute{\\eta}" },
        \u03AF: { math: "\\acute{\\iota}" },
        \u03B0: { math: "\\acute{\\ddot{\\upsilon}}" },
        \u03B1: { math: "\\alpha" },
        \u03B2: { math: "\\beta" },
        \u03B3: { math: "\\gamma" },
        \u03B4: { math: "\\delta" },
        \u03B5: { math: "\\epsilon" },
        \u03B6: { math: "\\zeta" },
        \u03B7: { math: "\\eta" },
        \u03B8: { math: "\\theta", text: "{\\texttheta}" },
        \u03B9: { math: "\\iota" },
        \u03BA: { math: "\\kappa" },
        \u03BB: { math: "\\lambda" },
        \u03BC: { math: "\\mu" },
        \u03BD: { math: "\\nu" },
        \u03BE: { math: "\\xi" },
        \u03BF: { math: "o" },
        \u03C0: { math: "\\pi" },
        \u03C1: { math: "\\rho" },
        \u03C2: { math: "\\varsigma" },
        \u03C3: { math: "\\sigma" },
        \u03C4: { math: "\\tau" },
        \u03C5: { math: "\\upsilon" },
        \u03C6: { math: "\\varphi" },
        \u03C7: { math: "\\chi" },
        \u03C8: { math: "\\psi" },
        \u03C9: { math: "\\omega" },
        \u03CA: { math: "\\ddot{\\iota}" },
        \u03CB: { math: "\\ddot{\\upsilon}" },
        \u03CC: { text: "{\\'o}" },
        \u03CD: { math: "\\acute{\\upsilon}" },
        \u03CE: { math: "\\acute{\\omega}" },
        \u03D0: { math: "\\varbeta", text: "\\Pisymbol{ppi022}{87}" },
        \u03D1: { math: "\\vartheta", text: "{\\textvartheta}" },
        \u03D2: { math: "\\Upsilon" },
        \u03D5: { math: "\\phi" },
        \u03D6: { math: "\\varpi" },
        "\u03D8": { math: "\\Qoppa" },
        "\u03D9": { math: "\\qoppa" },
        \u03DA: { math: "\\Stigma" },
        \u03DB: { math: "\\stigma" },
        \u03DC: { math: "\\Digamma" },
        \u03DD: { math: "\\digamma" },
        \u03DE: { math: "\\Koppa" },
        \u03DF: { math: "\\koppa" },
        \u03E0: { math: "\\Sampi" },
        \u03E1: { math: "\\sampi" },
        \u03F0: { math: "\\varkappa" },
        \u03F1: { math: "\\varrho" },
        "\u03F4": { math: "\\upvarTheta", text: "{\\textTheta}" },
        "\u03F5": { math: "\\epsilon" },
        "\u03F6": { math: "\\backepsilon" },
        \u0401: { text: "{\\cyrchar\\CYRYO}" },
        \u0402: { text: "{\\cyrchar\\CYRDJE}" },
        \u0403: { text: "{\\cyrchar{\\'\\CYRG}}" },
        \u0404: { text: "{\\cyrchar\\CYRIE}" },
        \u0405: { text: "{\\cyrchar\\CYRDZE}" },
        \u0406: { text: "{\\cyrchar\\CYRII}" },
        \u0407: { text: "{\\cyrchar\\CYRYI}" },
        \u0408: { text: "{\\cyrchar\\CYRJE}" },
        \u0409: { text: "{\\cyrchar\\CYRLJE}" },
        \u040A: { text: "{\\cyrchar\\CYRNJE}" },
        \u040B: { text: "{\\cyrchar\\CYRTSHE}" },
        \u040C: { text: "{\\cyrchar{\\'\\CYRK}}" },
        \u040E: { text: "{\\cyrchar\\CYRUSHRT}" },
        \u040F: { text: "{\\cyrchar\\CYRDZHE}" },
        \u0410: { text: "{\\cyrchar\\CYRA}" },
        \u0411: { text: "{\\cyrchar\\CYRB}" },
        \u0412: { text: "{\\cyrchar\\CYRV}" },
        \u0413: { text: "{\\cyrchar\\CYRG}" },
        \u0414: { text: "{\\cyrchar\\CYRD}" },
        \u0415: { text: "{\\cyrchar\\CYRE}" },
        \u0416: { text: "{\\cyrchar\\CYRZH}" },
        \u0417: { text: "{\\cyrchar\\CYRZ}" },
        \u0418: { text: "{\\cyrchar\\CYRI}" },
        \u0419: { text: "{\\cyrchar\\CYRISHRT}" },
        \u041A: { text: "{\\cyrchar\\CYRK}" },
        \u041B: { text: "{\\cyrchar\\CYRL}" },
        \u041C: { text: "{\\cyrchar\\CYRM}" },
        \u041D: { text: "{\\cyrchar\\CYRN}" },
        \u041E: { text: "{\\cyrchar\\CYRO}" },
        \u041F: { text: "{\\cyrchar\\CYRP}" },
        \u0420: { text: "{\\cyrchar\\CYRR}" },
        \u0421: { text: "{\\cyrchar\\CYRS}" },
        \u0422: { text: "{\\cyrchar\\CYRT}" },
        \u0423: { text: "{\\cyrchar\\CYRU}" },
        \u0424: { text: "{\\cyrchar\\CYRF}" },
        \u0425: { text: "{\\cyrchar\\CYRH}" },
        \u0426: { text: "{\\cyrchar\\CYRC}" },
        \u0427: { text: "{\\cyrchar\\CYRCH}" },
        \u0428: { text: "{\\cyrchar\\CYRSH}" },
        \u0429: { text: "{\\cyrchar\\CYRSHCH}" },
        \u042A: { text: "{\\cyrchar\\CYRHRDSN}" },
        \u042B: { text: "{\\cyrchar\\CYRERY}" },
        \u042C: { text: "{\\cyrchar\\CYRSFTSN}" },
        \u042D: { text: "{\\cyrchar\\CYREREV}" },
        \u042E: { text: "{\\cyrchar\\CYRYU}" },
        \u042F: { text: "{\\cyrchar\\CYRYA}" },
        \u0430: { text: "{\\cyrchar\\cyra}" },
        \u0431: { text: "{\\cyrchar\\cyrb}" },
        \u0432: { text: "{\\cyrchar\\cyrv}" },
        \u0433: { text: "{\\cyrchar\\cyrg}" },
        \u0434: { text: "{\\cyrchar\\cyrd}" },
        \u0435: { text: "{\\cyrchar\\cyre}" },
        \u0436: { text: "{\\cyrchar\\cyrzh}" },
        \u0437: { text: "{\\cyrchar\\cyrz}" },
        \u0438: { text: "{\\cyrchar\\cyri}" },
        \u0439: { text: "{\\cyrchar\\cyrishrt}" },
        \u043A: { text: "{\\cyrchar\\cyrk}" },
        \u043B: { text: "{\\cyrchar\\cyrl}" },
        \u043C: { text: "{\\cyrchar\\cyrm}" },
        \u043D: { text: "{\\cyrchar\\cyrn}" },
        \u043E: { text: "{\\cyrchar\\cyro}" },
        \u043F: { text: "{\\cyrchar\\cyrp}" },
        \u0440: { text: "{\\cyrchar\\cyrr}" },
        \u0441: { text: "{\\cyrchar\\cyrs}" },
        \u0442: { text: "{\\cyrchar\\cyrt}" },
        \u0443: { text: "{\\cyrchar\\cyru}" },
        \u0444: { text: "{\\cyrchar\\cyrf}" },
        \u0445: { text: "{\\cyrchar\\cyrh}" },
        \u0446: { text: "{\\cyrchar\\cyrc}" },
        \u0447: { text: "{\\cyrchar\\cyrch}" },
        \u0448: { text: "{\\cyrchar\\cyrsh}" },
        \u0449: { text: "{\\cyrchar\\cyrshch}" },
        \u044A: { text: "{\\cyrchar\\cyrhrdsn}" },
        \u044B: { text: "{\\cyrchar\\cyrery}" },
        \u044C: { text: "{\\cyrchar\\cyrsftsn}" },
        \u044D: { text: "{\\cyrchar\\cyrerev}" },
        \u044E: { text: "{\\cyrchar\\cyryu}" },
        \u044F: { text: "{\\cyrchar\\cyrya}" },
        \u0451: { text: "{\\cyrchar\\cyryo}" },
        \u0452: { text: "{\\cyrchar\\cyrdje}" },
        \u0453: { text: "{\\cyrchar{\\'\\cyrg}}" },
        \u0454: { text: "{\\cyrchar\\cyrie}" },
        \u0455: { text: "{\\cyrchar\\cyrdze}" },
        \u0456: { text: "{\\cyrchar\\cyrii}" },
        \u0457: { text: "{\\cyrchar\\cyryi}" },
        \u0458: { text: "{\\cyrchar\\cyrje}" },
        \u0459: { text: "{\\cyrchar\\cyrlje}" },
        \u045A: { text: "{\\cyrchar\\cyrnje}" },
        \u045B: { text: "{\\cyrchar\\cyrtshe}" },
        \u045C: { text: "{\\cyrchar{\\'\\cyrk}}" },
        \u045E: { text: "{\\cyrchar\\cyrushrt}" },
        \u045F: { text: "{\\cyrchar\\cyrdzhe}" },
        \u0460: { text: "{\\cyrchar\\CYROMEGA}" },
        \u0461: { text: "{\\cyrchar\\cyromega}" },
        \u0462: { text: "{\\cyrchar\\CYRYAT}" },
        \u0464: { text: "{\\cyrchar\\CYRIOTE}" },
        \u0465: { text: "{\\cyrchar\\cyriote}" },
        \u0466: { text: "{\\cyrchar\\CYRLYUS}" },
        \u0467: { text: "{\\cyrchar\\cyrlyus}" },
        \u0468: { text: "{\\cyrchar\\CYRIOTLYUS}" },
        \u0469: { text: "{\\cyrchar\\cyriotlyus}" },
        \u046A: { text: "{\\cyrchar\\CYRBYUS}" },
        \u046C: { text: "{\\cyrchar\\CYRIOTBYUS}" },
        \u046D: { text: "{\\cyrchar\\cyriotbyus}" },
        \u046E: { text: "{\\cyrchar\\CYRKSI}" },
        \u046F: { text: "{\\cyrchar\\cyrksi}" },
        \u0470: { text: "{\\cyrchar\\CYRPSI}" },
        \u0471: { text: "{\\cyrchar\\cyrpsi}" },
        \u0472: { text: "{\\cyrchar\\CYRFITA}" },
        \u0474: { text: "{\\cyrchar\\CYRIZH}" },
        \u0478: { text: "{\\cyrchar\\CYRUK}" },
        \u0479: { text: "{\\cyrchar\\cyruk}" },
        \u047A: { text: "{\\cyrchar\\CYROMEGARND}" },
        \u047B: { text: "{\\cyrchar\\cyromegarnd}" },
        \u047C: { text: "{\\cyrchar\\CYROMEGATITLO}" },
        \u047D: { text: "{\\cyrchar\\cyromegatitlo}" },
        \u047E: { text: "{\\cyrchar\\CYROT}" },
        \u047F: { text: "{\\cyrchar\\cyrot}" },
        \u0480: { text: "{\\cyrchar\\CYRKOPPA}" },
        \u0481: { text: "{\\cyrchar\\cyrkoppa}" },
        "\u0482": { text: "{\\cyrchar\\cyrthousands}" },
        "\u0488": { text: "{\\cyrchar\\cyrhundredthousands}" },
        "\u0489": { text: "{\\cyrchar\\cyrmillions}" },
        \u048C: { text: "{\\cyrchar\\CYRSEMISFTSN}" },
        \u048D: { text: "{\\cyrchar\\cyrsemisftsn}" },
        \u048E: { text: "{\\cyrchar\\CYRRTICK}" },
        \u048F: { text: "{\\cyrchar\\cyrrtick}" },
        \u0490: { text: "{\\cyrchar\\CYRGUP}" },
        \u0491: { text: "{\\cyrchar\\cyrgup}" },
        \u0492: { text: "{\\cyrchar\\CYRGHCRS}" },
        \u0493: { text: "{\\cyrchar\\cyrghcrs}" },
        \u0494: { text: "{\\cyrchar\\CYRGHK}" },
        \u0495: { text: "{\\cyrchar\\cyrghk}" },
        \u0496: { text: "{\\cyrchar\\CYRZHDSC}" },
        \u0497: { text: "{\\cyrchar\\cyrzhdsc}" },
        \u0498: { text: "{\\cyrchar\\CYRZDSC}" },
        \u0499: { text: "{\\cyrchar\\cyrzdsc}" },
        \u049A: { text: "{\\cyrchar\\CYRKDSC}" },
        \u049B: { text: "{\\cyrchar\\cyrkdsc}" },
        \u049C: { text: "{\\cyrchar\\CYRKVCRS}" },
        \u049D: { text: "{\\cyrchar\\cyrkvcrs}" },
        \u049E: { text: "{\\cyrchar\\CYRKHCRS}" },
        \u049F: { text: "{\\cyrchar\\cyrkhcrs}" },
        \u04A0: { text: "{\\cyrchar\\CYRKBEAK}" },
        \u04A1: { text: "{\\cyrchar\\cyrkbeak}" },
        \u04A2: { text: "{\\cyrchar\\CYRNDSC}" },
        \u04A3: { text: "{\\cyrchar\\cyrndsc}" },
        \u04A4: { text: "{\\cyrchar\\CYRNG}" },
        \u04A5: { text: "{\\cyrchar\\cyrng}" },
        \u04A6: { text: "{\\cyrchar\\CYRPHK}" },
        \u04A7: { text: "{\\cyrchar\\cyrphk}" },
        \u04A8: { text: "{\\cyrchar\\CYRABHHA}" },
        \u04A9: { text: "{\\cyrchar\\cyrabhha}" },
        \u04AA: { text: "{\\cyrchar\\CYRSDSC}" },
        \u04AB: { text: "{\\cyrchar\\cyrsdsc}" },
        \u04AC: { text: "{\\cyrchar\\CYRTDSC}" },
        \u04AD: { text: "{\\cyrchar\\cyrtdsc}" },
        \u04AE: { text: "{\\cyrchar\\CYRY}" },
        \u04AF: { text: "{\\cyrchar\\cyry}" },
        \u04B0: { text: "{\\cyrchar\\CYRYHCRS}" },
        \u04B1: { text: "{\\cyrchar\\cyryhcrs}" },
        \u04B2: { text: "{\\cyrchar\\CYRHDSC}" },
        \u04B3: { text: "{\\cyrchar\\cyrhdsc}" },
        \u04B4: { text: "{\\cyrchar\\CYRTETSE}" },
        \u04B5: { text: "{\\cyrchar\\cyrtetse}" },
        \u04B6: { text: "{\\cyrchar\\CYRCHRDSC}" },
        \u04B7: { text: "{\\cyrchar\\cyrchrdsc}" },
        \u04B8: { text: "{\\cyrchar\\CYRCHVCRS}" },
        \u04B9: { text: "{\\cyrchar\\cyrchvcrs}" },
        \u04BA: { text: "{\\cyrchar\\CYRSHHA}" },
        \u04BB: { text: "{\\cyrchar\\cyrshha}" },
        \u04BC: { text: "{\\cyrchar\\CYRABHCH}" },
        \u04BD: { text: "{\\cyrchar\\cyrabhch}" },
        \u04BE: { text: "{\\cyrchar\\CYRABHCHDSC}" },
        \u04BF: { text: "{\\cyrchar\\cyrabhchdsc}" },
        \u04C0: { text: "{\\cyrchar\\CYRpalochka}" },
        \u04C3: { text: "{\\cyrchar\\CYRKHK}" },
        \u04C4: { text: "{\\cyrchar\\cyrkhk}" },
        \u04C7: { text: "{\\cyrchar\\CYRNHK}" },
        \u04C8: { text: "{\\cyrchar\\cyrnhk}" },
        \u04CB: { text: "{\\cyrchar\\CYRCHLDSC}" },
        \u04CC: { text: "{\\cyrchar\\cyrchldsc}" },
        \u04D4: { text: "{\\cyrchar\\CYRAE}" },
        \u04D5: { text: "{\\cyrchar\\cyrae}" },
        \u04D8: { text: "{\\cyrchar\\CYRSCHWA}" },
        \u04D9: { text: "{\\cyrchar\\cyrschwa}" },
        \u04E0: { text: "{\\cyrchar\\CYRABHDZE}" },
        \u04E1: { text: "{\\cyrchar\\cyrabhdze}" },
        \u04E8: { text: "{\\cyrchar\\CYROTLD}" },
        \u04E9: { text: "{\\cyrchar\\cyrotld}" },
        "\u0871": { math: "\\\\backslash" },
        "\u1D43": { math: "^{a}", text: "\\textsuperscript{a}" },
        "\u1D47": { math: "^{b}", text: "\\textsuperscript{b}" },
        "\u1D48": { math: "^{d}", text: "\\textsuperscript{d}" },
        "\u1D49": { math: "^{e}", text: "\\textsuperscript{e}" },
        "\u1D4D": { math: "^{g}", text: "\\textsuperscript{g}" },
        "\u1D4F": { math: "^{k}", text: "\\textsuperscript{k}" },
        "\u1D50": { math: "^{m}", text: "\\textsuperscript{m}" },
        "\u1D52": { math: "^{o}", text: "\\textsuperscript{o}" },
        "\u1D56": { math: "^{p}", text: "\\textsuperscript{p}" },
        "\u1D57": { math: "^{t}", text: "\\textsuperscript{t}" },
        "\u1D58": { math: "^{u}", text: "\\textsuperscript{u}" },
        "\u1D5B": { math: "^{v}", text: "\\textsuperscript{v}" },
        "\u1D9C": { math: "^{c}", text: "\\textsuperscript{c}" },
        "\u1DA0": { math: "^{f}", text: "\\textsuperscript{f}" },
        "\u1DBB": { math: "^{z}", text: "\\textsuperscript{z}" },
        \u1E02: { text: "{\\.B}" },
        \u1E03: { text: "{\\.b}" },
        \u1E04: { text: "{\\d B}" },
        \u1E05: { text: "{\\d b}" },
        \u1E06: { text: "{\\b B}" },
        \u1E07: { text: "{\\b b}" },
        \u1E0A: { text: "{\\.D}" },
        \u1E0B: { text: "{\\.d}" },
        \u1E0C: { text: "{\\d D}" },
        \u1E0D: { text: "{\\d d}" },
        \u1E0E: { text: "{\\b D}" },
        \u1E0F: { text: "{\\b d}" },
        \u1E10: { text: "{\\c D}" },
        \u1E11: { text: "{\\c d}" },
        \u1E1C: { text: "{\\c{\\u{E}}}" },
        \u1E1D: { text: "{\\c{\\u{e}}}" },
        \u1E1E: { text: "{\\.F}" },
        \u1E1F: { text: "{\\.f}" },
        \u1E20: { text: "{\\=G}" },
        \u1E21: { text: "{\\=g}" },
        \u1E22: { text: "{\\.H}" },
        \u1E23: { text: "{\\.h}" },
        \u1E24: { text: "{\\d H}" },
        \u1E25: { text: "{\\d h}" },
        \u1E26: { text: '{\\"H}' },
        \u1E27: { text: '{\\"h}' },
        \u1E28: { text: "{\\c H}" },
        \u1E29: { text: "{\\c h}" },
        \u1E30: { text: "{\\'K}" },
        \u1E31: { text: "{\\'k}" },
        \u1E32: { text: "{\\d K}" },
        \u1E33: { text: "{\\d k}" },
        \u1E34: { text: "{\\b K}" },
        \u1E35: { text: "{\\b k}" },
        \u1E36: { text: "{\\d L}" },
        \u1E37: { text: "{\\d l}" },
        \u1E3A: { text: "{\\b L}" },
        \u1E3B: { text: "{\\b l}" },
        \u1E3E: { text: "{\\'M}" },
        \u1E3F: { text: "{\\'m}" },
        \u1E40: { text: "{\\.M}" },
        \u1E41: { text: "{\\.m}" },
        \u1E42: { text: "{\\d M}" },
        \u1E43: { text: "{\\d m}" },
        \u1E44: { text: "{\\.N}" },
        \u1E45: { text: "{\\.n}" },
        \u1E46: { text: "{\\d N}" },
        \u1E47: { text: "{\\d n}" },
        \u1E48: { text: "{\\b N}" },
        \u1E49: { text: "{\\b n}" },
        \u1E54: { text: "{\\'P}" },
        \u1E55: { text: "{\\'p}" },
        \u1E56: { text: "{\\.P}" },
        \u1E57: { text: "{\\.p}" },
        \u1E58: { text: "{\\.R}" },
        \u1E59: { text: "{\\.r}" },
        \u1E5A: { text: "{\\d R}" },
        \u1E5B: { text: "{\\d r}" },
        \u1E5E: { text: "{\\b R}" },
        \u1E5F: { text: "{\\b r}" },
        \u1E60: { text: "{\\.S}" },
        \u1E61: { text: "{\\.s}" },
        \u1E62: { text: "{\\d S}" },
        \u1E63: { text: "{\\d s}" },
        \u1E6A: { text: "{\\.T}" },
        \u1E6B: { text: "{\\.t}" },
        \u1E6C: { text: "{\\d T}" },
        \u1E6D: { text: "{\\d t}" },
        \u1E6E: { text: "{\\b T}" },
        \u1E6F: { text: "{\\b t}" },
        \u1E7C: { text: "{\\~V}" },
        \u1E7D: { text: "{\\~v}" },
        \u1E7E: { text: "{\\d V}" },
        \u1E7F: { text: "{\\d v}" },
        \u1E80: { text: "{\\`W}" },
        \u1E81: { text: "{\\`w}" },
        \u1E82: { text: "{\\'W}" },
        \u1E83: { text: "{\\'w}" },
        \u1E84: { text: '{\\"W}' },
        \u1E85: { text: '{\\"w}' },
        \u1E86: { text: "{\\.W}" },
        \u1E87: { text: "{\\.w}" },
        \u1E88: { text: "{\\d W}" },
        \u1E89: { text: "{\\d w}" },
        \u1E8A: { text: "{\\.X}" },
        \u1E8B: { text: "{\\.x}" },
        \u1E8C: { text: '{\\"X}' },
        \u1E8D: { text: '{\\"x}' },
        \u1E8E: { text: "{\\.Y}" },
        \u1E8F: { text: "{\\.y}" },
        \u1E90: { text: "{\\^Z}" },
        \u1E91: { text: "{\\^z}" },
        \u1E92: { text: "{\\d Z}" },
        \u1E93: { text: "{\\d z}" },
        \u1E94: { text: "{\\b Z}" },
        \u1E95: { text: "{\\b z}" },
        \u1E96: { text: "{\\b h}" },
        \u1E97: { text: '{\\"t}' },
        \u1E98: { text: "{\\r{w}}" },
        \u1E99: { text: "{\\r{y}}" },
        \u1EA0: { text: "{\\d A}" },
        \u1EA1: { text: "{\\d a}" },
        \u1EB8: { text: "{\\d E}" },
        \u1EB9: { text: "{\\d e}" },
        \u1EBC: { text: "{\\~E}" },
        \u1EBD: { text: "{\\~e}" },
        \u1ECA: { text: "{\\d I}" },
        \u1ECB: { text: "{\\d i}" },
        \u1ECC: { text: "{\\d O}" },
        \u1ECD: { text: "{\\d o}" },
        \u1EE4: { text: "{\\d U}" },
        \u1EE5: { text: "{\\d u}" },
        \u1EF2: { text: "{\\`Y}" },
        \u1EF3: { text: "{\\`y}" },
        \u1EF4: { text: "{\\d Y}" },
        \u1EF5: { text: "{\\d y}" },
        \u1EF8: { text: "{\\~Y}" },
        \u1EF9: { text: "{\\~y}" },
        "\u2000": { text: "\\hspace{0.6em}", space: true },
        "\u2001": { math: "\\quad", space: true },
        "\u2002": { text: "\\hspace{0.6em}", space: true },
        "\u2003": { math: "\\quad", space: true },
        "\u2004": { text: "\\;", space: true },
        "\u2005": { text: "\\hspace{0.25em}", space: true },
        "\u2006": { text: "\\hspace{0.166em}", space: true },
        "\u2007": { text: "\\hphantom{0}", space: true },
        "\u2008": { text: "\\hphantom{,}", space: true },
        "\u2009": { text: "\\,", space: true },
        "\u200A": { math: "\\mkern1mu", space: true },
        "\u200B": { text: "\\hspace{0pt}", space: true },
        "\u200C": { text: "{\\aftergroup\\ignorespaces}" },
        "\u2010": { text: "-" },
        "\u2011": { text: "-" },
        "\u2012": { text: "-" },
        "\u2013": { text: "{\\textendash}" },
        "\u2014": { text: "{\\textemdash}" },
        "\u2015": { math: "\\horizbar", text: "\\rule{1em}{1pt}" },
        "\u2016": { math: "\\Vert" },
        "\u2017": { math: "\\twolowline" },
        "\u2018": { text: "`" },
        "\u2019": { text: "'" },
        "\u201A": { text: "," },
        "\u201B": { math: "\\Elzreapos" },
        "\u201C": { text: "``" },
        "\u201D": { text: "''" },
        "\u201E": { text: ",," },
        "\u201F": { text: "{\\quotedblbase}" },
        "\u2020": { math: "\\dagger", text: "{\\textdagger}", textpackages: ["textcomp"] },
        "\u2021": { math: "\\ddagger", text: "{\\textdaggerdbl}", textpackages: ["textcomp"] },
        "\u2022": { math: "\\bullet", text: "{\\textbullet}", textpackages: ["textcomp"] },
        "\u2023": { text: ">" },
        "\u2024": { text: "." },
        "\u2025": { math: "\\enleadertwodots", text: ".." },
        "\u2026": { math: "\\ldots", text: "{\\ldots}" },
        "\u2027": { text: "-" },
        "\u202F": { text: "\\,", space: true },
        "\u2030": { text: "{\\textperthousand}", textpackages: ["textcomp"] },
        "\u2031": { text: "{\\textpertenthousand}", textpackages: ["textcomp"] },
        "\u2032": { math: "{'}" },
        "\u2033": { math: "{''}" },
        "\u2034": { math: "{'''}" },
        "\u2035": { math: "\\backprime" },
        "\u2036": { math: "\\backdprime" },
        "\u2037": { math: "\\backtrprime" },
        "\u2038": { math: "\\caretinsert" },
        "\u2039": { text: "{\\guilsinglleft}" },
        "\u203A": { text: "{\\guilsinglright}" },
        "\u203C": { math: "\\Exclam" },
        "\u203E": { text: "-" },
        "\u2043": { math: "\\hyphenbullet" },
        "\u2044": { math: "\\fracslash" },
        "\u2047": { math: "\\Question" },
        "\u2048": { text: "?!" },
        "\u2049": { text: "!?" },
        "\u204A": { text: "7" },
        "\u2050": { math: "\\closure" },
        "\u2057": { math: "''''" },
        "\u205F": { math: "\\:", space: true, text: "\\:" },
        "\u2060": { text: "{\\nolinebreak}" },
        "\u2070": { math: "^{0}" },
        "\u2071": { math: "^{i}", text: "\\textsuperscript{i}" },
        "\u2074": { math: "^{4}" },
        "\u2075": { math: "^{5}" },
        "\u2076": { math: "^{6}" },
        "\u2077": { math: "^{7}" },
        "\u2078": { math: "^{8}" },
        "\u2079": { math: "^{9}" },
        "\u207A": { math: "^{+}" },
        "\u207B": { math: "^{-}" },
        "\u207C": { math: "^{=}" },
        "\u207D": { math: "^{(}" },
        "\u207E": { math: "^{)}" },
        \u207F: { math: "^{n}", text: "\\textsuperscript{n}" },
        "\u2080": { math: "_{0}" },
        "\u2081": { math: "_{1}" },
        "\u2082": { math: "_{2}" },
        "\u2083": { math: "_{3}" },
        "\u2084": { math: "_{4}" },
        "\u2085": { math: "_{5}" },
        "\u2086": { math: "_{6}" },
        "\u2087": { math: "_{7}" },
        "\u2088": { math: "_{8}" },
        "\u2089": { math: "_{9}" },
        "\u208A": { math: "_{+}" },
        "\u208B": { math: "_{-}" },
        "\u208C": { math: "_{=}" },
        "\u208D": { math: "_{(}" },
        "\u208E": { math: "_{)}" },
        "\u2090": { math: "_{a}", text: "\\textsubscript{a}" },
        "\u2091": { math: "_{e}", text: "\\textsubscript{e}" },
        "\u2092": { math: "_{o}", text: "\\textsubscript{o}" },
        "\u2093": { math: "_{x}", text: "\\textsubscript{x}" },
        "\u2094": { text: "\\textsubscript{\\textschwa}", textpackages: ["tipa"] },
        "\u2095": { math: "_{h}", text: "\\textsubscript{h}" },
        "\u2096": { math: "_{k}", text: "\\textsubscript{k}" },
        "\u2097": { math: "_{l}", text: "\\textsubscript{l}" },
        "\u2098": { math: "_{m}", text: "\\textsubscript{m}" },
        "\u2099": { math: "_{n}", text: "\\textsubscript{n}" },
        "\u209A": { math: "_{p}", text: "\\textsubscript{p}" },
        "\u209B": { math: "_{s}", text: "\\textsubscript{s}" },
        "\u209C": { math: "_{t}", text: "\\textsubscript{t}" },
        "\u20A7": { text: "\\ensuremath{\\Elzpes}" },
        "\u20AC": { math: "\\euro", text: "{\\texteuro}" },
        "\u20D0": { math: "\\lvec" },
        "\u20D1": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
        "\u20D2": { math: "\\vertoverlay" },
        "\u20D6": { math: "\\LVec" },
        "\u20D7": { math: "\\vec" },
        "\u20DB": { math: "\\dddot" },
        "\u20DC": { math: "\\ddddot" },
        "\u20DD": { math: "\\enclosecircle" },
        "\u20DE": { math: "\\enclosesquare" },
        "\u20DF": { math: "\\enclosediamond" },
        "\u20E1": { math: "\\overleftrightarrow" },
        "\u20E4": { math: "\\enclosetriangle" },
        "\u20E7": { math: "\\annuity" },
        "\u20E8": { math: "\\threeunderdot" },
        "\u20E9": { math: "\\widebridgeabove" },
        "\u20EC": { math: "\\underrightharpoondown" },
        "\u20ED": { math: "\\underleftharpoondown" },
        "\u20EE": { math: "\\underleftarrow" },
        "\u20EF": { math: "\\underrightarrow" },
        "\u20F0": { math: "\\asteraccent" },
        "\u2100": { text: "a/c" },
        "\u2101": { text: "a/s" },
        \u2102: { math: "\\mathbb{C}" },
        "\u2103": { text: "{\\textcelsius}" },
        "\u2105": { text: "c/o" },
        "\u2106": { text: "c/u" },
        \u2107: { math: "\\Euler" },
        "\u2109": { text: "F" },
        \u210A: { math: "\\mathscr{g}" },
        \u210B: { math: "\\mathscr{H}" },
        \u210C: { math: "\\mathfrak{H}" },
        \u210D: { math: "\\mathbb{H}" },
        \u210E: { math: "\\Planckconst" },
        \u210F: { math: "\\hslash" },
        \u2110: { math: "\\mathscr{I}" },
        \u2111: { math: "\\mathfrak{I}" },
        \u2112: { math: "\\mathscr{L}" },
        \u2113: { math: "\\mathscr{l}" },
        \u2115: { math: "\\mathbb{N}" },
        "\u2116": { text: "{\\cyrchar\\textnumero}" },
        "\u2117": { text: "{\\textcircledP}" },
        "\u2118": { math: "\\wp" },
        \u2119: { math: "\\mathbb{P}" },
        \u211A: { math: "\\mathbb{Q}" },
        \u211B: { math: "\\mathscr{R}" },
        \u211C: { math: "\\mathfrak{R}" },
        \u211D: { math: "\\mathbb{R}" },
        "\u211E": { math: "\\Elzxrat" },
        "\u2120": { text: "{\\textservicemark}" },
        "\u2121": { text: "TEL" },
        "\u2122": { text: "{\\texttrademark}", textpackages: ["textcomp"] },
        \u2124: { math: "\\mathbb{Z}" },
        \u2126: { math: "\\Omega" },
        "\u2127": { math: "\\mho" },
        \u2128: { math: "\\mathfrak{Z}" },
        "\u2129": { text: "{\\textriota}" },
        \u212A: { text: "K" },
        \u212B: { math: "\\Angstroem", text: "{\\AA}" },
        \u212C: { math: "\\mathscr{B}" },
        \u212D: { math: "\\mathfrak{C}" },
        "\u212E": { text: "{\\textestimated}" },
        \u212F: { math: "\\mathscr{e}" },
        \u2130: { math: "\\mathscr{E}" },
        \u2131: { math: "\\mathscr{F}" },
        "\u2132": { math: "\\Finv" },
        \u2133: { math: "\\mathscr{M}" },
        \u2134: { math: "\\mathscr{o}" },
        \u2135: { math: "\\aleph" },
        \u2136: { math: "\\beth" },
        \u2137: { math: "\\gimel" },
        \u2138: { math: "\\daleth" },
        "\u213C": { math: "\\mathbb{\\pi}" },
        "\u213D": { math: "\\mathbb{\\gamma}" },
        "\u213E": { math: "\\mathbb{\\Gamma}" },
        "\u213F": { math: "\\mathbb{\\Pi}" },
        "\u2140": { math: "\\mathbb{\\Sigma}" },
        "\u2141": { math: "\\Game" },
        "\u2142": { math: "\\sansLturned" },
        "\u2143": { math: "\\sansLmirrored" },
        "\u2144": { math: "\\Yup" },
        "\u2145": { math: "\\CapitalDifferentialD" },
        "\u2146": { math: "\\DifferentialD" },
        "\u2147": { math: "\\ExponetialE" },
        "\u2148": { math: "\\ComplexI" },
        "\u2149": { math: "\\ComplexJ" },
        "\u214A": { math: "\\PropertyLine" },
        "\u214B": { math: "\\invamp" },
        "\u2150": { math: "\\frac{1}{7}" },
        "\u2151": { math: "\\frac{1}{9}" },
        "\u2152": { math: "\\frac{1}{10}" },
        "\u2153": { math: "\\frac{1}{3}" },
        "\u2154": { math: "\\frac{2}{3}" },
        "\u2155": { math: "\\frac{1}{5}" },
        "\u2156": { math: "\\frac{2}{5}" },
        "\u2157": { math: "\\frac{3}{5}" },
        "\u2158": { math: "\\frac{4}{5}" },
        "\u2159": { math: "\\frac{1}{6}" },
        "\u215A": { math: "\\frac{5}{6}" },
        "\u215B": { math: "\\frac{1}{8}" },
        "\u215C": { math: "\\frac{3}{8}" },
        "\u215D": { math: "\\frac{5}{8}" },
        "\u215E": { math: "\\frac{7}{8}" },
        "\u215F": { math: "\\frac{1}" },
        "\u2160": { text: "I" },
        "\u2161": { text: "II" },
        "\u2162": { text: "III" },
        "\u2163": { text: "IV" },
        "\u2164": { text: "V" },
        "\u2165": { text: "VI" },
        "\u2166": { text: "VII" },
        "\u2167": { text: "VIII" },
        "\u2168": { text: "IX" },
        "\u2169": { text: "X" },
        "\u216A": { text: "XI" },
        "\u216B": { text: "XII" },
        "\u216C": { text: "L" },
        "\u216D": { text: "C" },
        "\u216E": { text: "D" },
        "\u216F": { text: "M" },
        "\u2170": { text: "i" },
        "\u2171": { text: "ii" },
        "\u2172": { text: "iii" },
        "\u2173": { text: "iv" },
        "\u2174": { text: "v" },
        "\u2175": { text: "vi" },
        "\u2176": { text: "vii" },
        "\u2177": { text: "viii" },
        "\u2178": { text: "ix" },
        "\u2179": { text: "x" },
        "\u217A": { text: "xi" },
        "\u217B": { text: "xii" },
        "\u217C": { text: "l" },
        "\u217D": { text: "c" },
        "\u217E": { text: "d" },
        "\u217F": { text: "m" },
        "\u2189": { math: "\\frac{0}{3}" },
        "\u2190": { math: "\\leftarrow" },
        "\u2191": { math: "\\uparrow" },
        "\u2192": { math: "\\rightarrow", text: "{\\textrightarrow}", textpackages: ["textcomp"] },
        "\u2193": { math: "\\downarrow" },
        "\u2194": { math: "\\leftrightarrow" },
        "\u2195": { math: "\\updownarrow" },
        "\u2196": { math: "\\nwarrow" },
        "\u2197": { math: "\\nearrow" },
        "\u2198": { math: "\\searrow" },
        "\u2199": { math: "\\swarrow" },
        "\u219A": { math: "\\nleftarrow" },
        "\u219B": { math: "\\nrightarrow" },
        "\u219C": { math: "\\arrowwaveleft" },
        "\u219D": { math: "\\arrowwaveright" },
        "\u219E": { math: "\\twoheadleftarrow" },
        "\u219F": { math: "\\twoheaduparrow" },
        "\u21A0": { math: "\\twoheadrightarrow" },
        "\u21A1": { math: "\\twoheaddownarrow" },
        "\u21A2": { math: "\\leftarrowtail" },
        "\u21A3": { math: "\\rightarrowtail" },
        "\u21A4": { math: "\\mapsfrom" },
        "\u21A5": { math: "\\MapsUp" },
        "\u21A6": { math: "\\mapsto" },
        "\u21A7": { math: "\\MapsDown" },
        "\u21A8": { math: "\\updownarrowbar" },
        "\u21A9": { math: "\\hookleftarrow" },
        "\u21AA": { math: "\\hookrightarrow" },
        "\u21AB": { math: "\\looparrowleft" },
        "\u21AC": { math: "\\looparrowright" },
        "\u21AD": { math: "\\leftrightsquigarrow" },
        "\u21AE": { math: "\\nleftrightarrow" },
        "\u21AF": { math: "\\lightning" },
        "\u21B0": { math: "\\Lsh" },
        "\u21B1": { math: "\\Rsh" },
        "\u21B2": { math: "\\dlsh" },
        "\u21B3": { text: "\\reflectbox{\\carriagereturn}", textpackages: ["graphics", "unicode-math"] },
        "\u21B4": { math: "\\linefeed" },
        "\u21B5": { math: "\\carriagereturn" },
        "\u21B6": { math: "\\curvearrowleft" },
        "\u21B7": { math: "\\curvearrowright" },
        "\u21B8": { math: "\\barovernorthwestarrow" },
        "\u21B9": { math: "\\barleftarrowrightarrowba" },
        "\u21BA": { math: "\\circlearrowleft" },
        "\u21BB": { math: "\\circlearrowright" },
        "\u21BC": { math: "\\leftharpoonup" },
        "\u21BD": { math: "\\leftharpoondown" },
        "\u21BE": { math: "\\upharpoonright" },
        "\u21BF": { math: "\\upharpoonleft" },
        "\u21C0": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
        "\u21C1": { math: "\\rightharpoondown" },
        "\u21C2": { math: "\\downharpoonright" },
        "\u21C3": { math: "\\downharpoonleft" },
        "\u21C4": { math: "\\rightleftarrows" },
        "\u21C5": { math: "\\dblarrowupdown" },
        "\u21C6": { math: "\\leftrightarrows" },
        "\u21C7": { math: "\\leftleftarrows" },
        "\u21C8": { math: "\\upuparrows" },
        "\u21C9": { math: "\\rightrightarrows" },
        "\u21CA": { math: "\\downdownarrows" },
        "\u21CB": { math: "\\leftrightharpoons" },
        "\u21CC": { math: "\\rightleftharpoons" },
        "\u21CD": { math: "\\nLeftarrow" },
        "\u21CE": { math: "\\nLeftrightarrow" },
        "\u21CF": { math: "\\nRightarrow" },
        "\u21D0": { math: "\\Leftarrow" },
        "\u21D1": { math: "\\Uparrow" },
        "\u21D2": { math: "\\Rightarrow" },
        "\u21D3": { math: "\\Downarrow" },
        "\u21D4": { math: "\\Leftrightarrow" },
        "\u21D5": { math: "\\Updownarrow" },
        "\u21D6": { math: "\\Nwarrow" },
        "\u21D7": { math: "\\Nearrow" },
        "\u21D8": { math: "\\Searrow" },
        "\u21D9": { math: "\\Swarrow" },
        "\u21DA": { math: "\\Lleftarrow" },
        "\u21DB": { math: "\\Rrightarrow" },
        "\u21DC": { math: "\\leftsquigarrow" },
        "\u21DD": { math: "\\rightsquigarrow" },
        "\u21DE": { math: "\\nHuparrow" },
        "\u21DF": { math: "\\nHdownarrow" },
        "\u21E0": { math: "\\dashleftarrow" },
        "\u21E1": { math: "\\updasharrow" },
        "\u21E2": { math: "\\dashrightarrow" },
        "\u21E3": { math: "\\downdasharrow" },
        "\u21E4": { math: "\\LeftArrowBar" },
        "\u21E5": { math: "\\RightArrowBar" },
        "\u21E6": { math: "\\leftwhitearrow" },
        "\u21E7": { math: "\\upwhitearrow" },
        "\u21E8": { math: "\\rightwhitearrow" },
        "\u21E9": { math: "\\downwhitearrow" },
        "\u21EA": { math: "\\whitearrowupfrombar" },
        "\u21F4": { math: "\\circleonrightarrow" },
        "\u21F5": { math: "\\DownArrowUpArrow" },
        "\u21F6": { math: "\\rightthreearrows" },
        "\u21F7": { math: "\\nvleftarrow" },
        "\u21F8": { math: "\\pfun" },
        "\u21F9": { math: "\\nvleftrightarrow" },
        "\u21FA": { math: "\\nVleftarrow" },
        "\u21FB": { math: "\\ffun" },
        "\u21FC": { math: "\\nVleftrightarrow" },
        "\u21FD": { math: "\\leftarrowtriangle" },
        "\u21FE": { math: "\\rightarrowtriangle" },
        "\u21FF": { math: "\\leftrightarrowtriangle" },
        "\u2200": { math: "\\forall" },
        "\u2201": { math: "\\complement" },
        "\u2202": { math: "\\partial" },
        "\u2203": { math: "\\exists" },
        "\u2204": { math: "\\nexists" },
        "\u2205": { math: "\\varnothing" },
        "\u2206": { math: "\\increment" },
        "\u2207": { math: "\\nabla" },
        "\u2208": { math: "\\in" },
        "\u2209": { math: "\\not\\in" },
        "\u220A": { math: "\\smallin" },
        "\u220B": { math: "\\ni" },
        "\u220C": { math: "\\not\\ni" },
        "\u220D": { math: "\\smallni" },
        "\u220E": { math: "\\QED" },
        "\u220F": { math: "\\prod" },
        "\u2210": { math: "\\coprod" },
        "\u2211": { math: "\\sum" },
        "\u2212": { math: "-", text: "-" },
        "\u2213": { math: "\\mp" },
        "\u2214": { math: "\\dotplus" },
        "\u2215": { text: "/" },
        "\u2216": { math: "\\setminus" },
        "\u2217": { math: "{_\\ast}" },
        "\u2218": { math: "\\circ" },
        "\u2219": { math: "\\bullet" },
        "\u221A": { math: "\\surd" },
        "\u221B": { math: "\\sqrt[3]" },
        "\u221C": { math: "\\sqrt[4]" },
        "\u221D": { math: "\\propto" },
        "\u221E": { math: "\\infty" },
        "\u221F": { math: "\\rightangle" },
        "\u2220": { math: "\\angle" },
        "\u2221": { math: "\\measuredangle" },
        "\u2222": { math: "\\sphericalangle" },
        "\u2223": { math: "\\mid" },
        "\u2224": { math: "\\nmid" },
        "\u2225": { math: "\\parallel" },
        "\u2226": { math: "\\nparallel" },
        "\u2227": { math: "\\wedge" },
        "\u2228": { math: "\\vee" },
        "\u2229": { math: "\\cap" },
        "\u222A": { math: "\\cup" },
        "\u222B": { math: "\\int" },
        "\u222C": { math: "{\\int\\!\\int}" },
        "\u222D": { math: "{\\int\\!\\int\\!\\int}" },
        "\u222E": { math: "\\oint" },
        "\u222F": { math: "\\surfintegral" },
        "\u2230": { math: "\\volintegral" },
        "\u2231": { math: "\\clwintegral" },
        "\u2232": { math: "\\lcirclerightint", mathpackages: ["MnSymbol"] },
        "\u2233": { math: "\\rcirclerightint", mathpackages: ["MnSymbol"] },
        "\u2234": { math: "\\therefore" },
        "\u2235": { math: "\\because" },
        "\u2236": { math: ":" },
        "\u2237": { math: "\\Colon" },
        "\u2238": { math: "\\dotdiv", mathpackages: ["mathabx"] },
        "\u2239": { math: "\\eqcolon" },
        "\u223A": { math: "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" },
        "\u223B": { math: "\\homothetic" },
        "\u223C": { math: "\\sim" },
        "\u223D": { math: "\\backsim" },
        "\u223E": { math: "\\lazysinv" },
        "\u223F": { math: "\\AC" },
        "\u2240": { math: "\\wr" },
        "\u2241": { math: "\\not\\sim" },
        "\u2242": { math: "\\texteqsim", mathpackages: ["xecjk"] },
        "\u2242\u0338": { math: "\\NotEqualTilde" },
        "\u2243": { math: "\\simeq" },
        "\u2244": { math: "\\not\\simeq" },
        "\u2245": { math: "\\cong" },
        "\u2246": { math: "\\approxnotequal" },
        "\u2247": { math: "\\not\\cong" },
        "\u2248": { math: "\\approx" },
        "\u2249": { math: "\\not\\approx" },
        "\u224A": { math: "\\approxeq" },
        "\u224B": { math: "\\tildetrpl" },
        "\u224B\u0338": { math: "\\not\\apid" },
        "\u224C": { math: "\\allequal" },
        "\u224D": { math: "\\asymp" },
        "\u224E": { math: "\\Bumpeq" },
        "\u224E\u0338": { math: "\\NotHumpDownHump" },
        "\u224F": { math: "\\bumpeq" },
        "\u224F\u0338": { math: "\\NotHumpEqual" },
        "\u2250": { math: "\\doteq" },
        "\u2250\u0338": { math: "\\not\\doteq" },
        "\u2251": { math: "\\doteqdot" },
        "\u2252": { math: "\\fallingdotseq" },
        "\u2253": { math: "\\risingdotseq" },
        "\u2254": { math: "\\coloneq", text: ":=" },
        "\u2255": { math: "=:" },
        "\u2256": { math: "\\eqcirc" },
        "\u2257": { math: "\\circeq" },
        "\u2258": { math: "\\arceq" },
        "\u2259": { math: "\\estimates" },
        "\u225B": { math: "\\starequal" },
        "\u225C": { math: "\\triangleq" },
        "\u225D": { math: "\\eqdef" },
        "\u225E": { math: "\\measeq" },
        "\u2260": { math: "\\neq" },
        "\u2261": { math: "\\equiv" },
        "\u2262": { math: "\\not\\equiv" },
        "\u2263": { math: "\\Equiv" },
        "\u2264": { math: "\\leq" },
        "\u2265": { math: "\\geq" },
        "\u2266": { math: "\\leqq" },
        "\u2267": { math: "\\geqq" },
        "\u2268": { math: "\\lneqq" },
        "\u2268\uFE00": { math: "\\lvertneqq" },
        "\u2269": { math: "\\gneqq" },
        "\u2269\uFE00": { math: "\\gvertneqq" },
        "\u226A": { math: "\\ll" },
        "\u226A\u0338": { math: "\\NotLessLess" },
        "\u226B": { math: "\\gg" },
        "\u226B\u0338": { math: "\\NotGreaterGreater" },
        "\u226C": { math: "\\between" },
        "\u226D": { math: "{\\not\\kern-0.3em\\times}" },
        "\u226E": { math: "\\not<" },
        "\u226F": { math: "\\not>" },
        "\u2270": { math: "\\not\\leq" },
        "\u2271": { math: "\\not\\geq" },
        "\u2272": { math: "\\lessequivlnt" },
        "\u2273": { math: "\\greaterequivlnt" },
        "\u2276": { math: "\\lessgtr" },
        "\u2277": { math: "\\gtrless" },
        "\u2278": { math: "\\notlessgreater" },
        "\u2279": { math: "\\notgreaterless" },
        "\u227A": { math: "\\prec" },
        "\u227B": { math: "\\succ" },
        "\u227C": { math: "\\preccurlyeq" },
        "\u227D": { math: "\\succcurlyeq" },
        "\u227E": { math: "\\precapprox" },
        "\u227E\u0338": { math: "\\NotPrecedesTilde" },
        "\u227F": { math: "\\succapprox" },
        "\u227F\u0338": { math: "\\NotSucceedsTilde" },
        "\u2280": { math: "\\not\\prec" },
        "\u2281": { math: "\\not\\succ" },
        "\u2282": { math: "\\subset" },
        "\u2283": { math: "\\supset" },
        "\u2284": { math: "\\not\\subset" },
        "\u2285": { math: "\\not\\supset" },
        "\u2286": { math: "\\subseteq" },
        "\u2287": { math: "\\supseteq" },
        "\u2288": { math: "\\not\\subseteq" },
        "\u2289": { math: "\\not\\supseteq" },
        "\u228A": { math: "\\subsetneq" },
        "\u228A\uFE00": { math: "\\varsubsetneqq" },
        "\u228B": { math: "\\supsetneq" },
        "\u228B\uFE00": { math: "\\varsupsetneq" },
        "\u228C": { math: "\\cupleftarrow" },
        "\u228D": { math: "\\cupdot" },
        "\u228E": { math: "\\uplus" },
        "\u228F": { math: "\\sqsubset" },
        "\u228F\u0338": { math: "\\NotSquareSubset" },
        "\u2290": { math: "\\sqsupset" },
        "\u2290\u0338": { math: "\\NotSquareSuperset" },
        "\u2291": { math: "\\sqsubseteq" },
        "\u2292": { math: "\\sqsupseteq" },
        "\u2293": { math: "\\sqcap" },
        "\u2294": { math: "\\sqcup" },
        "\u2295": { math: "\\oplus" },
        "\u2296": { math: "\\ominus" },
        "\u2297": { math: "\\otimes" },
        "\u2298": { math: "\\oslash" },
        "\u2299": { math: "\\odot" },
        "\u229A": { math: "\\circledcirc" },
        "\u229B": { math: "\\circledast" },
        "\u229C": { math: "\\circledequal" },
        "\u229D": { math: "\\circleddash" },
        "\u229E": { math: "\\boxplus" },
        "\u229F": { math: "\\boxminus" },
        "\u22A0": { math: "\\boxtimes" },
        "\u22A1": { math: "\\boxdot" },
        "\u22A2": { math: "\\vdash" },
        "\u22A3": { math: "\\dashv" },
        "\u22A4": { math: "\\top" },
        "\u22A5": { math: "\\perp" },
        "\u22A6": { math: "\\assert" },
        "\u22A7": { math: "\\truestate" },
        "\u22A8": { math: "\\forcesextra" },
        "\u22A9": { math: "\\Vdash" },
        "\u22AA": { math: "\\Vvdash" },
        "\u22AB": { math: "\\VDash" },
        "\u22AC": { math: "\\nvdash" },
        "\u22AD": { math: "\\nvDash" },
        "\u22AE": { math: "\\nVdash" },
        "\u22AF": { math: "\\nVDash" },
        "\u22B0": { math: "\\prurel" },
        "\u22B1": { math: "\\scurel" },
        "\u22B2": { math: "\\vartriangleleft" },
        "\u22B3": { math: "\\vartriangleright" },
        "\u22B4": { math: "\\trianglelefteq" },
        "\u22B5": { math: "\\trianglerighteq" },
        "\u22B6": { math: "\\original" },
        "\u22B7": { math: "\\image" },
        "\u22B8": { math: "\\multimap" },
        "\u22B9": { math: "\\hermitconjmatrix" },
        "\u22BA": { math: "\\intercal" },
        "\u22BB": { math: "\\veebar" },
        "\u22BC": { math: "\\barwedge" },
        "\u22BD": { math: "\\barvee" },
        "\u22BE": { math: "\\rightanglearc" },
        "\u22BF": { math: "\\varlrtriangle" },
        "\u22C2": { math: "\\bigcap" },
        "\u22C3": { math: "\\bigcup" },
        "\u22C4": { math: "\\diamond" },
        "\u22C5": { math: "\\cdot" },
        "\u22C6": { math: "\\star" },
        "\u22C7": { math: "\\divideontimes" },
        "\u22C8": { math: "\\bowtie" },
        "\u22C9": { math: "\\ltimes" },
        "\u22CA": { math: "\\rtimes" },
        "\u22CB": { math: "\\leftthreetimes" },
        "\u22CC": { math: "\\rightthreetimes" },
        "\u22CD": { math: "\\backsimeq" },
        "\u22CE": { math: "\\curlyvee" },
        "\u22CF": { math: "\\curlywedge" },
        "\u22D0": { math: "\\Subset" },
        "\u22D1": { math: "\\Supset" },
        "\u22D2": { math: "\\Cap" },
        "\u22D3": { math: "\\Cup" },
        "\u22D4": { math: "\\pitchfork" },
        "\u22D5": { math: "\\hash" },
        "\u22D6": { math: "\\lessdot" },
        "\u22D7": { math: "\\gtrdot" },
        "\u22D8": { math: "\\verymuchless" },
        "\u22D9": { math: "\\verymuchgreater" },
        "\u22DA": { math: "\\lesseqgtr" },
        "\u22DB": { math: "\\gtreqless" },
        "\u22DC": { math: "\\eqless" },
        "\u22DD": { math: "\\eqgtr" },
        "\u22DE": { math: "\\curlyeqprec" },
        "\u22DF": { math: "\\curlyeqsucc" },
        "\u22E0": { math: "\\npreceq" },
        "\u22E1": { math: "\\nsucceq" },
        "\u22E2": { math: "\\not\\sqsubseteq" },
        "\u22E3": { math: "\\not\\sqsupseteq" },
        "\u22E4": { math: "\\sqsubsetneq" },
        "\u22E5": { math: "\\Elzsqspne" },
        "\u22E6": { math: "\\lnsim" },
        "\u22E7": { math: "\\gnsim" },
        "\u22E8": { math: "\\precedesnotsimilar" },
        "\u22E9": { math: "\\succnsim" },
        "\u22EA": { math: "\\ntriangleleft" },
        "\u22EB": { math: "\\ntriangleright" },
        "\u22EC": { math: "\\ntrianglelefteq" },
        "\u22ED": { math: "\\ntrianglerighteq" },
        "\u22EE": { math: "\\vdots" },
        "\u22EF": { math: "\\cdots" },
        "\u22F0": { math: "\\upslopeellipsis" },
        "\u22F1": { math: "\\downslopeellipsis" },
        "\u22F2": { math: "\\disin" },
        "\u22F3": { math: "\\varisins" },
        "\u22F4": { math: "\\isins" },
        "\u22F5": { math: "\\isindot" },
        "\u22F6": { math: "\\barin" },
        "\u22F7": { math: "\\isinobar" },
        "\u22F8": { math: "\\isinvb" },
        "\u22F9": { math: "\\isinE" },
        "\u22FA": { math: "\\nisd" },
        "\u22FB": { math: "\\varnis" },
        "\u22FC": { math: "\\nis" },
        "\u22FD": { math: "\\varniobar" },
        "\u22FE": { math: "\\niobar" },
        "\u22FF": { math: "\\bagmember" },
        "\u2300": { math: "\\diameter" },
        "\u2302": { math: "\\house" },
        "\u2305": { math: "\\varbarwedge", text: "{\\barwedge}" },
        "\u2306": { math: "\\perspcorrespond" },
        "\u2308": { math: "\\lceil" },
        "\u2309": { math: "\\rceil" },
        "\u230A": { math: "\\lfloor" },
        "\u230B": { math: "\\rfloor" },
        "\u2310": { math: "\\invneg" },
        "\u2311": { math: "\\wasylozenge" },
        "\u2312": { math: "\\profline" },
        "\u2313": { math: "\\profsurf" },
        "\u2315": { math: "\\recorder" },
        "\u2316": { math: '{\\mathchar"2208}' },
        "\u2317": { math: "\\viewdata" },
        "\u2319": { math: "\\turnednot" },
        "\u231C": { math: "\\ulcorner" },
        "\u231D": { math: "\\urcorner" },
        "\u231E": { math: "\\llcorner" },
        "\u231F": { math: "\\lrcorner" },
        "\u2320": { math: "\\inttop" },
        "\u2321": { math: "\\intbottom" },
        "\u2322": { math: "\\frown" },
        "\u2323": { math: "\\smile" },
        "\u2329": { math: "\\langle" },
        "\u232A": { math: "\\rangle" },
        "\u232C": { math: "\\varhexagonlrbonds" },
        "\u2332": { math: "\\conictaper" },
        "\u2336": { math: "\\topbot" },
        "\u2339": { math: "\\APLinv" },
        "\u233F": { math: "\\notslash" },
        "\u2340": { math: "\\notbackslash" },
        "\u2347": { math: "\\APLleftarrowbox" },
        "\u2348": { math: "\\APLrightarrowbox" },
        "\u2349": { math: "\\invdiameter" },
        "\u2350": { math: "\\APLuparrowbox" },
        "\u2353": { math: "\\APLboxupcaret" },
        "\u2357": { math: "\\APLdownarrowbox" },
        "\u235D": { math: "\\APLcomment" },
        "\u235E": { math: "\\APLinput" },
        "\u235F": { math: "\\APLlog" },
        "\u2370": { math: "\\APLboxquestion" },
        "\u237C": { math: "\\rangledownzigzagarrow" },
        "\u2394": { math: "\\hexagon" },
        "\u239B": { math: "\\lparenuend" },
        "\u239C": { math: "\\lparenextender" },
        "\u239D": { math: "\\lparenlend" },
        "\u239E": { math: "\\rparenuend" },
        "\u239F": { math: "\\rparenextender" },
        "\u23A0": { math: "\\rparenlend" },
        "\u23A1": { math: "\\lbrackuend" },
        "\u23A2": { math: "\\lbrackextender" },
        "\u23A3": { math: "\\Elzdlcorn" },
        "\u23A4": { math: "\\rbrackuend" },
        "\u23A5": { math: "\\rbrackextender" },
        "\u23A6": { math: "\\rbracklend" },
        "\u23A7": { math: "\\lbraceuend" },
        "\u23A8": { math: "\\lbracemid" },
        "\u23A9": { math: "\\lbracelend" },
        "\u23AA": { math: "\\vbraceextender" },
        "\u23AB": { math: "\\rbraceuend" },
        "\u23AC": { math: "\\rbracemid" },
        "\u23AD": { math: "\\rbracelend" },
        "\u23AE": { math: "\\intextender" },
        "\u23AF": { math: "\\harrowextender" },
        "\u23B0": { math: "\\lmoustache" },
        "\u23B1": { math: "\\rmoustache" },
        "\u23B2": { math: "\\sumtop" },
        "\u23B3": { math: "\\sumbottom" },
        "\u23B4": { math: "\\overbracket" },
        "\u23B5": { math: "\\underbracket" },
        "\u23B6": { math: "\\bbrktbrk" },
        "\u23B7": { math: "\\sqrtbottom" },
        "\u23B8": { math: "\\lvboxline" },
        "\u23B9": { math: "\\rvboxline" },
        "\u23CE": { math: "\\varcarriagereturn" },
        "\u23DC": { math: "\\overparen" },
        "\u23DD": { math: "\\underparen" },
        "\u23DE": { math: "\\overbrace" },
        "\u23DF": { math: "\\underbrace" },
        "\u23E0": { math: "\\obrbrak" },
        "\u23E1": { math: "\\ubrbrak" },
        "\u23E2": { math: "\\trapezium" },
        "\u23E3": { math: "\\benzenr" },
        "\u23E4": { math: "\\strns" },
        "\u23E5": { math: "\\fltns" },
        "\u23E6": { math: "\\accurrent" },
        "\u23E7": { math: "\\elinters" },
        "\u2400": { text: "NUL" },
        "\u2401": { text: "SOH" },
        "\u2402": { text: "STX" },
        "\u2403": { text: "ETX" },
        "\u2404": { text: "EOT" },
        "\u2405": { text: "ENQ" },
        "\u2406": { text: "ACK" },
        "\u2407": { text: "BEL" },
        "\u2408": { text: "BS" },
        "\u2409": { text: "HT" },
        "\u240A": { text: "LF" },
        "\u240B": { text: "VT" },
        "\u240C": { text: "FF" },
        "\u240D": { text: "CR" },
        "\u240E": { text: "SO" },
        "\u240F": { text: "SI" },
        "\u2410": { text: "DLE" },
        "\u2411": { text: "DC1" },
        "\u2412": { text: "DC2" },
        "\u2413": { text: "DC3" },
        "\u2414": { text: "DC4" },
        "\u2415": { text: "NAK" },
        "\u2416": { text: "SYN" },
        "\u2417": { text: "ETB" },
        "\u2418": { text: "CAN" },
        "\u2419": { text: "EM" },
        "\u241A": { text: "SUB" },
        "\u241B": { text: "ESC" },
        "\u241C": { text: "FS" },
        "\u241D": { text: "GS" },
        "\u241E": { text: "RS" },
        "\u241F": { text: "US" },
        "\u2420": { text: "SP" },
        "\u2421": { text: "DEL" },
        "\u2423": { text: "{\\textvisiblespace}" },
        "\u2424": { text: "NL" },
        "\u2425": { text: "///" },
        "\u2426": { text: "?" },
        "\u2460": { text: "\\ding{172}" },
        "\u2461": { text: "\\ding{173}" },
        "\u2462": { text: "\\ding{174}" },
        "\u2463": { text: "\\ding{175}" },
        "\u2464": { text: "\\ding{176}" },
        "\u2465": { text: "\\ding{177}" },
        "\u2466": { text: "\\ding{178}" },
        "\u2467": { text: "\\ding{179}" },
        "\u2468": { text: "\\ding{180}" },
        "\u2469": { text: "\\ding{181}" },
        "\u246A": { text: "(11)" },
        "\u246B": { text: "(12)" },
        "\u246C": { text: "(13)" },
        "\u246D": { text: "(14)" },
        "\u246E": { text: "(15)" },
        "\u246F": { text: "(16)" },
        "\u2470": { text: "(17)" },
        "\u2471": { text: "(18)" },
        "\u2472": { text: "(19)" },
        "\u2473": { text: "(20)" },
        "\u2474": { text: "(1)" },
        "\u2475": { text: "(2)" },
        "\u2476": { text: "(3)" },
        "\u2477": { text: "(4)" },
        "\u2478": { text: "(5)" },
        "\u2479": { text: "(6)" },
        "\u247A": { text: "(7)" },
        "\u247B": { text: "(8)" },
        "\u247C": { text: "(9)" },
        "\u247D": { text: "(10)" },
        "\u247E": { text: "(11)" },
        "\u247F": { text: "(12)" },
        "\u2480": { text: "(13)" },
        "\u2481": { text: "(14)" },
        "\u2482": { text: "(15)" },
        "\u2483": { text: "(16)" },
        "\u2484": { text: "(17)" },
        "\u2485": { text: "(18)" },
        "\u2486": { text: "(19)" },
        "\u2487": { text: "(20)" },
        "\u2488": { text: "1." },
        "\u2489": { text: "2." },
        "\u248A": { text: "3." },
        "\u248B": { text: "4." },
        "\u248C": { text: "5." },
        "\u248D": { text: "6." },
        "\u248E": { text: "7." },
        "\u248F": { text: "8." },
        "\u2490": { text: "9." },
        "\u2491": { text: "10." },
        "\u2492": { text: "11." },
        "\u2493": { text: "12." },
        "\u2494": { text: "13." },
        "\u2495": { text: "14." },
        "\u2496": { text: "15." },
        "\u2497": { text: "16." },
        "\u2498": { text: "17." },
        "\u2499": { text: "18." },
        "\u249A": { text: "19." },
        "\u249B": { text: "20." },
        "\u249C": { text: "(a)" },
        "\u249D": { text: "(b)" },
        "\u249E": { text: "(c)" },
        "\u249F": { text: "(d)" },
        "\u24A0": { text: "(e)" },
        "\u24A1": { text: "(f)" },
        "\u24A2": { text: "(g)" },
        "\u24A3": { text: "(h)" },
        "\u24A4": { text: "(i)" },
        "\u24A5": { text: "(j)" },
        "\u24A6": { text: "(k)" },
        "\u24A7": { text: "(l)" },
        "\u24A8": { text: "(m)" },
        "\u24A9": { text: "(n)" },
        "\u24AA": { text: "(o)" },
        "\u24AB": { text: "(p)" },
        "\u24AC": { text: "(q)" },
        "\u24AD": { text: "(r)" },
        "\u24AE": { text: "(s)" },
        "\u24AF": { text: "(t)" },
        "\u24B0": { text: "(u)" },
        "\u24B1": { text: "(v)" },
        "\u24B2": { text: "(w)" },
        "\u24B3": { text: "(x)" },
        "\u24B4": { text: "(y)" },
        "\u24B5": { text: "(z)" },
        "\u24B6": { text: "(A)" },
        "\u24B7": { text: "(B)" },
        "\u24B8": { text: "(C)" },
        "\u24B9": { text: "(D)" },
        "\u24BA": { text: "(E)" },
        "\u24BB": { text: "(F)" },
        "\u24BC": { text: "(G)" },
        "\u24BD": { text: "(H)" },
        "\u24BE": { text: "(I)" },
        "\u24BF": { text: "(J)" },
        "\u24C0": { text: "(K)" },
        "\u24C1": { text: "(L)" },
        "\u24C2": { text: "(M)" },
        "\u24C3": { text: "(N)" },
        "\u24C4": { text: "(O)" },
        "\u24C5": { text: "(P)" },
        "\u24C6": { text: "(Q)" },
        "\u24C7": { text: "(R)" },
        "\u24C8": { math: "\\circledS" },
        "\u24C9": { text: "(T)" },
        "\u24CA": { text: "(U)" },
        "\u24CB": { text: "(V)" },
        "\u24CC": { text: "(W)" },
        "\u24CD": { text: "(X)" },
        "\u24CE": { text: "(Y)" },
        "\u24CF": { text: "(Z)" },
        "\u24D0": { text: "(a)" },
        "\u24D1": { text: "(b)" },
        "\u24D2": { text: "(c)" },
        "\u24D3": { text: "(d)" },
        "\u24D4": { text: "(e)" },
        "\u24D5": { text: "(f)" },
        "\u24D6": { text: "(g)" },
        "\u24D7": { text: "(h)" },
        "\u24D8": { text: "(i)" },
        "\u24D9": { text: "(j)" },
        "\u24DA": { text: "(k)" },
        "\u24DB": { text: "(l)" },
        "\u24DC": { text: "(m)" },
        "\u24DD": { text: "(n)" },
        "\u24DE": { text: "(o)" },
        "\u24DF": { text: "(p)" },
        "\u24E0": { text: "(q)" },
        "\u24E1": { text: "(r)" },
        "\u24E2": { text: "(s)" },
        "\u24E3": { text: "(t)" },
        "\u24E4": { text: "(u)" },
        "\u24E5": { text: "(v)" },
        "\u24E6": { text: "(w)" },
        "\u24E7": { text: "(x)" },
        "\u24E8": { text: "(y)" },
        "\u24E9": { text: "(z)" },
        "\u24EA": { text: "(0)" },
        "\u2500": { text: "-" },
        "\u2501": { text: "=" },
        "\u2502": { text: "|" },
        "\u2503": { text: "|" },
        "\u2504": { text: "-" },
        "\u2505": { text: "=" },
        "\u2506": { math: "\\Elzdshfnc" },
        "\u2507": { text: "|" },
        "\u2508": { text: "-" },
        "\u2509": { text: "=" },
        "\u250A": { text: "|" },
        "\u250B": { text: "|" },
        "\u250C": { text: "+" },
        "\u250D": { text: "+" },
        "\u250E": { text: "+" },
        "\u250F": { text: "+" },
        "\u2510": { text: "+" },
        "\u2511": { text: "+" },
        "\u2512": { text: "+" },
        "\u2513": { text: "+" },
        "\u2514": { text: "+" },
        "\u2515": { text: "+" },
        "\u2516": { text: "+" },
        "\u2517": { text: "+" },
        "\u2518": { text: "+" },
        "\u2519": { math: "\\Elzsqfnw" },
        "\u251A": { text: "+" },
        "\u251B": { text: "+" },
        "\u251C": { text: "+" },
        "\u251D": { text: "+" },
        "\u251E": { text: "+" },
        "\u251F": { text: "+" },
        "\u2520": { text: "+" },
        "\u2521": { text: "+" },
        "\u2522": { text: "+" },
        "\u2523": { text: "+" },
        "\u2524": { text: "+" },
        "\u2525": { text: "+" },
        "\u2526": { text: "+" },
        "\u2527": { text: "+" },
        "\u2528": { text: "+" },
        "\u2529": { text: "+" },
        "\u252A": { text: "+" },
        "\u252B": { text: "+" },
        "\u252C": { text: "+" },
        "\u252D": { text: "+" },
        "\u252E": { text: "+" },
        "\u252F": { text: "+" },
        "\u2530": { text: "+" },
        "\u2531": { text: "+" },
        "\u2532": { text: "+" },
        "\u2533": { text: "+" },
        "\u2534": { text: "+" },
        "\u2535": { text: "+" },
        "\u2536": { text: "+" },
        "\u2537": { text: "+" },
        "\u2538": { text: "+" },
        "\u2539": { text: "+" },
        "\u253A": { text: "+" },
        "\u253B": { text: "+" },
        "\u253C": { text: "+" },
        "\u253D": { text: "+" },
        "\u253E": { text: "+" },
        "\u253F": { text: "+" },
        "\u2540": { text: "+" },
        "\u2541": { text: "+" },
        "\u2542": { text: "+" },
        "\u2543": { text: "+" },
        "\u2544": { text: "+" },
        "\u2545": { text: "+" },
        "\u2546": { text: "+" },
        "\u2547": { text: "+" },
        "\u2548": { text: "+" },
        "\u2549": { text: "+" },
        "\u254A": { text: "+" },
        "\u254B": { text: "+" },
        "\u254C": { text: "-" },
        "\u254D": { text: "=" },
        "\u254E": { text: "|" },
        "\u254F": { text: "|" },
        "\u2550": { text: "=" },
        "\u2551": { text: "|" },
        "\u2552": { text: "+" },
        "\u2553": { text: "+" },
        "\u2554": { text: "+" },
        "\u2555": { text: "+" },
        "\u2556": { text: "+" },
        "\u2557": { text: "+" },
        "\u2558": { text: "+" },
        "\u2559": { text: "+" },
        "\u255A": { text: "+" },
        "\u255B": { text: "+" },
        "\u255C": { text: "+" },
        "\u255D": { text: "+" },
        "\u255E": { text: "+" },
        "\u255F": { text: "+" },
        "\u2560": { text: "+" },
        "\u2561": { text: "+" },
        "\u2562": { text: "+" },
        "\u2563": { text: "+" },
        "\u2564": { text: "+" },
        "\u2565": { text: "+" },
        "\u2566": { text: "+" },
        "\u2567": { text: "+" },
        "\u2568": { text: "+" },
        "\u2569": { text: "+" },
        "\u256A": { text: "+" },
        "\u256B": { text: "+" },
        "\u256C": { text: "+" },
        "\u256D": { text: "+" },
        "\u256E": { text: "+" },
        "\u256F": { text: "+" },
        "\u2570": { text: "+" },
        "\u2571": { math: "\\diagup" },
        "\u2572": { text: "\\" },
        "\u2573": { text: "X" },
        "\u257C": { text: "-" },
        "\u257D": { text: "|" },
        "\u257E": { text: "-" },
        "\u257F": { text: "|" },
        "\u2580": { math: "\\blockuphalf" },
        "\u2584": { math: "\\blocklowhalf" },
        "\u2588": { math: "\\blockfull" },
        "\u258C": { math: "\\blocklefthalf" },
        "\u2590": { math: "\\blockrighthalf" },
        "\u2591": { math: "\\blockqtrshaded" },
        "\u2592": { math: "\\blockhalfshaded" },
        "\u2593": { math: "\\blockthreeqtrshaded" },
        "\u25A0": { math: "\\mdlgblksquare", text: "\\ding{110}" },
        "\u25A1": { math: "\\square" },
        "\u25A2": { math: "\\squoval" },
        "\u25A3": { math: "\\blackinwhitesquare" },
        "\u25A4": { math: "\\squarehfill" },
        "\u25A5": { math: "\\squarevfill" },
        "\u25A6": { math: "\\squarehvfill" },
        "\u25A7": { math: "\\squarenwsefill" },
        "\u25A8": { math: "\\squareneswfill" },
        "\u25A9": { math: "\\squarecrossfill" },
        "\u25AA": { math: "\\blacksquare" },
        "\u25AB": { math: "\\smwhtsquare" },
        "\u25AC": { math: "\\hrectangleblack" },
        "\u25AD": { math: "\\fbox{~~}" },
        "\u25AE": { math: "\\vrectangleblack" },
        "\u25AF": { math: "\\Elzvrecto" },
        "\u25B0": { math: "\\parallelogramblack" },
        "\u25B2": { math: "\\bigblacktriangleup", text: "\\ding{115}" },
        "\u25B3": { math: "\\bigtriangleup" },
        "\u25B4": { math: "\\blacktriangle" },
        "\u25B5": { math: "\\vartriangle" },
        "\u25B6": { math: "\\RHD" },
        "\u25B7": { math: "\\rhd" },
        "\u25B8": { math: "\\blacktriangleright" },
        "\u25B9": { math: "\\triangleright" },
        "\u25BA": { math: "\\blackpointerright" },
        "\u25BB": { math: "\\whitepointerright" },
        "\u25BC": { math: "\\bigblacktriangledown", text: "\\ding{116}" },
        "\u25BD": { math: "\\bigtriangledown" },
        "\u25BE": { math: "\\blacktriangledown" },
        "\u25BF": { math: "\\triangledown" },
        "\u25C0": { math: "\\LHD" },
        "\u25C1": { math: "\\lhd" },
        "\u25C2": { math: "\\blacktriangleleft" },
        "\u25C3": { math: "\\triangleleft" },
        "\u25C4": { math: "\\blackpointerleft" },
        "\u25C5": { math: "\\whitepointerleft" },
        "\u25C6": { math: "\\Diamondblack", text: "\\ding{117}" },
        "\u25C7": { math: "\\Diamond" },
        "\u25C8": { math: "\\blackinwhitediamond" },
        "\u25C9": { math: "\\fisheye" },
        "\u25CA": { math: "\\lozenge" },
        "\u25CB": { math: "\\bigcirc" },
        "\u25CC": { math: "\\dottedcircle" },
        "\u25CD": { math: "\\circlevertfill" },
        "\u25CE": { math: "\\bullseye" },
        "\u25CF": { math: "\\CIRCLE", text: "\\ding{108}" },
        "\u25D0": { math: "\\Elzcirfl" },
        "\u25D1": { math: "\\Elzcirfr" },
        "\u25D2": { math: "\\Elzcirfb" },
        "\u25D3": { math: "\\circletophalfblack" },
        "\u25D4": { math: "\\circleurquadblack" },
        "\u25D5": { math: "\\blackcircleulquadwhite" },
        "\u25D6": { math: "\\LEFTCIRCLE" },
        "\u25D7": { math: "\\RIGHTCIRCLE", text: "\\ding{119}" },
        "\u25D8": { math: "\\Elzrvbull" },
        "\u25D9": { math: "\\inversewhitecircle" },
        "\u25DA": { math: "\\invwhiteupperhalfcircle" },
        "\u25DB": { math: "\\invwhitelowerhalfcircle" },
        "\u25DC": { math: "\\ularc" },
        "\u25DD": { math: "\\urarc" },
        "\u25DE": { math: "\\lrarc" },
        "\u25DF": { math: "\\llarc" },
        "\u25E0": { math: "\\topsemicircle" },
        "\u25E1": { math: "\\botsemicircle" },
        "\u25E2": { math: "\\lrblacktriangle" },
        "\u25E3": { math: "\\llblacktriangle" },
        "\u25E4": { math: "\\ulblacktriangle" },
        "\u25E5": { math: "\\urblacktriangle" },
        "\u25E6": { math: "\\smwhtcircle" },
        "\u25E7": { math: "\\Elzsqfl" },
        "\u25E8": { math: "\\Elzsqfr" },
        "\u25E9": { math: "\\squareulblack" },
        "\u25EA": { math: "\\Elzsqfse" },
        "\u25EB": { math: "\\boxbar" },
        "\u25EC": { math: "\\trianglecdot" },
        "\u25ED": { math: "\\triangleleftblack" },
        "\u25EE": { math: "\\trianglerightblack" },
        "\u25EF": { math: "\\bigcirc" },
        "\u25F0": { math: "\\squareulquad" },
        "\u25F1": { math: "\\squarellquad" },
        "\u25F2": { math: "\\squarelrquad" },
        "\u25F3": { math: "\\squareurquad" },
        "\u25F4": { math: "\\circleulquad" },
        "\u25F5": { math: "\\circlellquad" },
        "\u25F6": { math: "\\circlelrquad" },
        "\u25F7": { math: "\\circleurquad" },
        "\u25F8": { math: "\\ultriangle" },
        "\u25F9": { math: "\\urtriangle" },
        "\u25FA": { math: "\\lltriangle" },
        "\u25FB": { math: "\\square" },
        "\u25FC": { math: "\\blacksquare" },
        "\u25FD": { math: "\\mdsmwhtsquare" },
        "\u25FE": { math: "\\mdsmblksquare" },
        "\u25FF": { math: "\\lrtriangle" },
        "\u2605": { math: "\\bigstar", text: "\\ding{72}" },
        "\u2606": { math: "\\bigwhitestar", text: "\\ding{73}" },
        "\u2609": { math: "\\Sun" },
        "\u260E": { text: "\\ding{37}" },
        "\u2610": { math: "\\Square" },
        "\u2611": { math: "\\CheckedBox" },
        "\u2612": { math: "\\XBox" },
        "\u2613": { text: "X" },
        "\u2615": { math: "\\steaming" },
        "\u261B": { text: "\\ding{42}" },
        "\u261E": { math: "\\pointright", text: "\\ding{43}" },
        "\u2620": { math: "\\skull" },
        "\u2621": { math: "\\danger" },
        "\u2622": { math: "\\radiation" },
        "\u2623": { math: "\\biohazard" },
        "\u262F": { math: "\\yinyang" },
        "\u2639": { math: "\\frownie" },
        "\u263A": { math: "\\smiley" },
        "\u263B": { math: "\\blacksmiley" },
        "\u263C": { math: "\\sun" },
        "\u263D": { text: "{\\rightmoon}", textpackages: ["wasysym"] },
        "\u263E": { text: "{\\leftmoon}", textpackages: ["wasysym"] },
        "\u263F": { math: "\\mercury", text: "{\\mercury}" },
        "\u2640": { math: "\\female", text: "{\\venus}" },
        "\u2641": { math: "\\earth" },
        "\u2642": { math: "\\male", text: "{\\male}" },
        "\u2643": { math: "\\jupiter", text: "{\\jupiter}" },
        "\u2644": { math: "\\saturn", text: "{\\saturn}" },
        "\u2645": { math: "\\uranus", text: "{\\uranus}" },
        "\u2646": { math: "\\neptune", text: "{\\neptune}" },
        "\u2647": { math: "\\pluto", text: "{\\pluto}" },
        "\u2648": { math: "\\aries", text: "{\\aries}" },
        "\u2649": { math: "\\taurus", text: "{\\taurus}" },
        "\u264A": { math: "\\gemini", text: "{\\gemini}" },
        "\u264B": { math: "\\cancer", text: "{\\cancer}" },
        "\u264C": { math: "\\leo", text: "{\\leo}" },
        "\u264D": { math: "\\virgo", text: "{\\virgo}" },
        "\u264E": { math: "\\libra", text: "{\\libra}" },
        "\u264F": { math: "\\scorpio", text: "{\\scorpio}" },
        "\u2650": { math: "\\sagittarius", text: "{\\sagittarius}" },
        "\u2651": { math: "\\capricornus", text: "{\\capricornus}" },
        "\u2652": { math: "\\aquarius", text: "{\\aquarius}" },
        "\u2653": { math: "\\pisces", text: "{\\pisces}" },
        "\u2660": { math: "\\spadesuit", text: "\\ding{171}" },
        "\u2661": { math: "\\heartsuit" },
        "\u2662": { math: "\\diamond" },
        "\u2663": { math: "\\clubsuit", text: "\\ding{168}" },
        "\u2664": { math: "\\varspadesuit" },
        "\u2665": { math: "\\varheartsuit", text: "\\ding{170}" },
        "\u2666": { math: "\\vardiamondsuit", text: "\\ding{169}" },
        "\u2667": { math: "\\varclubsuit" },
        "\u2669": { math: "\\quarternote", text: "{\\quarternote}" },
        "\u266A": { math: "\\eighthnote", text: "{\\eighthnote}" },
        "\u266B": { math: "\\twonotes" },
        "\u266C": { math: "\\sixteenthnote" },
        "\u266D": { math: "\\flat" },
        "\u266E": { math: "\\natural" },
        "\u266F": { math: "\\sharp" },
        "\u267B": { math: "\\recycle" },
        "\u267E": { math: "\\acidfree" },
        "\u2680": { math: "\\dicei" },
        "\u2681": { math: "\\diceii" },
        "\u2682": { math: "\\diceiii" },
        "\u2683": { math: "\\diceiv" },
        "\u2684": { math: "\\dicev" },
        "\u2685": { math: "\\dicevi" },
        "\u2686": { math: "\\circledrightdot" },
        "\u2687": { math: "\\circledtwodots" },
        "\u2688": { math: "\\blackcircledrightdot" },
        "\u2689": { math: "\\blackcircledtwodots" },
        "\u2693": { math: "\\anchor" },
        "\u2694": { math: "\\swords" },
        "\u26A0": { math: "\\warning" },
        "\u26A5": { math: "\\Hermaphrodite" },
        "\u26AA": { math: "\\medcirc" },
        "\u26AB": { math: "\\medbullet" },
        "\u26AC": { math: "\\mdsmwhtcircle" },
        "\u26B2": { math: "\\neuter" },
        "\u2701": { text: "\\ding{33}" },
        "\u2702": { text: "\\ding{34}" },
        "\u2703": { text: "\\ding{35}" },
        "\u2704": { text: "\\ding{36}" },
        "\u2706": { text: "\\ding{38}" },
        "\u2707": { text: "\\ding{39}" },
        "\u2708": { text: "\\ding{40}" },
        "\u2709": { text: "\\ding{41}" },
        "\u270C": { text: "\\ding{44}" },
        "\u270D": { text: "\\ding{45}" },
        "\u270E": { math: "\\pencil", text: "\\ding{46}" },
        "\u270F": { text: "\\ding{47}" },
        "\u2710": { text: "\\ding{48}" },
        "\u2711": { text: "\\ding{49}" },
        "\u2712": { text: "\\ding{50}" },
        "\u2713": { math: "\\checkmark", text: "\\ding{51}" },
        "\u2714": { text: "\\ding{52}" },
        "\u2715": { text: "\\ding{53}" },
        "\u2716": { text: "\\ding{54}" },
        "\u2717": { math: "\\ballotx", text: "\\ding{55}" },
        "\u2718": { text: "\\ding{56}" },
        "\u2719": { text: "\\ding{57}" },
        "\u271A": { text: "\\ding{58}" },
        "\u271B": { text: "\\ding{59}" },
        "\u271C": { text: "\\ding{60}" },
        "\u271D": { text: "\\ding{61}" },
        "\u271E": { text: "\\ding{62}" },
        "\u271F": { text: "\\ding{63}" },
        "\u2720": { math: "\\maltese", text: "\\ding{64}" },
        "\u2721": { text: "\\ding{65}" },
        "\u2722": { text: "\\ding{66}" },
        "\u2723": { text: "\\ding{67}" },
        "\u2724": { text: "\\ding{68}" },
        "\u2725": { text: "\\ding{69}" },
        "\u2726": { text: "\\ding{70}" },
        "\u2727": { text: "\\ding{71}" },
        "\u2729": { text: "\\ding{73}" },
        "\u272A": { math: "\\circledstar", text: "\\ding{74}" },
        "\u272B": { text: "\\ding{75}" },
        "\u272C": { text: "\\ding{76}" },
        "\u272D": { text: "\\ding{77}" },
        "\u272E": { text: "\\ding{78}" },
        "\u272F": { text: "\\ding{79}" },
        "\u2730": { text: "\\ding{80}" },
        "\u2731": { text: "\\ding{81}" },
        "\u2732": { text: "\\ding{82}" },
        "\u2733": { text: "\\ding{83}" },
        "\u2734": { text: "\\ding{84}" },
        "\u2735": { text: "\\ding{85}" },
        "\u2736": { math: "\\varstar", text: "\\ding{86}" },
        "\u2737": { text: "\\ding{87}" },
        "\u2738": { text: "\\ding{88}" },
        "\u2739": { text: "\\ding{89}" },
        "\u273A": { text: "\\ding{90}" },
        "\u273B": { text: "\\ding{91}" },
        "\u273C": { text: "\\ding{92}" },
        "\u273D": { math: "\\dingasterisk", text: "\\ding{93}" },
        "\u273E": { text: "\\ding{94}" },
        "\u273F": { text: "\\ding{95}" },
        "\u2740": { text: "\\ding{96}" },
        "\u2741": { text: "\\ding{97}" },
        "\u2742": { text: "\\ding{98}" },
        "\u2743": { text: "\\ding{99}" },
        "\u2744": { text: "\\ding{100}" },
        "\u2745": { text: "\\ding{101}" },
        "\u2746": { text: "\\ding{102}" },
        "\u2747": { text: "\\ding{103}" },
        "\u2748": { text: "\\ding{104}" },
        "\u2749": { text: "\\ding{105}" },
        "\u274A": { text: "\\ding{106}" },
        "\u274B": { text: "\\ding{107}" },
        "\u274D": { text: "\\ding{109}" },
        "\u274F": { text: "\\ding{111}" },
        "\u2750": { text: "\\ding{112}" },
        "\u2751": { text: "\\ding{113}" },
        "\u2752": { text: "\\ding{114}" },
        "\u2756": { text: "\\ding{118}" },
        "\u2758": { text: "\\ding{120}" },
        "\u2759": { text: "\\ding{121}" },
        "\u275A": { text: "\\ding{122}" },
        "\u275B": { text: "\\ding{123}" },
        "\u275C": { text: "\\ding{124}" },
        "\u275D": { text: "\\ding{125}" },
        "\u275E": { text: "\\ding{126}" },
        "\u2761": { text: "\\ding{161}" },
        "\u2762": { text: "\\ding{162}" },
        "\u2763": { text: "\\ding{163}" },
        "\u2764": { text: "\\ding{164}" },
        "\u2765": { text: "\\ding{165}" },
        "\u2766": { text: "\\ding{166}" },
        "\u2767": { text: "\\ding{167}" },
        "\u2772": { math: "\\lbrbrak" },
        "\u2773": { math: "\\rbrbrak" },
        "\u2776": { text: "\\ding{182}" },
        "\u2777": { text: "\\ding{183}" },
        "\u2778": { text: "\\ding{184}" },
        "\u2779": { text: "\\ding{185}" },
        "\u277A": { text: "\\ding{186}" },
        "\u277B": { text: "\\ding{187}" },
        "\u277C": { text: "\\ding{188}" },
        "\u277D": { text: "\\ding{189}" },
        "\u277E": { text: "\\ding{190}" },
        "\u277F": { text: "\\ding{191}" },
        "\u2780": { text: "\\ding{192}" },
        "\u2781": { text: "\\ding{193}" },
        "\u2782": { text: "\\ding{194}" },
        "\u2783": { text: "\\ding{195}" },
        "\u2784": { text: "\\ding{196}" },
        "\u2785": { text: "\\ding{197}" },
        "\u2786": { text: "\\ding{198}" },
        "\u2787": { text: "\\ding{199}" },
        "\u2788": { text: "\\ding{200}" },
        "\u2789": { text: "\\ding{201}" },
        "\u278A": { text: "\\ding{202}" },
        "\u278B": { text: "\\ding{203}" },
        "\u278C": { text: "\\ding{204}" },
        "\u278D": { text: "\\ding{205}" },
        "\u278E": { text: "\\ding{206}" },
        "\u278F": { text: "\\ding{207}" },
        "\u2790": { text: "\\ding{208}" },
        "\u2791": { text: "\\ding{209}" },
        "\u2792": { text: "\\ding{210}" },
        "\u2793": { text: "\\ding{211}" },
        "\u2794": { text: "\\ding{212}" },
        "\u2798": { text: "\\ding{216}" },
        "\u2799": { text: "\\ding{217}" },
        "\u279A": { text: "\\ding{218}" },
        "\u279B": { math: "\\draftingarrow", text: "\\ding{219}" },
        "\u279C": { text: "\\ding{220}" },
        "\u279D": { text: "\\ding{221}" },
        "\u279E": { text: "\\ding{222}" },
        "\u279F": { text: "\\ding{223}" },
        "\u27A0": { text: "\\ding{224}" },
        "\u27A1": { text: "\\ding{225}" },
        "\u27A2": { math: "\\arrowbullet", text: "\\ding{226}" },
        "\u27A3": { text: "\\ding{227}" },
        "\u27A4": { text: "\\ding{228}" },
        "\u27A5": { text: "\\ding{229}" },
        "\u27A6": { text: "\\ding{230}" },
        "\u27A7": { text: "\\ding{231}" },
        "\u27A8": { text: "\\ding{232}" },
        "\u27A9": { text: "\\ding{233}" },
        "\u27AA": { text: "\\ding{234}" },
        "\u27AB": { text: "\\ding{235}" },
        "\u27AC": { text: "\\ding{236}" },
        "\u27AD": { text: "\\ding{237}" },
        "\u27AE": { text: "\\ding{238}" },
        "\u27AF": { text: "\\ding{239}" },
        "\u27B1": { text: "\\ding{241}" },
        "\u27B2": { text: "\\ding{242}" },
        "\u27B3": { text: "\\ding{243}" },
        "\u27B4": { text: "\\ding{244}" },
        "\u27B5": { text: "\\ding{245}" },
        "\u27B6": { text: "\\ding{246}" },
        "\u27B7": { text: "\\ding{247}" },
        "\u27B8": { text: "\\ding{248}" },
        "\u27B9": { text: "\\ding{249}" },
        "\u27BA": { text: "\\ding{250}" },
        "\u27BB": { text: "\\ding{251}" },
        "\u27BC": { text: "\\ding{252}" },
        "\u27BD": { text: "\\ding{253}" },
        "\u27BE": { text: "\\ding{254}" },
        "\u27C0": { math: "\\threedangle" },
        "\u27C1": { math: "\\whiteinwhitetriangle" },
        "\u27C2": { math: "\\perp" },
        "\u27C3": { math: "\\subsetcirc" },
        "\u27C4": { math: "\\supsetcirc" },
        "\u27C5": { math: "\\Lbag" },
        "\u27C6": { math: "\\Rbag" },
        "\u27C7": { math: "\\veedot" },
        "\u27C8": { math: "\\bsolhsub" },
        "\u27C9": { math: "\\suphsol" },
        "\u27CC": { math: "\\longdivision" },
        "\u27D0": { math: "\\Diamonddot" },
        "\u27D1": { math: "\\wedgedot" },
        "\u27D2": { math: "\\upin" },
        "\u27D3": { math: "\\pullback" },
        "\u27D4": { math: "\\pushout" },
        "\u27D5": { math: "\\leftouterjoin" },
        "\u27D6": { math: "\\rightouterjoin" },
        "\u27D7": { math: "\\fullouterjoin" },
        "\u27D8": { math: "\\bigbot" },
        "\u27D9": { math: "\\bigtop" },
        "\u27DA": { math: "\\DashVDash" },
        "\u27DB": { math: "\\dashVdash" },
        "\u27DC": { math: "\\multimapinv" },
        "\u27DD": { math: "\\vlongdash" },
        "\u27DE": { math: "\\longdashv" },
        "\u27DF": { math: "\\cirbot" },
        "\u27E0": { math: "\\lozengeminus" },
        "\u27E1": { math: "\\concavediamond" },
        "\u27E2": { math: "\\concavediamondtickleft" },
        "\u27E3": { math: "\\concavediamondtickright" },
        "\u27E4": { math: "\\whitesquaretickleft" },
        "\u27E5": { math: "\\whitesquaretickright" },
        "\u27E6": { math: "\\llbracket" },
        "\u27E7": { math: "\\rrbracket" },
        "\u27E8": { math: "\\langle" },
        "\u27E9": { math: "\\rangle" },
        "\u27EA": { math: "\\lang" },
        "\u27EB": { math: "\\rang" },
        "\u27EC": { math: "\\Lbrbrak" },
        "\u27ED": { math: "\\Rbrbrak" },
        "\u27EE": { math: "\\lgroup" },
        "\u27EF": { math: "\\rgroup" },
        "\u27F0": { math: "\\UUparrow" },
        "\u27F1": { math: "\\DDownarrow" },
        "\u27F2": { math: "\\acwgapcirclearrow" },
        "\u27F3": { math: "\\cwgapcirclearrow" },
        "\u27F4": { math: "\\rightarrowonoplus" },
        "\u27F5": { math: "\\longleftarrow" },
        "\u27F6": { math: "\\longrightarrow" },
        "\u27F7": { math: "\\longleftrightarrow" },
        "\u27F8": { math: "\\Longleftarrow" },
        "\u27F9": { math: "\\Longrightarrow" },
        "\u27FA": { math: "\\Longleftrightarrow" },
        "\u27FB": { math: "\\longmapsfrom" },
        "\u27FC": { math: "\\longmapsto" },
        "\u27FD": { math: "\\Longmapsfrom" },
        "\u27FE": { math: "\\Longmapsto" },
        "\u27FF": { math: "\\sim\\joinrel\\leadsto" },
        "\u2900": { math: "\\psur" },
        "\u2901": { math: "\\nVtwoheadrightarrow" },
        "\u2902": { math: "\\nvLeftarrow" },
        "\u2903": { math: "\\nvRightarrow" },
        "\u2904": { math: "\\nvLeftrightarrow" },
        "\u2906": { math: "\\Mapsfrom" },
        "\u2907": { math: "\\Mapsto" },
        "\u2908": { math: "\\downarrowbarred" },
        "\u2909": { math: "\\uparrowbarred" },
        "\u290A": { math: "\\Uuparrow" },
        "\u290B": { math: "\\Ddownarrow" },
        "\u290C": { math: "\\leftbkarrow" },
        "\u290D": { math: "\\rightbkarrow" },
        "\u290E": { math: "\\leftdbkarrow" },
        "\u290F": { math: "\\dbkarow" },
        "\u2910": { math: "\\drbkarow" },
        "\u2911": { math: "\\rightdotarrow" },
        "\u2912": { math: "\\UpArrowBar" },
        "\u2913": { math: "\\DownArrowBar" },
        "\u2914": { math: "\\pinj" },
        "\u2915": { math: "\\finj" },
        "\u2916": { math: "\\bij" },
        "\u2917": { math: "\\nvtwoheadrightarrowtail" },
        "\u2918": { math: "\\nVtwoheadrightarrowtail" },
        "\u2919": { math: "\\lefttail" },
        "\u291A": { math: "\\righttail" },
        "\u291B": { math: "\\leftdbltail" },
        "\u291C": { math: "\\rightdbltail" },
        "\u291D": { math: "\\diamondleftarrow" },
        "\u291E": { math: "\\rightarrowdiamond" },
        "\u291F": { math: "\\diamondleftarrowbar" },
        "\u2920": { math: "\\barrightarrowdiamond" },
        "\u2921": { math: "\\nwsearrow" },
        "\u2922": { math: "\\neswarrow" },
        "\u292B": { math: "\\rdiagovfdiag" },
        "\u292C": { math: "\\fdiagovrdiag" },
        "\u292D": { math: "\\seovnearrow" },
        "\u292E": { math: "\\neovsearrow" },
        "\u292F": { math: "\\fdiagovnearrow" },
        "\u2930": { math: "\\rdiagovsearrow" },
        "\u2931": { math: "\\neovnwarrow" },
        "\u2932": { math: "\\nwovnearrow" },
        "\u2934": { math: "\\uprightcurvearrow" },
        "\u2935": { math: "\\downrightcurvedarrow" },
        "\u2938": { math: "\\cwrightarcarrow" },
        "\u2939": { math: "\\acwleftarcarrow" },
        "\u293A": { math: "\\acwoverarcarrow" },
        "\u293B": { math: "\\acwunderarcarrow" },
        "\u293C": { math: "\\curvearrowrightminus" },
        "\u293D": { math: "\\curvearrowleftplus" },
        "\u293E": { math: "\\cwundercurvearrow" },
        "\u293F": { math: "\\ccwundercurvearrow" },
        "\u2940": { math: "\\Elolarr" },
        "\u2941": { math: "\\Elorarr" },
        "\u2942": { math: "\\ElzRlarr" },
        "\u2943": { math: "\\leftarrowshortrightarrow" },
        "\u2944": { math: "\\ElzrLarr" },
        "\u2945": { math: "\\rightarrowplus" },
        "\u2946": { math: "\\leftarrowplus" },
        "\u2947": { math: "\\Elzrarrx" },
        "\u2948": { math: "\\leftrightarrowcircle" },
        "\u2949": { math: "\\twoheaduparrowcircle" },
        "\u294A": { math: "\\leftrightharpoon" },
        "\u294B": { math: "\\rightleftharpoon" },
        "\u294C": { math: "\\updownharpoonrightleft" },
        "\u294D": { math: "\\updownharpoonleftright" },
        "\u294E": { math: "\\LeftRightVector" },
        "\u294F": { math: "\\RightUpDownVector" },
        "\u2950": { math: "\\DownLeftRightVector" },
        "\u2951": { math: "\\LeftUpDownVector" },
        "\u2952": { math: "\\LeftVectorBar" },
        "\u2953": { math: "\\RightVectorBar" },
        "\u2954": { math: "\\RightUpVectorBar" },
        "\u2955": { math: "\\RightDownVectorBar" },
        "\u2956": { math: "\\DownLeftVectorBar" },
        "\u2957": { math: "\\DownRightVectorBar" },
        "\u2958": { math: "\\LeftUpVectorBar" },
        "\u2959": { math: "\\LeftDownVectorBar" },
        "\u295A": { math: "\\LeftTeeVector" },
        "\u295B": { math: "\\RightTeeVector" },
        "\u295C": { math: "\\RightUpTeeVector" },
        "\u295D": { math: "\\RightDownTeeVector" },
        "\u295E": { math: "\\DownLeftTeeVector" },
        "\u295F": { math: "\\DownRightTeeVector" },
        "\u2960": { math: "\\LeftUpTeeVector" },
        "\u2961": { math: "\\LeftDownTeeVector" },
        "\u2962": { math: "\\leftleftharpoons" },
        "\u2963": { math: "\\upupharpoons" },
        "\u2964": { math: "\\rightrightharpoons" },
        "\u2965": { math: "\\downdownharpoons" },
        "\u2966": { math: "\\leftrightharpoonsup" },
        "\u2967": { math: "\\leftrightharpoonsdown" },
        "\u2968": { math: "\\rightleftharpoonsup" },
        "\u2969": { math: "\\rightleftharpoonsdown" },
        "\u296A": { math: "\\leftbarharpoon" },
        "\u296B": { math: "\\barleftharpoon" },
        "\u296C": { math: "\\rightbarharpoon" },
        "\u296D": { math: "\\barrightharpoon" },
        "\u296E": { math: "\\UpEquilibrium" },
        "\u296F": { math: "\\ReverseUpEquilibrium" },
        "\u2970": { math: "\\RoundImplies" },
        "\u2971": { math: "\\equalrightarrow" },
        "\u2972": { math: "\\similarrightarrow" },
        "\u2973": { math: "\\leftarrowsimilar" },
        "\u2974": { math: "\\rightarrowsimilar" },
        "\u2975": { math: "\\rightarrowapprox" },
        "\u2976": { math: "\\ltlarr" },
        "\u2977": { math: "\\leftarrowless" },
        "\u2978": { math: "\\gtrarr" },
        "\u2979": { math: "\\subrarr" },
        "\u297A": { math: "\\leftarrowsubset" },
        "\u297B": { math: "\\suplarr" },
        "\u297E": { math: "\\upfishtail" },
        "\u297F": { math: "\\downfishtail" },
        "\u2980": { math: "\\Elztfnc" },
        "\u2981": { math: "\\spot" },
        "\u2982": { math: "\\typecolon" },
        "\u2983": { math: "\\lBrace" },
        "\u2984": { math: "\\rBrace" },
        "\u2986": { math: "\\Elroang" },
        "\u2987": { math: "\\limg" },
        "\u2988": { math: "\\rimg" },
        "\u2989": { math: "\\lblot" },
        "\u298A": { math: "\\rblot" },
        "\u298B": { math: "\\lbrackubar" },
        "\u298C": { math: "\\rbrackubar" },
        "\u298D": { math: "\\lbrackultick" },
        "\u298E": { math: "\\rbracklrtick" },
        "\u298F": { math: "\\lbracklltick" },
        "\u2990": { math: "\\rbrackurtick" },
        "\u2991": { math: "\\langledot" },
        "\u2992": { math: "\\rangledot" },
        "\u2993": { math: "<\\kern-0.58em(" },
        "\u2995": { math: "\\Lparengtr" },
        "\u2996": { math: "\\Rparenless" },
        "\u2997": { math: "\\lblkbrbrak" },
        "\u2998": { math: "\\rblkbrbrak" },
        "\u2999": { math: "\\Elzddfnc" },
        "\u299A": { math: "\\vzigzag" },
        "\u299B": { math: "\\measuredangleleft" },
        "\u299C": { math: "\\Angle" },
        "\u299D": { math: "\\rightanglemdot" },
        "\u299E": { math: "\\angles" },
        "\u299F": { math: "\\angdnr" },
        "\u29A0": { math: "\\Elzlpargt" },
        "\u29A1": { math: "\\sphericalangleup" },
        "\u29A2": { math: "\\turnangle" },
        "\u29A3": { math: "\\revangle" },
        "\u29A4": { math: "\\angleubar" },
        "\u29A5": { math: "\\revangleubar" },
        "\u29A6": { math: "\\wideangledown" },
        "\u29A7": { math: "\\wideangleup" },
        "\u29A8": { math: "\\measanglerutone" },
        "\u29A9": { math: "\\measanglelutonw" },
        "\u29AA": { math: "\\measanglerdtose" },
        "\u29AB": { math: "\\measangleldtosw" },
        "\u29AC": { math: "\\measangleurtone" },
        "\u29AD": { math: "\\measangleultonw" },
        "\u29AE": { math: "\\measangledrtose" },
        "\u29AF": { math: "\\measangledltosw" },
        "\u29B0": { math: "\\revemptyset" },
        "\u29B1": { math: "\\emptysetobar" },
        "\u29B2": { math: "\\emptysetocirc" },
        "\u29B3": { math: "\\emptysetoarr" },
        "\u29B4": { math: "\\emptysetoarrl" },
        "\u29B7": { math: "\\circledparallel" },
        "\u29B8": { math: "\\circledbslash" },
        "\u29B9": { math: "\\operp" },
        "\u29BA": { math: "\\obot" },
        "\u29BB": { math: "\\olcross" },
        "\u29BC": { math: "\\odotslashdot" },
        "\u29BD": { math: "\\uparrowoncircle" },
        "\u29BE": { math: "\\circledwhitebullet" },
        "\u29BF": { math: "\\circledbullet" },
        "\u29C0": { math: "\\circledless" },
        "\u29C1": { math: "\\circledgtr" },
        "\u29C2": { math: "\\cirscir" },
        "\u29C3": { math: "\\cirE" },
        "\u29C4": { math: "\\boxslash" },
        "\u29C5": { math: "\\boxbslash" },
        "\u29C6": { math: "\\boxast" },
        "\u29C7": { math: "\\boxcircle" },
        "\u29C8": { math: "\\boxbox" },
        "\u29C9": { math: "\\boxonbox" },
        "\u29CA": { math: "\\ElzLap" },
        "\u29CB": { math: "\\Elzdefas" },
        "\u29CC": { math: "\\triangles" },
        "\u29CD": { math: "\\triangleserifs" },
        "\u29CE": { math: "\\rtriltri" },
        "\u29CF": { math: "\\LeftTriangleBar" },
        "\u29CF\u0338": { math: "\\NotLeftTriangleBar" },
        "\u29D0": { math: "\\RightTriangleBar" },
        "\u29D0\u0338": { math: "\\NotRightTriangleBar" },
        "\u29D1": { math: "\\lfbowtie" },
        "\u29D2": { math: "\\rfbowtie" },
        "\u29D3": { math: "\\fbowtie" },
        "\u29D4": { math: "\\lftimes" },
        "\u29D5": { math: "\\rftimes" },
        "\u29D6": { math: "\\hourglass" },
        "\u29D7": { math: "\\blackhourglass" },
        "\u29D8": { math: "\\lvzigzag" },
        "\u29D9": { math: "\\rvzigzag" },
        "\u29DA": { math: "\\Lvzigzag" },
        "\u29DB": { math: "\\Rvzigzag" },
        "\u29DD": { math: "\\tieinfty" },
        "\u29DE": { math: "\\nvinfty" },
        "\u29DF": { math: "\\multimapboth" },
        "\u29E0": { math: "\\laplac" },
        "\u29E1": { math: "\\lrtriangleeq" },
        "\u29E2": { math: "\\shuffle" },
        "\u29E3": { math: "\\eparsl" },
        "\u29E4": { math: "\\smeparsl" },
        "\u29E5": { math: "\\eqvparsl" },
        "\u29E6": { math: "\\gleichstark" },
        "\u29E7": { math: "\\thermod" },
        "\u29E8": { math: "\\downtriangleleftblack" },
        "\u29E9": { math: "\\downtrianglerightblack" },
        "\u29EA": { math: "\\blackdiamonddownarrow" },
        "\u29EB": { math: "\\blacklozenge" },
        "\u29EC": { math: "\\circledownarrow" },
        "\u29ED": { math: "\\blackcircledownarrow" },
        "\u29EE": { math: "\\errbarsquare" },
        "\u29EF": { math: "\\errbarblacksquare" },
        "\u29F0": { math: "\\errbardiamond" },
        "\u29F1": { math: "\\errbarblackdiamond" },
        "\u29F2": { math: "\\errbarcircle" },
        "\u29F3": { math: "\\errbarblackcircle" },
        "\u29F4": { math: "\\RuleDelayed" },
        "\u29F5": { math: "\\setminus" },
        "\u29F6": { math: "\\dsol" },
        "\u29F7": { math: "\\rsolbar" },
        "\u29F8": { math: "\\xsol" },
        "\u29F9": { math: "\\zhide" },
        "\u29FA": { math: "\\doubleplus" },
        "\u29FB": { math: "\\tripleplus" },
        "\u29FC": { math: "\\lcurvyangle" },
        "\u29FD": { math: "\\rcurvyangle" },
        "\u29FE": { math: "\\tplus" },
        "\u29FF": { math: "\\tminus" },
        "\u2A00": { math: "\\bigodot" },
        "\u2A01": { math: "\\bigoplus" },
        "\u2A02": { math: "\\bigotimes" },
        "\u2A03": { math: "\\bigcupdot" },
        "\u2A04": { math: "\\Elxuplus" },
        "\u2A05": { math: "\\ElzThr" },
        "\u2A06": { math: "\\Elxsqcup" },
        "\u2A07": { math: "\\ElzInf" },
        "\u2A08": { math: "\\ElzSup" },
        "\u2A09": { math: "\\varprod" },
        "\u2A0A": { math: "\\modtwosum" },
        "\u2A0B": { math: "\\sumint" },
        "\u2A0C": { math: "\\iiiint" },
        "\u2A0D": { math: "\\ElzCint" },
        "\u2A0E": { math: "\\intBar" },
        "\u2A0F": { math: "\\clockoint" },
        "\u2A11": { math: "\\awint" },
        "\u2A12": { math: "\\rppolint" },
        "\u2A13": { math: "\\scpolint" },
        "\u2A14": { math: "\\npolint" },
        "\u2A15": { math: "\\pointint" },
        "\u2A16": { math: "\\sqrint" },
        "\u2A17": { math: "\\intlarhk" },
        "\u2A18": { math: "\\intx" },
        "\u2A19": { math: "\\intcap" },
        "\u2A1A": { math: "\\intcup" },
        "\u2A1B": { math: "\\upint" },
        "\u2A1C": { math: "\\lowint" },
        "\u2A1D": { math: "\\Join" },
        "\u2A1E": { math: "\\bigtriangleleft" },
        "\u2A1F": { math: "\\zcmp" },
        "\u2A20": { math: "\\zpipe" },
        "\u2A21": { math: "\\zproject" },
        "\u2A22": { math: "\\ringplus" },
        "\u2A23": { math: "\\plushat" },
        "\u2A24": { math: "\\simplus" },
        "\u2A26": { math: "\\plussim" },
        "\u2A27": { math: "\\plussubtwo" },
        "\u2A28": { math: "\\plustrif" },
        "\u2A29": { math: "\\commaminus" },
        "\u2A2B": { math: "\\minusfdots" },
        "\u2A2C": { math: "\\minusrdots" },
        "\u2A2F": { math: "\\ElzTimes" },
        "\u2A30": { math: "\\dottimes" },
        "\u2A31": { math: "\\timesbar" },
        "\u2A32": { math: "\\btimes" },
        "\u2A33": { math: "\\smashtimes" },
        "\u2A36": { math: "\\otimeshat" },
        "\u2A37": { math: "\\Otimes" },
        "\u2A38": { math: "\\odiv" },
        "\u2A39": { math: "\\triangleplus" },
        "\u2A3A": { math: "\\triangleminus" },
        "\u2A3B": { math: "\\triangletimes" },
        "\u2A3D": { math: "\\intprodr" },
        "\u2A3E": { math: "\\fcmp" },
        "\u2A3F": { math: "\\amalg" },
        "\u2A40": { math: "\\capdot" },
        "\u2A41": { math: "\\uminus" },
        "\u2A42": { math: "\\barcup" },
        "\u2A43": { math: "\\barcap" },
        "\u2A44": { math: "\\capwedge" },
        "\u2A45": { math: "\\cupvee" },
        "\u2A46": { math: "\\cupovercap" },
        "\u2A47": { math: "\\capovercup" },
        "\u2A48": { math: "\\cupbarcap" },
        "\u2A49": { math: "\\capbarcup" },
        "\u2A4A": { math: "\\twocups" },
        "\u2A4B": { math: "\\twocaps" },
        "\u2A4C": { math: "\\closedvarcup" },
        "\u2A4D": { math: "\\closedvarcap" },
        "\u2A4E": { math: "\\Sqcap" },
        "\u2A4F": { math: "\\Sqcup" },
        "\u2A50": { math: "\\closedvarcupsmashprod" },
        "\u2A51": { math: "\\wedgeodot" },
        "\u2A52": { math: "\\veeodot" },
        "\u2A53": { math: "\\ElzAnd" },
        "\u2A54": { math: "\\ElzOr" },
        "\u2A56": { math: "\\ElOr" },
        "\u2A57": { math: "\\bigslopedvee" },
        "\u2A58": { math: "\\bigslopedwedge" },
        "\u2A59": { math: "\\veeonwedge" },
        "\u2A5A": { math: "\\wedgemidvert" },
        "\u2A5B": { math: "\\veemidvert" },
        "\u2A5C": { math: "\\midbarwedge" },
        "\u2A5D": { math: "\\midbarvee" },
        "\u2A5E": { math: "\\perspcorrespond" },
        "\u2A5F": { math: "\\Elzminhat" },
        "\u2A60": { math: "\\wedgedoublebar" },
        "\u2A61": { math: "\\varveebar" },
        "\u2A62": { math: "\\doublebarvee" },
        "\u2A64": { math: "\\dsub" },
        "\u2A65": { math: "\\rsub" },
        "\u2A66": { math: "\\eqdot" },
        "\u2A67": { math: "\\dotequiv" },
        "\u2A68": { math: "\\equivVert" },
        "\u2A69": { math: "\\equivVvert" },
        "\u2A6A": { math: "\\dotsim" },
        "\u2A6B": { math: "\\simrdots" },
        "\u2A6C": { math: "\\simminussim" },
        "\u2A6D": { math: "\\congdot" },
        "\u2A6E": { math: "\\stackrel{*}{=}" },
        "\u2A6F": { math: "\\hatapprox" },
        "\u2A70": { math: "\\approxeqq" },
        "\u2A71": { math: "\\eqqplus" },
        "\u2A72": { math: "\\pluseqq" },
        "\u2A73": { math: "\\eqqsim" },
        "\u2A74": { math: "\\Coloneqq" },
        "\u2A75": { math: "\\Equal" },
        "\u2A76": { math: "\\Same" },
        "\u2A77": { math: "\\ddotseq" },
        "\u2A78": { math: "\\equivDD" },
        "\u2A79": { math: "\\ltcir" },
        "\u2A7A": { math: "\\gtcir" },
        "\u2A7B": { math: "\\ltquest" },
        "\u2A7C": { math: "\\gtquest" },
        "\u2A7D": { math: "\\leqslant", mathpackages: ["amssymb"] },
        "\u2A7D\u0338": { math: "\\nleqslant", mathpackages: ["amssymb"] },
        "\u2A7E": { math: "\\geqslant", mathpackages: ["amssymb"] },
        "\u2A7E\u0338": { math: "\\ngeqslant", mathpackages: ["amssymb"] },
        "\u2A7F": { math: "\\lesdot" },
        "\u2A80": { math: "\\gesdot" },
        "\u2A81": { math: "\\lesdoto" },
        "\u2A82": { math: "\\gesdoto" },
        "\u2A83": { math: "\\lesdotor" },
        "\u2A84": { math: "\\gesdotol" },
        "\u2A85": { math: "\\lessapprox" },
        "\u2A86": { math: "\\gtrapprox" },
        "\u2A87": { math: "\\lneq" },
        "\u2A88": { math: "\\gneq" },
        "\u2A89": { math: "\\lnapprox" },
        "\u2A8A": { math: "\\gnapprox" },
        "\u2A8B": { math: "\\lesseqqgtr" },
        "\u2A8C": { math: "\\gtreqqless" },
        "\u2A8D": { math: "\\lsime" },
        "\u2A8E": { math: "\\gsime" },
        "\u2A8F": { math: "\\lsimg" },
        "\u2A90": { math: "\\gsiml" },
        "\u2A91": { math: "\\lgE" },
        "\u2A92": { math: "\\glE" },
        "\u2A93": { math: "\\lesges" },
        "\u2A94": { math: "\\gesles" },
        "\u2A95": { math: "\\eqslantless" },
        "\u2A96": { math: "\\eqslantgtr" },
        "\u2A97": { math: "\\elsdot" },
        "\u2A98": { math: "\\egsdot" },
        "\u2A99": { math: "\\eqqless" },
        "\u2A9A": { math: "\\eqqgtr" },
        "\u2A9B": { math: "\\eqqslantless" },
        "\u2A9C": { math: "\\eqqslantgtr" },
        "\u2A9D": { math: "\\Pisymbol{ppi020}{117}" },
        "\u2A9E": { math: "\\Pisymbol{ppi020}{105}" },
        "\u2A9F": { math: "\\simlE" },
        "\u2AA0": { math: "\\simgE" },
        "\u2AA1": { math: "\\NestedLessLess" },
        "\u2AA1\u0338": { math: "\\NotNestedLessLess" },
        "\u2AA2": { math: "\\NestedGreaterGreater" },
        "\u2AA2\u0338": { math: "\\NotNestedGreaterGreater" },
        "\u2AA3": { math: "\\partialmeetcontraction" },
        "\u2AA4": { math: "\\glj" },
        "\u2AA5": { math: "\\gla" },
        "\u2AA6": { math: "\\leftslice" },
        "\u2AA7": { math: "\\rightslice" },
        "\u2AA8": { math: "\\lescc" },
        "\u2AA9": { math: "\\gescc" },
        "\u2AAA": { math: "\\smt" },
        "\u2AAB": { math: "\\lat" },
        "\u2AAC": { math: "\\smte" },
        "\u2AAD": { math: "\\late" },
        "\u2AAE": { math: "\\bumpeqq" },
        "\u2AAF": { math: "\\preceq" },
        "\u2AAF\u0338": { math: "\\not\\preceq" },
        "\u2AB0": { math: "\\succeq" },
        "\u2AB0\u0338": { math: "\\not\\succeq" },
        "\u2AB1": { math: "\\precneq" },
        "\u2AB2": { math: "\\succneq" },
        "\u2AB3": { math: "\\preceqq" },
        "\u2AB4": { math: "\\succeqq" },
        "\u2AB5": { math: "\\precneqq" },
        "\u2AB6": { math: "\\succneqq" },
        "\u2AB7": { math: "\\precapprox" },
        "\u2AB8": { math: "\\succapprox" },
        "\u2AB9": { math: "\\precnapprox" },
        "\u2ABA": { math: "\\succnapprox" },
        "\u2ABB": { math: "\\llcurly" },
        "\u2ABC": { math: "\\ggcurly" },
        "\u2ABD": { math: "\\subsetdot" },
        "\u2ABE": { math: "\\supsetdot" },
        "\u2ABF": { math: "\\subsetplus" },
        "\u2AC0": { math: "\\supsetplus" },
        "\u2AC1": { math: "\\submult" },
        "\u2AC2": { math: "\\supmult" },
        "\u2AC3": { math: "\\subedot" },
        "\u2AC4": { math: "\\supedot" },
        "\u2AC5": { math: "\\subseteqq" },
        "\u2AC5\u0338": { math: "\\nsubseteqq" },
        "\u2AC6": { math: "\\supseteqq" },
        "\u2AC6\u0338": { math: "\\nsupseteqq" },
        "\u2AC7": { math: "\\subsim" },
        "\u2AC8": { math: "\\supsim" },
        "\u2AC9": { math: "\\subsetapprox" },
        "\u2ACA": { math: "\\supsetapprox" },
        "\u2ACB": { math: "\\subsetneqq" },
        "\u2ACC": { math: "\\supsetneqq" },
        "\u2ACD": { math: "\\lsqhook" },
        "\u2ACE": { math: "\\rsqhook" },
        "\u2ACF": { math: "\\csub" },
        "\u2AD0": { math: "\\csup" },
        "\u2AD1": { math: "\\csube" },
        "\u2AD2": { math: "\\csupe" },
        "\u2AD3": { math: "\\subsup" },
        "\u2AD4": { math: "\\supsub" },
        "\u2AD5": { math: "\\subsub" },
        "\u2AD6": { math: "\\supsup" },
        "\u2AD7": { math: "\\suphsub" },
        "\u2AD8": { math: "\\supdsub" },
        "\u2AD9": { math: "\\forkv" },
        "\u2ADA": { math: "\\topfork" },
        "\u2ADB": { math: "\\mlcp" },
        "\u2ADC": { math: "\\forks" },
        "\u2ADD": { math: "\\forksnot" },
        "\u2ADD\u0338": { math: "\\forks" },
        "\u2ADE": { math: "\\shortlefttack" },
        "\u2ADF": { math: "\\shortdowntack" },
        "\u2AE0": { math: "\\shortuptack" },
        "\u2AE1": { math: "\\perps" },
        "\u2AE2": { math: "\\vDdash" },
        "\u2AE3": { math: "\\dashV" },
        "\u2AE4": { math: "\\Dashv" },
        "\u2AE5": { math: "\\DashV" },
        "\u2AE6": { math: "\\varVdash" },
        "\u2AE7": { math: "\\Barv" },
        "\u2AE8": { math: "\\vBar" },
        "\u2AE9": { math: "\\vBarv" },
        "\u2AEA": { math: "\\Top" },
        "\u2AEC": { math: "\\Not" },
        "\u2AED": { math: "\\bNot" },
        "\u2AEE": { math: "\\revnmid" },
        "\u2AEF": { math: "\\cirmid" },
        "\u2AF0": { math: "\\midcir" },
        "\u2AF1": { math: "\\topcir" },
        "\u2AF2": { math: "\\nhpar" },
        "\u2AF3": { math: "\\parsim" },
        "\u2AF4": { math: "\\interleave" },
        "\u2AF5": { math: "\\nhVvert" },
        "\u2AF6": { math: "\\Elztdcol" },
        "\u2AF7": { math: "\\lllnest" },
        "\u2AF8": { math: "\\gggnest" },
        "\u2AF9": { math: "\\leqqslant" },
        "\u2AFA": { math: "\\geqqslant" },
        "\u2AFB": { math: "\\trslash" },
        "\u2AFC": { math: "\\biginterleave" },
        "\u2AFD": { math: "{{/}\\!\\!{/}}" },
        "\u2AFD\u20E5": { math: "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}" },
        "\u2AFE": { math: "\\talloblong" },
        "\u2AFF": { math: "\\bigtalloblong" },
        "\u2B12": { math: "\\squaretopblack" },
        "\u2B13": { math: "\\squarebotblack" },
        "\u2B14": { math: "\\squareurblack" },
        "\u2B15": { math: "\\squarellblack" },
        "\u2B16": { math: "\\diamondleftblack" },
        "\u2B17": { math: "\\diamondrightblack" },
        "\u2B18": { math: "\\diamondtopblack" },
        "\u2B19": { math: "\\diamondbotblack" },
        "\u2B1A": { math: "\\dottedsquare" },
        "\u2B1B": { math: "\\blacksquare" },
        "\u2B1C": { math: "\\square" },
        "\u2B1D": { math: "\\vysmblksquare" },
        "\u2B1E": { math: "\\vysmwhtsquare" },
        "\u2B1F": { math: "\\pentagonblack" },
        "\u2B20": { math: "\\pentagon" },
        "\u2B21": { math: "\\varhexagon" },
        "\u2B22": { math: "\\varhexagonblack" },
        "\u2B23": { math: "\\hexagonblack" },
        "\u2B24": { math: "\\lgblkcircle" },
        "\u2B25": { math: "\\mdblkdiamond" },
        "\u2B26": { math: "\\mdwhtdiamond" },
        "\u2B27": { math: "\\mdblklozenge" },
        "\u2B28": { math: "\\mdwhtlozenge" },
        "\u2B29": { math: "\\smblkdiamond" },
        "\u2B2A": { math: "\\smblklozenge" },
        "\u2B2B": { math: "\\smwhtlozenge" },
        "\u2B2C": { math: "\\blkhorzoval" },
        "\u2B2D": { math: "\\whthorzoval" },
        "\u2B2E": { math: "\\blkvertoval" },
        "\u2B2F": { math: "\\whtvertoval" },
        "\u2B30": { math: "\\circleonleftarrow" },
        "\u2B31": { math: "\\leftthreearrows" },
        "\u2B32": { math: "\\leftarrowonoplus" },
        "\u2B33": { math: "\\longleftsquigarrow" },
        "\u2B34": { math: "\\nvtwoheadleftarrow" },
        "\u2B35": { math: "\\nVtwoheadleftarrow" },
        "\u2B36": { math: "\\twoheadmapsfrom" },
        "\u2B37": { math: "\\twoheadleftdbkarrow" },
        "\u2B38": { math: "\\leftdotarrow" },
        "\u2B39": { math: "\\nvleftarrowtail" },
        "\u2B3A": { math: "\\nVleftarrowtail" },
        "\u2B3B": { math: "\\twoheadleftarrowtail" },
        "\u2B3C": { math: "\\nvtwoheadleftarrowtail" },
        "\u2B3D": { math: "\\nVtwoheadleftarrowtail" },
        "\u2B3E": { math: "\\leftarrowx" },
        "\u2B3F": { math: "\\leftcurvedarrow" },
        "\u2B40": { math: "\\equalleftarrow" },
        "\u2B41": { math: "\\bsimilarleftarrow" },
        "\u2B42": { math: "\\leftarrowbackapprox" },
        "\u2B43": { math: "\\rightarrowgtr" },
        "\u2B44": { math: "\\rightarrowsupset" },
        "\u2B45": { math: "\\LLeftarrow" },
        "\u2B46": { math: "\\RRightarrow" },
        "\u2B47": { math: "\\bsimilarrightarrow" },
        "\u2B48": { math: "\\rightarrowbackapprox" },
        "\u2B49": { math: "\\similarleftarrow" },
        "\u2B4A": { math: "\\leftarrowapprox" },
        "\u2B4B": { math: "\\leftarrowbsimilar" },
        "\u2B4C": { math: "\\rightarrowbsimilar" },
        "\u2B50": { math: "\\medwhitestar" },
        "\u2B51": { math: "\\medblackstar" },
        "\u2B52": { math: "\\smwhitestar" },
        "\u2B53": { math: "\\rightpentagonblack" },
        "\u2B54": { math: "\\rightpentagon" },
        "\u3008": { math: "\\langle" },
        "\u3009": { math: "\\rangle" },
        "\u3012": { math: "\\postalmark" },
        "\u3014": { math: "\\lbrbrak" },
        "\u3015": { math: "\\rbrbrak" },
        "\u301A": { math: "\\openbracketleft" },
        "\u301B": { math: "\\openbracketright" },
        "\u3030": { math: "\\hzigzag" },
        \uFB00: { text: "ff" },
        \uFB01: { text: "fi" },
        \uFB02: { text: "fl" },
        \uFB03: { text: "ffi" },
        \uFB04: { text: "ffl" },
        \uFB05: { text: "st" },
        \uFB06: { text: "st" },
        "\uFFFD": { text: "{\\dbend}" },
        "\u{1D400}": { math: "\\mathbf{A}" },
        "\u{1D401}": { math: "\\mathbf{B}" },
        "\u{1D402}": { math: "\\mathbf{C}" },
        "\u{1D403}": { math: "\\mathbf{D}" },
        "\u{1D404}": { math: "\\mathbf{E}" },
        "\u{1D405}": { math: "\\mathbf{F}" },
        "\u{1D406}": { math: "\\mathbf{G}" },
        "\u{1D407}": { math: "\\mathbf{H}" },
        "\u{1D408}": { math: "\\mathbf{I}" },
        "\u{1D409}": { math: "\\mathbf{J}" },
        "\u{1D40A}": { math: "\\mathbf{K}" },
        "\u{1D40B}": { math: "\\mathbf{L}" },
        "\u{1D40C}": { math: "\\mathbf{M}" },
        "\u{1D40D}": { math: "\\mathbf{N}" },
        "\u{1D40E}": { math: "\\mathbf{O}" },
        "\u{1D40F}": { math: "\\mathbf{P}" },
        "\u{1D410}": { math: "\\mathbf{Q}" },
        "\u{1D411}": { math: "\\mathbf{R}" },
        "\u{1D412}": { math: "\\mathbf{S}" },
        "\u{1D413}": { math: "\\mathbf{T}" },
        "\u{1D414}": { math: "\\mathbf{U}" },
        "\u{1D415}": { math: "\\mathbf{V}" },
        "\u{1D416}": { math: "\\mathbf{W}" },
        "\u{1D417}": { math: "\\mathbf{X}" },
        "\u{1D418}": { math: "\\mathbf{Y}" },
        "\u{1D419}": { math: "\\mathbf{Z}" },
        "\u{1D41A}": { math: "\\mathbf{a}" },
        "\u{1D41B}": { math: "\\mathbf{b}" },
        "\u{1D41C}": { math: "\\mathbf{c}" },
        "\u{1D41D}": { math: "\\mathbf{d}" },
        "\u{1D41E}": { math: "\\mathbf{e}" },
        "\u{1D41F}": { math: "\\mathbf{f}" },
        "\u{1D420}": { math: "\\mathbf{g}" },
        "\u{1D421}": { math: "\\mathbf{h}" },
        "\u{1D422}": { math: "\\mathbf{i}" },
        "\u{1D423}": { math: "\\mathbf{j}" },
        "\u{1D424}": { math: "\\mathbf{k}" },
        "\u{1D425}": { math: "\\mathbf{l}" },
        "\u{1D426}": { math: "\\mathbf{m}" },
        "\u{1D427}": { math: "\\mathbf{n}" },
        "\u{1D428}": { math: "\\mathbf{o}" },
        "\u{1D429}": { math: "\\mathbf{p}" },
        "\u{1D42A}": { math: "\\mathbf{q}" },
        "\u{1D42B}": { math: "\\mathbf{r}" },
        "\u{1D42C}": { math: "\\mathbf{s}" },
        "\u{1D42D}": { math: "\\mathbf{t}" },
        "\u{1D42E}": { math: "\\mathbf{u}" },
        "\u{1D42F}": { math: "\\mathbf{v}" },
        "\u{1D430}": { math: "\\mathbf{w}" },
        "\u{1D431}": { math: "\\mathbf{x}" },
        "\u{1D432}": { math: "\\mathbf{y}" },
        "\u{1D433}": { math: "\\mathbf{z}" },
        "\u{1D434}": { math: "\\mathsl{A}" },
        "\u{1D435}": { math: "\\mathsl{B}" },
        "\u{1D436}": { math: "\\mathsl{C}" },
        "\u{1D437}": { math: "\\mathsl{D}" },
        "\u{1D438}": { math: "\\mathsl{E}" },
        "\u{1D439}": { math: "\\mathsl{F}" },
        "\u{1D43A}": { math: "\\mathsl{G}" },
        "\u{1D43B}": { math: "\\mathsl{H}" },
        "\u{1D43C}": { math: "\\mathsl{I}" },
        "\u{1D43D}": { math: "\\mathsl{J}" },
        "\u{1D43E}": { math: "\\mathsl{K}" },
        "\u{1D43F}": { math: "\\mathsl{L}" },
        "\u{1D440}": { math: "\\mathsl{M}" },
        "\u{1D441}": { math: "\\mathsl{N}" },
        "\u{1D442}": { math: "\\mathsl{O}" },
        "\u{1D443}": { math: "\\mathsl{P}" },
        "\u{1D444}": { math: "\\mathsl{Q}" },
        "\u{1D445}": { math: "\\mathsl{R}" },
        "\u{1D446}": { math: "\\mathsl{S}" },
        "\u{1D447}": { math: "\\mathsl{T}" },
        "\u{1D448}": { math: "\\mathsl{U}" },
        "\u{1D449}": { math: "\\mathsl{V}" },
        "\u{1D44A}": { math: "\\mathsl{W}" },
        "\u{1D44B}": { math: "\\mathsl{X}" },
        "\u{1D44C}": { math: "\\mathsl{Y}" },
        "\u{1D44D}": { math: "\\mathsl{Z}" },
        "\u{1D44E}": { math: "\\mathsl{a}" },
        "\u{1D44F}": { math: "\\mathsl{b}" },
        "\u{1D450}": { math: "\\mathsl{c}" },
        "\u{1D451}": { math: "\\mathsl{d}" },
        "\u{1D452}": { math: "\\mathsl{e}" },
        "\u{1D453}": { math: "\\mathsl{f}" },
        "\u{1D454}": { math: "\\mathsl{g}" },
        "\u{1D456}": { math: "\\mathsl{i}" },
        "\u{1D457}": { math: "\\mathsl{j}" },
        "\u{1D458}": { math: "\\mathsl{k}" },
        "\u{1D459}": { math: "\\mathsl{l}" },
        "\u{1D45A}": { math: "\\mathsl{m}" },
        "\u{1D45B}": { math: "\\mathsl{n}" },
        "\u{1D45C}": { math: "\\mathsl{o}" },
        "\u{1D45D}": { math: "\\mathsl{p}" },
        "\u{1D45E}": { math: "\\mathsl{q}" },
        "\u{1D45F}": { math: "\\mathsl{r}" },
        "\u{1D460}": { math: "\\mathsl{s}" },
        "\u{1D461}": { math: "\\mathsl{t}" },
        "\u{1D462}": { math: "\\mathsl{u}" },
        "\u{1D463}": { math: "\\mathsl{v}" },
        "\u{1D464}": { math: "\\mathsl{w}" },
        "\u{1D465}": { math: "\\mathsl{x}" },
        "\u{1D466}": { math: "\\mathsl{y}" },
        "\u{1D467}": { math: "\\mathsl{z}" },
        "\u{1D468}": { math: "\\mathbit{A}" },
        "\u{1D469}": { math: "\\mathbit{B}" },
        "\u{1D46A}": { math: "\\mathbit{C}" },
        "\u{1D46B}": { math: "\\mathbit{D}" },
        "\u{1D46C}": { math: "\\mathbit{E}" },
        "\u{1D46D}": { math: "\\mathbit{F}" },
        "\u{1D46E}": { math: "\\mathbit{G}" },
        "\u{1D46F}": { math: "\\mathbit{H}" },
        "\u{1D470}": { math: "\\mathbit{I}" },
        "\u{1D471}": { math: "\\mathbit{J}" },
        "\u{1D472}": { math: "\\mathbit{K}" },
        "\u{1D473}": { math: "\\mathbit{L}" },
        "\u{1D474}": { math: "\\mathbit{M}" },
        "\u{1D475}": { math: "\\mathbit{N}" },
        "\u{1D476}": { math: "\\mathbit{O}" },
        "\u{1D477}": { math: "\\mathbit{P}" },
        "\u{1D478}": { math: "\\mathbit{Q}" },
        "\u{1D479}": { math: "\\mathbit{R}" },
        "\u{1D47A}": { math: "\\mathbit{S}" },
        "\u{1D47B}": { math: "\\mathbit{T}" },
        "\u{1D47C}": { math: "\\mathbit{U}" },
        "\u{1D47D}": { math: "\\mathbit{V}" },
        "\u{1D47E}": { math: "\\mathbit{W}" },
        "\u{1D47F}": { math: "\\mathbit{X}" },
        "\u{1D480}": { math: "\\mathbit{Y}" },
        "\u{1D481}": { math: "\\mathbit{Z}" },
        "\u{1D482}": { math: "\\mathbit{a}" },
        "\u{1D483}": { math: "\\mathbit{b}" },
        "\u{1D484}": { math: "\\mathbit{c}" },
        "\u{1D485}": { math: "\\mathbit{d}" },
        "\u{1D486}": { math: "\\mathbit{e}" },
        "\u{1D487}": { math: "\\mathbit{f}" },
        "\u{1D488}": { math: "\\mathbit{g}" },
        "\u{1D489}": { math: "\\mathbit{h}" },
        "\u{1D48A}": { math: "\\mathbit{i}" },
        "\u{1D48B}": { math: "\\mathbit{j}" },
        "\u{1D48C}": { math: "\\mathbit{k}" },
        "\u{1D48D}": { math: "\\mathbit{l}" },
        "\u{1D48E}": { math: "\\mathbit{m}" },
        "\u{1D48F}": { math: "\\mathbit{n}" },
        "\u{1D490}": { math: "\\mathbit{o}" },
        "\u{1D491}": { math: "\\mathbit{p}" },
        "\u{1D492}": { math: "\\mathbit{q}" },
        "\u{1D493}": { math: "\\mathbit{r}" },
        "\u{1D494}": { math: "\\mathbit{s}" },
        "\u{1D495}": { math: "\\mathbit{t}" },
        "\u{1D496}": { math: "\\mathbit{u}" },
        "\u{1D497}": { math: "\\mathbit{v}" },
        "\u{1D498}": { math: "\\mathbit{w}" },
        "\u{1D499}": { math: "\\mathbit{x}" },
        "\u{1D49A}": { math: "\\mathbit{y}" },
        "\u{1D49B}": { math: "\\mathbit{z}" },
        "\u{1D49C}": { math: "\\mathscr{A}" },
        "\u{1D49E}": { math: "\\mathscr{C}" },
        "\u{1D49F}": { math: "\\mathscr{D}" },
        "\u{1D4A2}": { math: "\\mathscr{G}" },
        "\u{1D4A5}": { math: "\\mathscr{J}" },
        "\u{1D4A6}": { math: "\\mathscr{K}" },
        "\u{1D4A9}": { math: "\\mathscr{N}" },
        "\u{1D4AA}": { math: "\\mathscr{O}" },
        "\u{1D4AB}": { math: "\\mathscr{P}" },
        "\u{1D4AC}": { math: "\\mathscr{Q}" },
        "\u{1D4AE}": { math: "\\mathscr{S}" },
        "\u{1D4AF}": { math: "\\mathscr{T}" },
        "\u{1D4B0}": { math: "\\mathscr{U}" },
        "\u{1D4B1}": { math: "\\mathscr{V}" },
        "\u{1D4B2}": { math: "\\mathscr{W}" },
        "\u{1D4B3}": { math: "\\mathscr{X}" },
        "\u{1D4B4}": { math: "\\mathscr{Y}" },
        "\u{1D4B5}": { math: "\\mathscr{Z}" },
        "\u{1D4B6}": { math: "\\mathscr{a}" },
        "\u{1D4B7}": { math: "\\mathscr{b}" },
        "\u{1D4B8}": { math: "\\mathscr{c}" },
        "\u{1D4B9}": { math: "\\mathscr{d}" },
        "\u{1D4BB}": { math: "\\mathscr{f}" },
        "\u{1D4BD}": { math: "\\mathscr{h}" },
        "\u{1D4BE}": { math: "\\mathscr{i}" },
        "\u{1D4BF}": { math: "\\mathscr{j}" },
        "\u{1D4C0}": { math: "\\mathscr{k}" },
        "\u{1D4C1}": { math: "\\mathscr{l}" },
        "\u{1D4C2}": { math: "\\mathscr{m}" },
        "\u{1D4C3}": { math: "\\mathscr{n}" },
        "\u{1D4C5}": { math: "\\mathscr{p}" },
        "\u{1D4C6}": { math: "\\mathscr{q}" },
        "\u{1D4C7}": { math: "\\mathscr{r}" },
        "\u{1D4C8}": { math: "\\mathscr{s}" },
        "\u{1D4C9}": { math: "\\mathscr{t}" },
        "\u{1D4CA}": { math: "\\mathscr{u}" },
        "\u{1D4CB}": { math: "\\mathscr{v}" },
        "\u{1D4CC}": { math: "\\mathscr{w}" },
        "\u{1D4CD}": { math: "\\mathscr{x}" },
        "\u{1D4CE}": { math: "\\mathscr{y}" },
        "\u{1D4CF}": { math: "\\mathscr{z}" },
        "\u{1D4D0}": { math: "\\mathmit{A}" },
        "\u{1D4D1}": { math: "\\mathmit{B}" },
        "\u{1D4D2}": { math: "\\mathmit{C}" },
        "\u{1D4D3}": { math: "\\mathmit{D}" },
        "\u{1D4D4}": { math: "\\mathmit{E}" },
        "\u{1D4D5}": { math: "\\mathmit{F}" },
        "\u{1D4D6}": { math: "\\mathmit{G}" },
        "\u{1D4D7}": { math: "\\mathmit{H}" },
        "\u{1D4D8}": { math: "\\mathmit{I}" },
        "\u{1D4D9}": { math: "\\mathmit{J}" },
        "\u{1D4DA}": { math: "\\mathmit{K}" },
        "\u{1D4DB}": { math: "\\mathmit{L}" },
        "\u{1D4DC}": { math: "\\mathmit{M}" },
        "\u{1D4DD}": { math: "\\mathmit{N}" },
        "\u{1D4DE}": { math: "\\mathmit{O}" },
        "\u{1D4DF}": { math: "\\mathmit{P}" },
        "\u{1D4E0}": { math: "\\mathmit{Q}" },
        "\u{1D4E1}": { math: "\\mathmit{R}" },
        "\u{1D4E2}": { math: "\\mathmit{S}" },
        "\u{1D4E3}": { math: "\\mathmit{T}" },
        "\u{1D4E4}": { math: "\\mathmit{U}" },
        "\u{1D4E5}": { math: "\\mathmit{V}" },
        "\u{1D4E6}": { math: "\\mathmit{W}" },
        "\u{1D4E7}": { math: "\\mathmit{X}" },
        "\u{1D4E8}": { math: "\\mathmit{Y}" },
        "\u{1D4E9}": { math: "\\mathmit{Z}" },
        "\u{1D4EA}": { math: "\\mathmit{a}" },
        "\u{1D4EB}": { math: "\\mathmit{b}" },
        "\u{1D4EC}": { math: "\\mathmit{c}" },
        "\u{1D4ED}": { math: "\\mathmit{d}" },
        "\u{1D4EE}": { math: "\\mathmit{e}" },
        "\u{1D4EF}": { math: "\\mathmit{f}" },
        "\u{1D4F0}": { math: "\\mathmit{g}" },
        "\u{1D4F1}": { math: "\\mathmit{h}" },
        "\u{1D4F2}": { math: "\\mathmit{i}" },
        "\u{1D4F3}": { math: "\\mathmit{j}" },
        "\u{1D4F4}": { math: "\\mathmit{k}" },
        "\u{1D4F5}": { math: "\\mathmit{l}" },
        "\u{1D4F6}": { math: "\\mathmit{m}" },
        "\u{1D4F7}": { math: "\\mathmit{n}" },
        "\u{1D4F8}": { math: "\\mathmit{o}" },
        "\u{1D4F9}": { math: "\\mathmit{p}" },
        "\u{1D4FA}": { math: "\\mathmit{q}" },
        "\u{1D4FB}": { math: "\\mathmit{r}" },
        "\u{1D4FC}": { math: "\\mathmit{s}" },
        "\u{1D4FD}": { math: "\\mathmit{t}" },
        "\u{1D4FE}": { math: "\\mathmit{u}" },
        "\u{1D4FF}": { math: "\\mathmit{v}" },
        "\u{1D500}": { math: "\\mathmit{w}" },
        "\u{1D501}": { math: "\\mathmit{x}" },
        "\u{1D502}": { math: "\\mathmit{y}" },
        "\u{1D503}": { math: "\\mathmit{z}" },
        "\u{1D504}": { math: "\\mathfrak{A}" },
        "\u{1D505}": { math: "\\mathfrak{B}" },
        "\u{1D507}": { math: "\\mathfrak{D}" },
        "\u{1D508}": { math: "\\mathfrak{E}" },
        "\u{1D509}": { math: "\\mathfrak{F}" },
        "\u{1D50A}": { math: "\\mathfrak{G}" },
        "\u{1D50D}": { math: "\\mathfrak{J}" },
        "\u{1D50E}": { math: "\\mathfrak{K}" },
        "\u{1D50F}": { math: "\\mathfrak{L}" },
        "\u{1D510}": { math: "\\mathfrak{M}" },
        "\u{1D511}": { math: "\\mathfrak{N}" },
        "\u{1D512}": { math: "\\mathfrak{O}" },
        "\u{1D513}": { math: "\\mathfrak{P}" },
        "\u{1D514}": { math: "\\mathfrak{Q}" },
        "\u{1D516}": { math: "\\mathfrak{S}" },
        "\u{1D517}": { math: "\\mathfrak{T}" },
        "\u{1D518}": { math: "\\mathfrak{U}" },
        "\u{1D519}": { math: "\\mathfrak{V}" },
        "\u{1D51A}": { math: "\\mathfrak{W}" },
        "\u{1D51B}": { math: "\\mathfrak{X}" },
        "\u{1D51C}": { math: "\\mathfrak{Y}" },
        "\u{1D51E}": { math: "\\mathfrak{a}" },
        "\u{1D51F}": { math: "\\mathfrak{b}" },
        "\u{1D520}": { math: "\\mathfrak{c}" },
        "\u{1D521}": { math: "\\mathfrak{d}" },
        "\u{1D522}": { math: "\\mathfrak{e}" },
        "\u{1D523}": { math: "\\mathfrak{f}" },
        "\u{1D524}": { math: "\\mathfrak{g}" },
        "\u{1D525}": { math: "\\mathfrak{h}" },
        "\u{1D526}": { math: "\\mathfrak{i}" },
        "\u{1D527}": { math: "\\mathfrak{j}" },
        "\u{1D528}": { math: "\\mathfrak{k}" },
        "\u{1D529}": { math: "\\mathfrak{l}" },
        "\u{1D52A}": { math: "\\mathfrak{m}" },
        "\u{1D52B}": { math: "\\mathfrak{n}" },
        "\u{1D52C}": { math: "\\mathfrak{o}" },
        "\u{1D52D}": { math: "\\mathfrak{p}" },
        "\u{1D52E}": { math: "\\mathfrak{q}" },
        "\u{1D52F}": { math: "\\mathfrak{r}" },
        "\u{1D530}": { math: "\\mathfrak{s}" },
        "\u{1D531}": { math: "\\mathfrak{t}" },
        "\u{1D532}": { math: "\\mathfrak{u}" },
        "\u{1D533}": { math: "\\mathfrak{v}" },
        "\u{1D534}": { math: "\\mathfrak{w}" },
        "\u{1D535}": { math: "\\mathfrak{x}" },
        "\u{1D536}": { math: "\\mathfrak{y}" },
        "\u{1D537}": { math: "\\mathfrak{z}" },
        "\u{1D538}": { math: "\\mathbb{A}" },
        "\u{1D539}": { math: "\\mathbb{B}" },
        "\u{1D53B}": { math: "\\mathbb{D}" },
        "\u{1D53C}": { math: "\\mathbb{E}" },
        "\u{1D53D}": { math: "\\mathbb{F}" },
        "\u{1D53E}": { math: "\\mathbb{G}" },
        "\u{1D540}": { math: "\\mathbb{I}" },
        "\u{1D541}": { math: "\\mathbb{J}" },
        "\u{1D542}": { math: "\\mathbb{K}" },
        "\u{1D543}": { math: "\\mathbb{L}" },
        "\u{1D544}": { math: "\\mathbb{M}" },
        "\u{1D546}": { math: "\\mathbb{O}" },
        "\u{1D54A}": { math: "\\mathbb{S}" },
        "\u{1D54B}": { math: "\\mathbb{T}" },
        "\u{1D54C}": { math: "\\mathbb{U}" },
        "\u{1D54D}": { math: "\\mathbb{V}" },
        "\u{1D54E}": { math: "\\mathbb{W}" },
        "\u{1D54F}": { math: "\\mathbb{X}" },
        "\u{1D550}": { math: "\\mathbb{Y}" },
        "\u{1D552}": { math: "\\mathbb{a}" },
        "\u{1D553}": { math: "\\mathbb{b}" },
        "\u{1D554}": { math: "\\mathbb{c}" },
        "\u{1D555}": { math: "\\mathbb{d}" },
        "\u{1D556}": { math: "\\mathbb{e}" },
        "\u{1D557}": { math: "\\mathbb{f}" },
        "\u{1D558}": { math: "\\mathbb{g}" },
        "\u{1D559}": { math: "\\mathbb{h}" },
        "\u{1D55A}": { math: "\\mathbb{i}" },
        "\u{1D55B}": { math: "\\mathbb{j}" },
        "\u{1D55C}": { math: "\\mathbb{k}" },
        "\u{1D55D}": { math: "\\mathbb{l}" },
        "\u{1D55E}": { math: "\\mathbb{m}" },
        "\u{1D55F}": { math: "\\mathbb{n}" },
        "\u{1D560}": { math: "\\mathbb{o}" },
        "\u{1D561}": { math: "\\mathbb{p}" },
        "\u{1D562}": { math: "\\mathbb{q}" },
        "\u{1D563}": { math: "\\mathbb{r}" },
        "\u{1D564}": { math: "\\mathbb{s}" },
        "\u{1D565}": { math: "\\mathbb{t}" },
        "\u{1D566}": { math: "\\mathbb{u}" },
        "\u{1D567}": { math: "\\mathbb{v}" },
        "\u{1D568}": { math: "\\mathbb{w}" },
        "\u{1D569}": { math: "\\mathbb{x}" },
        "\u{1D56A}": { math: "\\mathbb{y}" },
        "\u{1D56B}": { math: "\\mathbb{z}" },
        "\u{1D56C}": { math: "\\mathslbb{A}" },
        "\u{1D56D}": { math: "\\mathslbb{B}" },
        "\u{1D56E}": { math: "\\mathslbb{C}" },
        "\u{1D56F}": { math: "\\mathslbb{D}" },
        "\u{1D570}": { math: "\\mathslbb{E}" },
        "\u{1D571}": { math: "\\mathslbb{F}" },
        "\u{1D572}": { math: "\\mathslbb{G}" },
        "\u{1D573}": { math: "\\mathslbb{H}" },
        "\u{1D574}": { math: "\\mathslbb{I}" },
        "\u{1D575}": { math: "\\mathslbb{J}" },
        "\u{1D576}": { math: "\\mathslbb{K}" },
        "\u{1D577}": { math: "\\mathslbb{L}" },
        "\u{1D578}": { math: "\\mathslbb{M}" },
        "\u{1D579}": { math: "\\mathslbb{N}" },
        "\u{1D57A}": { math: "\\mathslbb{O}" },
        "\u{1D57B}": { math: "\\mathslbb{P}" },
        "\u{1D57C}": { math: "\\mathslbb{Q}" },
        "\u{1D57D}": { math: "\\mathslbb{R}" },
        "\u{1D57E}": { math: "\\mathslbb{S}" },
        "\u{1D57F}": { math: "\\mathslbb{T}" },
        "\u{1D580}": { math: "\\mathslbb{U}" },
        "\u{1D581}": { math: "\\mathslbb{V}" },
        "\u{1D582}": { math: "\\mathslbb{W}" },
        "\u{1D583}": { math: "\\mathslbb{X}" },
        "\u{1D584}": { math: "\\mathslbb{Y}" },
        "\u{1D585}": { math: "\\mathslbb{Z}" },
        "\u{1D586}": { math: "\\mathslbb{a}" },
        "\u{1D587}": { math: "\\mathslbb{b}" },
        "\u{1D588}": { math: "\\mathslbb{c}" },
        "\u{1D589}": { math: "\\mathslbb{d}" },
        "\u{1D58A}": { math: "\\mathslbb{e}" },
        "\u{1D58B}": { math: "\\mathslbb{f}" },
        "\u{1D58C}": { math: "\\mathslbb{g}" },
        "\u{1D58D}": { math: "\\mathslbb{h}" },
        "\u{1D58E}": { math: "\\mathslbb{i}" },
        "\u{1D58F}": { math: "\\mathslbb{j}" },
        "\u{1D590}": { math: "\\mathslbb{k}" },
        "\u{1D591}": { math: "\\mathslbb{l}" },
        "\u{1D592}": { math: "\\mathslbb{m}" },
        "\u{1D593}": { math: "\\mathslbb{n}" },
        "\u{1D594}": { math: "\\mathslbb{o}" },
        "\u{1D595}": { math: "\\mathslbb{p}" },
        "\u{1D596}": { math: "\\mathslbb{q}" },
        "\u{1D597}": { math: "\\mathslbb{r}" },
        "\u{1D598}": { math: "\\mathslbb{s}" },
        "\u{1D599}": { math: "\\mathslbb{t}" },
        "\u{1D59A}": { math: "\\mathslbb{u}" },
        "\u{1D59B}": { math: "\\mathslbb{v}" },
        "\u{1D59C}": { math: "\\mathslbb{w}" },
        "\u{1D59D}": { math: "\\mathslbb{x}" },
        "\u{1D59E}": { math: "\\mathslbb{y}" },
        "\u{1D59F}": { math: "\\mathslbb{z}" },
        "\u{1D5A0}": { math: "\\mathsf{A}" },
        "\u{1D5A1}": { math: "\\mathsf{B}" },
        "\u{1D5A2}": { math: "\\mathsf{C}" },
        "\u{1D5A3}": { math: "\\mathsf{D}" },
        "\u{1D5A4}": { math: "\\mathsf{E}" },
        "\u{1D5A5}": { math: "\\mathsf{F}" },
        "\u{1D5A6}": { math: "\\mathsf{G}" },
        "\u{1D5A7}": { math: "\\mathsf{H}" },
        "\u{1D5A8}": { math: "\\mathsf{I}" },
        "\u{1D5A9}": { math: "\\mathsf{J}" },
        "\u{1D5AA}": { math: "\\mathsf{K}" },
        "\u{1D5AB}": { math: "\\mathsf{L}" },
        "\u{1D5AC}": { math: "\\mathsf{M}" },
        "\u{1D5AD}": { math: "\\mathsf{N}" },
        "\u{1D5AE}": { math: "\\mathsf{O}" },
        "\u{1D5AF}": { math: "\\mathsf{P}" },
        "\u{1D5B0}": { math: "\\mathsf{Q}" },
        "\u{1D5B1}": { math: "\\mathsf{R}" },
        "\u{1D5B2}": { math: "\\mathsf{S}" },
        "\u{1D5B3}": { math: "\\mathsf{T}" },
        "\u{1D5B4}": { math: "\\mathsf{U}" },
        "\u{1D5B5}": { math: "\\mathsf{V}" },
        "\u{1D5B6}": { math: "\\mathsf{W}" },
        "\u{1D5B7}": { math: "\\mathsf{X}" },
        "\u{1D5B8}": { math: "\\mathsf{Y}" },
        "\u{1D5B9}": { math: "\\mathsf{Z}" },
        "\u{1D5BA}": { math: "\\mathsf{a}" },
        "\u{1D5BB}": { math: "\\mathsf{b}" },
        "\u{1D5BC}": { math: "\\mathsf{c}" },
        "\u{1D5BD}": { math: "\\mathsf{d}" },
        "\u{1D5BE}": { math: "\\mathsf{e}" },
        "\u{1D5BF}": { math: "\\mathsf{f}" },
        "\u{1D5C0}": { math: "\\mathsf{g}" },
        "\u{1D5C1}": { math: "\\mathsf{h}" },
        "\u{1D5C2}": { math: "\\mathsf{i}" },
        "\u{1D5C3}": { math: "\\mathsf{j}" },
        "\u{1D5C4}": { math: "\\mathsf{k}" },
        "\u{1D5C5}": { math: "\\mathsf{l}" },
        "\u{1D5C6}": { math: "\\mathsf{m}" },
        "\u{1D5C7}": { math: "\\mathsf{n}" },
        "\u{1D5C8}": { math: "\\mathsf{o}" },
        "\u{1D5C9}": { math: "\\mathsf{p}" },
        "\u{1D5CA}": { math: "\\mathsf{q}" },
        "\u{1D5CB}": { math: "\\mathsf{r}" },
        "\u{1D5CC}": { math: "\\mathsf{s}" },
        "\u{1D5CD}": { math: "\\mathsf{t}" },
        "\u{1D5CE}": { math: "\\mathsf{u}" },
        "\u{1D5CF}": { math: "\\mathsf{v}" },
        "\u{1D5D0}": { math: "\\mathsf{w}" },
        "\u{1D5D1}": { math: "\\mathsf{x}" },
        "\u{1D5D2}": { math: "\\mathsf{y}" },
        "\u{1D5D3}": { math: "\\mathsf{z}" },
        "\u{1D5D4}": { math: "\\mathsfbf{A}" },
        "\u{1D5D5}": { math: "\\mathsfbf{B}" },
        "\u{1D5D6}": { math: "\\mathsfbf{C}" },
        "\u{1D5D7}": { math: "\\mathsfbf{D}" },
        "\u{1D5D8}": { math: "\\mathsfbf{E}" },
        "\u{1D5D9}": { math: "\\mathsfbf{F}" },
        "\u{1D5DA}": { math: "\\mathsfbf{G}" },
        "\u{1D5DB}": { math: "\\mathsfbf{H}" },
        "\u{1D5DC}": { math: "\\mathsfbf{I}" },
        "\u{1D5DD}": { math: "\\mathsfbf{J}" },
        "\u{1D5DE}": { math: "\\mathsfbf{K}" },
        "\u{1D5DF}": { math: "\\mathsfbf{L}" },
        "\u{1D5E0}": { math: "\\mathsfbf{M}" },
        "\u{1D5E1}": { math: "\\mathsfbf{N}" },
        "\u{1D5E2}": { math: "\\mathsfbf{O}" },
        "\u{1D5E3}": { math: "\\mathsfbf{P}" },
        "\u{1D5E4}": { math: "\\mathsfbf{Q}" },
        "\u{1D5E5}": { math: "\\mathsfbf{R}" },
        "\u{1D5E6}": { math: "\\mathsfbf{S}" },
        "\u{1D5E7}": { math: "\\mathsfbf{T}" },
        "\u{1D5E8}": { math: "\\mathsfbf{U}" },
        "\u{1D5E9}": { math: "\\mathsfbf{V}" },
        "\u{1D5EA}": { math: "\\mathsfbf{W}" },
        "\u{1D5EB}": { math: "\\mathsfbf{X}" },
        "\u{1D5EC}": { math: "\\mathsfbf{Y}" },
        "\u{1D5ED}": { math: "\\mathsfbf{Z}" },
        "\u{1D5EE}": { math: "\\mathsfbf{a}" },
        "\u{1D5EF}": { math: "\\mathsfbf{b}" },
        "\u{1D5F0}": { math: "\\mathsfbf{c}" },
        "\u{1D5F1}": { math: "\\mathsfbf{d}" },
        "\u{1D5F2}": { math: "\\mathsfbf{e}" },
        "\u{1D5F3}": { math: "\\mathsfbf{f}" },
        "\u{1D5F4}": { math: "\\mathsfbf{g}" },
        "\u{1D5F5}": { math: "\\mathsfbf{h}" },
        "\u{1D5F6}": { math: "\\mathsfbf{i}" },
        "\u{1D5F7}": { math: "\\mathsfbf{j}" },
        "\u{1D5F8}": { math: "\\mathsfbf{k}" },
        "\u{1D5F9}": { math: "\\mathsfbf{l}" },
        "\u{1D5FA}": { math: "\\mathsfbf{m}" },
        "\u{1D5FB}": { math: "\\mathsfbf{n}" },
        "\u{1D5FC}": { math: "\\mathsfbf{o}" },
        "\u{1D5FD}": { math: "\\mathsfbf{p}" },
        "\u{1D5FE}": { math: "\\mathsfbf{q}" },
        "\u{1D5FF}": { math: "\\mathsfbf{r}" },
        "\u{1D600}": { math: "\\mathsfbf{s}" },
        "\u{1D601}": { math: "\\mathsfbf{t}" },
        "\u{1D602}": { math: "\\mathsfbf{u}" },
        "\u{1D603}": { math: "\\mathsfbf{v}" },
        "\u{1D604}": { math: "\\mathsfbf{w}" },
        "\u{1D605}": { math: "\\mathsfbf{x}" },
        "\u{1D606}": { math: "\\mathsfbf{y}" },
        "\u{1D607}": { math: "\\mathsfbf{z}" },
        "\u{1D608}": { math: "\\mathsfsl{A}" },
        "\u{1D609}": { math: "\\mathsfsl{B}" },
        "\u{1D60A}": { math: "\\mathsfsl{C}" },
        "\u{1D60B}": { math: "\\mathsfsl{D}" },
        "\u{1D60C}": { math: "\\mathsfsl{E}" },
        "\u{1D60D}": { math: "\\mathsfsl{F}" },
        "\u{1D60E}": { math: "\\mathsfsl{G}" },
        "\u{1D60F}": { math: "\\mathsfsl{H}" },
        "\u{1D610}": { math: "\\mathsfsl{I}" },
        "\u{1D611}": { math: "\\mathsfsl{J}" },
        "\u{1D612}": { math: "\\mathsfsl{K}" },
        "\u{1D613}": { math: "\\mathsfsl{L}" },
        "\u{1D614}": { math: "\\mathsfsl{M}" },
        "\u{1D615}": { math: "\\mathsfsl{N}" },
        "\u{1D616}": { math: "\\mathsfsl{O}" },
        "\u{1D617}": { math: "\\mathsfsl{P}" },
        "\u{1D618}": { math: "\\mathsfsl{Q}" },
        "\u{1D619}": { math: "\\mathsfsl{R}" },
        "\u{1D61A}": { math: "\\mathsfsl{S}" },
        "\u{1D61B}": { math: "\\mathsfsl{T}" },
        "\u{1D61C}": { math: "\\mathsfsl{U}" },
        "\u{1D61D}": { math: "\\mathsfsl{V}" },
        "\u{1D61E}": { math: "\\mathsfsl{W}" },
        "\u{1D61F}": { math: "\\mathsfsl{X}" },
        "\u{1D620}": { math: "\\mathsfsl{Y}" },
        "\u{1D621}": { math: "\\mathsfsl{Z}" },
        "\u{1D622}": { math: "\\mathsfsl{a}" },
        "\u{1D623}": { math: "\\mathsfsl{b}" },
        "\u{1D624}": { math: "\\mathsfsl{c}" },
        "\u{1D625}": { math: "\\mathsfsl{d}" },
        "\u{1D626}": { math: "\\mathsfsl{e}" },
        "\u{1D627}": { math: "\\mathsfsl{f}" },
        "\u{1D628}": { math: "\\mathsfsl{g}" },
        "\u{1D629}": { math: "\\mathsfsl{h}" },
        "\u{1D62A}": { math: "\\mathsfsl{i}" },
        "\u{1D62B}": { math: "\\mathsfsl{j}" },
        "\u{1D62C}": { math: "\\mathsfsl{k}" },
        "\u{1D62D}": { math: "\\mathsfsl{l}" },
        "\u{1D62E}": { math: "\\mathsfsl{m}" },
        "\u{1D62F}": { math: "\\mathsfsl{n}" },
        "\u{1D630}": { math: "\\mathsfsl{o}" },
        "\u{1D631}": { math: "\\mathsfsl{p}" },
        "\u{1D632}": { math: "\\mathsfsl{q}" },
        "\u{1D633}": { math: "\\mathsfsl{r}" },
        "\u{1D634}": { math: "\\mathsfsl{s}" },
        "\u{1D635}": { math: "\\mathsfsl{t}" },
        "\u{1D636}": { math: "\\mathsfsl{u}" },
        "\u{1D637}": { math: "\\mathsfsl{v}" },
        "\u{1D638}": { math: "\\mathsfsl{w}" },
        "\u{1D639}": { math: "\\mathsfsl{x}" },
        "\u{1D63A}": { math: "\\mathsfsl{y}" },
        "\u{1D63B}": { math: "\\mathsfsl{z}" },
        "\u{1D63C}": { math: "\\mathsfbfsl{A}" },
        "\u{1D63D}": { math: "\\mathsfbfsl{B}" },
        "\u{1D63E}": { math: "\\mathsfbfsl{C}" },
        "\u{1D63F}": { math: "\\mathsfbfsl{D}" },
        "\u{1D640}": { math: "\\mathsfbfsl{E}" },
        "\u{1D641}": { math: "\\mathsfbfsl{F}" },
        "\u{1D642}": { math: "\\mathsfbfsl{G}" },
        "\u{1D643}": { math: "\\mathsfbfsl{H}" },
        "\u{1D644}": { math: "\\mathsfbfsl{I}" },
        "\u{1D645}": { math: "\\mathsfbfsl{J}" },
        "\u{1D646}": { math: "\\mathsfbfsl{K}" },
        "\u{1D647}": { math: "\\mathsfbfsl{L}" },
        "\u{1D648}": { math: "\\mathsfbfsl{M}" },
        "\u{1D649}": { math: "\\mathsfbfsl{N}" },
        "\u{1D64A}": { math: "\\mathsfbfsl{O}" },
        "\u{1D64B}": { math: "\\mathsfbfsl{P}" },
        "\u{1D64C}": { math: "\\mathsfbfsl{Q}" },
        "\u{1D64D}": { math: "\\mathsfbfsl{R}" },
        "\u{1D64E}": { math: "\\mathsfbfsl{S}" },
        "\u{1D64F}": { math: "\\mathsfbfsl{T}" },
        "\u{1D650}": { math: "\\mathsfbfsl{U}" },
        "\u{1D651}": { math: "\\mathsfbfsl{V}" },
        "\u{1D652}": { math: "\\mathsfbfsl{W}" },
        "\u{1D653}": { math: "\\mathsfbfsl{X}" },
        "\u{1D654}": { math: "\\mathsfbfsl{Y}" },
        "\u{1D655}": { math: "\\mathsfbfsl{Z}" },
        "\u{1D656}": { math: "\\mathsfbfsl{a}" },
        "\u{1D657}": { math: "\\mathsfbfsl{b}" },
        "\u{1D658}": { math: "\\mathsfbfsl{c}" },
        "\u{1D659}": { math: "\\mathsfbfsl{d}" },
        "\u{1D65A}": { math: "\\mathsfbfsl{e}" },
        "\u{1D65B}": { math: "\\mathsfbfsl{f}" },
        "\u{1D65C}": { math: "\\mathsfbfsl{g}" },
        "\u{1D65D}": { math: "\\mathsfbfsl{h}" },
        "\u{1D65E}": { math: "\\mathsfbfsl{i}" },
        "\u{1D65F}": { math: "\\mathsfbfsl{j}" },
        "\u{1D660}": { math: "\\mathsfbfsl{k}" },
        "\u{1D661}": { math: "\\mathsfbfsl{l}" },
        "\u{1D662}": { math: "\\mathsfbfsl{m}" },
        "\u{1D663}": { math: "\\mathsfbfsl{n}" },
        "\u{1D664}": { math: "\\mathsfbfsl{o}" },
        "\u{1D665}": { math: "\\mathsfbfsl{p}" },
        "\u{1D666}": { math: "\\mathsfbfsl{q}" },
        "\u{1D667}": { math: "\\mathsfbfsl{r}" },
        "\u{1D668}": { math: "\\mathsfbfsl{s}" },
        "\u{1D669}": { math: "\\mathsfbfsl{t}" },
        "\u{1D66A}": { math: "\\mathsfbfsl{u}" },
        "\u{1D66B}": { math: "\\mathsfbfsl{v}" },
        "\u{1D66C}": { math: "\\mathsfbfsl{w}" },
        "\u{1D66D}": { math: "\\mathsfbfsl{x}" },
        "\u{1D66E}": { math: "\\mathsfbfsl{y}" },
        "\u{1D66F}": { math: "\\mathsfbfsl{z}" },
        "\u{1D670}": { math: "\\mathtt{A}" },
        "\u{1D671}": { math: "\\mathtt{B}" },
        "\u{1D672}": { math: "\\mathtt{C}" },
        "\u{1D673}": { math: "\\mathtt{D}" },
        "\u{1D674}": { math: "\\mathtt{E}" },
        "\u{1D675}": { math: "\\mathtt{F}" },
        "\u{1D676}": { math: "\\mathtt{G}" },
        "\u{1D677}": { math: "\\mathtt{H}" },
        "\u{1D678}": { math: "\\mathtt{I}" },
        "\u{1D679}": { math: "\\mathtt{J}" },
        "\u{1D67A}": { math: "\\mathtt{K}" },
        "\u{1D67B}": { math: "\\mathtt{L}" },
        "\u{1D67C}": { math: "\\mathtt{M}" },
        "\u{1D67D}": { math: "\\mathtt{N}" },
        "\u{1D67E}": { math: "\\mathtt{O}" },
        "\u{1D67F}": { math: "\\mathtt{P}" },
        "\u{1D680}": { math: "\\mathtt{Q}" },
        "\u{1D681}": { math: "\\mathtt{R}" },
        "\u{1D682}": { math: "\\mathtt{S}" },
        "\u{1D683}": { math: "\\mathtt{T}" },
        "\u{1D684}": { math: "\\mathtt{U}" },
        "\u{1D685}": { math: "\\mathtt{V}" },
        "\u{1D686}": { math: "\\mathtt{W}" },
        "\u{1D687}": { math: "\\mathtt{X}" },
        "\u{1D688}": { math: "\\mathtt{Y}" },
        "\u{1D689}": { math: "\\mathtt{Z}" },
        "\u{1D68A}": { math: "\\mathtt{a}" },
        "\u{1D68B}": { math: "\\mathtt{b}" },
        "\u{1D68C}": { math: "\\mathtt{c}" },
        "\u{1D68D}": { math: "\\mathtt{d}" },
        "\u{1D68E}": { math: "\\mathtt{e}" },
        "\u{1D68F}": { math: "\\mathtt{f}" },
        "\u{1D690}": { math: "\\mathtt{g}" },
        "\u{1D691}": { math: "\\mathtt{h}" },
        "\u{1D692}": { math: "\\mathtt{i}" },
        "\u{1D693}": { math: "\\mathtt{j}" },
        "\u{1D694}": { math: "\\mathtt{k}" },
        "\u{1D695}": { math: "\\mathtt{l}" },
        "\u{1D696}": { math: "\\mathtt{m}" },
        "\u{1D697}": { math: "\\mathtt{n}" },
        "\u{1D698}": { math: "\\mathtt{o}" },
        "\u{1D699}": { math: "\\mathtt{p}" },
        "\u{1D69A}": { math: "\\mathtt{q}" },
        "\u{1D69B}": { math: "\\mathtt{r}" },
        "\u{1D69C}": { math: "\\mathtt{s}" },
        "\u{1D69D}": { math: "\\mathtt{t}" },
        "\u{1D69E}": { math: "\\mathtt{u}" },
        "\u{1D69F}": { math: "\\mathtt{v}" },
        "\u{1D6A0}": { math: "\\mathtt{w}" },
        "\u{1D6A1}": { math: "\\mathtt{x}" },
        "\u{1D6A2}": { math: "\\mathtt{y}" },
        "\u{1D6A3}": { math: "\\mathtt{z}" },
        "\u{1D6A4}": { math: "\\imath" },
        "\u{1D6A5}": { math: "\\jmath" },
        "\u{1D6A8}": { math: "\\mathbf{A}" },
        "\u{1D6A9}": { math: "\\mathbf{B}" },
        "\u{1D6AA}": { math: "\\mathbf{\\Gamma}" },
        "\u{1D6AB}": { math: "\\mathbf{\\Delta}" },
        "\u{1D6AC}": { math: "\\mathbf{E}" },
        "\u{1D6AD}": { math: "\\mathbf{Z}" },
        "\u{1D6AE}": { math: "\\mathbf{H}" },
        "\u{1D6AF}": { math: "\\mathbf{\\Theta}" },
        "\u{1D6B0}": { math: "\\mathbf{I}" },
        "\u{1D6B1}": { math: "\\mathbf{K}" },
        "\u{1D6B2}": { math: "\\mathbf{\\Lambda}" },
        "\u{1D6B3}": { math: "M" },
        "\u{1D6B4}": { math: "N" },
        "\u{1D6B5}": { math: "\\mathbf{\\Xi}" },
        "\u{1D6B6}": { math: "O" },
        "\u{1D6B7}": { math: "\\mathbf{\\Pi}" },
        "\u{1D6B8}": { math: "\\mathbf{P}" },
        "\u{1D6B9}": { math: "\\mathbf{\\vartheta}" },
        "\u{1D6BA}": { math: "\\mathbf{\\Sigma}" },
        "\u{1D6BB}": { math: "\\mathbf{T}" },
        "\u{1D6BC}": { math: "\\mathbf{\\Upsilon}" },
        "\u{1D6BD}": { math: "\\mathbf{\\Phi}" },
        "\u{1D6BE}": { math: "\\mathbf{X}" },
        "\u{1D6BF}": { math: "\\mathbf{\\Psi}" },
        "\u{1D6C0}": { math: "\\mathbf{\\Omega}" },
        "\u{1D6C1}": { math: "\\mathbf{\\nabla}" },
        "\u{1D6C2}": { math: "\\mathbf{\\alpha}" },
        "\u{1D6C3}": { math: "\\mathbf{\\beta}" },
        "\u{1D6C4}": { math: "\\mathbf{\\gamma}" },
        "\u{1D6C5}": { math: "\\mathbf{\\delta}" },
        "\u{1D6C6}": { math: "\\mathbf{\\epsilon}" },
        "\u{1D6C7}": { math: "\\mathbf{\\zeta}" },
        "\u{1D6C8}": { math: "\\mathbf{\\eta}" },
        "\u{1D6C9}": { math: "\\mathbf{\\theta}" },
        "\u{1D6CA}": { math: "\\mathbf{I}" },
        "\u{1D6CB}": { math: "\\mathbf{K}" },
        "\u{1D6CC}": { math: "\\mathbf{\\lambda}" },
        "\u{1D6CD}": { math: "M" },
        "\u{1D6CE}": { math: "N" },
        "\u{1D6CF}": { math: "\\mathbf{\\xi}" },
        "\u{1D6D0}": { math: "O" },
        "\u{1D6D1}": { math: "\\mathbf{\\pi}" },
        "\u{1D6D2}": { math: "\\mathbf{P}" },
        "\u{1D6D3}": { math: "\\mathbf{\\varsigma}" },
        "\u{1D6D4}": { math: "\\mathbf{\\sigma}" },
        "\u{1D6D5}": { math: "\\mathbf{T}" },
        "\u{1D6D6}": { math: "\\mathbf{\\upsilon}" },
        "\u{1D6D7}": { math: "\\mathbf{\\phi}" },
        "\u{1D6D8}": { math: "\\mathbf{X}" },
        "\u{1D6D9}": { math: "\\mathbf{\\psi}" },
        "\u{1D6DA}": { math: "\\mathbf{\\omega}" },
        "\u{1D6DB}": { math: "\\partial" },
        "\u{1D6DC}": { math: "\\in" },
        "\u{1D6DD}": { math: "\\mathbf{\\vartheta}" },
        "\u{1D6DE}": { math: "\\mathbf{\\varkappa}" },
        "\u{1D6DF}": { math: "\\mathbf{\\phi}" },
        "\u{1D6E0}": { math: "\\mathbf{\\varrho}" },
        "\u{1D6E1}": { math: "\\mathbf{\\varpi}" },
        "\u{1D6E2}": { math: "\\mathsl{A}" },
        "\u{1D6E3}": { math: "\\mathsl{B}" },
        "\u{1D6E4}": { math: "\\mathsl{\\Gamma}" },
        "\u{1D6E5}": { math: "\\mathsl{\\Delta}" },
        "\u{1D6E6}": { math: "\\mathsl{E}" },
        "\u{1D6E7}": { math: "\\mathsl{Z}" },
        "\u{1D6E8}": { math: "\\mathsl{H}" },
        "\u{1D6E9}": { math: "\\mathsl{\\Theta}" },
        "\u{1D6EA}": { math: "\\mathsl{I}" },
        "\u{1D6EB}": { math: "\\mathsl{K}" },
        "\u{1D6EC}": { math: "\\mathsl{\\Lambda}" },
        "\u{1D6ED}": { math: "M" },
        "\u{1D6EE}": { math: "N" },
        "\u{1D6EF}": { math: "\\mathsl{\\Xi}" },
        "\u{1D6F0}": { math: "O" },
        "\u{1D6F1}": { math: "\\mathsl{\\Pi}" },
        "\u{1D6F2}": { math: "\\mathsl{P}" },
        "\u{1D6F3}": { math: "\\mathsl{\\Theta}" },
        "\u{1D6F4}": { math: "\\mathsl{\\Sigma}" },
        "\u{1D6F5}": { math: "\\mathsl{T}" },
        "\u{1D6F6}": { math: "\\mathsl{\\Upsilon}" },
        "\u{1D6F7}": { math: "\\mathsl{\\Phi}" },
        "\u{1D6F8}": { math: "\\mathsl{X}" },
        "\u{1D6F9}": { math: "\\mathsl{\\Psi}" },
        "\u{1D6FA}": { math: "\\mathsl{\\Omega}" },
        "\u{1D6FB}": { math: "\\mathsl{\\nabla}" },
        "\u{1D6FC}": { math: "\\mathsl{A}" },
        "\u{1D6FD}": { math: "\\mathsl{B}" },
        "\u{1D6FE}": { math: "\\mathsl{\\gamma}" },
        "\u{1D6FF}": { math: "\\mathsl{\\delta}" },
        "\u{1D700}": { math: "\\mathsl{E}" },
        "\u{1D701}": { math: "\\mathsl{Z}" },
        "\u{1D702}": { math: "\\mathsl{H}" },
        "\u{1D703}": { math: "\\mathsl{\\theta}" },
        "\u{1D704}": { math: "\\mathsl{I}" },
        "\u{1D705}": { math: "\\mathsl{K}" },
        "\u{1D706}": { math: "\\mathsl{\\lambda}" },
        "\u{1D707}": { math: "\\mu" },
        "\u{1D708}": { math: "\\nu" },
        "\u{1D709}": { math: "\\mathsl{\\xi}" },
        "\u{1D70A}": { math: "o" },
        "\u{1D70B}": { math: "\\mathsl{\\pi}" },
        "\u{1D70C}": { math: "\\mathsl{P}" },
        "\u{1D70D}": { math: "\\mathsl{\\varsigma}" },
        "\u{1D70E}": { math: "\\mathsl{\\sigma}" },
        "\u{1D70F}": { math: "\\mathsl{T}" },
        "\u{1D710}": { math: "\\mathsl{\\upsilon}" },
        "\u{1D711}": { math: "\\mathsl{\\varphi}" },
        "\u{1D712}": { math: "\\mathsl{X}" },
        "\u{1D713}": { math: "\\mathsl{\\psi}" },
        "\u{1D714}": { math: "\\mathsl{\\omega}" },
        "\u{1D715}": { math: "\\partial" },
        "\u{1D716}": { math: "\\in" },
        "\u{1D717}": { math: "\\mathsl{\\vartheta}" },
        "\u{1D718}": { math: "\\mathsl{\\varkappa}" },
        "\u{1D719}": { math: "\\mathsl{\\phi}" },
        "\u{1D71A}": { math: "\\mathsl{\\varrho}" },
        "\u{1D71B}": { math: "\\mathsl{\\varpi}" },
        "\u{1D71C}": { math: "\\mathbit{A}" },
        "\u{1D71D}": { math: "\\mathbit{B}" },
        "\u{1D71E}": { math: "\\mathbit{\\Gamma}" },
        "\u{1D71F}": { math: "\\mathbit{\\Delta}" },
        "\u{1D720}": { math: "\\mathbit{E}" },
        "\u{1D721}": { math: "\\mathbit{Z}" },
        "\u{1D722}": { math: "\\mathbit{H}" },
        "\u{1D723}": { math: "\\mathbit{\\Theta}" },
        "\u{1D724}": { math: "\\mathbit{I}" },
        "\u{1D725}": { math: "\\mathbit{K}" },
        "\u{1D726}": { math: "\\mathbit{\\Lambda}" },
        "\u{1D727}": { math: "M" },
        "\u{1D728}": { math: "N" },
        "\u{1D729}": { math: "\\mathbit{\\Xi}" },
        "\u{1D72A}": { math: "O" },
        "\u{1D72B}": { math: "\\mathbit{\\Pi}" },
        "\u{1D72C}": { math: "\\mathbit{P}" },
        "\u{1D72D}": { math: "\\mathbit{O}" },
        "\u{1D72E}": { math: "\\mathbit{\\Sigma}" },
        "\u{1D72F}": { math: "\\mathbit{T}" },
        "\u{1D730}": { math: "\\mathbit{\\Upsilon}" },
        "\u{1D731}": { math: "\\mathbit{\\Phi}" },
        "\u{1D732}": { math: "\\mathbit{X}" },
        "\u{1D733}": { math: "\\mathbit{\\Psi}" },
        "\u{1D734}": { math: "\\mathbit{\\Omega}" },
        "\u{1D735}": { math: "\\mathbit{\\nabla}" },
        "\u{1D736}": { math: "\\mathbit{\\alpha}" },
        "\u{1D737}": { math: "\\mathbit{\\beta}" },
        "\u{1D738}": { math: "\\mathbit{\\gamma}" },
        "\u{1D739}": { math: "\\mathbit{\\delta}" },
        "\u{1D73A}": { math: "\\mathbit{\\epsilon}" },
        "\u{1D73B}": { math: "\\mathbit{\\zeta}" },
        "\u{1D73C}": { math: "\\mathbit{\\eta}" },
        "\u{1D73D}": { math: "\\mathbit{\\theta}" },
        "\u{1D73E}": { math: "\\mathbit{\\imath}" },
        "\u{1D73F}": { math: "\\mathbit{\\kappa}" },
        "\u{1D740}": { math: "\\mathbit{\\lambda}" },
        "\u{1D741}": { math: "\\mu" },
        "\u{1D742}": { math: "N" },
        "\u{1D743}": { math: "\\mathbit{\\xi}" },
        "\u{1D744}": { math: "O" },
        "\u{1D745}": { math: "\\mathbit{\\pi}" },
        "\u{1D746}": { math: "\\mathbit{\\rho}" },
        "\u{1D747}": { math: "\\mathbit{\\varsigma}" },
        "\u{1D748}": { math: "\\mathbit{\\sigma}" },
        "\u{1D749}": { math: "\\mathbit{\\tau}" },
        "\u{1D74A}": { math: "\\mathbit{\\upsilon}" },
        "\u{1D74B}": { math: "\\mathbit{\\varphi}" },
        "\u{1D74C}": { math: "\\mathbit{\\chi}" },
        "\u{1D74D}": { math: "\\mathbit{\\psi}" },
        "\u{1D74E}": { math: "\\mathbit{\\omega}" },
        "\u{1D74F}": { math: "\\partial" },
        "\u{1D750}": { math: "\\in" },
        "\u{1D751}": { math: "\\mathbit{\\vartheta}" },
        "\u{1D752}": { math: "\\mathbit{\\varkappa}" },
        "\u{1D753}": { math: "\\mathbit{\\phi}" },
        "\u{1D754}": { math: "\\mathbit{\\varrho}" },
        "\u{1D755}": { math: "\\mathbit{\\varpi}" },
        "\u{1D756}": { math: "\\mathsfbf{A}" },
        "\u{1D757}": { math: "\\mathsfbf{B}" },
        "\u{1D758}": { math: "\\mathsfbf{\\Gamma}" },
        "\u{1D759}": { math: "\\mathsfbf{\\Delta}" },
        "\u{1D75A}": { math: "\\mathsfbf{E}" },
        "\u{1D75B}": { math: "\\mathsfbf{Z}" },
        "\u{1D75C}": { math: "\\mathsfbf{H}" },
        "\u{1D75D}": { math: "\\mathsfbf{\\Theta}" },
        "\u{1D75E}": { math: "\\mathsfbf{I}" },
        "\u{1D75F}": { math: "\\mathsfbf{K}" },
        "\u{1D760}": { math: "\\mathsfbf{\\Lambda}" },
        "\u{1D761}": { math: "M" },
        "\u{1D762}": { math: "N" },
        "\u{1D763}": { math: "\\mathsfbf{\\Xi}" },
        "\u{1D764}": { math: "O" },
        "\u{1D765}": { math: "\\mathsfbf{\\Pi}" },
        "\u{1D766}": { math: "\\mathsfbf{P}" },
        "\u{1D767}": { math: "\\mathsfbf{\\Theta}" },
        "\u{1D768}": { math: "\\mathsfbf{\\Sigma}" },
        "\u{1D769}": { math: "\\mathsfbf{T}" },
        "\u{1D76A}": { math: "\\mathsfbf{\\Upsilon}" },
        "\u{1D76B}": { math: "\\mathsfbf{\\Phi}" },
        "\u{1D76C}": { math: "\\mathsfbf{X}" },
        "\u{1D76D}": { math: "\\mathsfbf{\\Psi}" },
        "\u{1D76E}": { math: "\\mathsfbf{\\Omega}" },
        "\u{1D76F}": { math: "\\mathsfbf{\\nabla}" },
        "\u{1D770}": { math: "\\mathsfbf{\\alpha}" },
        "\u{1D771}": { math: "\\mathsfbf{\\beta}" },
        "\u{1D772}": { math: "\\mathsfbf{\\gamma}" },
        "\u{1D773}": { math: "\\mathsfbf{\\delta}" },
        "\u{1D774}": { math: "\\mathsfbf{\\varepsilon}" },
        "\u{1D775}": { math: "\\mathsfbf{\\zeta}" },
        "\u{1D776}": { math: "\\mathsfbf{\\eta}" },
        "\u{1D777}": { math: "\\mathsfbf{\\theta}" },
        "\u{1D778}": { math: "\\mathsfbf{\\imath}" },
        "\u{1D779}": { math: "\\mathsfbf{\\kappa}" },
        "\u{1D77A}": { math: "\\mathsfbf{\\lambda}" },
        "\u{1D77B}": { math: "\\mu" },
        "\u{1D77C}": { math: "\\nu" },
        "\u{1D77D}": { math: "\\mathsfbf{\\xi}" },
        "\u{1D77E}": { math: "o" },
        "\u{1D77F}": { math: "\\mathsfbf{\\pi}" },
        "\u{1D780}": { math: "\\mathsfbf{\\rho}" },
        "\u{1D781}": { math: "\\mathsfbf{\\varsigma}" },
        "\u{1D782}": { math: "\\mathsfbf{\\sigma}" },
        "\u{1D783}": { math: "\\mathsfbf{\\tau}" },
        "\u{1D784}": { math: "\\mathsfbf{\\upsilon}" },
        "\u{1D785}": { math: "\\mathsfbf{\\varphi}" },
        "\u{1D786}": { math: "\\mathsfbf{\\chi}" },
        "\u{1D787}": { math: "\\mathsfbf{\\psi}" },
        "\u{1D788}": { math: "\\mathsfbf{\\omega}" },
        "\u{1D789}": { math: "\\partial" },
        "\u{1D78A}": { math: "\\in" },
        "\u{1D78B}": { math: "\\mathsfbf{\\vartheta}" },
        "\u{1D78C}": { math: "\\mathsfbf{\\varkappa}" },
        "\u{1D78D}": { math: "\\mathsfbf{\\phi}" },
        "\u{1D78E}": { math: "\\mathsfbf{\\varrho}" },
        "\u{1D78F}": { math: "\\mathsfbf{\\varpi}" },
        "\u{1D790}": { math: "\\mathsfbfsl{A}" },
        "\u{1D791}": { math: "\\mathsfbfsl{B}" },
        "\u{1D792}": { math: "\\mathsfbfsl{\\Gamma}" },
        "\u{1D793}": { math: "\\mathsfbfsl{\\Delta}" },
        "\u{1D794}": { math: "\\mathsfbfsl{E}" },
        "\u{1D795}": { math: "\\mathsfbfsl{Z}" },
        "\u{1D796}": { math: "\\mathsfbfsl{H}" },
        "\u{1D797}": { math: "\\mathsfbfsl{\\Theta}" },
        "\u{1D798}": { math: "\\mathsfbfsl{I}" },
        "\u{1D799}": { math: "\\mathsfbfsl{K}" },
        "\u{1D79A}": { math: "\\mathsfbfsl{\\Lambda}" },
        "\u{1D79B}": { math: "\\mathsfbfsl{M}" },
        "\u{1D79C}": { math: "\\mathsfbfsl{N}" },
        "\u{1D79D}": { math: "\\mathsfbfsl{\\Xi}" },
        "\u{1D79E}": { math: "\\mathsfbfsl{O}" },
        "\u{1D79F}": { math: "\\mathsfbfsl{\\Pi}" },
        "\u{1D7A0}": { math: "\\mathsfbfsl{P}" },
        "\u{1D7A1}": { math: "\\mathsfbfsl{\\Theta}" },
        "\u{1D7A2}": { math: "\\mathsfbfsl{\\Sigma}" },
        "\u{1D7A3}": { math: "\\mathsfbfsl{T}" },
        "\u{1D7A4}": { math: "\\mathsfbfsl{\\Upsilon}" },
        "\u{1D7A5}": { math: "\\mathsfbfsl{\\Phi}" },
        "\u{1D7A6}": { math: "\\mathsfbfsl{X}" },
        "\u{1D7A7}": { math: "\\mathsfbfsl{\\Psi}" },
        "\u{1D7A8}": { math: "\\mathsfbfsl{\\Omega}" },
        "\u{1D7A9}": { math: "\\mathsfbfsl{\\nabla}" },
        "\u{1D7AA}": { math: "\\mathsfbfsl{\\alpha}" },
        "\u{1D7AB}": { math: "\\mathsfbfsl{\\beta}" },
        "\u{1D7AC}": { math: "\\mathsfbfsl{\\gamma}" },
        "\u{1D7AD}": { math: "\\mathsfbfsl{\\delta}" },
        "\u{1D7AE}": { math: "\\mathsfbfsl{\\varepsilon}" },
        "\u{1D7AF}": { math: "\\mathsfbfsl{\\zeta}" },
        "\u{1D7B0}": { math: "\\mathsfbfsl{\\eta}" },
        "\u{1D7B1}": { math: "\\mathsfbfsl{\\theta}" },
        "\u{1D7B2}": { math: "\\mathsfbfsl{\\imath}" },
        "\u{1D7B3}": { math: "\\mathsfbfsl{\\kappa}" },
        "\u{1D7B4}": { math: "\\mathsfbfsl{\\lambda}" },
        "\u{1D7B5}": { math: "\\mu" },
        "\u{1D7B6}": { math: "\\nu" },
        "\u{1D7B7}": { math: "\\mathsfbfsl{\\xi}" },
        "\u{1D7B8}": { math: "o" },
        "\u{1D7B9}": { math: "\\mathsfbfsl{\\pi}" },
        "\u{1D7BA}": { math: "\\mathsfbfsl{\\rho}" },
        "\u{1D7BB}": { math: "\\mathsfbfsl{\\varsigma}" },
        "\u{1D7BC}": { math: "\\mathsfbfsl{\\sigma}" },
        "\u{1D7BD}": { math: "\\mathsfbfsl{\\tau}" },
        "\u{1D7BE}": { math: "\\mathsfbfsl{\\upsilon}" },
        "\u{1D7BF}": { math: "\\mathsfbfsl{\\varphi}" },
        "\u{1D7C0}": { math: "\\mathsfbfsl{\\chi}" },
        "\u{1D7C1}": { math: "\\mathsfbfsl{\\psi}" },
        "\u{1D7C2}": { math: "\\mathsfbfsl{\\omega}" },
        "\u{1D7C3}": { math: "\\partial" },
        "\u{1D7C4}": { math: "\\in" },
        "\u{1D7C5}": { math: "\\mathsfbfsl{\\vartheta}" },
        "\u{1D7C6}": { math: "\\mathsfbfsl{\\varkappa}" },
        "\u{1D7C7}": { math: "\\mathsfbfsl{\\phi}" },
        "\u{1D7C8}": { math: "\\mathsfbfsl{\\varrho}" },
        "\u{1D7C9}": { math: "\\mathsfbfsl{\\varpi}" },
        "\u{1D7CA}": { math: "\\mbfDigamma" },
        "\u{1D7CB}": { math: "\\mbfdigamma" },
        "\u{1D7CE}": { math: "\\mathbf{0}" },
        "\u{1D7CF}": { math: "\\mathbf{1}" },
        "\u{1D7D0}": { math: "\\mathbf{2}" },
        "\u{1D7D1}": { math: "\\mathbf{3}" },
        "\u{1D7D2}": { math: "\\mathbf{4}" },
        "\u{1D7D3}": { math: "\\mathbf{5}" },
        "\u{1D7D4}": { math: "\\mathbf{6}" },
        "\u{1D7D5}": { math: "\\mathbf{7}" },
        "\u{1D7D6}": { math: "\\mathbf{8}" },
        "\u{1D7D7}": { math: "\\mathbf{9}" },
        "\u{1D7D8}": { math: "\\mathbb{0}" },
        "\u{1D7D9}": { math: "\\mathbb{1}" },
        "\u{1D7DA}": { math: "\\mathbb{2}" },
        "\u{1D7DB}": { math: "\\mathbb{3}" },
        "\u{1D7DC}": { math: "\\mathbb{4}" },
        "\u{1D7DD}": { math: "\\mathbb{5}" },
        "\u{1D7DE}": { math: "\\mathbb{6}" },
        "\u{1D7DF}": { math: "\\mathbb{7}" },
        "\u{1D7E0}": { math: "\\mathbb{8}" },
        "\u{1D7E1}": { math: "\\mathbb{9}" },
        "\u{1D7E2}": { math: "\\mathsf{0}" },
        "\u{1D7E3}": { math: "\\mathsf{1}" },
        "\u{1D7E4}": { math: "\\mathsf{2}" },
        "\u{1D7E5}": { math: "\\mathsf{3}" },
        "\u{1D7E6}": { math: "\\mathsf{4}" },
        "\u{1D7E7}": { math: "\\mathsf{5}" },
        "\u{1D7E8}": { math: "\\mathsf{6}" },
        "\u{1D7E9}": { math: "\\mathsf{7}" },
        "\u{1D7EA}": { math: "\\mathsf{8}" },
        "\u{1D7EB}": { math: "\\mathsf{9}" },
        "\u{1D7EC}": { math: "\\mathsfbf{0}" },
        "\u{1D7ED}": { math: "\\mathsfbf{1}" },
        "\u{1D7EE}": { math: "\\mathsfbf{2}" },
        "\u{1D7EF}": { math: "\\mathsfbf{3}" },
        "\u{1D7F0}": { math: "\\mathsfbf{4}" },
        "\u{1D7F1}": { math: "\\mathsfbf{5}" },
        "\u{1D7F2}": { math: "\\mathsfbf{6}" },
        "\u{1D7F3}": { math: "\\mathsfbf{7}" },
        "\u{1D7F4}": { math: "\\mathsfbf{8}" },
        "\u{1D7F5}": { math: "\\mathsfbf{9}" },
        "\u{1D7F6}": { math: "\\mathtt{0}" },
        "\u{1D7F7}": { math: "\\mathtt{1}" },
        "\u{1D7F8}": { math: "\\mathtt{2}" },
        "\u{1D7F9}": { math: "\\mathtt{3}" },
        "\u{1D7FA}": { math: "\\mathtt{4}" },
        "\u{1D7FB}": { math: "\\mathtt{5}" },
        "\u{1D7FC}": { math: "\\mathtt{6}" },
        "\u{1D7FD}": { math: "\\mathtt{7}" },
        "\u{1D7FE}": { math: "\\mathtt{8}" },
        "\u{1D7FF}": { math: "\\mathtt{9}" }
      };
    }
  });

  // node_modules/unicode2latex/tables/unicode.json
  var require_unicode = __commonJS({
    "node_modules/unicode2latex/tables/unicode.json"(exports, module) {
      module.exports = {
        "#": { math: "\\#", text: "\\#" },
        $: { math: "\\$", text: "\\$" },
        "%": { math: "\\%", text: "\\%" },
        "&": { math: "\\&", text: "\\&" },
        "/\u200B": { text: "\\slash", commandspacer: true },
        "<": { math: "<" },
        ">": { math: ">" },
        "\\": { math: "\\backslash", text: "\\textbackslash", commandspacer: true },
        "^": { math: "\\sphat", text: "\\^" },
        _: { math: "\\_", text: "\\_" },
        "{": { math: "\\lbrace", text: "\\{" },
        "}": { math: "\\rbrace", text: "\\}" },
        "~": { math: "\\sptilde", text: "\\textasciitilde", commandspacer: true },
        "\xA0": { math: "~", space: true, text: "~" },
        "\u2000": { text: "\\hspace{0.6em}", space: true },
        "\u2001": { math: "\\quad", space: true },
        "\u2002": { text: "\\hspace{0.6em}", space: true },
        "\u2003": { math: "\\quad", space: true },
        "\u2004": { text: "\\;", space: true },
        "\u2005": { text: "\\hspace{0.25em}", space: true },
        "\u2006": { text: "\\hspace{0.166em}", space: true },
        "\u2007": { text: "\\hphantom{0}", space: true },
        "\u2008": { text: "\\hphantom{,}", space: true },
        "\u2009": { text: "\\,", space: true },
        "\u200A": { math: "\\mkern1mu", space: true },
        "\u200B": { text: "\\hspace{0pt}", space: true },
        "\u202F": { text: "\\,", space: true },
        "\u205F": { math: "\\:", space: true, text: "\\:" }
      };
    }
  });

  // node_modules/unicode2latex/tables/latex.json
  var require_latex = __commonJS({
    "node_modules/unicode2latex/tables/latex.json"(exports, module) {
      module.exports = {
        "\\#": "#",
        "\\$": "$",
        "\\%": "%",
        "\\&": "&",
        "\\slash": "/\u200B",
        "\\textless": "<",
        "\\textgreater": ">",
        "\\LaTeX": "LaTeX",
        "\\textbackslash": "\\",
        "\\backslash": "\\",
        "\\": "\\",
        "\\^": "^",
        "\\sphat": "^",
        "\\_": "_",
        "\\t{ia}": "i\uFE20a\uFE21",
        "{\\~ w}": "w\u0303",
        "\\{": "{",
        "\\lbrace": "{",
        "\\textbar": "|",
        "\\}": "}",
        "\\rbrace": "}",
        "\\textasciitilde": "~",
        "\\sptilde": "~",
        "\\textexclamdown": "\xA1",
        "\\textcent": "\xA2",
        "\\cent": "\xA2",
        "\\textsterling": "\xA3",
        "\\pounds": "\xA3",
        "\\textcurrency": "\xA4",
        "\\textyen": "\xA5",
        "\\yen": "\xA5",
        "\\textbrokenbar": "\xA6",
        "\\textsection": "\xA7",
        "\\textasciidieresis": "\xA8",
        "\\spddot": "\xA8",
        "\\textcopyright": "\xA9",
        "\\textordfeminine": "\xAA",
        "\\guillemotleft": "\xAB",
        "\\lnot": "\xAC",
        "\\neg": "\xAC",
        "\\-": "\xAD",
        "\\textregistered": "\xAE",
        "\\circledR": "\xAE",
        "\\textasciimacron": "\xAF",
        "\\textdegree": "\xB0",
        "^\\circ": "\xB0",
        "\\pm": "\xB1",
        "^{2}": "\xB2",
        "^{3}": "\xB3",
        "\\textasciiacute": "\xB4",
        "\\textmu": "\xB5",
        "\\textparagraph": "\xB6",
        "^{1}": "\xB9",
        "\\textordmasculine": "\xBA",
        "\\guillemotright": "\xBB",
        "\\frac{1}{4}": "\xBC",
        "\\textonequarter": "\xBC",
        "\\frac{1}{2}": "\xBD",
        "\\textonehalf": "\xBD",
        "\\frac{3}{4}": "\xBE",
        "\\textthreequarters": "\xBE",
        "\\textquestiondown": "\xBF",
        "\\`A": "\xC0",
        "\\'A": "\xC1",
        "\\^A": "\xC2",
        "\\~A": "\xC3",
        '\\"A': "\xC4",
        "\\AA": "\xC5",
        "\\r{A}": "\xC5",
        "{\\r A}": "\xC5",
        "\\AE": "\xC6",
        "\\c{C}": "\xC7",
        "\\`E": "\xC8",
        "\\'E": "\xC9",
        "\\^E": "\xCA",
        '\\"E': "\xCB",
        "\\`I": "\xCC",
        "\\'I": "\xCD",
        "\\^I": "\xCE",
        '\\"I': "\xCF",
        "\\DH": "\xD0",
        "\\~N": "\xD1",
        "\\`O": "\xD2",
        "\\'O": "\xD3",
        "\\^O": "\xD4",
        "\\~O": "\xD5",
        '\\"O': "\xD6",
        "\\texttimes": "\xD7",
        "\\times": "\xD7",
        "\\O": "\xD8",
        "\\`U": "\xD9",
        "\\'U": "\xDA",
        "\\^U": "\xDB",
        '\\"U': "\xDC",
        "\\'Y": "\xDD",
        "\\TH": "\xDE",
        "\\ss": "\xDF",
        "\\`a": "\xE0",
        "\\'a": "\xE1",
        "\\^a": "\xE2",
        "\\~a": "\xE3",
        '\\"a': "\xE4",
        "\\aa": "\xE5",
        "\\r{a}": "\xE5",
        "{\\r a}": "\xE5",
        "\\ae": "\xE6",
        "\\c{c}": "\xE7",
        "\\`e": "\xE8",
        "\\'e": "\xE9",
        "\\^e": "\xEA",
        '\\"e': "\xEB",
        "\\`i": "\xEC",
        "\\`\\i": "\xEC",
        "\\'i": "\xED",
        "\\'\\i": "\xED",
        "\\^i": "\xEE",
        "\\^\\i": "\xEE",
        '\\"i': "\xEF",
        '\\"\\i': "\xEF",
        "\\dh": "\xF0",
        "\\eth": "\xF0",
        "\\~n": "\xF1",
        "\\`o": "\xF2",
        "\\'o": "\xF3",
        "\\^o": "\xF4",
        "\\~o": "\xF5",
        '\\"o': "\xF6",
        "\\div": "\xF7",
        "\\o": "\xF8",
        "\\`u": "\xF9",
        "\\'u": "\xFA",
        "\\^u": "\xFB",
        '\\"u': "\xFC",
        "\\'y": "\xFD",
        "\\th": "\xFE",
        '\\"y': "\xFF",
        "\\=A": "\u0100",
        "\\=a": "\u0101",
        "\\u{A}": "\u0102",
        "\\u{a}": "\u0103",
        "\\k{A}": "\u0104",
        "\\k{a}": "\u0105",
        "\\'C": "\u0106",
        "\\'c": "\u0107",
        "\\^C": "\u0108",
        "\\^c": "\u0109",
        "\\.C": "\u010A",
        "\\.c": "\u010B",
        "\\v{C}": "\u010C",
        "\\v{c}": "\u010D",
        "\\v{D}": "\u010E",
        "\\v{d}": "\u010F",
        "\\DJ": "\u0110",
        "\\dj": "\u0111",
        "\\=E": "\u0112",
        "\\=e": "\u0113",
        "\\u{E}": "\u0114",
        "\\u{e}": "\u0115",
        "\\.E": "\u0116",
        "\\.e": "\u0117",
        "\\k{E}": "\u0118",
        "\\k{e}": "\u0119",
        "\\v{E}": "\u011A",
        "\\v{e}": "\u011B",
        "\\^G": "\u011C",
        "\\^g": "\u011D",
        "\\u{G}": "\u011E",
        "\\u{g}": "\u011F",
        "\\.G": "\u0120",
        "\\.g": "\u0121",
        "\\c{G}": "\u0122",
        "\\c{g}": "\u0123",
        "\\^H": "\u0124",
        "\\^h": "\u0125",
        "{\\fontencoding{LELA}\\selectfont\\char40}": "\u0126",
        "\\Elzxh": "\u0127",
        "\\~I": "\u0128",
        "\\~i": "\u0129",
        "\\=I": "\u012A",
        "\\=i": "\u012B",
        "\\u{I}": "\u012C",
        "{\\u \\i}": "\u012D",
        "\\k{I}": "\u012E",
        "\\k{i}": "\u012F",
        "\\.I": "\u0130",
        "\\i": "\u0131",
        "\\imath": "\u0131",
        "\\^J": "\u0134",
        "\\^\\j": "\u0135",
        "\\c{K}": "\u0136",
        "\\c{k}": "\u0137",
        "{\\fontencoding{LELA}\\selectfont\\char91}": "\u0138",
        "\\'L": "\u0139",
        "\\'l": "\u013A",
        "\\c{L}": "\u013B",
        "\\c{l}": "\u013C",
        "\\v{L}": "\u013D",
        "\\v{l}": "\u013E",
        "{\\fontencoding{LELA}\\selectfont\\char201}": "\u013F",
        "{\\fontencoding{LELA}\\selectfont\\char202}": "\u0140",
        "\\L": "\u0141",
        "\\l": "\u0142",
        "\\'N": "\u0143",
        "\\'n": "\u0144",
        "\\c{N}": "\u0145",
        "\\c{n}": "\u0146",
        "\\v{N}": "\u0147",
        "\\v{n}": "\u0148",
        "\\NG": "\u014A",
        "\\ng": "\u014B",
        "\\=O": "\u014C",
        "\\=o": "\u014D",
        "\\u{O}": "\u014E",
        "\\u{o}": "\u014F",
        "\\H{O}": "\u0150",
        "\\H{o}": "\u0151",
        "\\OE": "\u0152",
        "\\oe": "\u0153",
        "\\'R": "\u0154",
        "\\'r": "\u0155",
        "\\c{R}": "\u0156",
        "\\c{r}": "\u0157",
        "\\v{R}": "\u0158",
        "\\v{r}": "\u0159",
        "\\'S": "\u015A",
        "\\'s": "\u015B",
        "\\^S": "\u015C",
        "\\^s": "\u015D",
        "\\c{S}": "\u015E",
        "\\c{s}": "\u015F",
        "\\v{S}": "\u0160",
        "\\v{s}": "\u0161",
        "\\c{T}": "\u0162",
        "\\c{t}": "\u0163",
        "\\v{T}": "\u0164",
        "\\v{t}": "\u0165",
        "{\\fontencoding{LELA}\\selectfont\\char47}": "\u0166",
        "{\\fontencoding{LELA}\\selectfont\\char63}": "\u0167",
        "\\~U": "\u0168",
        "\\~u": "\u0169",
        "\\=U": "\u016A",
        "\\=u": "\u016B",
        "\\u{U}": "\u016C",
        "\\u{u}": "\u016D",
        "\\r{U}": "\u016E",
        "{\\r U}": "\u016E",
        "\\r{u}": "\u016F",
        "\\ocirc{u}": "\u016F",
        "{\\r u}": "\u016F",
        "\\H{U}": "\u0170",
        "\\H{u}": "\u0171",
        "\\k{U}": "\u0172",
        "\\k{u}": "\u0173",
        "\\^W": "\u0174",
        "\\^w": "\u0175",
        "\\^Y": "\u0176",
        "\\^y": "\u0177",
        '\\"Y': "\u0178",
        "\\'Z": "\u0179",
        "\\'z": "\u017A",
        "\\.Z": "\u017B",
        "\\.z": "\u017C",
        "\\v{Z}": "\u017D",
        "\\v{z}": "\u017E",
        "\\texthvlig": "\u0195",
        "\\textnrleg": "\u019E",
        "\\textesh": "\u01AA",
        "\\Zbar": "\u01B5",
        "{\\fontencoding{LELA}\\selectfont\\char195}": "\u01BA",
        "\\textdoublepipe": "\u01C2",
        "\\v{A}": "\u01CD",
        "\\v{a}": "\u01CE",
        "\\v{I}": "\u01CF",
        "\\v{i}": "\u01D0",
        "\\v{O}": "\u01D1",
        "\\v{o}": "\u01D2",
        "\\v{U}": "\u01D3",
        "\\v{u}": "\u01D4",
        "\\v{G}": "\u01E6",
        "\\v{g}": "\u01E7",
        "\\v{K}": "\u01E8",
        "\\v{k}": "\u01E9",
        "\\k{O}": "\u01EA",
        "\\k{o}": "\u01EB",
        "\\v{j}": "\u01F0",
        "\\'G": "\u01F4",
        "\\'g": "\u01F5",
        "\\c{E}": "\u0228",
        "\\c{e}": "\u0229",
        "\\jmath": "\u0237",
        "\\Elztrna": "\u0250",
        "\\Elztrnsa": "\u0252",
        "\\Elzopeno": "\u0254",
        "\\Elzrtld": "\u0256",
        "{\\fontencoding{LEIP}\\selectfont\\char61}": "\u0258",
        "\\Elzschwa": "\u0259",
        "\\varepsilon": "\u025B",
        "\\Elzpgamma": "\u0263",
        "\\Elzpbgam": "\u0264",
        "\\Elztrnh": "\u0265",
        "\\Elzbtdl": "\u026C",
        "\\Elzrtll": "\u026D",
        "\\Elztrnm": "\u026F",
        "\\Elztrnmlr": "\u0270",
        "\\Elzltlmr": "\u0271",
        "\\Elzltln": "\u0272",
        "\\Elzrtln": "\u0273",
        "\\Elzclomeg": "\u0277",
        "\\textphi": "\u0278",
        "\\Elztrnr": "\u0279",
        "\\Elztrnrl": "\u027A",
        "\\Elzrttrnr": "\u027B",
        "\\Elzrl": "\u027C",
        "\\Elzrtlr": "\u027D",
        "\\Elzfhr": "\u027E",
        "{\\fontencoding{LEIP}\\selectfont\\char202}": "\u027F",
        "\\Elzrtls": "\u0282",
        "\\Elzesh": "\u0283",
        "\\Elztrnt": "\u0287",
        "\\Elzrtlt": "\u0288",
        "\\Elzpupsil": "\u028A",
        "\\Elzpscrv": "\u028B",
        "\\Elzinvv": "\u028C",
        "\\Elzinvw": "\u028D",
        "\\Elztrny": "\u028E",
        "\\Elzrtlz": "\u0290",
        "\\Elzyogh": "\u0292",
        "\\Elzglst": "\u0294",
        "\\Elzreglst": "\u0295",
        "\\Elzinglst": "\u0296",
        "\\textturnk": "\u029E",
        "\\Elzdyogh": "\u02A4",
        "\\Elztesh": "\u02A7",
        "\\textsuperscript{h}": "\u02B0",
        "^{h}": "\u02B0",
        "\\textsuperscript{j}": "\u02B2",
        "^{j}": "\u02B2",
        "\\textsuperscript{r}": "\u02B3",
        "^{r}": "\u02B3",
        "\\textsuperscript{w}": "\u02B7",
        "^{w}": "\u02B7",
        "\\textsuperscript{y}": "\u02B8",
        "^{y}": "\u02B8",
        "\\lasp": "\u02BF",
        "\\textasciicircum": "\u02C6",
        "\\textasciicaron": "\u02C7",
        "\\Elzverts": "\u02C8",
        "\\Elzverti": "\u02CC",
        "\\Elzlmrk": "\u02D0",
        "\\Elzhlmrk": "\u02D1",
        "\\Elzsbrhr": "\u02D2",
        "\\Elzsblhr": "\u02D3",
        "\\Elzrais": "\u02D4",
        "\\Elzlow": "\u02D5",
        "\\textasciibreve": "\u02D8",
        "\\textperiodcentered": "\u02D9",
        "\\texttildelow": "\u02DC",
        "\\textsuperscript{l}": "\u02E1",
        "^{l}": "\u02E1",
        "\\textsuperscript{s}": "\u02E2",
        "^{s}": "\u02E2",
        "\\textsuperscript{x}": "\u02E3",
        "^{x}": "\u02E3",
        "\\tone{55}": "\u02E5",
        "\\tone{44}": "\u02E6",
        "\\tone{33}": "\u02E7",
        "\\tone{22}": "\u02E8",
        "\\tone{11}": "\u02E9",
        "\\`": "\u0300",
        "\\grave": "\u0300",
        "\\textgravemacron": "\u0300\u0304",
        "\\textgravedot": "\u0300\u0307",
        "\\'": "\u0301",
        "\\acute": "\u0301",
        "\\textacutemacron": "\u0301\u0304",
        "\\textacutewedge": "\u0301\u030C",
        "\\hat": "\u0302",
        "\\textcircumdot": "\u0302\u0307",
        "\\~": "\u0303",
        "\\tilde": "\u0303",
        "\\texttildedot": "\u0303\u0307",
        "\\=": "\u0304",
        "\\bar": "\u0304",
        "\\overline": "\u0305",
        "\\u": "\u0306",
        "\\breve": "\u0306",
        "\\textbrevemacron": "\u0306\u0304",
        "\\.": "\u0307",
        "\\dot": "\u0307",
        "\\textdotacute": "\u0307\u0301",
        '\\"': "\u0308",
        "\\ddot": "\u0308",
        "\\ovhook": "\u0309",
        "\\r": "\u030A",
        "\\mathring": "\u030A",
        "\\textringmacron": "\u030A\u0304",
        "\\H": "\u030B",
        "\\check": "\u030C",
        "\\v": "\u030C",
        "\\textvbaraccent": "\u030D",
        "\\textdoublevbaraccent": "\u030E",
        "\\textdoublegrave": "\u030F",
        "\\textdotbreve": "\u0310",
        "{\\fontencoding{LECO}\\selectfont\\char177}": "\u0311",
        "\\oturnedcomma": "\u0312",
        "\\ocommatopright": "\u0315",
        "\\textsubgrave": "\u0316",
        "\\textadvancing": "\u0318",
        "\\textretracting": "\u0319",
        "\\droang": "\u031A",
        "\\textcorner": "\u031A",
        "\\textsublhalfring": "\u031C",
        "\\textraising": "\u031D",
        "\\textlowering": "\u031E",
        "\\textsubplus": "\u031F",
        "\\Elzpalh": "\u0321",
        "\\Elzrh": "\u0322",
        "\\d": "\u0323",
        "\\textsubumlaut": "\u0324",
        "\\textsubring": "\u0325",
        "\\c": "\u0327",
        "\\k": "\u0328",
        "\\textsyllabic": "\u0329",
        "\\Elzsbbrg": "\u032A",
        "\\textsubbridge": "\u032A",
        "{\\fontencoding{LECO}\\selectfont\\char203}": "\u032B",
        "\\textsubwedge": "\u032C",
        "\\textsubarch": "\u032F",
        "\\utilde": "\u0330",
        "\\textsubtilde": "\u0330",
        "\\textsubbar": "\u0331",
        "\\underbar": "\u0331",
        "\\underline": "\u0332",
        "\\textsuperimposetilde": "\u0334",
        "\\Elzxl": "\u0335",
        "\\Elzbar": "\u0336",
        "{\\fontencoding{LECO}\\selectfont\\char215}": "\u0337",
        "\\not": "\u0338",
        "\\textsubrhalfring": "\u0339",
        "\\textinvsubbridge": "\u033A",
        "\\textsubsquare": "\u033B",
        "\\textseagull": "\u033C",
        "\\textovercross": "\u033D",
        "{\\fontencoding{LECO}\\selectfont\\char225}": "\u0361",
        "\\'H": "\u0389",
        "{\\'{}I}": "\u038A",
        "{\\'{}O}": "\u038C",
        "\\mathrm{'Y}": "\u038E",
        "\\mathrm{'\\Omega}": "\u038F",
        "\\acute{\\ddot{\\iota}}": "\u0390",
        "\\Gamma": "\u0393",
        "\\varGamma": "\u0393",
        "\\Delta": "\u0394",
        "\\Theta": "\u0398",
        "\\Lambda": "\u039B",
        "\\Xi": "\u039E",
        "\\Pi": "\u03A0",
        "\\Sigma": "\u03A3",
        "\\Upsilon": "\u03A5",
        "\\Phi": "\u03A6",
        "\\Psi": "\u03A8",
        "\\Omega": "\u03A9",
        "\\mathrm{\\ddot{I}}": "\u03AA",
        "\\mathrm{\\ddot{Y}}": "\u03AB",
        "{\\'$\\alpha$}": "\u03AC",
        "\\acute{\\epsilon}": "\u03AD",
        "\\acute{\\eta}": "\u03AE",
        "\\acute{\\iota}": "\u03AF",
        "\\acute{\\ddot{\\upsilon}}": "\u03B0",
        "\\alpha": "\u03B1",
        "\\beta": "\u03B2",
        "\\gamma": "\u03B3",
        "\\delta": "\u03B4",
        "\\zeta": "\u03B6",
        "\\eta": "\u03B7",
        "\\texttheta": "\u03B8",
        "\\theta": "\u03B8",
        "\\iota": "\u03B9",
        "\\kappa": "\u03BA",
        "\\lambda": "\u03BB",
        "\\nu": "\u03BD",
        "\\xi": "\u03BE",
        "\\pi": "\u03C0",
        "\\rho": "\u03C1",
        "\\varsigma": "\u03C2",
        "\\sigma": "\u03C3",
        "\\tau": "\u03C4",
        "\\upsilon": "\u03C5",
        "\\varphi": "\u03C6",
        "\\chi": "\u03C7",
        "\\psi": "\u03C8",
        "\\omega": "\u03C9",
        "\\ddot{\\iota}": "\u03CA",
        "\\ddot{\\upsilon}": "\u03CB",
        "\\acute{\\upsilon}": "\u03CD",
        "\\acute{\\omega}": "\u03CE",
        "\\Pisymbol{ppi022}{87}": "\u03D0",
        "\\varbeta": "\u03D0",
        "\\textvartheta": "\u03D1",
        "\\vartheta": "\u03D1",
        "\\phi": "\u03D5",
        "\\varpi": "\u03D6",
        "\\Qoppa": "\u03D8",
        "\\qoppa": "\u03D9",
        "\\Stigma": "\u03DA",
        "\\stigma": "\u03DB",
        "\\Digamma": "\u03DC",
        "\\digamma": "\u03DD",
        "\\Koppa": "\u03DE",
        "\\koppa": "\u03DF",
        "\\Sampi": "\u03E0",
        "\\sampi": "\u03E1",
        "\\varkappa": "\u03F0",
        "\\varrho": "\u03F1",
        "\\textTheta": "\u03F4",
        "\\upvarTheta": "\u03F4",
        "\\epsilon": "\u03F5",
        "\\backepsilon": "\u03F6",
        "\\cyrchar\\CYRYO": "\u0401",
        "\\cyrchar\\CYRDJE": "\u0402",
        "\\cyrchar{\\'\\CYRG}": "\u0403",
        "\\cyrchar\\CYRIE": "\u0404",
        "\\cyrchar\\CYRDZE": "\u0405",
        "\\cyrchar\\CYRII": "\u0406",
        "\\cyrchar\\CYRYI": "\u0407",
        "\\cyrchar\\CYRJE": "\u0408",
        "\\cyrchar\\CYRLJE": "\u0409",
        "\\cyrchar\\CYRNJE": "\u040A",
        "\\cyrchar\\CYRTSHE": "\u040B",
        "\\cyrchar{\\'\\CYRK}": "\u040C",
        "\\cyrchar\\CYRUSHRT": "\u040E",
        "\\cyrchar\\CYRDZHE": "\u040F",
        "\\cyrchar\\CYRA": "\u0410",
        "\\cyrchar\\CYRB": "\u0411",
        "\\cyrchar\\CYRV": "\u0412",
        "\\cyrchar\\CYRG": "\u0413",
        "\\cyrchar\\CYRD": "\u0414",
        "\\cyrchar\\CYRE": "\u0415",
        "\\cyrchar\\CYRZH": "\u0416",
        "\\cyrchar\\CYRZ": "\u0417",
        "\\cyrchar\\CYRI": "\u0418",
        "\\cyrchar\\CYRISHRT": "\u0419",
        "\\cyrchar\\CYRK": "\u041A",
        "\\cyrchar\\CYRL": "\u041B",
        "\\cyrchar\\CYRM": "\u041C",
        "\\cyrchar\\CYRN": "\u041D",
        "\\cyrchar\\CYRO": "\u041E",
        "\\cyrchar\\CYRP": "\u041F",
        "\\cyrchar\\CYRR": "\u0420",
        "\\cyrchar\\CYRS": "\u0421",
        "\\cyrchar\\CYRT": "\u0422",
        "\\cyrchar\\CYRU": "\u0423",
        "\\cyrchar\\CYRF": "\u0424",
        "\\cyrchar\\CYRH": "\u0425",
        "\\cyrchar\\CYRC": "\u0426",
        "\\cyrchar\\CYRCH": "\u0427",
        "\\cyrchar\\CYRSH": "\u0428",
        "\\cyrchar\\CYRSHCH": "\u0429",
        "\\cyrchar\\CYRHRDSN": "\u042A",
        "\\bud": "\u042A",
        "\\cdprime": "\u042A",
        "\\cyrchar\\CYRERY": "\u042B",
        "\\cyrchar\\CYRSFTSN": "\u042C",
        "\\cprime": "\u042C",
        "\\cyrchar\\CYREREV": "\u042D",
        "\\cyrchar\\CYRYU": "\u042E",
        "\\cyrchar\\CYRYA": "\u042F",
        "\\cyrchar\\cyra": "\u0430",
        "\\cyrchar\\cyrb": "\u0431",
        "\\cyrchar\\cyrv": "\u0432",
        "\\cyrchar\\cyrg": "\u0433",
        "\\cyrchar\\cyrd": "\u0434",
        "\\cyrchar\\cyre": "\u0435",
        "\\cyrchar\\cyrzh": "\u0436",
        "\\cyrchar\\cyrz": "\u0437",
        "\\cyrchar\\cyri": "\u0438",
        "\\cyrchar\\cyrishrt": "\u0439",
        "\\cyrchar\\cyrk": "\u043A",
        "\\cyrchar\\cyrl": "\u043B",
        "\\cyrchar\\cyrm": "\u043C",
        "\\cyrchar\\cyrn": "\u043D",
        "\\cyrchar\\cyro": "\u043E",
        "\\cyrchar\\cyrp": "\u043F",
        "\\cyrchar\\cyrr": "\u0440",
        "\\cyrchar\\cyrs": "\u0441",
        "\\cyrchar\\cyrt": "\u0442",
        "\\cyrchar\\cyru": "\u0443",
        "\\cyrchar\\cyrf": "\u0444",
        "\\cyrchar\\cyrh": "\u0445",
        "\\cyrchar\\cyrc": "\u0446",
        "\\cyrchar\\cyrch": "\u0447",
        "\\cyrchar\\cyrsh": "\u0448",
        "\\cyrchar\\cyrshch": "\u0449",
        "\\cyrchar\\cyrhrdsn": "\u044A",
        "\\cyrchar\\cyrery": "\u044B",
        "\\cyrchar\\cyrsftsn": "\u044C",
        "\\cyrchar\\cyrerev": "\u044D",
        "\\cyrchar\\cyryu": "\u044E",
        "\\cyrchar\\cyrya": "\u044F",
        "\\cyrchar\\cyryo": "\u0451",
        "\\cyrchar\\cyrdje": "\u0452",
        "\\cyrchar{\\'\\cyrg}": "\u0453",
        "\\cyrchar\\cyrie": "\u0454",
        "\\cyrchar\\cyrdze": "\u0455",
        "\\cyrchar\\cyrii": "\u0456",
        "\\cyrchar\\cyryi": "\u0457",
        "\\cyrchar\\cyrje": "\u0458",
        "\\cyrchar\\cyrlje": "\u0459",
        "\\cyrchar\\cyrnje": "\u045A",
        "\\cyrchar\\cyrtshe": "\u045B",
        "\\cyrchar{\\'\\cyrk}": "\u045C",
        "\\cyrchar\\cyrushrt": "\u045E",
        "\\cyrchar\\cyrdzhe": "\u045F",
        "\\cyrchar\\CYROMEGA": "\u0460",
        "\\cyrchar\\cyromega": "\u0461",
        "\\cyrchar\\CYRYAT": "\u0462",
        "\\cyrchar\\CYRIOTE": "\u0464",
        "\\cyrchar\\cyriote": "\u0465",
        "\\cyrchar\\CYRLYUS": "\u0466",
        "\\cyrchar\\cyrlyus": "\u0467",
        "\\cyrchar\\CYRIOTLYUS": "\u0468",
        "\\cyrchar\\cyriotlyus": "\u0469",
        "\\cyrchar\\CYRBYUS": "\u046A",
        "\\cyrchar\\CYRIOTBYUS": "\u046C",
        "\\cyrchar\\cyriotbyus": "\u046D",
        "\\cyrchar\\CYRKSI": "\u046E",
        "\\cyrchar\\cyrksi": "\u046F",
        "\\cyrchar\\CYRPSI": "\u0470",
        "\\cyrchar\\cyrpsi": "\u0471",
        "\\cyrchar\\CYRFITA": "\u0472",
        "\\cyrchar\\CYRIZH": "\u0474",
        "\\cyrchar\\CYRUK": "\u0478",
        "\\cyrchar\\cyruk": "\u0479",
        "\\cyrchar\\CYROMEGARND": "\u047A",
        "\\cyrchar\\cyromegarnd": "\u047B",
        "\\cyrchar\\CYROMEGATITLO": "\u047C",
        "\\cyrchar\\cyromegatitlo": "\u047D",
        "\\cyrchar\\CYROT": "\u047E",
        "\\cyrchar\\cyrot": "\u047F",
        "\\cyrchar\\CYRKOPPA": "\u0480",
        "\\cyrchar\\cyrkoppa": "\u0481",
        "\\cyrchar\\cyrthousands": "\u0482",
        "\\cyrchar\\cyrhundredthousands": "\u0488",
        "\\cyrchar\\cyrmillions": "\u0489",
        "\\cyrchar\\CYRSEMISFTSN": "\u048C",
        "\\cyrchar\\cyrsemisftsn": "\u048D",
        "\\cyrchar\\CYRRTICK": "\u048E",
        "\\cyrchar\\cyrrtick": "\u048F",
        "\\cyrchar\\CYRGUP": "\u0490",
        "\\cyrchar\\cyrgup": "\u0491",
        "\\cyrchar\\CYRGHCRS": "\u0492",
        "\\cyrchar\\cyrghcrs": "\u0493",
        "\\cyrchar\\CYRGHK": "\u0494",
        "\\cyrchar\\cyrghk": "\u0495",
        "\\cyrchar\\CYRZHDSC": "\u0496",
        "\\cyrchar\\cyrzhdsc": "\u0497",
        "\\cyrchar\\CYRZDSC": "\u0498",
        "\\cyrchar\\cyrzdsc": "\u0499",
        "\\cyrchar\\CYRKDSC": "\u049A",
        "\\cyrchar\\cyrkdsc": "\u049B",
        "\\cyrchar\\CYRKVCRS": "\u049C",
        "\\cyrchar\\cyrkvcrs": "\u049D",
        "\\cyrchar\\CYRKHCRS": "\u049E",
        "\\cyrchar\\cyrkhcrs": "\u049F",
        "\\cyrchar\\CYRKBEAK": "\u04A0",
        "\\cyrchar\\cyrkbeak": "\u04A1",
        "\\cyrchar\\CYRNDSC": "\u04A2",
        "\\cyrchar\\cyrndsc": "\u04A3",
        "\\cyrchar\\CYRNG": "\u04A4",
        "\\cyrchar\\cyrng": "\u04A5",
        "\\cyrchar\\CYRPHK": "\u04A6",
        "\\cyrchar\\cyrphk": "\u04A7",
        "\\cyrchar\\CYRABHHA": "\u04A8",
        "\\cyrchar\\cyrabhha": "\u04A9",
        "\\cyrchar\\CYRSDSC": "\u04AA",
        "\\cyrchar\\cyrsdsc": "\u04AB",
        "\\cyrchar\\CYRTDSC": "\u04AC",
        "\\cyrchar\\cyrtdsc": "\u04AD",
        "\\cyrchar\\CYRY": "\u04AE",
        "\\cyrchar\\cyry": "\u04AF",
        "\\cyrchar\\CYRYHCRS": "\u04B0",
        "\\cyrchar\\cyryhcrs": "\u04B1",
        "\\cyrchar\\CYRHDSC": "\u04B2",
        "\\cyrchar\\cyrhdsc": "\u04B3",
        "\\cyrchar\\CYRTETSE": "\u04B4",
        "\\cyrchar\\cyrtetse": "\u04B5",
        "\\cyrchar\\CYRCHRDSC": "\u04B6",
        "\\cyrchar\\cyrchrdsc": "\u04B7",
        "\\cyrchar\\CYRCHVCRS": "\u04B8",
        "\\cyrchar\\cyrchvcrs": "\u04B9",
        "\\cyrchar\\CYRSHHA": "\u04BA",
        "\\cyrchar\\cyrshha": "\u04BB",
        "\\cyrchar\\CYRABHCH": "\u04BC",
        "\\cyrchar\\cyrabhch": "\u04BD",
        "\\cyrchar\\CYRABHCHDSC": "\u04BE",
        "\\cyrchar\\cyrabhchdsc": "\u04BF",
        "\\cyrchar\\CYRpalochka": "\u04C0",
        "\\cyrchar\\CYRKHK": "\u04C3",
        "\\cyrchar\\cyrkhk": "\u04C4",
        "\\cyrchar\\CYRNHK": "\u04C7",
        "\\cyrchar\\cyrnhk": "\u04C8",
        "\\cyrchar\\CYRCHLDSC": "\u04CB",
        "\\cyrchar\\cyrchldsc": "\u04CC",
        "\\cyrchar\\CYRAE": "\u04D4",
        "\\cyrchar\\cyrae": "\u04D5",
        "\\cyrchar\\CYRSCHWA": "\u04D8",
        "\\cyrchar\\cyrschwa": "\u04D9",
        "\\cyrchar\\CYRABHDZE": "\u04E0",
        "\\cyrchar\\cyrabhdze": "\u04E1",
        "\\cyrchar\\CYROTLD": "\u04E8",
        "\\cyrchar\\cyrotld": "\u04E9",
        "\\\\backslash": "\u0871",
        "\\textsuperscript{a}": "\u1D43",
        "^{a}": "\u1D43",
        "\\textsuperscript{b}": "\u1D47",
        "^{b}": "\u1D47",
        "\\textsuperscript{d}": "\u1D48",
        "^{d}": "\u1D48",
        "\\textsuperscript{e}": "\u1D49",
        "^{e}": "\u1D49",
        "\\textsuperscript{g}": "\u1D4D",
        "^{g}": "\u1D4D",
        "\\textsuperscript{k}": "\u1D4F",
        "^{k}": "\u1D4F",
        "\\textsuperscript{m}": "\u1D50",
        "^{m}": "\u1D50",
        "\\textsuperscript{o}": "\u1D52",
        "^{o}": "\u1D52",
        "\\textsuperscript{p}": "\u1D56",
        "^{p}": "\u1D56",
        "\\textsuperscript{t}": "\u1D57",
        "^{t}": "\u1D57",
        "\\textsuperscript{u}": "\u1D58",
        "^{u}": "\u1D58",
        "\\textsuperscript{v}": "\u1D5B",
        "^{v}": "\u1D5B",
        "\\textsuperscript{c}": "\u1D9C",
        "^{c}": "\u1D9C",
        "\\textsuperscript{f}": "\u1DA0",
        "^{f}": "\u1DA0",
        "\\textsuperscript{z}": "\u1DBB",
        "^{z}": "\u1DBB",
        "\\.B": "\u1E02",
        "\\.b": "\u1E03",
        "\\d{B}": "\u1E04",
        "\\d{b}": "\u1E05",
        "\\b{B}": "\u1E06",
        "\\b{b}": "\u1E07",
        "\\.D": "\u1E0A",
        "\\.d": "\u1E0B",
        "\\d{D}": "\u1E0C",
        "\\d{d}": "\u1E0D",
        "\\b{D}": "\u1E0E",
        "\\b{d}": "\u1E0F",
        "\\c{D}": "\u1E10",
        "\\c{d}": "\u1E11",
        "\\c{\\u{E}}": "\u1E1C",
        "\\c{\\u{e}}": "\u1E1D",
        "\\.F": "\u1E1E",
        "\\.f": "\u1E1F",
        "\\=G": "\u1E20",
        "\\=g": "\u1E21",
        "\\.H": "\u1E22",
        "\\.h": "\u1E23",
        "\\d{H}": "\u1E24",
        "\\d{h}": "\u1E25",
        '\\"H': "\u1E26",
        '\\"h': "\u1E27",
        "\\c{H}": "\u1E28",
        "\\c{h}": "\u1E29",
        "\\'K": "\u1E30",
        "\\'k": "\u1E31",
        "\\d{K}": "\u1E32",
        "\\d{k}": "\u1E33",
        "\\b{K}": "\u1E34",
        "\\b{k}": "\u1E35",
        "\\d{L}": "\u1E36",
        "\\d{l}": "\u1E37",
        "\\b{L}": "\u1E3A",
        "\\b{l}": "\u1E3B",
        "\\'M": "\u1E3E",
        "\\'m": "\u1E3F",
        "\\.M": "\u1E40",
        "\\.m": "\u1E41",
        "\\d{M}": "\u1E42",
        "\\d{m}": "\u1E43",
        "\\.N": "\u1E44",
        "\\.n": "\u1E45",
        "\\d{N}": "\u1E46",
        "\\d{n}": "\u1E47",
        "\\b{N}": "\u1E48",
        "\\b{n}": "\u1E49",
        "\\'P": "\u1E54",
        "\\'p": "\u1E55",
        "\\.P": "\u1E56",
        "\\.p": "\u1E57",
        "\\.R": "\u1E58",
        "\\.r": "\u1E59",
        "\\d{R}": "\u1E5A",
        "\\d{r}": "\u1E5B",
        "\\b{R}": "\u1E5E",
        "\\b{r}": "\u1E5F",
        "\\.S": "\u1E60",
        "\\.s": "\u1E61",
        "\\d{S}": "\u1E62",
        "\\d{s}": "\u1E63",
        "\\.T": "\u1E6A",
        "\\.t": "\u1E6B",
        "\\d{T}": "\u1E6C",
        "\\d{t}": "\u1E6D",
        "\\b{T}": "\u1E6E",
        "\\b{t}": "\u1E6F",
        "\\~V": "\u1E7C",
        "\\~v": "\u1E7D",
        "\\d{V}": "\u1E7E",
        "\\d{v}": "\u1E7F",
        "\\`W": "\u1E80",
        "\\`w": "\u1E81",
        "\\'W": "\u1E82",
        "\\'w": "\u1E83",
        '\\"W': "\u1E84",
        '\\"w': "\u1E85",
        "\\.W": "\u1E86",
        "\\.w": "\u1E87",
        "\\d{W}": "\u1E88",
        "\\d{w}": "\u1E89",
        "\\.X": "\u1E8A",
        "\\.x": "\u1E8B",
        '\\"X': "\u1E8C",
        '\\"x': "\u1E8D",
        "\\.Y": "\u1E8E",
        "\\.y": "\u1E8F",
        "\\^Z": "\u1E90",
        "\\^z": "\u1E91",
        "\\d{Z}": "\u1E92",
        "\\d{z}": "\u1E93",
        "\\b{Z}": "\u1E94",
        "\\b{z}": "\u1E95",
        "\\b{h}": "\u1E96",
        '\\"t': "\u1E97",
        "\\r{w}": "\u1E98",
        "\\r{y}": "\u1E99",
        "\\d{A}": "\u1EA0",
        "\\d{a}": "\u1EA1",
        "\\d{E}": "\u1EB8",
        "\\d{e}": "\u1EB9",
        "\\~E": "\u1EBC",
        "\\~e": "\u1EBD",
        "\\d{I}": "\u1ECA",
        "\\d{i}": "\u1ECB",
        "\\d{O}": "\u1ECC",
        "\\d{o}": "\u1ECD",
        "\\d{U}": "\u1EE4",
        "\\d{u}": "\u1EE5",
        "\\`Y": "\u1EF2",
        "\\`y": "\u1EF3",
        "\\d{Y}": "\u1EF4",
        "\\d{y}": "\u1EF5",
        "\\~Y": "\u1EF8",
        "\\~y": "\u1EF9",
        "\\hspace{0.6em}": "\u2000",
        "\\quad": "\u2003",
        "\\;": "\u2004",
        "\\hspace{0.25em}": "\u2005",
        "\\hspace{0.166em}": "\u2006",
        "\\hphantom{0}": "\u2007",
        "\\hphantom{,}": "\u2008",
        "\\,": "\u2009",
        "\\mkern1mu": "\u200A",
        "\\hspace{0pt}": "\u200B",
        "{\\aftergroup\\ignorespaces}": "\u200C",
        "\\textendash": "\u2013",
        "\\textemdash": "\u2014",
        "\\rule{1em}{1pt}": "\u2015",
        "\\horizbar": "\u2015",
        "\\Vert": "\u2016",
        "\\twolowline": "\u2017",
        "\\textquoteleft": "\u2018",
        "\\textquoteright": "\u2019",
        "\\Elzreapos": "\u201B",
        "\\textquotedblleft": "\u201C",
        "\\textquotedblright": "\u201D",
        "\\quotedblbase": "\u201F",
        "\\textdagger": "\u2020",
        "\\dagger": "\u2020",
        "\\textdaggerdbl": "\u2021",
        "\\ddagger": "\u2021",
        "\\textbullet": "\u2022",
        "\\enleadertwodots": "\u2025",
        "\\ldots": "\u2026",
        "\\textperthousand": "\u2030",
        "\\textpertenthousand": "\u2031",
        "{'}": "\u2032",
        "{''}": "\u2033",
        "{'''}": "\u2034",
        "\\backprime": "\u2035",
        "\\backdprime": "\u2036",
        "\\backtrprime": "\u2037",
        "\\caretinsert": "\u2038",
        "\\guilsinglleft": "\u2039",
        "\\guilsinglright": "\u203A",
        "\\Exclam": "\u203C",
        "\\hyphenbullet": "\u2043",
        "\\fracslash": "\u2044",
        "\\Question": "\u2047",
        "\\closure": "\u2050",
        "\\:": "\u205F",
        "\\nolinebreak": "\u2060",
        "^{0}": "\u2070",
        "\\textsuperscript{i}": "\u2071",
        "^{i}": "\u2071",
        "^{4}": "\u2074",
        "^{5}": "\u2075",
        "^{6}": "\u2076",
        "^{7}": "\u2077",
        "^{8}": "\u2078",
        "^{9}": "\u2079",
        "^{+}": "\u207A",
        "^{-}": "\u207B",
        "^{=}": "\u207C",
        "^{(}": "\u207D",
        "^{)}": "\u207E",
        "\\textsuperscript{n}": "\u207F",
        "^{n}": "\u207F",
        "_{0}": "\u2080",
        "_{1}": "\u2081",
        "_{2}": "\u2082",
        "_{3}": "\u2083",
        "_{4}": "\u2084",
        "_{5}": "\u2085",
        "_{6}": "\u2086",
        "_{7}": "\u2087",
        "_{8}": "\u2088",
        "_{9}": "\u2089",
        "_{+}": "\u208A",
        "_{-}": "\u208B",
        "_{=}": "\u208C",
        "_{(}": "\u208D",
        "_{)}": "\u208E",
        "\\textsubscript{a}": "\u2090",
        "_{a}": "\u2090",
        "\\textsubscript{e}": "\u2091",
        "_{e}": "\u2091",
        "\\textsubscript{o}": "\u2092",
        "_{o}": "\u2092",
        "\\textsubscript{x}": "\u2093",
        "_{x}": "\u2093",
        "\\textsubscript{\\textschwa}": "\u2094",
        "\\textsubscript{h}": "\u2095",
        "_{h}": "\u2095",
        "\\textsubscript{k}": "\u2096",
        "_{k}": "\u2096",
        "\\textsubscript{l}": "\u2097",
        "_{l}": "\u2097",
        "\\textsubscript{m}": "\u2098",
        "_{m}": "\u2098",
        "\\textsubscript{n}": "\u2099",
        "_{n}": "\u2099",
        "\\textsubscript{p}": "\u209A",
        "_{p}": "\u209A",
        "\\textsubscript{s}": "\u209B",
        "_{s}": "\u209B",
        "\\textsubscript{t}": "\u209C",
        "_{t}": "\u209C",
        "\\ensuremath{\\Elzpes}": "\u20A7",
        "\\texteuro": "\u20AC",
        "\\euro": "\u20AC",
        "\\lvec": "\u20D0",
        "\\vertoverlay": "\u20D2",
        "\\LVec": "\u20D6",
        "\\vec": "\u20D7",
        "\\dddot": "\u20DB",
        "\\ddddot": "\u20DC",
        "\\enclosecircle": "\u20DD",
        "\\enclosesquare": "\u20DE",
        "\\enclosediamond": "\u20DF",
        "\\overleftrightarrow": "\u20E1",
        "\\enclosetriangle": "\u20E4",
        "\\annuity": "\u20E7",
        "\\threeunderdot": "\u20E8",
        "\\widebridgeabove": "\u20E9",
        "\\underrightharpoondown": "\u20EC",
        "\\underleftharpoondown": "\u20ED",
        "\\underleftarrow": "\u20EE",
        "\\underrightarrow": "\u20EF",
        "\\asteraccent": "\u20F0",
        "\\mathbb{C}": "\u2102",
        "\\textcelsius": "\u2103",
        "\\Euler": "\u2107",
        "\\mathscr{g}": "\u210A",
        "\\mathscr{H}": "\u210B",
        "\\mathfrak{H}": "\u210C",
        "\\mathbb{H}": "\u210D",
        "\\Planckconst": "\u210E",
        "\\hslash": "\u210F",
        "\\mathscr{I}": "\u2110",
        "\\mathfrak{I}": "\u2111",
        "\\mathscr{L}": "\u2112",
        "\\mathscr{l}": "\u2113",
        "\\mathbb{N}": "\u2115",
        "\\cyrchar\\textnumero": "\u2116",
        "\\textcircledP": "\u2117",
        "\\wp": "\u2118",
        "\\mathbb{P}": "\u2119",
        "\\mathbb{Q}": "\u211A",
        "\\mathscr{R}": "\u211B",
        "\\mathfrak{R}": "\u211C",
        "\\mathbb{R}": "\u211D",
        "\\Elzxrat": "\u211E",
        "\\textservicemark": "\u2120",
        "\\texttrademark": "\u2122",
        "\\mathbb{Z}": "\u2124",
        "\\mho": "\u2127",
        "\\mathfrak{Z}": "\u2128",
        "\\textriota": "\u2129",
        "\\Angstroem": "\u212B",
        "\\mathscr{B}": "\u212C",
        "\\mathfrak{C}": "\u212D",
        "\\textestimated": "\u212E",
        "\\mathscr{e}": "\u212F",
        "\\mathscr{E}": "\u2130",
        "\\mathscr{F}": "\u2131",
        "\\Finv": "\u2132",
        "\\mathscr{M}": "\u2133",
        "\\mathscr{o}": "\u2134",
        "\\aleph": "\u2135",
        "\\beth": "\u2136",
        "\\gimel": "\u2137",
        "\\daleth": "\u2138",
        "\\mathbb{\\pi}": "\u213C",
        "\\mathbb{\\gamma}": "\u213D",
        "\\mathbb{\\Gamma}": "\u213E",
        "\\mathbb{\\Pi}": "\u213F",
        "\\mathbb{\\Sigma}": "\u2140",
        "\\Game": "\u2141",
        "\\sansLturned": "\u2142",
        "\\sansLmirrored": "\u2143",
        "\\Yup": "\u2144",
        "\\CapitalDifferentialD": "\u2145",
        "\\DifferentialD": "\u2146",
        "\\ExponetialE": "\u2147",
        "\\ComplexI": "\u2148",
        "\\ComplexJ": "\u2149",
        "\\PropertyLine": "\u214A",
        "\\invamp": "\u214B",
        "\\frac{1}{7}": "\u2150",
        "\\textfrac{1}{7}": "\u2150",
        "\\frac{1}{9}": "\u2151",
        "\\textfrac{1}{9}": "\u2151",
        "\\frac{1}{10}": "\u2152",
        "\\textfrac{1}{10}": "\u2152",
        "\\frac{1}{3}": "\u2153",
        "\\textfrac{1}{3}": "\u2153",
        "\\frac{2}{3}": "\u2154",
        "\\textfrac{2}{3}": "\u2154",
        "\\frac{1}{5}": "\u2155",
        "\\textfrac{1}{5}": "\u2155",
        "\\frac{2}{5}": "\u2156",
        "\\textfrac{2}{5}": "\u2156",
        "\\frac{3}{5}": "\u2157",
        "\\textfrac{3}{5}": "\u2157",
        "\\frac{4}{5}": "\u2158",
        "\\textfrac{4}{5}": "\u2158",
        "\\frac{1}{6}": "\u2159",
        "\\textfrac{1}{6}": "\u2159",
        "\\frac{5}{6}": "\u215A",
        "\\textfrac{5}{6}": "\u215A",
        "\\frac{1}{8}": "\u215B",
        "\\textfrac{1}{8}": "\u215B",
        "\\frac{3}{8}": "\u215C",
        "\\textfrac{3}{8}": "\u215C",
        "\\frac{5}{8}": "\u215D",
        "\\textfrac{5}{8}": "\u215D",
        "\\frac{7}{8}": "\u215E",
        "\\textfrac{7}{8}": "\u215E",
        "\\frac{1}": "\u215F",
        "\\textfrac{1}": "\u215F",
        "\\frac{0}{3}": "\u2189",
        "\\textfrac{0}{3}": "\u2189",
        "\\leftarrow": "\u2190",
        "\\uparrow": "\u2191",
        "\\textrightarrow": "\u2192",
        "\\rightarrow": "\u2192",
        "\\to": "\u2192",
        "\\downarrow": "\u2193",
        "\\leftrightarrow": "\u2194",
        "\\updownarrow": "\u2195",
        "\\nwarrow": "\u2196",
        "\\nearrow": "\u2197",
        "\\searrow": "\u2198",
        "\\swarrow": "\u2199",
        "\\nleftarrow": "\u219A",
        "\\nrightarrow": "\u219B",
        "\\arrowwaveleft": "\u219C",
        "\\arrowwaveright": "\u219D",
        "\\twoheadleftarrow": "\u219E",
        "\\twoheaduparrow": "\u219F",
        "\\twoheadrightarrow": "\u21A0",
        "\\twoheaddownarrow": "\u21A1",
        "\\leftarrowtail": "\u21A2",
        "\\rightarrowtail": "\u21A3",
        "\\mapsfrom": "\u21A4",
        "\\MapsUp": "\u21A5",
        "\\mapsto": "\u21A6",
        "\\MapsDown": "\u21A7",
        "\\updownarrowbar": "\u21A8",
        "\\hookleftarrow": "\u21A9",
        "\\hookrightarrow": "\u21AA",
        "\\looparrowleft": "\u21AB",
        "\\looparrowright": "\u21AC",
        "\\leftrightsquigarrow": "\u21AD",
        "\\nleftrightarrow": "\u21AE",
        "\\lightning": "\u21AF",
        "\\Lsh": "\u21B0",
        "\\Rsh": "\u21B1",
        "\\dlsh": "\u21B2",
        "\\reflectbox{\\carriagereturn}": "\u21B3",
        "\\linefeed": "\u21B4",
        "\\carriagereturn": "\u21B5",
        "\\curvearrowleft": "\u21B6",
        "\\curvearrowright": "\u21B7",
        "\\barovernorthwestarrow": "\u21B8",
        "\\barleftarrowrightarrowba": "\u21B9",
        "\\circlearrowleft": "\u21BA",
        "\\circlearrowright": "\u21BB",
        "\\leftharpoonup": "\u21BC",
        "\\leftharpoondown": "\u21BD",
        "\\upharpoonright": "\u21BE",
        "\\upharpoonleft": "\u21BF",
        "\\rightharpoonup": "\u21C0",
        "\\rightharpoondown": "\u21C1",
        "\\downharpoonright": "\u21C2",
        "\\downharpoonleft": "\u21C3",
        "\\rightleftarrows": "\u21C4",
        "\\dblarrowupdown": "\u21C5",
        "\\leftrightarrows": "\u21C6",
        "\\leftleftarrows": "\u21C7",
        "\\upuparrows": "\u21C8",
        "\\rightrightarrows": "\u21C9",
        "\\downdownarrows": "\u21CA",
        "\\leftrightharpoons": "\u21CB",
        "\\rightleftharpoons": "\u21CC",
        "\\nLeftarrow": "\u21CD",
        "\\nLeftrightarrow": "\u21CE",
        "\\nRightarrow": "\u21CF",
        "\\Leftarrow": "\u21D0",
        "\\Uparrow": "\u21D1",
        "\\Rightarrow": "\u21D2",
        "\\Downarrow": "\u21D3",
        "\\Leftrightarrow": "\u21D4",
        "\\Updownarrow": "\u21D5",
        "\\Nwarrow": "\u21D6",
        "\\Nearrow": "\u21D7",
        "\\Searrow": "\u21D8",
        "\\Swarrow": "\u21D9",
        "\\Lleftarrow": "\u21DA",
        "\\Rrightarrow": "\u21DB",
        "\\leftsquigarrow": "\u21DC",
        "\\rightsquigarrow": "\u21DD",
        "\\nHuparrow": "\u21DE",
        "\\nHdownarrow": "\u21DF",
        "\\dashleftarrow": "\u21E0",
        "\\updasharrow": "\u21E1",
        "\\dashrightarrow": "\u21E2",
        "\\downdasharrow": "\u21E3",
        "\\LeftArrowBar": "\u21E4",
        "\\RightArrowBar": "\u21E5",
        "\\leftwhitearrow": "\u21E6",
        "\\upwhitearrow": "\u21E7",
        "\\rightwhitearrow": "\u21E8",
        "\\downwhitearrow": "\u21E9",
        "\\whitearrowupfrombar": "\u21EA",
        "\\circleonrightarrow": "\u21F4",
        "\\DownArrowUpArrow": "\u21F5",
        "\\rightthreearrows": "\u21F6",
        "\\nvleftarrow": "\u21F7",
        "\\pfun": "\u21F8",
        "\\nvleftrightarrow": "\u21F9",
        "\\nVleftarrow": "\u21FA",
        "\\ffun": "\u21FB",
        "\\nVleftrightarrow": "\u21FC",
        "\\leftarrowtriangle": "\u21FD",
        "\\rightarrowtriangle": "\u21FE",
        "\\leftrightarrowtriangle": "\u21FF",
        "\\forall": "\u2200",
        "\\complement": "\u2201",
        "\\partial": "\u2202",
        "\\exists": "\u2203",
        "\\nexists": "\u2204",
        "\\varnothing": "\u2205",
        "\\increment": "\u2206",
        "\\nabla": "\u2207",
        "\\in": "\u2208",
        "\\not\\in": "\u2209",
        "\\smallin": "\u220A",
        "\\ni": "\u220B",
        "\\not\\ni": "\u220C",
        "\\smallni": "\u220D",
        "\\QED": "\u220E",
        "\\prod": "\u220F",
        "\\coprod": "\u2210",
        "\\sum": "\u2211",
        "\\mp": "\u2213",
        "\\dotplus": "\u2214",
        "\\setminus": "\u2216",
        "{_\\ast}": "\u2217",
        "\\circ": "\u2218",
        "\\bullet": "\u2219",
        "\\surd": "\u221A",
        "\\sqrt[3]": "\u221B",
        "\\sqrt[4]": "\u221C",
        "\\propto": "\u221D",
        "\\infty": "\u221E",
        "\\rightangle": "\u221F",
        "\\angle": "\u2220",
        "\\measuredangle": "\u2221",
        "\\sphericalangle": "\u2222",
        "\\mid": "\u2223",
        "\\nmid": "\u2224",
        "\\parallel": "\u2225",
        "\\nparallel": "\u2226",
        "\\wedge": "\u2227",
        "\\vee": "\u2228",
        "\\cap": "\u2229",
        "\\cup": "\u222A",
        "\\int": "\u222B",
        "{\\int\\!\\int}": "\u222C",
        "{\\int\\!\\int\\!\\int}": "\u222D",
        "\\oint": "\u222E",
        "\\surfintegral": "\u222F",
        "\\volintegral": "\u2230",
        "\\clwintegral": "\u2231",
        "\\lcirclerightint": "\u2232",
        "\\rcirclerightint": "\u2233",
        "\\therefore": "\u2234",
        "\\because": "\u2235",
        "\\Colon": "\u2237",
        "\\dotdiv": "\u2238",
        "\\eqcolon": "\u2239",
        "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}": "\u223A",
        "\\homothetic": "\u223B",
        "\\sim": "\u223C",
        "\\backsim": "\u223D",
        "\\lazysinv": "\u223E",
        "\\AC": "\u223F",
        "\\wr": "\u2240",
        "\\not\\sim": "\u2241",
        "\\texteqsim": "\u2242",
        "\\NotEqualTilde": "\u2242\u0338",
        "\\simeq": "\u2243",
        "\\not\\simeq": "\u2244",
        "\\cong": "\u2245",
        "\\approxnotequal": "\u2246",
        "\\not\\cong": "\u2247",
        "\\approx": "\u2248",
        "\\not\\approx": "\u2249",
        "\\approxeq": "\u224A",
        "\\tildetrpl": "\u224B",
        "\\not\\apid": "\u224B\u0338",
        "\\allequal": "\u224C",
        "\\asymp": "\u224D",
        "\\Bumpeq": "\u224E",
        "\\NotHumpDownHump": "\u224E\u0338",
        "\\bumpeq": "\u224F",
        "\\NotHumpEqual": "\u224F\u0338",
        "\\doteq": "\u2250",
        "\\not\\doteq": "\u2250\u0338",
        "\\doteqdot": "\u2251",
        "\\fallingdotseq": "\u2252",
        "\\risingdotseq": "\u2253",
        "\\coloneq": "\u2254",
        "\\eqcirc": "\u2256",
        "\\circeq": "\u2257",
        "\\arceq": "\u2258",
        "\\estimates": "\u2259",
        "\\starequal": "\u225B",
        "\\triangleq": "\u225C",
        "\\eqdef": "\u225D",
        "\\measeq": "\u225E",
        "\\neq": "\u2260",
        "\\equiv": "\u2261",
        "\\not\\equiv": "\u2262",
        "\\Equiv": "\u2263",
        "\\leq": "\u2264",
        "\\le": "\u2264",
        "\\geq": "\u2265",
        "\\leqq": "\u2266",
        "\\geqq": "\u2267",
        "\\lneqq": "\u2268",
        "\\lvertneqq": "\u2268\uFE00",
        "\\gneqq": "\u2269",
        "\\gvertneqq": "\u2269\uFE00",
        "\\ll": "\u226A",
        "\\NotLessLess": "\u226A\u0338",
        "\\gg": "\u226B",
        "\\NotGreaterGreater": "\u226B\u0338",
        "\\between": "\u226C",
        "{\\not\\kern-0.3em\\times}": "\u226D",
        "\\not<": "\u226E",
        "\\not>": "\u226F",
        "\\not\\leq": "\u2270",
        "\\not\\geq": "\u2271",
        "\\lessequivlnt": "\u2272",
        "\\greaterequivlnt": "\u2273",
        "\\lessgtr": "\u2276",
        "\\gtrless": "\u2277",
        "\\notlessgreater": "\u2278",
        "\\notgreaterless": "\u2279",
        "\\prec": "\u227A",
        "\\succ": "\u227B",
        "\\preccurlyeq": "\u227C",
        "\\succcurlyeq": "\u227D",
        "\\NotPrecedesTilde": "\u227E\u0338",
        "\\NotSucceedsTilde": "\u227F\u0338",
        "\\not\\prec": "\u2280",
        "\\not\\succ": "\u2281",
        "\\subset": "\u2282",
        "\\supset": "\u2283",
        "\\not\\subset": "\u2284",
        "\\not\\supset": "\u2285",
        "\\subseteq": "\u2286",
        "\\supseteq": "\u2287",
        "\\not\\subseteq": "\u2288",
        "\\not\\supseteq": "\u2289",
        "\\subsetneq": "\u228A",
        "\\varsubsetneqq": "\u228A\uFE00",
        "\\supsetneq": "\u228B",
        "\\varsupsetneq": "\u228B\uFE00",
        "\\cupleftarrow": "\u228C",
        "\\cupdot": "\u228D",
        "\\uplus": "\u228E",
        "\\sqsubset": "\u228F",
        "\\NotSquareSubset": "\u228F\u0338",
        "\\sqsupset": "\u2290",
        "\\NotSquareSuperset": "\u2290\u0338",
        "\\sqsubseteq": "\u2291",
        "\\sqsupseteq": "\u2292",
        "\\sqcap": "\u2293",
        "\\sqcup": "\u2294",
        "\\oplus": "\u2295",
        "\\ominus": "\u2296",
        "\\otimes": "\u2297",
        "\\oslash": "\u2298",
        "\\odot": "\u2299",
        "\\circledcirc": "\u229A",
        "\\circledast": "\u229B",
        "\\circledequal": "\u229C",
        "\\circleddash": "\u229D",
        "\\boxplus": "\u229E",
        "\\boxminus": "\u229F",
        "\\boxtimes": "\u22A0",
        "\\boxdot": "\u22A1",
        "\\vdash": "\u22A2",
        "\\dashv": "\u22A3",
        "\\top": "\u22A4",
        "\\assert": "\u22A6",
        "\\truestate": "\u22A7",
        "\\forcesextra": "\u22A8",
        "\\Vdash": "\u22A9",
        "\\Vvdash": "\u22AA",
        "\\VDash": "\u22AB",
        "\\nvdash": "\u22AC",
        "\\nvDash": "\u22AD",
        "\\nVdash": "\u22AE",
        "\\nVDash": "\u22AF",
        "\\prurel": "\u22B0",
        "\\scurel": "\u22B1",
        "\\vartriangleleft": "\u22B2",
        "\\vartriangleright": "\u22B3",
        "\\trianglelefteq": "\u22B4",
        "\\trianglerighteq": "\u22B5",
        "\\original": "\u22B6",
        "\\image": "\u22B7",
        "\\multimap": "\u22B8",
        "\\hermitconjmatrix": "\u22B9",
        "\\intercal": "\u22BA",
        "\\veebar": "\u22BB",
        "\\barvee": "\u22BD",
        "\\rightanglearc": "\u22BE",
        "\\varlrtriangle": "\u22BF",
        "\\bigcap": "\u22C2",
        "\\bigcup": "\u22C3",
        "\\diamond": "\u22C4",
        "\\cdot": "\u22C5",
        "\\star": "\u22C6",
        "\\divideontimes": "\u22C7",
        "\\bowtie": "\u22C8",
        "\\ltimes": "\u22C9",
        "\\rtimes": "\u22CA",
        "\\leftthreetimes": "\u22CB",
        "\\rightthreetimes": "\u22CC",
        "\\backsimeq": "\u22CD",
        "\\curlyvee": "\u22CE",
        "\\curlywedge": "\u22CF",
        "\\Subset": "\u22D0",
        "\\Supset": "\u22D1",
        "\\Cap": "\u22D2",
        "\\Cup": "\u22D3",
        "\\pitchfork": "\u22D4",
        "\\hash": "\u22D5",
        "\\lessdot": "\u22D6",
        "\\gtrdot": "\u22D7",
        "\\verymuchless": "\u22D8",
        "\\verymuchgreater": "\u22D9",
        "\\lesseqgtr": "\u22DA",
        "\\gtreqless": "\u22DB",
        "\\eqless": "\u22DC",
        "\\eqgtr": "\u22DD",
        "\\curlyeqprec": "\u22DE",
        "\\curlyeqsucc": "\u22DF",
        "\\npreceq": "\u22E0",
        "\\nsucceq": "\u22E1",
        "\\not\\sqsubseteq": "\u22E2",
        "\\not\\sqsupseteq": "\u22E3",
        "\\sqsubsetneq": "\u22E4",
        "\\Elzsqspne": "\u22E5",
        "\\lnsim": "\u22E6",
        "\\gnsim": "\u22E7",
        "\\precedesnotsimilar": "\u22E8",
        "\\succnsim": "\u22E9",
        "\\ntriangleleft": "\u22EA",
        "\\ntriangleright": "\u22EB",
        "\\ntrianglelefteq": "\u22EC",
        "\\ntrianglerighteq": "\u22ED",
        "\\vdots": "\u22EE",
        "\\cdots": "\u22EF",
        "\\upslopeellipsis": "\u22F0",
        "\\downslopeellipsis": "\u22F1",
        "\\disin": "\u22F2",
        "\\varisins": "\u22F3",
        "\\isins": "\u22F4",
        "\\isindot": "\u22F5",
        "\\barin": "\u22F6",
        "\\isinobar": "\u22F7",
        "\\isinvb": "\u22F8",
        "\\isinE": "\u22F9",
        "\\nisd": "\u22FA",
        "\\varnis": "\u22FB",
        "\\nis": "\u22FC",
        "\\varniobar": "\u22FD",
        "\\niobar": "\u22FE",
        "\\bagmember": "\u22FF",
        "\\diameter": "\u2300",
        "\\house": "\u2302",
        "\\barwedge": "\u2305",
        "\\varbarwedge": "\u2305",
        "\\perspcorrespond": "\u2306",
        "\\lceil": "\u2308",
        "\\rceil": "\u2309",
        "\\lfloor": "\u230A",
        "\\rfloor": "\u230B",
        "\\invneg": "\u2310",
        "\\wasylozenge": "\u2311",
        "\\profline": "\u2312",
        "\\profsurf": "\u2313",
        "\\recorder": "\u2315",
        '{\\mathchar"2208}': "\u2316",
        "\\viewdata": "\u2317",
        "\\turnednot": "\u2319",
        "\\ulcorner": "\u231C",
        "\\urcorner": "\u231D",
        "\\llcorner": "\u231E",
        "\\lrcorner": "\u231F",
        "\\inttop": "\u2320",
        "\\intbottom": "\u2321",
        "\\frown": "\u2322",
        "\\smile": "\u2323",
        "\\varhexagonlrbonds": "\u232C",
        "\\conictaper": "\u2332",
        "\\topbot": "\u2336",
        "\\APLinv": "\u2339",
        "\\notslash": "\u233F",
        "\\notbackslash": "\u2340",
        "\\APLleftarrowbox": "\u2347",
        "\\APLrightarrowbox": "\u2348",
        "\\invdiameter": "\u2349",
        "\\APLuparrowbox": "\u2350",
        "\\APLboxupcaret": "\u2353",
        "\\APLdownarrowbox": "\u2357",
        "\\APLcomment": "\u235D",
        "\\APLinput": "\u235E",
        "\\APLlog": "\u235F",
        "\\APLboxquestion": "\u2370",
        "\\rangledownzigzagarrow": "\u237C",
        "\\hexagon": "\u2394",
        "\\lparenuend": "\u239B",
        "\\lparenextender": "\u239C",
        "\\lparenlend": "\u239D",
        "\\rparenuend": "\u239E",
        "\\rparenextender": "\u239F",
        "\\rparenlend": "\u23A0",
        "\\lbrackuend": "\u23A1",
        "\\lbrackextender": "\u23A2",
        "\\Elzdlcorn": "\u23A3",
        "\\rbrackuend": "\u23A4",
        "\\rbrackextender": "\u23A5",
        "\\rbracklend": "\u23A6",
        "\\lbraceuend": "\u23A7",
        "\\lbracemid": "\u23A8",
        "\\lbracelend": "\u23A9",
        "\\vbraceextender": "\u23AA",
        "\\rbraceuend": "\u23AB",
        "\\rbracemid": "\u23AC",
        "\\rbracelend": "\u23AD",
        "\\intextender": "\u23AE",
        "\\harrowextender": "\u23AF",
        "\\lmoustache": "\u23B0",
        "\\rmoustache": "\u23B1",
        "\\sumtop": "\u23B2",
        "\\sumbottom": "\u23B3",
        "\\overbracket": "\u23B4",
        "\\underbracket": "\u23B5",
        "\\bbrktbrk": "\u23B6",
        "\\sqrtbottom": "\u23B7",
        "\\lvboxline": "\u23B8",
        "\\rvboxline": "\u23B9",
        "\\varcarriagereturn": "\u23CE",
        "\\overparen": "\u23DC",
        "\\underparen": "\u23DD",
        "\\overbrace": "\u23DE",
        "\\underbrace": "\u23DF",
        "\\obrbrak": "\u23E0",
        "\\ubrbrak": "\u23E1",
        "\\trapezium": "\u23E2",
        "\\benzenr": "\u23E3",
        "\\strns": "\u23E4",
        "\\fltns": "\u23E5",
        "\\accurrent": "\u23E6",
        "\\elinters": "\u23E7",
        "\\textvisiblespace": "\u2423",
        "\\ding{172}": "\u2460",
        "\\ding{173}": "\u2461",
        "\\ding{174}": "\u2462",
        "\\ding{175}": "\u2463",
        "\\ding{176}": "\u2464",
        "\\ding{177}": "\u2465",
        "\\ding{178}": "\u2466",
        "\\ding{179}": "\u2467",
        "\\ding{180}": "\u2468",
        "\\ding{181}": "\u2469",
        "\\circledS": "\u24C8",
        "\\Elzdshfnc": "\u2506",
        "\\Elzsqfnw": "\u2519",
        "\\diagup": "\u2571",
        "\\blockuphalf": "\u2580",
        "\\blocklowhalf": "\u2584",
        "\\blockfull": "\u2588",
        "\\blocklefthalf": "\u258C",
        "\\blockrighthalf": "\u2590",
        "\\blockqtrshaded": "\u2591",
        "\\blockhalfshaded": "\u2592",
        "\\blockthreeqtrshaded": "\u2593",
        "\\ding{110}": "\u25A0",
        "\\mdlgblksquare": "\u25A0",
        "\\square": "\u25A1",
        "\\Box": "\u25A1",
        "\\squoval": "\u25A2",
        "\\blackinwhitesquare": "\u25A3",
        "\\squarehfill": "\u25A4",
        "\\squarevfill": "\u25A5",
        "\\squarehvfill": "\u25A6",
        "\\squarenwsefill": "\u25A7",
        "\\squareneswfill": "\u25A8",
        "\\squarecrossfill": "\u25A9",
        "\\smwhtsquare": "\u25AB",
        "\\hrectangleblack": "\u25AC",
        "\\fbox{~~}": "\u25AD",
        "\\vrectangleblack": "\u25AE",
        "\\Elzvrecto": "\u25AF",
        "\\parallelogramblack": "\u25B0",
        "\\ding{115}": "\u25B2",
        "\\bigblacktriangleup": "\u25B2",
        "\\bigtriangleup": "\u25B3",
        "\\blacktriangle": "\u25B4",
        "\\vartriangle": "\u25B5",
        "\\RHD": "\u25B6",
        "\\rhd": "\u25B7",
        "\\blacktriangleright": "\u25B8",
        "\\triangleright": "\u25B9",
        "\\blackpointerright": "\u25BA",
        "\\whitepointerright": "\u25BB",
        "\\ding{116}": "\u25BC",
        "\\bigblacktriangledown": "\u25BC",
        "\\bigtriangledown": "\u25BD",
        "\\blacktriangledown": "\u25BE",
        "\\triangledown": "\u25BF",
        "\\LHD": "\u25C0",
        "\\lhd": "\u25C1",
        "\\blacktriangleleft": "\u25C2",
        "\\triangleleft": "\u25C3",
        "\\blackpointerleft": "\u25C4",
        "\\whitepointerleft": "\u25C5",
        "\\ding{117}": "\u25C6",
        "\\Diamondblack": "\u25C6",
        "\\Diamond": "\u25C7",
        "\\blackinwhitediamond": "\u25C8",
        "\\fisheye": "\u25C9",
        "\\lozenge": "\u25CA",
        "\\dottedcircle": "\u25CC",
        "\\circlevertfill": "\u25CD",
        "\\bullseye": "\u25CE",
        "\\ding{108}": "\u25CF",
        "\\CIRCLE": "\u25CF",
        "\\Elzcirfl": "\u25D0",
        "\\Elzcirfr": "\u25D1",
        "\\Elzcirfb": "\u25D2",
        "\\circletophalfblack": "\u25D3",
        "\\circleurquadblack": "\u25D4",
        "\\blackcircleulquadwhite": "\u25D5",
        "\\LEFTCIRCLE": "\u25D6",
        "\\ding{119}": "\u25D7",
        "\\RIGHTCIRCLE": "\u25D7",
        "\\Elzrvbull": "\u25D8",
        "\\inversewhitecircle": "\u25D9",
        "\\invwhiteupperhalfcircle": "\u25DA",
        "\\invwhitelowerhalfcircle": "\u25DB",
        "\\ularc": "\u25DC",
        "\\urarc": "\u25DD",
        "\\lrarc": "\u25DE",
        "\\llarc": "\u25DF",
        "\\topsemicircle": "\u25E0",
        "\\botsemicircle": "\u25E1",
        "\\lrblacktriangle": "\u25E2",
        "\\llblacktriangle": "\u25E3",
        "\\ulblacktriangle": "\u25E4",
        "\\urblacktriangle": "\u25E5",
        "\\smwhtcircle": "\u25E6",
        "\\Elzsqfl": "\u25E7",
        "\\Elzsqfr": "\u25E8",
        "\\squareulblack": "\u25E9",
        "\\Elzsqfse": "\u25EA",
        "\\boxbar": "\u25EB",
        "\\trianglecdot": "\u25EC",
        "\\triangleleftblack": "\u25ED",
        "\\trianglerightblack": "\u25EE",
        "\\bigcirc": "\u25EF",
        "\\squareulquad": "\u25F0",
        "\\squarellquad": "\u25F1",
        "\\squarelrquad": "\u25F2",
        "\\squareurquad": "\u25F3",
        "\\circleulquad": "\u25F4",
        "\\circlellquad": "\u25F5",
        "\\circlelrquad": "\u25F6",
        "\\circleurquad": "\u25F7",
        "\\ultriangle": "\u25F8",
        "\\urtriangle": "\u25F9",
        "\\lltriangle": "\u25FA",
        "\\mdsmwhtsquare": "\u25FD",
        "\\mdsmblksquare": "\u25FE",
        "\\lrtriangle": "\u25FF",
        "\\ding{72}": "\u2605",
        "\\bigstar": "\u2605",
        "\\ding{73}": "\u2606",
        "\\bigwhitestar": "\u2606",
        "\\Sun": "\u2609",
        "\\ding{37}": "\u260E",
        "\\Square": "\u2610",
        "\\CheckedBox": "\u2611",
        "\\XBox": "\u2612",
        "\\steaming": "\u2615",
        "\\ding{42}": "\u261B",
        "\\ding{43}": "\u261E",
        "\\pointright": "\u261E",
        "\\skull": "\u2620",
        "\\danger": "\u2621",
        "\\radiation": "\u2622",
        "\\biohazard": "\u2623",
        "\\yinyang": "\u262F",
        "\\frownie": "\u2639",
        "\\smiley": "\u263A",
        "\\blacksmiley": "\u263B",
        "\\sun": "\u263C",
        "\\rightmoon": "\u263D",
        "\\leftmoon": "\u263E",
        "\\mercury": "\u263F",
        "\\venus": "\u2640",
        "\\female": "\u2640",
        "\\earth": "\u2641",
        "\\male": "\u2642",
        "\\jupiter": "\u2643",
        "\\saturn": "\u2644",
        "\\uranus": "\u2645",
        "\\neptune": "\u2646",
        "\\pluto": "\u2647",
        "\\aries": "\u2648",
        "\\taurus": "\u2649",
        "\\gemini": "\u264A",
        "\\cancer": "\u264B",
        "\\leo": "\u264C",
        "\\virgo": "\u264D",
        "\\libra": "\u264E",
        "\\scorpio": "\u264F",
        "\\sagittarius": "\u2650",
        "\\capricornus": "\u2651",
        "\\aquarius": "\u2652",
        "\\pisces": "\u2653",
        "\\ding{171}": "\u2660",
        "\\spadesuit": "\u2660",
        "\\heartsuit": "\u2661",
        "\\ding{168}": "\u2663",
        "\\clubsuit": "\u2663",
        "\\varspadesuit": "\u2664",
        "\\ding{170}": "\u2665",
        "\\varheartsuit": "\u2665",
        "\\ding{169}": "\u2666",
        "\\vardiamondsuit": "\u2666",
        "\\varclubsuit": "\u2667",
        "\\quarternote": "\u2669",
        "\\eighthnote": "\u266A",
        "\\twonotes": "\u266B",
        "\\sixteenthnote": "\u266C",
        "\\flat": "\u266D",
        "\\natural": "\u266E",
        "\\sharp": "\u266F",
        "\\recycle": "\u267B",
        "\\acidfree": "\u267E",
        "\\dicei": "\u2680",
        "\\diceii": "\u2681",
        "\\diceiii": "\u2682",
        "\\diceiv": "\u2683",
        "\\dicev": "\u2684",
        "\\dicevi": "\u2685",
        "\\circledrightdot": "\u2686",
        "\\circledtwodots": "\u2687",
        "\\blackcircledrightdot": "\u2688",
        "\\blackcircledtwodots": "\u2689",
        "\\anchor": "\u2693",
        "\\swords": "\u2694",
        "\\warning": "\u26A0",
        "\\Hermaphrodite": "\u26A5",
        "\\medcirc": "\u26AA",
        "\\medbullet": "\u26AB",
        "\\mdsmwhtcircle": "\u26AC",
        "\\neuter": "\u26B2",
        "\\ding{33}": "\u2701",
        "\\ding{34}": "\u2702",
        "\\ding{35}": "\u2703",
        "\\ding{36}": "\u2704",
        "\\ding{38}": "\u2706",
        "\\ding{39}": "\u2707",
        "\\ding{40}": "\u2708",
        "\\ding{41}": "\u2709",
        "\\ding{44}": "\u270C",
        "\\ding{45}": "\u270D",
        "\\ding{46}": "\u270E",
        "\\pencil": "\u270E",
        "\\ding{47}": "\u270F",
        "\\ding{48}": "\u2710",
        "\\ding{49}": "\u2711",
        "\\ding{50}": "\u2712",
        "\\ding{51}": "\u2713",
        "\\checkmark": "\u2713",
        "\\ding{52}": "\u2714",
        "\\ding{53}": "\u2715",
        "\\ding{54}": "\u2716",
        "\\ding{55}": "\u2717",
        "\\ballotx": "\u2717",
        "\\ding{56}": "\u2718",
        "\\ding{57}": "\u2719",
        "\\ding{58}": "\u271A",
        "\\ding{59}": "\u271B",
        "\\ding{60}": "\u271C",
        "\\ding{61}": "\u271D",
        "\\ding{62}": "\u271E",
        "\\ding{63}": "\u271F",
        "\\ding{64}": "\u2720",
        "\\maltese": "\u2720",
        "\\ding{65}": "\u2721",
        "\\ding{66}": "\u2722",
        "\\ding{67}": "\u2723",
        "\\ding{68}": "\u2724",
        "\\ding{69}": "\u2725",
        "\\ding{70}": "\u2726",
        "\\ding{71}": "\u2727",
        "\\ding{74}": "\u272A",
        "\\circledstar": "\u272A",
        "\\ding{75}": "\u272B",
        "\\ding{76}": "\u272C",
        "\\ding{77}": "\u272D",
        "\\ding{78}": "\u272E",
        "\\ding{79}": "\u272F",
        "\\ding{80}": "\u2730",
        "\\ding{81}": "\u2731",
        "\\ding{82}": "\u2732",
        "\\ding{83}": "\u2733",
        "\\ding{84}": "\u2734",
        "\\ding{85}": "\u2735",
        "\\ding{86}": "\u2736",
        "\\varstar": "\u2736",
        "\\ding{87}": "\u2737",
        "\\ding{88}": "\u2738",
        "\\ding{89}": "\u2739",
        "\\ding{90}": "\u273A",
        "\\ding{91}": "\u273B",
        "\\ding{92}": "\u273C",
        "\\ding{93}": "\u273D",
        "\\dingasterisk": "\u273D",
        "\\ding{94}": "\u273E",
        "\\ding{95}": "\u273F",
        "\\ding{96}": "\u2740",
        "\\ding{97}": "\u2741",
        "\\ding{98}": "\u2742",
        "\\ding{99}": "\u2743",
        "\\ding{100}": "\u2744",
        "\\ding{101}": "\u2745",
        "\\ding{102}": "\u2746",
        "\\ding{103}": "\u2747",
        "\\ding{104}": "\u2748",
        "\\ding{105}": "\u2749",
        "\\ding{106}": "\u274A",
        "\\ding{107}": "\u274B",
        "\\ding{109}": "\u274D",
        "\\ding{111}": "\u274F",
        "\\ding{112}": "\u2750",
        "\\ding{113}": "\u2751",
        "\\ding{114}": "\u2752",
        "\\ding{118}": "\u2756",
        "\\ding{120}": "\u2758",
        "\\ding{121}": "\u2759",
        "\\ding{122}": "\u275A",
        "\\ding{123}": "\u275B",
        "\\ding{124}": "\u275C",
        "\\ding{125}": "\u275D",
        "\\ding{126}": "\u275E",
        "\\ding{161}": "\u2761",
        "\\ding{162}": "\u2762",
        "\\ding{163}": "\u2763",
        "\\ding{164}": "\u2764",
        "\\ding{165}": "\u2765",
        "\\ding{166}": "\u2766",
        "\\ding{167}": "\u2767",
        "\\ding{182}": "\u2776",
        "\\ding{183}": "\u2777",
        "\\ding{184}": "\u2778",
        "\\ding{185}": "\u2779",
        "\\ding{186}": "\u277A",
        "\\ding{187}": "\u277B",
        "\\ding{188}": "\u277C",
        "\\ding{189}": "\u277D",
        "\\ding{190}": "\u277E",
        "\\ding{191}": "\u277F",
        "\\ding{192}": "\u2780",
        "\\ding{193}": "\u2781",
        "\\ding{194}": "\u2782",
        "\\ding{195}": "\u2783",
        "\\ding{196}": "\u2784",
        "\\ding{197}": "\u2785",
        "\\ding{198}": "\u2786",
        "\\ding{199}": "\u2787",
        "\\ding{200}": "\u2788",
        "\\ding{201}": "\u2789",
        "\\ding{202}": "\u278A",
        "\\ding{203}": "\u278B",
        "\\ding{204}": "\u278C",
        "\\ding{205}": "\u278D",
        "\\ding{206}": "\u278E",
        "\\ding{207}": "\u278F",
        "\\ding{208}": "\u2790",
        "\\ding{209}": "\u2791",
        "\\ding{210}": "\u2792",
        "\\ding{211}": "\u2793",
        "\\ding{212}": "\u2794",
        "\\ding{216}": "\u2798",
        "\\ding{217}": "\u2799",
        "\\ding{218}": "\u279A",
        "\\ding{219}": "\u279B",
        "\\draftingarrow": "\u279B",
        "\\ding{220}": "\u279C",
        "\\ding{221}": "\u279D",
        "\\ding{222}": "\u279E",
        "\\ding{223}": "\u279F",
        "\\ding{224}": "\u27A0",
        "\\ding{225}": "\u27A1",
        "\\ding{226}": "\u27A2",
        "\\arrowbullet": "\u27A2",
        "\\ding{227}": "\u27A3",
        "\\ding{228}": "\u27A4",
        "\\ding{229}": "\u27A5",
        "\\ding{230}": "\u27A6",
        "\\ding{231}": "\u27A7",
        "\\ding{232}": "\u27A8",
        "\\ding{233}": "\u27A9",
        "\\ding{234}": "\u27AA",
        "\\ding{235}": "\u27AB",
        "\\ding{236}": "\u27AC",
        "\\ding{237}": "\u27AD",
        "\\ding{238}": "\u27AE",
        "\\ding{239}": "\u27AF",
        "\\ding{241}": "\u27B1",
        "\\ding{242}": "\u27B2",
        "\\ding{243}": "\u27B3",
        "\\ding{244}": "\u27B4",
        "\\ding{245}": "\u27B5",
        "\\ding{246}": "\u27B6",
        "\\ding{247}": "\u27B7",
        "\\ding{248}": "\u27B8",
        "\\ding{249}": "\u27B9",
        "\\ding{250}": "\u27BA",
        "\\ding{251}": "\u27BB",
        "\\ding{252}": "\u27BC",
        "\\ding{253}": "\u27BD",
        "\\ding{254}": "\u27BE",
        "\\threedangle": "\u27C0",
        "\\whiteinwhitetriangle": "\u27C1",
        "\\perp": "\u27C2",
        "\\subsetcirc": "\u27C3",
        "\\supsetcirc": "\u27C4",
        "\\Lbag": "\u27C5",
        "\\Rbag": "\u27C6",
        "\\veedot": "\u27C7",
        "\\bsolhsub": "\u27C8",
        "\\suphsol": "\u27C9",
        "\\longdivision": "\u27CC",
        "\\Diamonddot": "\u27D0",
        "\\wedgedot": "\u27D1",
        "\\upin": "\u27D2",
        "\\pullback": "\u27D3",
        "\\pushout": "\u27D4",
        "\\leftouterjoin": "\u27D5",
        "\\rightouterjoin": "\u27D6",
        "\\fullouterjoin": "\u27D7",
        "\\bigbot": "\u27D8",
        "\\bigtop": "\u27D9",
        "\\DashVDash": "\u27DA",
        "\\dashVdash": "\u27DB",
        "\\multimapinv": "\u27DC",
        "\\vlongdash": "\u27DD",
        "\\longdashv": "\u27DE",
        "\\cirbot": "\u27DF",
        "\\lozengeminus": "\u27E0",
        "\\concavediamond": "\u27E1",
        "\\concavediamondtickleft": "\u27E2",
        "\\concavediamondtickright": "\u27E3",
        "\\whitesquaretickleft": "\u27E4",
        "\\whitesquaretickright": "\u27E5",
        "\\llbracket": "\u27E6",
        "\\rrbracket": "\u27E7",
        "\\langle": "\u27E8",
        "\\rangle": "\u27E9",
        "\\lang": "\u27EA",
        "\\rang": "\u27EB",
        "\\Lbrbrak": "\u27EC",
        "\\Rbrbrak": "\u27ED",
        "\\lgroup": "\u27EE",
        "\\rgroup": "\u27EF",
        "\\UUparrow": "\u27F0",
        "\\DDownarrow": "\u27F1",
        "\\acwgapcirclearrow": "\u27F2",
        "\\cwgapcirclearrow": "\u27F3",
        "\\rightarrowonoplus": "\u27F4",
        "\\longleftarrow": "\u27F5",
        "\\longrightarrow": "\u27F6",
        "\\longleftrightarrow": "\u27F7",
        "\\Longleftarrow": "\u27F8",
        "\\Longrightarrow": "\u27F9",
        "\\Longleftrightarrow": "\u27FA",
        "\\longmapsfrom": "\u27FB",
        "\\longmapsto": "\u27FC",
        "\\Longmapsfrom": "\u27FD",
        "\\Longmapsto": "\u27FE",
        "\\sim\\joinrel\\leadsto": "\u27FF",
        "\\psur": "\u2900",
        "\\nVtwoheadrightarrow": "\u2901",
        "\\nvLeftarrow": "\u2902",
        "\\nvRightarrow": "\u2903",
        "\\nvLeftrightarrow": "\u2904",
        "\\Mapsfrom": "\u2906",
        "\\Mapsto": "\u2907",
        "\\downarrowbarred": "\u2908",
        "\\uparrowbarred": "\u2909",
        "\\Uuparrow": "\u290A",
        "\\Ddownarrow": "\u290B",
        "\\leftbkarrow": "\u290C",
        "\\rightbkarrow": "\u290D",
        "\\leftdbkarrow": "\u290E",
        "\\dbkarow": "\u290F",
        "\\drbkarow": "\u2910",
        "\\rightdotarrow": "\u2911",
        "\\UpArrowBar": "\u2912",
        "\\DownArrowBar": "\u2913",
        "\\pinj": "\u2914",
        "\\finj": "\u2915",
        "\\bij": "\u2916",
        "\\nvtwoheadrightarrowtail": "\u2917",
        "\\nVtwoheadrightarrowtail": "\u2918",
        "\\lefttail": "\u2919",
        "\\righttail": "\u291A",
        "\\leftdbltail": "\u291B",
        "\\rightdbltail": "\u291C",
        "\\diamondleftarrow": "\u291D",
        "\\rightarrowdiamond": "\u291E",
        "\\diamondleftarrowbar": "\u291F",
        "\\barrightarrowdiamond": "\u2920",
        "\\nwsearrow": "\u2921",
        "\\neswarrow": "\u2922",
        "\\rdiagovfdiag": "\u292B",
        "\\fdiagovrdiag": "\u292C",
        "\\seovnearrow": "\u292D",
        "\\neovsearrow": "\u292E",
        "\\fdiagovnearrow": "\u292F",
        "\\rdiagovsearrow": "\u2930",
        "\\neovnwarrow": "\u2931",
        "\\nwovnearrow": "\u2932",
        "\\uprightcurvearrow": "\u2934",
        "\\downrightcurvedarrow": "\u2935",
        "\\cwrightarcarrow": "\u2938",
        "\\acwleftarcarrow": "\u2939",
        "\\acwoverarcarrow": "\u293A",
        "\\acwunderarcarrow": "\u293B",
        "\\curvearrowrightminus": "\u293C",
        "\\curvearrowleftplus": "\u293D",
        "\\cwundercurvearrow": "\u293E",
        "\\ccwundercurvearrow": "\u293F",
        "\\Elolarr": "\u2940",
        "\\Elorarr": "\u2941",
        "\\ElzRlarr": "\u2942",
        "\\leftarrowshortrightarrow": "\u2943",
        "\\ElzrLarr": "\u2944",
        "\\rightarrowplus": "\u2945",
        "\\leftarrowplus": "\u2946",
        "\\Elzrarrx": "\u2947",
        "\\leftrightarrowcircle": "\u2948",
        "\\twoheaduparrowcircle": "\u2949",
        "\\leftrightharpoon": "\u294A",
        "\\rightleftharpoon": "\u294B",
        "\\updownharpoonrightleft": "\u294C",
        "\\updownharpoonleftright": "\u294D",
        "\\LeftRightVector": "\u294E",
        "\\RightUpDownVector": "\u294F",
        "\\DownLeftRightVector": "\u2950",
        "\\LeftUpDownVector": "\u2951",
        "\\LeftVectorBar": "\u2952",
        "\\RightVectorBar": "\u2953",
        "\\RightUpVectorBar": "\u2954",
        "\\RightDownVectorBar": "\u2955",
        "\\DownLeftVectorBar": "\u2956",
        "\\DownRightVectorBar": "\u2957",
        "\\LeftUpVectorBar": "\u2958",
        "\\LeftDownVectorBar": "\u2959",
        "\\LeftTeeVector": "\u295A",
        "\\RightTeeVector": "\u295B",
        "\\RightUpTeeVector": "\u295C",
        "\\RightDownTeeVector": "\u295D",
        "\\DownLeftTeeVector": "\u295E",
        "\\DownRightTeeVector": "\u295F",
        "\\LeftUpTeeVector": "\u2960",
        "\\LeftDownTeeVector": "\u2961",
        "\\leftleftharpoons": "\u2962",
        "\\upupharpoons": "\u2963",
        "\\rightrightharpoons": "\u2964",
        "\\downdownharpoons": "\u2965",
        "\\leftrightharpoonsup": "\u2966",
        "\\leftrightharpoonsdown": "\u2967",
        "\\rightleftharpoonsup": "\u2968",
        "\\rightleftharpoonsdown": "\u2969",
        "\\leftbarharpoon": "\u296A",
        "\\barleftharpoon": "\u296B",
        "\\rightbarharpoon": "\u296C",
        "\\barrightharpoon": "\u296D",
        "\\UpEquilibrium": "\u296E",
        "\\ReverseUpEquilibrium": "\u296F",
        "\\RoundImplies": "\u2970",
        "\\equalrightarrow": "\u2971",
        "\\similarrightarrow": "\u2972",
        "\\leftarrowsimilar": "\u2973",
        "\\rightarrowsimilar": "\u2974",
        "\\rightarrowapprox": "\u2975",
        "\\ltlarr": "\u2976",
        "\\leftarrowless": "\u2977",
        "\\gtrarr": "\u2978",
        "\\subrarr": "\u2979",
        "\\leftarrowsubset": "\u297A",
        "\\suplarr": "\u297B",
        "\\upfishtail": "\u297E",
        "\\downfishtail": "\u297F",
        "\\Elztfnc": "\u2980",
        "\\spot": "\u2981",
        "\\typecolon": "\u2982",
        "\\lBrace": "\u2983",
        "\\rBrace": "\u2984",
        "\\Elroang": "\u2986",
        "\\limg": "\u2987",
        "\\rimg": "\u2988",
        "\\lblot": "\u2989",
        "\\rblot": "\u298A",
        "\\lbrackubar": "\u298B",
        "\\rbrackubar": "\u298C",
        "\\lbrackultick": "\u298D",
        "\\rbracklrtick": "\u298E",
        "\\lbracklltick": "\u298F",
        "\\rbrackurtick": "\u2990",
        "\\langledot": "\u2991",
        "\\rangledot": "\u2992",
        "<\\kern-0.58em(": "\u2993",
        "\\Lparengtr": "\u2995",
        "\\Rparenless": "\u2996",
        "\\lblkbrbrak": "\u2997",
        "\\rblkbrbrak": "\u2998",
        "\\Elzddfnc": "\u2999",
        "\\vzigzag": "\u299A",
        "\\measuredangleleft": "\u299B",
        "\\Angle": "\u299C",
        "\\rightanglemdot": "\u299D",
        "\\angles": "\u299E",
        "\\angdnr": "\u299F",
        "\\Elzlpargt": "\u29A0",
        "\\sphericalangleup": "\u29A1",
        "\\turnangle": "\u29A2",
        "\\revangle": "\u29A3",
        "\\angleubar": "\u29A4",
        "\\revangleubar": "\u29A5",
        "\\wideangledown": "\u29A6",
        "\\wideangleup": "\u29A7",
        "\\measanglerutone": "\u29A8",
        "\\measanglelutonw": "\u29A9",
        "\\measanglerdtose": "\u29AA",
        "\\measangleldtosw": "\u29AB",
        "\\measangleurtone": "\u29AC",
        "\\measangleultonw": "\u29AD",
        "\\measangledrtose": "\u29AE",
        "\\measangledltosw": "\u29AF",
        "\\revemptyset": "\u29B0",
        "\\emptysetobar": "\u29B1",
        "\\emptysetocirc": "\u29B2",
        "\\emptysetoarr": "\u29B3",
        "\\emptysetoarrl": "\u29B4",
        "\\circledparallel": "\u29B7",
        "\\circledbslash": "\u29B8",
        "\\operp": "\u29B9",
        "\\obot": "\u29BA",
        "\\olcross": "\u29BB",
        "\\odotslashdot": "\u29BC",
        "\\uparrowoncircle": "\u29BD",
        "\\circledwhitebullet": "\u29BE",
        "\\circledbullet": "\u29BF",
        "\\circledless": "\u29C0",
        "\\circledgtr": "\u29C1",
        "\\cirscir": "\u29C2",
        "\\cirE": "\u29C3",
        "\\boxslash": "\u29C4",
        "\\boxbslash": "\u29C5",
        "\\boxast": "\u29C6",
        "\\boxcircle": "\u29C7",
        "\\boxbox": "\u29C8",
        "\\boxonbox": "\u29C9",
        "\\ElzLap": "\u29CA",
        "\\Elzdefas": "\u29CB",
        "\\triangles": "\u29CC",
        "\\triangleserifs": "\u29CD",
        "\\rtriltri": "\u29CE",
        "\\LeftTriangleBar": "\u29CF",
        "\\NotLeftTriangleBar": "\u29CF\u0338",
        "\\RightTriangleBar": "\u29D0",
        "\\NotRightTriangleBar": "\u29D0\u0338",
        "\\lfbowtie": "\u29D1",
        "\\rfbowtie": "\u29D2",
        "\\fbowtie": "\u29D3",
        "\\lftimes": "\u29D4",
        "\\rftimes": "\u29D5",
        "\\hourglass": "\u29D6",
        "\\blackhourglass": "\u29D7",
        "\\lvzigzag": "\u29D8",
        "\\rvzigzag": "\u29D9",
        "\\Lvzigzag": "\u29DA",
        "\\Rvzigzag": "\u29DB",
        "\\tieinfty": "\u29DD",
        "\\nvinfty": "\u29DE",
        "\\multimapboth": "\u29DF",
        "\\laplac": "\u29E0",
        "\\lrtriangleeq": "\u29E1",
        "\\shuffle": "\u29E2",
        "\\eparsl": "\u29E3",
        "\\smeparsl": "\u29E4",
        "\\eqvparsl": "\u29E5",
        "\\gleichstark": "\u29E6",
        "\\thermod": "\u29E7",
        "\\downtriangleleftblack": "\u29E8",
        "\\downtrianglerightblack": "\u29E9",
        "\\blackdiamonddownarrow": "\u29EA",
        "\\blacklozenge": "\u29EB",
        "\\circledownarrow": "\u29EC",
        "\\blackcircledownarrow": "\u29ED",
        "\\errbarsquare": "\u29EE",
        "\\errbarblacksquare": "\u29EF",
        "\\errbardiamond": "\u29F0",
        "\\errbarblackdiamond": "\u29F1",
        "\\errbarcircle": "\u29F2",
        "\\errbarblackcircle": "\u29F3",
        "\\RuleDelayed": "\u29F4",
        "\\dsol": "\u29F6",
        "\\rsolbar": "\u29F7",
        "\\xsol": "\u29F8",
        "\\zhide": "\u29F9",
        "\\doubleplus": "\u29FA",
        "\\tripleplus": "\u29FB",
        "\\lcurvyangle": "\u29FC",
        "\\rcurvyangle": "\u29FD",
        "\\tplus": "\u29FE",
        "\\tminus": "\u29FF",
        "\\bigodot": "\u2A00",
        "\\bigoplus": "\u2A01",
        "\\bigotimes": "\u2A02",
        "\\bigcupdot": "\u2A03",
        "\\Elxuplus": "\u2A04",
        "\\ElzThr": "\u2A05",
        "\\Elxsqcup": "\u2A06",
        "\\ElzInf": "\u2A07",
        "\\ElzSup": "\u2A08",
        "\\varprod": "\u2A09",
        "\\modtwosum": "\u2A0A",
        "\\sumint": "\u2A0B",
        "\\iiiint": "\u2A0C",
        "\\ElzCint": "\u2A0D",
        "\\intBar": "\u2A0E",
        "\\clockoint": "\u2A0F",
        "\\awint": "\u2A11",
        "\\rppolint": "\u2A12",
        "\\scpolint": "\u2A13",
        "\\npolint": "\u2A14",
        "\\pointint": "\u2A15",
        "\\sqrint": "\u2A16",
        "\\intlarhk": "\u2A17",
        "\\intx": "\u2A18",
        "\\intcap": "\u2A19",
        "\\intcup": "\u2A1A",
        "\\upint": "\u2A1B",
        "\\lowint": "\u2A1C",
        "\\Join": "\u2A1D",
        "\\bigtriangleleft": "\u2A1E",
        "\\zcmp": "\u2A1F",
        "\\zpipe": "\u2A20",
        "\\zproject": "\u2A21",
        "\\ringplus": "\u2A22",
        "\\plushat": "\u2A23",
        "\\simplus": "\u2A24",
        "\\plussim": "\u2A26",
        "\\plussubtwo": "\u2A27",
        "\\plustrif": "\u2A28",
        "\\commaminus": "\u2A29",
        "\\minusfdots": "\u2A2B",
        "\\minusrdots": "\u2A2C",
        "\\ElzTimes": "\u2A2F",
        "\\dottimes": "\u2A30",
        "\\timesbar": "\u2A31",
        "\\btimes": "\u2A32",
        "\\smashtimes": "\u2A33",
        "\\otimeshat": "\u2A36",
        "\\Otimes": "\u2A37",
        "\\odiv": "\u2A38",
        "\\triangleplus": "\u2A39",
        "\\triangleminus": "\u2A3A",
        "\\triangletimes": "\u2A3B",
        "\\intprodr": "\u2A3D",
        "\\fcmp": "\u2A3E",
        "\\amalg": "\u2A3F",
        "\\capdot": "\u2A40",
        "\\uminus": "\u2A41",
        "\\barcup": "\u2A42",
        "\\barcap": "\u2A43",
        "\\capwedge": "\u2A44",
        "\\cupvee": "\u2A45",
        "\\cupovercap": "\u2A46",
        "\\capovercup": "\u2A47",
        "\\cupbarcap": "\u2A48",
        "\\capbarcup": "\u2A49",
        "\\twocups": "\u2A4A",
        "\\twocaps": "\u2A4B",
        "\\closedvarcup": "\u2A4C",
        "\\closedvarcap": "\u2A4D",
        "\\Sqcap": "\u2A4E",
        "\\Sqcup": "\u2A4F",
        "\\closedvarcupsmashprod": "\u2A50",
        "\\wedgeodot": "\u2A51",
        "\\veeodot": "\u2A52",
        "\\ElzAnd": "\u2A53",
        "\\ElzOr": "\u2A54",
        "\\ElOr": "\u2A56",
        "\\bigslopedvee": "\u2A57",
        "\\bigslopedwedge": "\u2A58",
        "\\veeonwedge": "\u2A59",
        "\\wedgemidvert": "\u2A5A",
        "\\veemidvert": "\u2A5B",
        "\\midbarwedge": "\u2A5C",
        "\\midbarvee": "\u2A5D",
        "\\Elzminhat": "\u2A5F",
        "\\wedgedoublebar": "\u2A60",
        "\\varveebar": "\u2A61",
        "\\doublebarvee": "\u2A62",
        "\\dsub": "\u2A64",
        "\\rsub": "\u2A65",
        "\\eqdot": "\u2A66",
        "\\dotequiv": "\u2A67",
        "\\equivVert": "\u2A68",
        "\\equivVvert": "\u2A69",
        "\\dotsim": "\u2A6A",
        "\\simrdots": "\u2A6B",
        "\\simminussim": "\u2A6C",
        "\\congdot": "\u2A6D",
        "\\stackrel{*}{=}": "\u2A6E",
        "\\hatapprox": "\u2A6F",
        "\\approxeqq": "\u2A70",
        "\\eqqplus": "\u2A71",
        "\\pluseqq": "\u2A72",
        "\\eqqsim": "\u2A73",
        "\\Coloneqq": "\u2A74",
        "\\Equal": "\u2A75",
        "\\Same": "\u2A76",
        "\\ddotseq": "\u2A77",
        "\\equivDD": "\u2A78",
        "\\ltcir": "\u2A79",
        "\\gtcir": "\u2A7A",
        "\\ltquest": "\u2A7B",
        "\\gtquest": "\u2A7C",
        "\\leqslant": "\u2A7D",
        "\\nleqslant": "\u2A7D\u0338",
        "\\geqslant": "\u2A7E",
        "\\ngeqslant": "\u2A7E\u0338",
        "\\lesdot": "\u2A7F",
        "\\gesdot": "\u2A80",
        "\\lesdoto": "\u2A81",
        "\\gesdoto": "\u2A82",
        "\\lesdotor": "\u2A83",
        "\\gesdotol": "\u2A84",
        "\\lessapprox": "\u2A85",
        "\\gtrapprox": "\u2A86",
        "\\lneq": "\u2A87",
        "\\gneq": "\u2A88",
        "\\lnapprox": "\u2A89",
        "\\gnapprox": "\u2A8A",
        "\\lesseqqgtr": "\u2A8B",
        "\\gtreqqless": "\u2A8C",
        "\\lsime": "\u2A8D",
        "\\gsime": "\u2A8E",
        "\\lsimg": "\u2A8F",
        "\\gsiml": "\u2A90",
        "\\lgE": "\u2A91",
        "\\glE": "\u2A92",
        "\\lesges": "\u2A93",
        "\\gesles": "\u2A94",
        "\\eqslantless": "\u2A95",
        "\\eqslantgtr": "\u2A96",
        "\\elsdot": "\u2A97",
        "\\egsdot": "\u2A98",
        "\\eqqless": "\u2A99",
        "\\eqqgtr": "\u2A9A",
        "\\eqqslantless": "\u2A9B",
        "\\eqqslantgtr": "\u2A9C",
        "\\Pisymbol{ppi020}{117}": "\u2A9D",
        "\\Pisymbol{ppi020}{105}": "\u2A9E",
        "\\simlE": "\u2A9F",
        "\\simgE": "\u2AA0",
        "\\NestedLessLess": "\u2AA1",
        "\\NotNestedLessLess": "\u2AA1\u0338",
        "\\NestedGreaterGreater": "\u2AA2",
        "\\NotNestedGreaterGreater": "\u2AA2\u0338",
        "\\partialmeetcontraction": "\u2AA3",
        "\\glj": "\u2AA4",
        "\\gla": "\u2AA5",
        "\\leftslice": "\u2AA6",
        "\\rightslice": "\u2AA7",
        "\\lescc": "\u2AA8",
        "\\gescc": "\u2AA9",
        "\\smt": "\u2AAA",
        "\\lat": "\u2AAB",
        "\\smte": "\u2AAC",
        "\\late": "\u2AAD",
        "\\bumpeqq": "\u2AAE",
        "\\preceq": "\u2AAF",
        "\\not\\preceq": "\u2AAF\u0338",
        "\\succeq": "\u2AB0",
        "\\not\\succeq": "\u2AB0\u0338",
        "\\precneq": "\u2AB1",
        "\\succneq": "\u2AB2",
        "\\preceqq": "\u2AB3",
        "\\succeqq": "\u2AB4",
        "\\precneqq": "\u2AB5",
        "\\succneqq": "\u2AB6",
        "\\precapprox": "\u2AB7",
        "\\succapprox": "\u2AB8",
        "\\precnapprox": "\u2AB9",
        "\\succnapprox": "\u2ABA",
        "\\llcurly": "\u2ABB",
        "\\ggcurly": "\u2ABC",
        "\\subsetdot": "\u2ABD",
        "\\supsetdot": "\u2ABE",
        "\\subsetplus": "\u2ABF",
        "\\supsetplus": "\u2AC0",
        "\\submult": "\u2AC1",
        "\\supmult": "\u2AC2",
        "\\subedot": "\u2AC3",
        "\\supedot": "\u2AC4",
        "\\subseteqq": "\u2AC5",
        "\\nsubseteqq": "\u2AC5\u0338",
        "\\supseteqq": "\u2AC6",
        "\\nsupseteqq": "\u2AC6\u0338",
        "\\subsim": "\u2AC7",
        "\\supsim": "\u2AC8",
        "\\subsetapprox": "\u2AC9",
        "\\supsetapprox": "\u2ACA",
        "\\subsetneqq": "\u2ACB",
        "\\supsetneqq": "\u2ACC",
        "\\lsqhook": "\u2ACD",
        "\\rsqhook": "\u2ACE",
        "\\csub": "\u2ACF",
        "\\csup": "\u2AD0",
        "\\csube": "\u2AD1",
        "\\csupe": "\u2AD2",
        "\\subsup": "\u2AD3",
        "\\supsub": "\u2AD4",
        "\\subsub": "\u2AD5",
        "\\supsup": "\u2AD6",
        "\\suphsub": "\u2AD7",
        "\\supdsub": "\u2AD8",
        "\\forkv": "\u2AD9",
        "\\topfork": "\u2ADA",
        "\\mlcp": "\u2ADB",
        "\\forks": "\u2ADC",
        "\\forksnot": "\u2ADD",
        "\\shortlefttack": "\u2ADE",
        "\\shortdowntack": "\u2ADF",
        "\\shortuptack": "\u2AE0",
        "\\perps": "\u2AE1",
        "\\vDdash": "\u2AE2",
        "\\dashV": "\u2AE3",
        "\\Dashv": "\u2AE4",
        "\\DashV": "\u2AE5",
        "\\varVdash": "\u2AE6",
        "\\Barv": "\u2AE7",
        "\\vBar": "\u2AE8",
        "\\vBarv": "\u2AE9",
        "\\Top": "\u2AEA",
        "\\Not": "\u2AEC",
        "\\bNot": "\u2AED",
        "\\revnmid": "\u2AEE",
        "\\cirmid": "\u2AEF",
        "\\midcir": "\u2AF0",
        "\\topcir": "\u2AF1",
        "\\nhpar": "\u2AF2",
        "\\parsim": "\u2AF3",
        "\\interleave": "\u2AF4",
        "\\nhVvert": "\u2AF5",
        "\\Elztdcol": "\u2AF6",
        "\\lllnest": "\u2AF7",
        "\\gggnest": "\u2AF8",
        "\\leqqslant": "\u2AF9",
        "\\geqqslant": "\u2AFA",
        "\\trslash": "\u2AFB",
        "\\biginterleave": "\u2AFC",
        "{{/}\\!\\!{/}}": "\u2AFD",
        "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}": "\u2AFD\u20E5",
        "\\talloblong": "\u2AFE",
        "\\bigtalloblong": "\u2AFF",
        "\\squaretopblack": "\u2B12",
        "\\squarebotblack": "\u2B13",
        "\\squareurblack": "\u2B14",
        "\\squarellblack": "\u2B15",
        "\\diamondleftblack": "\u2B16",
        "\\diamondrightblack": "\u2B17",
        "\\diamondtopblack": "\u2B18",
        "\\diamondbotblack": "\u2B19",
        "\\dottedsquare": "\u2B1A",
        "\\blacksquare": "\u2B1B",
        "\\vysmblksquare": "\u2B1D",
        "\\vysmwhtsquare": "\u2B1E",
        "\\pentagonblack": "\u2B1F",
        "\\pentagon": "\u2B20",
        "\\varhexagon": "\u2B21",
        "\\varhexagonblack": "\u2B22",
        "\\hexagonblack": "\u2B23",
        "\\lgblkcircle": "\u2B24",
        "\\mdblkdiamond": "\u2B25",
        "\\mdwhtdiamond": "\u2B26",
        "\\mdblklozenge": "\u2B27",
        "\\mdwhtlozenge": "\u2B28",
        "\\smblkdiamond": "\u2B29",
        "\\smblklozenge": "\u2B2A",
        "\\smwhtlozenge": "\u2B2B",
        "\\blkhorzoval": "\u2B2C",
        "\\whthorzoval": "\u2B2D",
        "\\blkvertoval": "\u2B2E",
        "\\whtvertoval": "\u2B2F",
        "\\circleonleftarrow": "\u2B30",
        "\\leftthreearrows": "\u2B31",
        "\\leftarrowonoplus": "\u2B32",
        "\\longleftsquigarrow": "\u2B33",
        "\\nvtwoheadleftarrow": "\u2B34",
        "\\nVtwoheadleftarrow": "\u2B35",
        "\\twoheadmapsfrom": "\u2B36",
        "\\twoheadleftdbkarrow": "\u2B37",
        "\\leftdotarrow": "\u2B38",
        "\\nvleftarrowtail": "\u2B39",
        "\\nVleftarrowtail": "\u2B3A",
        "\\twoheadleftarrowtail": "\u2B3B",
        "\\nvtwoheadleftarrowtail": "\u2B3C",
        "\\nVtwoheadleftarrowtail": "\u2B3D",
        "\\leftarrowx": "\u2B3E",
        "\\leftcurvedarrow": "\u2B3F",
        "\\equalleftarrow": "\u2B40",
        "\\bsimilarleftarrow": "\u2B41",
        "\\leftarrowbackapprox": "\u2B42",
        "\\rightarrowgtr": "\u2B43",
        "\\rightarrowsupset": "\u2B44",
        "\\LLeftarrow": "\u2B45",
        "\\RRightarrow": "\u2B46",
        "\\bsimilarrightarrow": "\u2B47",
        "\\rightarrowbackapprox": "\u2B48",
        "\\similarleftarrow": "\u2B49",
        "\\leftarrowapprox": "\u2B4A",
        "\\leftarrowbsimilar": "\u2B4B",
        "\\rightarrowbsimilar": "\u2B4C",
        "\\medwhitestar": "\u2B50",
        "\\medblackstar": "\u2B51",
        "\\smwhitestar": "\u2B52",
        "\\rightpentagonblack": "\u2B53",
        "\\rightpentagon": "\u2B54",
        "\\postalmark": "\u3012",
        "\\lbrbrak": "\u3014",
        "\\rbrbrak": "\u3015",
        "\\openbracketleft": "\u301A",
        "\\openbracketright": "\u301B",
        "\\hzigzag": "\u3030",
        "\\dbend": "\uFFFD",
        "\\mathbf{A}": "\u{1D400}",
        "\\mathbf{B}": "\u{1D401}",
        "\\mathbf{C}": "\u{1D402}",
        "\\mathbf{D}": "\u{1D403}",
        "\\mathbf{E}": "\u{1D404}",
        "\\mathbf{F}": "\u{1D405}",
        "\\mathbf{G}": "\u{1D406}",
        "\\mathbf{H}": "\u{1D407}",
        "\\mathbf{I}": "\u{1D408}",
        "\\mathbf{J}": "\u{1D409}",
        "\\mathbf{K}": "\u{1D40A}",
        "\\mathbf{L}": "\u{1D40B}",
        "\\mathbf{M}": "\u{1D40C}",
        "\\mathbf{N}": "\u{1D40D}",
        "\\mathbf{O}": "\u{1D40E}",
        "\\mathbf{P}": "\u{1D40F}",
        "\\mathbf{Q}": "\u{1D410}",
        "\\mathbf{R}": "\u{1D411}",
        "\\mathbf{S}": "\u{1D412}",
        "\\mathbf{T}": "\u{1D413}",
        "\\mathbf{U}": "\u{1D414}",
        "\\mathbf{V}": "\u{1D415}",
        "\\mathbf{W}": "\u{1D416}",
        "\\mathbf{X}": "\u{1D417}",
        "\\mathbf{Y}": "\u{1D418}",
        "\\mathbf{Z}": "\u{1D419}",
        "\\mathbf{a}": "\u{1D41A}",
        "\\mathbf{b}": "\u{1D41B}",
        "\\mathbf{c}": "\u{1D41C}",
        "\\mathbf{d}": "\u{1D41D}",
        "\\mathbf{e}": "\u{1D41E}",
        "\\mathbf{f}": "\u{1D41F}",
        "\\mathbf{g}": "\u{1D420}",
        "\\mathbf{h}": "\u{1D421}",
        "\\mathbf{i}": "\u{1D422}",
        "\\mathbf{j}": "\u{1D423}",
        "\\mathbf{k}": "\u{1D424}",
        "\\mathbf{l}": "\u{1D425}",
        "\\mathbf{m}": "\u{1D426}",
        "\\mathbf{n}": "\u{1D427}",
        "\\mathbf{o}": "\u{1D428}",
        "\\mathbf{p}": "\u{1D429}",
        "\\mathbf{q}": "\u{1D42A}",
        "\\mathbf{r}": "\u{1D42B}",
        "\\mathbf{s}": "\u{1D42C}",
        "\\mathbf{t}": "\u{1D42D}",
        "\\mathbf{u}": "\u{1D42E}",
        "\\mathbf{v}": "\u{1D42F}",
        "\\mathbf{w}": "\u{1D430}",
        "\\mathbf{x}": "\u{1D431}",
        "\\mathbf{y}": "\u{1D432}",
        "\\mathbf{z}": "\u{1D433}",
        "\\mathsl{A}": "\u{1D434}",
        "\\mathsl{B}": "\u{1D435}",
        "\\mathsl{C}": "\u{1D436}",
        "\\mathsl{D}": "\u{1D437}",
        "\\mathsl{E}": "\u{1D438}",
        "\\mathsl{F}": "\u{1D439}",
        "\\mathsl{G}": "\u{1D43A}",
        "\\mathsl{H}": "\u{1D43B}",
        "\\mathsl{I}": "\u{1D43C}",
        "\\mathsl{J}": "\u{1D43D}",
        "\\mathsl{K}": "\u{1D43E}",
        "\\mathsl{L}": "\u{1D43F}",
        "\\mathsl{M}": "\u{1D440}",
        "\\mathsl{N}": "\u{1D441}",
        "\\mathsl{O}": "\u{1D442}",
        "\\mathsl{P}": "\u{1D443}",
        "\\mathsl{Q}": "\u{1D444}",
        "\\mathsl{R}": "\u{1D445}",
        "\\mathsl{S}": "\u{1D446}",
        "\\mathsl{T}": "\u{1D447}",
        "\\mathsl{U}": "\u{1D448}",
        "\\mathsl{V}": "\u{1D449}",
        "\\mathsl{W}": "\u{1D44A}",
        "\\mathsl{X}": "\u{1D44B}",
        "\\mathsl{Y}": "\u{1D44C}",
        "\\mathsl{Z}": "\u{1D44D}",
        "\\mathsl{a}": "\u{1D44E}",
        "\\mathsl{b}": "\u{1D44F}",
        "\\mathsl{c}": "\u{1D450}",
        "\\mathsl{d}": "\u{1D451}",
        "\\mathsl{e}": "\u{1D452}",
        "\\mathsl{f}": "\u{1D453}",
        "\\mathsl{g}": "\u{1D454}",
        "\\mathsl{i}": "\u{1D456}",
        "\\mathsl{j}": "\u{1D457}",
        "\\mathsl{k}": "\u{1D458}",
        "\\mathsl{l}": "\u{1D459}",
        "\\mathsl{m}": "\u{1D45A}",
        "\\mathsl{n}": "\u{1D45B}",
        "\\mathsl{o}": "\u{1D45C}",
        "\\mathsl{p}": "\u{1D45D}",
        "\\mathsl{q}": "\u{1D45E}",
        "\\mathsl{r}": "\u{1D45F}",
        "\\mathsl{s}": "\u{1D460}",
        "\\mathsl{t}": "\u{1D461}",
        "\\mathsl{u}": "\u{1D462}",
        "\\mathsl{v}": "\u{1D463}",
        "\\mathsl{w}": "\u{1D464}",
        "\\mathsl{x}": "\u{1D465}",
        "\\mathsl{y}": "\u{1D466}",
        "\\mathsl{z}": "\u{1D467}",
        "\\mathbit{A}": "\u{1D468}",
        "\\mathbit{B}": "\u{1D469}",
        "\\mathbit{C}": "\u{1D46A}",
        "\\mathbit{D}": "\u{1D46B}",
        "\\mathbit{E}": "\u{1D46C}",
        "\\mathbit{F}": "\u{1D46D}",
        "\\mathbit{G}": "\u{1D46E}",
        "\\mathbit{H}": "\u{1D46F}",
        "\\mathbit{I}": "\u{1D470}",
        "\\mathbit{J}": "\u{1D471}",
        "\\mathbit{K}": "\u{1D472}",
        "\\mathbit{L}": "\u{1D473}",
        "\\mathbit{M}": "\u{1D474}",
        "\\mathbit{N}": "\u{1D475}",
        "\\mathbit{O}": "\u{1D476}",
        "\\mathbit{P}": "\u{1D477}",
        "\\mathbit{Q}": "\u{1D478}",
        "\\mathbit{R}": "\u{1D479}",
        "\\mathbit{S}": "\u{1D47A}",
        "\\mathbit{T}": "\u{1D47B}",
        "\\mathbit{U}": "\u{1D47C}",
        "\\mathbit{V}": "\u{1D47D}",
        "\\mathbit{W}": "\u{1D47E}",
        "\\mathbit{X}": "\u{1D47F}",
        "\\mathbit{Y}": "\u{1D480}",
        "\\mathbit{Z}": "\u{1D481}",
        "\\mathbit{a}": "\u{1D482}",
        "\\mathbit{b}": "\u{1D483}",
        "\\mathbit{c}": "\u{1D484}",
        "\\mathbit{d}": "\u{1D485}",
        "\\mathbit{e}": "\u{1D486}",
        "\\mathbit{f}": "\u{1D487}",
        "\\mathbit{g}": "\u{1D488}",
        "\\mathbit{h}": "\u{1D489}",
        "\\mathbit{i}": "\u{1D48A}",
        "\\mathbit{j}": "\u{1D48B}",
        "\\mathbit{k}": "\u{1D48C}",
        "\\mathbit{l}": "\u{1D48D}",
        "\\mathbit{m}": "\u{1D48E}",
        "\\mathbit{n}": "\u{1D48F}",
        "\\mathbit{o}": "\u{1D490}",
        "\\mathbit{p}": "\u{1D491}",
        "\\mathbit{q}": "\u{1D492}",
        "\\mathbit{r}": "\u{1D493}",
        "\\mathbit{s}": "\u{1D494}",
        "\\mathbit{t}": "\u{1D495}",
        "\\mathbit{u}": "\u{1D496}",
        "\\mathbit{v}": "\u{1D497}",
        "\\mathbit{w}": "\u{1D498}",
        "\\mathbit{x}": "\u{1D499}",
        "\\mathbit{y}": "\u{1D49A}",
        "\\mathbit{z}": "\u{1D49B}",
        "\\mathscr{A}": "\u{1D49C}",
        "\\mathscr{C}": "\u{1D49E}",
        "\\mathscr{D}": "\u{1D49F}",
        "\\mathscr{G}": "\u{1D4A2}",
        "\\mathscr{J}": "\u{1D4A5}",
        "\\mathscr{K}": "\u{1D4A6}",
        "\\mathscr{N}": "\u{1D4A9}",
        "\\mathscr{O}": "\u{1D4AA}",
        "\\mathscr{P}": "\u{1D4AB}",
        "\\mathscr{Q}": "\u{1D4AC}",
        "\\mathscr{S}": "\u{1D4AE}",
        "\\mathscr{T}": "\u{1D4AF}",
        "\\mathscr{U}": "\u{1D4B0}",
        "\\mathscr{V}": "\u{1D4B1}",
        "\\mathscr{W}": "\u{1D4B2}",
        "\\mathscr{X}": "\u{1D4B3}",
        "\\mathscr{Y}": "\u{1D4B4}",
        "\\mathscr{Z}": "\u{1D4B5}",
        "\\mathscr{a}": "\u{1D4B6}",
        "\\mathscr{b}": "\u{1D4B7}",
        "\\mathscr{c}": "\u{1D4B8}",
        "\\mathscr{d}": "\u{1D4B9}",
        "\\mathscr{f}": "\u{1D4BB}",
        "\\mathscr{h}": "\u{1D4BD}",
        "\\mathscr{i}": "\u{1D4BE}",
        "\\mathscr{j}": "\u{1D4BF}",
        "\\mathscr{k}": "\u{1D4C0}",
        "\\mathscr{m}": "\u{1D4C2}",
        "\\mathscr{n}": "\u{1D4C3}",
        "\\mathscr{p}": "\u{1D4C5}",
        "\\mathscr{q}": "\u{1D4C6}",
        "\\mathscr{r}": "\u{1D4C7}",
        "\\mathscr{s}": "\u{1D4C8}",
        "\\mathscr{t}": "\u{1D4C9}",
        "\\mathscr{u}": "\u{1D4CA}",
        "\\mathscr{v}": "\u{1D4CB}",
        "\\mathscr{w}": "\u{1D4CC}",
        "\\mathscr{x}": "\u{1D4CD}",
        "\\mathscr{y}": "\u{1D4CE}",
        "\\mathscr{z}": "\u{1D4CF}",
        "\\mathmit{A}": "\u{1D4D0}",
        "\\mathmit{B}": "\u{1D4D1}",
        "\\mathmit{C}": "\u{1D4D2}",
        "\\mathmit{D}": "\u{1D4D3}",
        "\\mathmit{E}": "\u{1D4D4}",
        "\\mathmit{F}": "\u{1D4D5}",
        "\\mathmit{G}": "\u{1D4D6}",
        "\\mathmit{H}": "\u{1D4D7}",
        "\\mathmit{I}": "\u{1D4D8}",
        "\\mathmit{J}": "\u{1D4D9}",
        "\\mathmit{K}": "\u{1D4DA}",
        "\\mathmit{L}": "\u{1D4DB}",
        "\\mathmit{M}": "\u{1D4DC}",
        "\\mathmit{N}": "\u{1D4DD}",
        "\\mathmit{O}": "\u{1D4DE}",
        "\\mathmit{P}": "\u{1D4DF}",
        "\\mathmit{Q}": "\u{1D4E0}",
        "\\mathmit{R}": "\u{1D4E1}",
        "\\mathmit{S}": "\u{1D4E2}",
        "\\mathmit{T}": "\u{1D4E3}",
        "\\mathmit{U}": "\u{1D4E4}",
        "\\mathmit{V}": "\u{1D4E5}",
        "\\mathmit{W}": "\u{1D4E6}",
        "\\mathmit{X}": "\u{1D4E7}",
        "\\mathmit{Y}": "\u{1D4E8}",
        "\\mathmit{Z}": "\u{1D4E9}",
        "\\mathmit{a}": "\u{1D4EA}",
        "\\mathmit{b}": "\u{1D4EB}",
        "\\mathmit{c}": "\u{1D4EC}",
        "\\mathmit{d}": "\u{1D4ED}",
        "\\mathmit{e}": "\u{1D4EE}",
        "\\mathmit{f}": "\u{1D4EF}",
        "\\mathmit{g}": "\u{1D4F0}",
        "\\mathmit{h}": "\u{1D4F1}",
        "\\mathmit{i}": "\u{1D4F2}",
        "\\mathmit{j}": "\u{1D4F3}",
        "\\mathmit{k}": "\u{1D4F4}",
        "\\mathmit{l}": "\u{1D4F5}",
        "\\mathmit{m}": "\u{1D4F6}",
        "\\mathmit{n}": "\u{1D4F7}",
        "\\mathmit{o}": "\u{1D4F8}",
        "\\mathmit{p}": "\u{1D4F9}",
        "\\mathmit{q}": "\u{1D4FA}",
        "\\mathmit{r}": "\u{1D4FB}",
        "\\mathmit{s}": "\u{1D4FC}",
        "\\mathmit{t}": "\u{1D4FD}",
        "\\mathmit{u}": "\u{1D4FE}",
        "\\mathmit{v}": "\u{1D4FF}",
        "\\mathmit{w}": "\u{1D500}",
        "\\mathmit{x}": "\u{1D501}",
        "\\mathmit{y}": "\u{1D502}",
        "\\mathmit{z}": "\u{1D503}",
        "\\mathfrak{A}": "\u{1D504}",
        "\\mathfrak{B}": "\u{1D505}",
        "\\mathfrak{D}": "\u{1D507}",
        "\\mathfrak{E}": "\u{1D508}",
        "\\mathfrak{F}": "\u{1D509}",
        "\\mathfrak{G}": "\u{1D50A}",
        "\\mathfrak{J}": "\u{1D50D}",
        "\\mathfrak{K}": "\u{1D50E}",
        "\\mathfrak{L}": "\u{1D50F}",
        "\\mathfrak{M}": "\u{1D510}",
        "\\mathfrak{N}": "\u{1D511}",
        "\\mathfrak{O}": "\u{1D512}",
        "\\mathfrak{P}": "\u{1D513}",
        "\\mathfrak{Q}": "\u{1D514}",
        "\\mathfrak{S}": "\u{1D516}",
        "\\mathfrak{T}": "\u{1D517}",
        "\\mathfrak{U}": "\u{1D518}",
        "\\mathfrak{V}": "\u{1D519}",
        "\\mathfrak{W}": "\u{1D51A}",
        "\\mathfrak{X}": "\u{1D51B}",
        "\\mathfrak{Y}": "\u{1D51C}",
        "\\mathfrak{a}": "\u{1D51E}",
        "\\mathfrak{b}": "\u{1D51F}",
        "\\mathfrak{c}": "\u{1D520}",
        "\\mathfrak{d}": "\u{1D521}",
        "\\mathfrak{e}": "\u{1D522}",
        "\\mathfrak{f}": "\u{1D523}",
        "\\mathfrak{g}": "\u{1D524}",
        "\\mathfrak{h}": "\u{1D525}",
        "\\mathfrak{i}": "\u{1D526}",
        "\\mathfrak{j}": "\u{1D527}",
        "\\mathfrak{k}": "\u{1D528}",
        "\\mathfrak{l}": "\u{1D529}",
        "\\mathfrak{m}": "\u{1D52A}",
        "\\mathfrak{n}": "\u{1D52B}",
        "\\mathfrak{o}": "\u{1D52C}",
        "\\mathfrak{p}": "\u{1D52D}",
        "\\mathfrak{q}": "\u{1D52E}",
        "\\mathfrak{r}": "\u{1D52F}",
        "\\mathfrak{s}": "\u{1D530}",
        "\\mathfrak{t}": "\u{1D531}",
        "\\mathfrak{u}": "\u{1D532}",
        "\\mathfrak{v}": "\u{1D533}",
        "\\mathfrak{w}": "\u{1D534}",
        "\\mathfrak{x}": "\u{1D535}",
        "\\mathfrak{y}": "\u{1D536}",
        "\\mathfrak{z}": "\u{1D537}",
        "\\mathbb{A}": "\u{1D538}",
        "\\mathbb{B}": "\u{1D539}",
        "\\mathbb{D}": "\u{1D53B}",
        "\\mathbb{E}": "\u{1D53C}",
        "\\mathbb{F}": "\u{1D53D}",
        "\\mathbb{G}": "\u{1D53E}",
        "\\mathbb{I}": "\u{1D540}",
        "\\mathbb{J}": "\u{1D541}",
        "\\mathbb{K}": "\u{1D542}",
        "\\mathbb{L}": "\u{1D543}",
        "\\mathbb{M}": "\u{1D544}",
        "\\mathbb{O}": "\u{1D546}",
        "\\mathbb{S}": "\u{1D54A}",
        "\\mathbb{T}": "\u{1D54B}",
        "\\mathbb{U}": "\u{1D54C}",
        "\\mathbb{V}": "\u{1D54D}",
        "\\mathbb{W}": "\u{1D54E}",
        "\\mathbb{X}": "\u{1D54F}",
        "\\mathbb{Y}": "\u{1D550}",
        "\\mathbb{a}": "\u{1D552}",
        "\\mathbb{b}": "\u{1D553}",
        "\\mathbb{c}": "\u{1D554}",
        "\\mathbb{d}": "\u{1D555}",
        "\\mathbb{e}": "\u{1D556}",
        "\\mathbb{f}": "\u{1D557}",
        "\\mathbb{g}": "\u{1D558}",
        "\\mathbb{h}": "\u{1D559}",
        "\\mathbb{i}": "\u{1D55A}",
        "\\mathbb{j}": "\u{1D55B}",
        "\\mathbb{k}": "\u{1D55C}",
        "\\mathbb{l}": "\u{1D55D}",
        "\\mathbb{m}": "\u{1D55E}",
        "\\mathbb{n}": "\u{1D55F}",
        "\\mathbb{o}": "\u{1D560}",
        "\\mathbb{p}": "\u{1D561}",
        "\\mathbb{q}": "\u{1D562}",
        "\\mathbb{r}": "\u{1D563}",
        "\\mathbb{s}": "\u{1D564}",
        "\\mathbb{t}": "\u{1D565}",
        "\\mathbb{u}": "\u{1D566}",
        "\\mathbb{v}": "\u{1D567}",
        "\\mathbb{w}": "\u{1D568}",
        "\\mathbb{x}": "\u{1D569}",
        "\\mathbb{y}": "\u{1D56A}",
        "\\mathbb{z}": "\u{1D56B}",
        "\\mathslbb{A}": "\u{1D56C}",
        "\\mathslbb{B}": "\u{1D56D}",
        "\\mathslbb{C}": "\u{1D56E}",
        "\\mathslbb{D}": "\u{1D56F}",
        "\\mathslbb{E}": "\u{1D570}",
        "\\mathslbb{F}": "\u{1D571}",
        "\\mathslbb{G}": "\u{1D572}",
        "\\mathslbb{H}": "\u{1D573}",
        "\\mathslbb{I}": "\u{1D574}",
        "\\mathslbb{J}": "\u{1D575}",
        "\\mathslbb{K}": "\u{1D576}",
        "\\mathslbb{L}": "\u{1D577}",
        "\\mathslbb{M}": "\u{1D578}",
        "\\mathslbb{N}": "\u{1D579}",
        "\\mathslbb{O}": "\u{1D57A}",
        "\\mathslbb{P}": "\u{1D57B}",
        "\\mathslbb{Q}": "\u{1D57C}",
        "\\mathslbb{R}": "\u{1D57D}",
        "\\mathslbb{S}": "\u{1D57E}",
        "\\mathslbb{T}": "\u{1D57F}",
        "\\mathslbb{U}": "\u{1D580}",
        "\\mathslbb{V}": "\u{1D581}",
        "\\mathslbb{W}": "\u{1D582}",
        "\\mathslbb{X}": "\u{1D583}",
        "\\mathslbb{Y}": "\u{1D584}",
        "\\mathslbb{Z}": "\u{1D585}",
        "\\mathslbb{a}": "\u{1D586}",
        "\\mathslbb{b}": "\u{1D587}",
        "\\mathslbb{c}": "\u{1D588}",
        "\\mathslbb{d}": "\u{1D589}",
        "\\mathslbb{e}": "\u{1D58A}",
        "\\mathslbb{f}": "\u{1D58B}",
        "\\mathslbb{g}": "\u{1D58C}",
        "\\mathslbb{h}": "\u{1D58D}",
        "\\mathslbb{i}": "\u{1D58E}",
        "\\mathslbb{j}": "\u{1D58F}",
        "\\mathslbb{k}": "\u{1D590}",
        "\\mathslbb{l}": "\u{1D591}",
        "\\mathslbb{m}": "\u{1D592}",
        "\\mathslbb{n}": "\u{1D593}",
        "\\mathslbb{o}": "\u{1D594}",
        "\\mathslbb{p}": "\u{1D595}",
        "\\mathslbb{q}": "\u{1D596}",
        "\\mathslbb{r}": "\u{1D597}",
        "\\mathslbb{s}": "\u{1D598}",
        "\\mathslbb{t}": "\u{1D599}",
        "\\mathslbb{u}": "\u{1D59A}",
        "\\mathslbb{v}": "\u{1D59B}",
        "\\mathslbb{w}": "\u{1D59C}",
        "\\mathslbb{x}": "\u{1D59D}",
        "\\mathslbb{y}": "\u{1D59E}",
        "\\mathslbb{z}": "\u{1D59F}",
        "\\mathsf{A}": "\u{1D5A0}",
        "\\mathsf{B}": "\u{1D5A1}",
        "\\mathsf{C}": "\u{1D5A2}",
        "\\mathsf{D}": "\u{1D5A3}",
        "\\mathsf{E}": "\u{1D5A4}",
        "\\mathsf{F}": "\u{1D5A5}",
        "\\mathsf{G}": "\u{1D5A6}",
        "\\mathsf{H}": "\u{1D5A7}",
        "\\mathsf{I}": "\u{1D5A8}",
        "\\mathsf{J}": "\u{1D5A9}",
        "\\mathsf{K}": "\u{1D5AA}",
        "\\mathsf{L}": "\u{1D5AB}",
        "\\mathsf{M}": "\u{1D5AC}",
        "\\mathsf{N}": "\u{1D5AD}",
        "\\mathsf{O}": "\u{1D5AE}",
        "\\mathsf{P}": "\u{1D5AF}",
        "\\mathsf{Q}": "\u{1D5B0}",
        "\\mathsf{R}": "\u{1D5B1}",
        "\\mathsf{S}": "\u{1D5B2}",
        "\\mathsf{T}": "\u{1D5B3}",
        "\\mathsf{U}": "\u{1D5B4}",
        "\\mathsf{V}": "\u{1D5B5}",
        "\\mathsf{W}": "\u{1D5B6}",
        "\\mathsf{X}": "\u{1D5B7}",
        "\\mathsf{Y}": "\u{1D5B8}",
        "\\mathsf{Z}": "\u{1D5B9}",
        "\\mathsf{a}": "\u{1D5BA}",
        "\\mathsf{b}": "\u{1D5BB}",
        "\\mathsf{c}": "\u{1D5BC}",
        "\\mathsf{d}": "\u{1D5BD}",
        "\\mathsf{e}": "\u{1D5BE}",
        "\\mathsf{f}": "\u{1D5BF}",
        "\\mathsf{g}": "\u{1D5C0}",
        "\\mathsf{h}": "\u{1D5C1}",
        "\\mathsf{i}": "\u{1D5C2}",
        "\\mathsf{j}": "\u{1D5C3}",
        "\\mathsf{k}": "\u{1D5C4}",
        "\\mathsf{l}": "\u{1D5C5}",
        "\\mathsf{m}": "\u{1D5C6}",
        "\\mathsf{n}": "\u{1D5C7}",
        "\\mathsf{o}": "\u{1D5C8}",
        "\\mathsf{p}": "\u{1D5C9}",
        "\\mathsf{q}": "\u{1D5CA}",
        "\\mathsf{r}": "\u{1D5CB}",
        "\\mathsf{s}": "\u{1D5CC}",
        "\\mathsf{t}": "\u{1D5CD}",
        "\\mathsf{u}": "\u{1D5CE}",
        "\\mathsf{v}": "\u{1D5CF}",
        "\\mathsf{w}": "\u{1D5D0}",
        "\\mathsf{x}": "\u{1D5D1}",
        "\\mathsf{y}": "\u{1D5D2}",
        "\\mathsf{z}": "\u{1D5D3}",
        "\\mathsfbf{A}": "\u{1D5D4}",
        "\\mathsfbf{B}": "\u{1D5D5}",
        "\\mathsfbf{C}": "\u{1D5D6}",
        "\\mathsfbf{D}": "\u{1D5D7}",
        "\\mathsfbf{E}": "\u{1D5D8}",
        "\\mathsfbf{F}": "\u{1D5D9}",
        "\\mathsfbf{G}": "\u{1D5DA}",
        "\\mathsfbf{H}": "\u{1D5DB}",
        "\\mathsfbf{I}": "\u{1D5DC}",
        "\\mathsfbf{J}": "\u{1D5DD}",
        "\\mathsfbf{K}": "\u{1D5DE}",
        "\\mathsfbf{L}": "\u{1D5DF}",
        "\\mathsfbf{M}": "\u{1D5E0}",
        "\\mathsfbf{N}": "\u{1D5E1}",
        "\\mathsfbf{O}": "\u{1D5E2}",
        "\\mathsfbf{P}": "\u{1D5E3}",
        "\\mathsfbf{Q}": "\u{1D5E4}",
        "\\mathsfbf{R}": "\u{1D5E5}",
        "\\mathsfbf{S}": "\u{1D5E6}",
        "\\mathsfbf{T}": "\u{1D5E7}",
        "\\mathsfbf{U}": "\u{1D5E8}",
        "\\mathsfbf{V}": "\u{1D5E9}",
        "\\mathsfbf{W}": "\u{1D5EA}",
        "\\mathsfbf{X}": "\u{1D5EB}",
        "\\mathsfbf{Y}": "\u{1D5EC}",
        "\\mathsfbf{Z}": "\u{1D5ED}",
        "\\mathsfbf{a}": "\u{1D5EE}",
        "\\mathsfbf{b}": "\u{1D5EF}",
        "\\mathsfbf{c}": "\u{1D5F0}",
        "\\mathsfbf{d}": "\u{1D5F1}",
        "\\mathsfbf{e}": "\u{1D5F2}",
        "\\mathsfbf{f}": "\u{1D5F3}",
        "\\mathsfbf{g}": "\u{1D5F4}",
        "\\mathsfbf{h}": "\u{1D5F5}",
        "\\mathsfbf{i}": "\u{1D5F6}",
        "\\mathsfbf{j}": "\u{1D5F7}",
        "\\mathsfbf{k}": "\u{1D5F8}",
        "\\mathsfbf{l}": "\u{1D5F9}",
        "\\mathsfbf{m}": "\u{1D5FA}",
        "\\mathsfbf{n}": "\u{1D5FB}",
        "\\mathsfbf{o}": "\u{1D5FC}",
        "\\mathsfbf{p}": "\u{1D5FD}",
        "\\mathsfbf{q}": "\u{1D5FE}",
        "\\mathsfbf{r}": "\u{1D5FF}",
        "\\mathsfbf{s}": "\u{1D600}",
        "\\mathsfbf{t}": "\u{1D601}",
        "\\mathsfbf{u}": "\u{1D602}",
        "\\mathsfbf{v}": "\u{1D603}",
        "\\mathsfbf{w}": "\u{1D604}",
        "\\mathsfbf{x}": "\u{1D605}",
        "\\mathsfbf{y}": "\u{1D606}",
        "\\mathsfbf{z}": "\u{1D607}",
        "\\mathsfsl{A}": "\u{1D608}",
        "\\mathsfsl{B}": "\u{1D609}",
        "\\mathsfsl{C}": "\u{1D60A}",
        "\\mathsfsl{D}": "\u{1D60B}",
        "\\mathsfsl{E}": "\u{1D60C}",
        "\\mathsfsl{F}": "\u{1D60D}",
        "\\mathsfsl{G}": "\u{1D60E}",
        "\\mathsfsl{H}": "\u{1D60F}",
        "\\mathsfsl{I}": "\u{1D610}",
        "\\mathsfsl{J}": "\u{1D611}",
        "\\mathsfsl{K}": "\u{1D612}",
        "\\mathsfsl{L}": "\u{1D613}",
        "\\mathsfsl{M}": "\u{1D614}",
        "\\mathsfsl{N}": "\u{1D615}",
        "\\mathsfsl{O}": "\u{1D616}",
        "\\mathsfsl{P}": "\u{1D617}",
        "\\mathsfsl{Q}": "\u{1D618}",
        "\\mathsfsl{R}": "\u{1D619}",
        "\\mathsfsl{S}": "\u{1D61A}",
        "\\mathsfsl{T}": "\u{1D61B}",
        "\\mathsfsl{U}": "\u{1D61C}",
        "\\mathsfsl{V}": "\u{1D61D}",
        "\\mathsfsl{W}": "\u{1D61E}",
        "\\mathsfsl{X}": "\u{1D61F}",
        "\\mathsfsl{Y}": "\u{1D620}",
        "\\mathsfsl{Z}": "\u{1D621}",
        "\\mathsfsl{a}": "\u{1D622}",
        "\\mathsfsl{b}": "\u{1D623}",
        "\\mathsfsl{c}": "\u{1D624}",
        "\\mathsfsl{d}": "\u{1D625}",
        "\\mathsfsl{e}": "\u{1D626}",
        "\\mathsfsl{f}": "\u{1D627}",
        "\\mathsfsl{g}": "\u{1D628}",
        "\\mathsfsl{h}": "\u{1D629}",
        "\\mathsfsl{i}": "\u{1D62A}",
        "\\mathsfsl{j}": "\u{1D62B}",
        "\\mathsfsl{k}": "\u{1D62C}",
        "\\mathsfsl{l}": "\u{1D62D}",
        "\\mathsfsl{m}": "\u{1D62E}",
        "\\mathsfsl{n}": "\u{1D62F}",
        "\\mathsfsl{o}": "\u{1D630}",
        "\\mathsfsl{p}": "\u{1D631}",
        "\\mathsfsl{q}": "\u{1D632}",
        "\\mathsfsl{r}": "\u{1D633}",
        "\\mathsfsl{s}": "\u{1D634}",
        "\\mathsfsl{t}": "\u{1D635}",
        "\\mathsfsl{u}": "\u{1D636}",
        "\\mathsfsl{v}": "\u{1D637}",
        "\\mathsfsl{w}": "\u{1D638}",
        "\\mathsfsl{x}": "\u{1D639}",
        "\\mathsfsl{y}": "\u{1D63A}",
        "\\mathsfsl{z}": "\u{1D63B}",
        "\\mathsfbfsl{A}": "\u{1D63C}",
        "\\mathsfbfsl{B}": "\u{1D63D}",
        "\\mathsfbfsl{C}": "\u{1D63E}",
        "\\mathsfbfsl{D}": "\u{1D63F}",
        "\\mathsfbfsl{E}": "\u{1D640}",
        "\\mathsfbfsl{F}": "\u{1D641}",
        "\\mathsfbfsl{G}": "\u{1D642}",
        "\\mathsfbfsl{H}": "\u{1D643}",
        "\\mathsfbfsl{I}": "\u{1D644}",
        "\\mathsfbfsl{J}": "\u{1D645}",
        "\\mathsfbfsl{K}": "\u{1D646}",
        "\\mathsfbfsl{L}": "\u{1D647}",
        "\\mathsfbfsl{M}": "\u{1D648}",
        "\\mathsfbfsl{N}": "\u{1D649}",
        "\\mathsfbfsl{O}": "\u{1D64A}",
        "\\mathsfbfsl{P}": "\u{1D64B}",
        "\\mathsfbfsl{Q}": "\u{1D64C}",
        "\\mathsfbfsl{R}": "\u{1D64D}",
        "\\mathsfbfsl{S}": "\u{1D64E}",
        "\\mathsfbfsl{T}": "\u{1D64F}",
        "\\mathsfbfsl{U}": "\u{1D650}",
        "\\mathsfbfsl{V}": "\u{1D651}",
        "\\mathsfbfsl{W}": "\u{1D652}",
        "\\mathsfbfsl{X}": "\u{1D653}",
        "\\mathsfbfsl{Y}": "\u{1D654}",
        "\\mathsfbfsl{Z}": "\u{1D655}",
        "\\mathsfbfsl{a}": "\u{1D656}",
        "\\mathsfbfsl{b}": "\u{1D657}",
        "\\mathsfbfsl{c}": "\u{1D658}",
        "\\mathsfbfsl{d}": "\u{1D659}",
        "\\mathsfbfsl{e}": "\u{1D65A}",
        "\\mathsfbfsl{f}": "\u{1D65B}",
        "\\mathsfbfsl{g}": "\u{1D65C}",
        "\\mathsfbfsl{h}": "\u{1D65D}",
        "\\mathsfbfsl{i}": "\u{1D65E}",
        "\\mathsfbfsl{j}": "\u{1D65F}",
        "\\mathsfbfsl{k}": "\u{1D660}",
        "\\mathsfbfsl{l}": "\u{1D661}",
        "\\mathsfbfsl{m}": "\u{1D662}",
        "\\mathsfbfsl{n}": "\u{1D663}",
        "\\mathsfbfsl{o}": "\u{1D664}",
        "\\mathsfbfsl{p}": "\u{1D665}",
        "\\mathsfbfsl{q}": "\u{1D666}",
        "\\mathsfbfsl{r}": "\u{1D667}",
        "\\mathsfbfsl{s}": "\u{1D668}",
        "\\mathsfbfsl{t}": "\u{1D669}",
        "\\mathsfbfsl{u}": "\u{1D66A}",
        "\\mathsfbfsl{v}": "\u{1D66B}",
        "\\mathsfbfsl{w}": "\u{1D66C}",
        "\\mathsfbfsl{x}": "\u{1D66D}",
        "\\mathsfbfsl{y}": "\u{1D66E}",
        "\\mathsfbfsl{z}": "\u{1D66F}",
        "\\mathtt{A}": "\u{1D670}",
        "\\mathtt{B}": "\u{1D671}",
        "\\mathtt{C}": "\u{1D672}",
        "\\mathtt{D}": "\u{1D673}",
        "\\mathtt{E}": "\u{1D674}",
        "\\mathtt{F}": "\u{1D675}",
        "\\mathtt{G}": "\u{1D676}",
        "\\mathtt{H}": "\u{1D677}",
        "\\mathtt{I}": "\u{1D678}",
        "\\mathtt{J}": "\u{1D679}",
        "\\mathtt{K}": "\u{1D67A}",
        "\\mathtt{L}": "\u{1D67B}",
        "\\mathtt{M}": "\u{1D67C}",
        "\\mathtt{N}": "\u{1D67D}",
        "\\mathtt{O}": "\u{1D67E}",
        "\\mathtt{P}": "\u{1D67F}",
        "\\mathtt{Q}": "\u{1D680}",
        "\\mathtt{R}": "\u{1D681}",
        "\\mathtt{S}": "\u{1D682}",
        "\\mathtt{T}": "\u{1D683}",
        "\\mathtt{U}": "\u{1D684}",
        "\\mathtt{V}": "\u{1D685}",
        "\\mathtt{W}": "\u{1D686}",
        "\\mathtt{X}": "\u{1D687}",
        "\\mathtt{Y}": "\u{1D688}",
        "\\mathtt{Z}": "\u{1D689}",
        "\\mathtt{a}": "\u{1D68A}",
        "\\mathtt{b}": "\u{1D68B}",
        "\\mathtt{c}": "\u{1D68C}",
        "\\mathtt{d}": "\u{1D68D}",
        "\\mathtt{e}": "\u{1D68E}",
        "\\mathtt{f}": "\u{1D68F}",
        "\\mathtt{g}": "\u{1D690}",
        "\\mathtt{h}": "\u{1D691}",
        "\\mathtt{i}": "\u{1D692}",
        "\\mathtt{j}": "\u{1D693}",
        "\\mathtt{k}": "\u{1D694}",
        "\\mathtt{l}": "\u{1D695}",
        "\\mathtt{m}": "\u{1D696}",
        "\\mathtt{n}": "\u{1D697}",
        "\\mathtt{o}": "\u{1D698}",
        "\\mathtt{p}": "\u{1D699}",
        "\\mathtt{q}": "\u{1D69A}",
        "\\mathtt{r}": "\u{1D69B}",
        "\\mathtt{s}": "\u{1D69C}",
        "\\mathtt{t}": "\u{1D69D}",
        "\\mathtt{u}": "\u{1D69E}",
        "\\mathtt{v}": "\u{1D69F}",
        "\\mathtt{w}": "\u{1D6A0}",
        "\\mathtt{x}": "\u{1D6A1}",
        "\\mathtt{y}": "\u{1D6A2}",
        "\\mathtt{z}": "\u{1D6A3}",
        "\\mathbf{\\Gamma}": "\u{1D6AA}",
        "\\mathbf{\\Delta}": "\u{1D6AB}",
        "\\mathbf{\\Theta}": "\u{1D6AF}",
        "\\mathbf{\\Lambda}": "\u{1D6B2}",
        "\\mathbf{\\Xi}": "\u{1D6B5}",
        "\\mathbf{\\Pi}": "\u{1D6B7}",
        "\\mathbf{\\vartheta}": "\u{1D6B9}",
        "\\mathbf{\\Sigma}": "\u{1D6BA}",
        "\\mathbf{\\Upsilon}": "\u{1D6BC}",
        "\\mathbf{\\Phi}": "\u{1D6BD}",
        "\\mathbf{\\Psi}": "\u{1D6BF}",
        "\\mathbf{\\Omega}": "\u{1D6C0}",
        "\\mathbf{\\nabla}": "\u{1D6C1}",
        "\\mathbf{\\alpha}": "\u{1D6C2}",
        "\\mathbf{\\beta}": "\u{1D6C3}",
        "\\mathbf{\\gamma}": "\u{1D6C4}",
        "\\mathbf{\\delta}": "\u{1D6C5}",
        "\\mathbf{\\epsilon}": "\u{1D6C6}",
        "\\mathbf{\\zeta}": "\u{1D6C7}",
        "\\mathbf{\\eta}": "\u{1D6C8}",
        "\\mathbf{\\theta}": "\u{1D6C9}",
        "\\mathbf{\\lambda}": "\u{1D6CC}",
        "\\mathbf{\\xi}": "\u{1D6CF}",
        "\\mathbf{\\pi}": "\u{1D6D1}",
        "\\mathbf{\\varsigma}": "\u{1D6D3}",
        "\\mathbf{\\sigma}": "\u{1D6D4}",
        "\\mathbf{\\upsilon}": "\u{1D6D6}",
        "\\mathbf{\\phi}": "\u{1D6D7}",
        "\\mathbf{\\psi}": "\u{1D6D9}",
        "\\mathbf{\\omega}": "\u{1D6DA}",
        "\\mathbf{\\varkappa}": "\u{1D6DE}",
        "\\mathbf{\\varrho}": "\u{1D6E0}",
        "\\mathbf{\\varpi}": "\u{1D6E1}",
        "\\mathsl{\\Gamma}": "\u{1D6E4}",
        "\\mathsl{\\Delta}": "\u{1D6E5}",
        "\\mathsl{\\Lambda}": "\u{1D6EC}",
        "\\mathsl{\\Xi}": "\u{1D6EF}",
        "\\mathsl{\\Pi}": "\u{1D6F1}",
        "\\mathsl{\\Theta}": "\u{1D6F3}",
        "\\mathsl{\\Sigma}": "\u{1D6F4}",
        "\\mathsl{\\Upsilon}": "\u{1D6F6}",
        "\\mathsl{\\Phi}": "\u{1D6F7}",
        "\\mathsl{\\Psi}": "\u{1D6F9}",
        "\\mathsl{\\Omega}": "\u{1D6FA}",
        "\\mathsl{\\nabla}": "\u{1D6FB}",
        "\\mathsl{\\gamma}": "\u{1D6FE}",
        "\\mathsl{\\delta}": "\u{1D6FF}",
        "\\mathsl{\\theta}": "\u{1D703}",
        "\\mathsl{\\lambda}": "\u{1D706}",
        "\\mu": "\u{1D707}",
        "\\mathsl{\\xi}": "\u{1D709}",
        "\\mathsl{\\pi}": "\u{1D70B}",
        "\\mathsl{\\varsigma}": "\u{1D70D}",
        "\\mathsl{\\sigma}": "\u{1D70E}",
        "\\mathsl{\\upsilon}": "\u{1D710}",
        "\\mathsl{\\varphi}": "\u{1D711}",
        "\\mathsl{\\psi}": "\u{1D713}",
        "\\mathsl{\\omega}": "\u{1D714}",
        "\\mathsl{\\vartheta}": "\u{1D717}",
        "\\mathsl{\\varkappa}": "\u{1D718}",
        "\\mathsl{\\phi}": "\u{1D719}",
        "\\mathsl{\\varrho}": "\u{1D71A}",
        "\\mathsl{\\varpi}": "\u{1D71B}",
        "\\mathbit{\\Gamma}": "\u{1D71E}",
        "\\mathbit{\\Delta}": "\u{1D71F}",
        "\\mathbit{\\Theta}": "\u{1D723}",
        "\\mathbit{\\Lambda}": "\u{1D726}",
        "\\mathbit{\\Xi}": "\u{1D729}",
        "\\mathbit{\\Pi}": "\u{1D72B}",
        "\\mathbit{\\Sigma}": "\u{1D72E}",
        "\\mathbit{\\Upsilon}": "\u{1D730}",
        "\\mathbit{\\Phi}": "\u{1D731}",
        "\\mathbit{\\Psi}": "\u{1D733}",
        "\\mathbit{\\Omega}": "\u{1D734}",
        "\\mathbit{\\nabla}": "\u{1D735}",
        "\\mathbit{\\alpha}": "\u{1D736}",
        "\\mathbit{\\beta}": "\u{1D737}",
        "\\mathbit{\\gamma}": "\u{1D738}",
        "\\mathbit{\\delta}": "\u{1D739}",
        "\\mathbit{\\epsilon}": "\u{1D73A}",
        "\\mathbit{\\zeta}": "\u{1D73B}",
        "\\mathbit{\\eta}": "\u{1D73C}",
        "\\mathbit{\\theta}": "\u{1D73D}",
        "\\mathbit{\\imath}": "\u{1D73E}",
        "\\mathbit{\\kappa}": "\u{1D73F}",
        "\\mathbit{\\lambda}": "\u{1D740}",
        "\\mathbit{\\xi}": "\u{1D743}",
        "\\mathbit{\\pi}": "\u{1D745}",
        "\\mathbit{\\rho}": "\u{1D746}",
        "\\mathbit{\\varsigma}": "\u{1D747}",
        "\\mathbit{\\sigma}": "\u{1D748}",
        "\\mathbit{\\tau}": "\u{1D749}",
        "\\mathbit{\\upsilon}": "\u{1D74A}",
        "\\mathbit{\\varphi}": "\u{1D74B}",
        "\\mathbit{\\chi}": "\u{1D74C}",
        "\\mathbit{\\psi}": "\u{1D74D}",
        "\\mathbit{\\omega}": "\u{1D74E}",
        "\\mathbit{\\vartheta}": "\u{1D751}",
        "\\mathbit{\\varkappa}": "\u{1D752}",
        "\\mathbit{\\phi}": "\u{1D753}",
        "\\mathbit{\\varrho}": "\u{1D754}",
        "\\mathbit{\\varpi}": "\u{1D755}",
        "\\mathsfbf{\\Gamma}": "\u{1D758}",
        "\\mathsfbf{\\Delta}": "\u{1D759}",
        "\\mathsfbf{\\Theta}": "\u{1D75D}",
        "\\mathsfbf{\\Lambda}": "\u{1D760}",
        "\\mathsfbf{\\Xi}": "\u{1D763}",
        "\\mathsfbf{\\Pi}": "\u{1D765}",
        "\\mathsfbf{\\Sigma}": "\u{1D768}",
        "\\mathsfbf{\\Upsilon}": "\u{1D76A}",
        "\\mathsfbf{\\Phi}": "\u{1D76B}",
        "\\mathsfbf{\\Psi}": "\u{1D76D}",
        "\\mathsfbf{\\Omega}": "\u{1D76E}",
        "\\mathsfbf{\\nabla}": "\u{1D76F}",
        "\\mathsfbf{\\alpha}": "\u{1D770}",
        "\\mathsfbf{\\beta}": "\u{1D771}",
        "\\mathsfbf{\\gamma}": "\u{1D772}",
        "\\mathsfbf{\\delta}": "\u{1D773}",
        "\\mathsfbf{\\varepsilon}": "\u{1D774}",
        "\\mathsfbf{\\zeta}": "\u{1D775}",
        "\\mathsfbf{\\eta}": "\u{1D776}",
        "\\mathsfbf{\\theta}": "\u{1D777}",
        "\\mathsfbf{\\imath}": "\u{1D778}",
        "\\mathsfbf{\\kappa}": "\u{1D779}",
        "\\mathsfbf{\\lambda}": "\u{1D77A}",
        "\\mathsfbf{\\xi}": "\u{1D77D}",
        "\\mathsfbf{\\pi}": "\u{1D77F}",
        "\\mathsfbf{\\rho}": "\u{1D780}",
        "\\mathsfbf{\\varsigma}": "\u{1D781}",
        "\\mathsfbf{\\sigma}": "\u{1D782}",
        "\\mathsfbf{\\tau}": "\u{1D783}",
        "\\mathsfbf{\\upsilon}": "\u{1D784}",
        "\\mathsfbf{\\varphi}": "\u{1D785}",
        "\\mathsfbf{\\chi}": "\u{1D786}",
        "\\mathsfbf{\\psi}": "\u{1D787}",
        "\\mathsfbf{\\omega}": "\u{1D788}",
        "\\mathsfbf{\\vartheta}": "\u{1D78B}",
        "\\mathsfbf{\\varkappa}": "\u{1D78C}",
        "\\mathsfbf{\\phi}": "\u{1D78D}",
        "\\mathsfbf{\\varrho}": "\u{1D78E}",
        "\\mathsfbf{\\varpi}": "\u{1D78F}",
        "\\mathsfbfsl{\\Gamma}": "\u{1D792}",
        "\\mathsfbfsl{\\Delta}": "\u{1D793}",
        "\\mathsfbfsl{\\Theta}": "\u{1D797}",
        "\\mathsfbfsl{\\Lambda}": "\u{1D79A}",
        "\\mathsfbfsl{\\Xi}": "\u{1D79D}",
        "\\mathsfbfsl{\\Pi}": "\u{1D79F}",
        "\\mathsfbfsl{\\Sigma}": "\u{1D7A2}",
        "\\mathsfbfsl{\\Upsilon}": "\u{1D7A4}",
        "\\mathsfbfsl{\\Phi}": "\u{1D7A5}",
        "\\mathsfbfsl{\\Psi}": "\u{1D7A7}",
        "\\mathsfbfsl{\\Omega}": "\u{1D7A8}",
        "\\mathsfbfsl{\\nabla}": "\u{1D7A9}",
        "\\mathsfbfsl{\\alpha}": "\u{1D7AA}",
        "\\mathsfbfsl{\\beta}": "\u{1D7AB}",
        "\\mathsfbfsl{\\gamma}": "\u{1D7AC}",
        "\\mathsfbfsl{\\delta}": "\u{1D7AD}",
        "\\mathsfbfsl{\\varepsilon}": "\u{1D7AE}",
        "\\mathsfbfsl{\\zeta}": "\u{1D7AF}",
        "\\mathsfbfsl{\\eta}": "\u{1D7B0}",
        "\\mathsfbfsl{\\theta}": "\u{1D7B1}",
        "\\mathsfbfsl{\\imath}": "\u{1D7B2}",
        "\\mathsfbfsl{\\kappa}": "\u{1D7B3}",
        "\\mathsfbfsl{\\lambda}": "\u{1D7B4}",
        "\\mathsfbfsl{\\xi}": "\u{1D7B7}",
        "\\mathsfbfsl{\\pi}": "\u{1D7B9}",
        "\\mathsfbfsl{\\rho}": "\u{1D7BA}",
        "\\mathsfbfsl{\\varsigma}": "\u{1D7BB}",
        "\\mathsfbfsl{\\sigma}": "\u{1D7BC}",
        "\\mathsfbfsl{\\tau}": "\u{1D7BD}",
        "\\mathsfbfsl{\\upsilon}": "\u{1D7BE}",
        "\\mathsfbfsl{\\varphi}": "\u{1D7BF}",
        "\\mathsfbfsl{\\chi}": "\u{1D7C0}",
        "\\mathsfbfsl{\\psi}": "\u{1D7C1}",
        "\\mathsfbfsl{\\omega}": "\u{1D7C2}",
        "\\mathsfbfsl{\\vartheta}": "\u{1D7C5}",
        "\\mathsfbfsl{\\varkappa}": "\u{1D7C6}",
        "\\mathsfbfsl{\\phi}": "\u{1D7C7}",
        "\\mathsfbfsl{\\varrho}": "\u{1D7C8}",
        "\\mathsfbfsl{\\varpi}": "\u{1D7C9}",
        "\\mbfDigamma": "\u{1D7CA}",
        "\\mbfdigamma": "\u{1D7CB}",
        "\\mathbf{0}": "\u{1D7CE}",
        "\\mathbf{1}": "\u{1D7CF}",
        "\\mathbf{2}": "\u{1D7D0}",
        "\\mathbf{3}": "\u{1D7D1}",
        "\\mathbf{4}": "\u{1D7D2}",
        "\\mathbf{5}": "\u{1D7D3}",
        "\\mathbf{6}": "\u{1D7D4}",
        "\\mathbf{7}": "\u{1D7D5}",
        "\\mathbf{8}": "\u{1D7D6}",
        "\\mathbf{9}": "\u{1D7D7}",
        "\\mathbb{0}": "\u{1D7D8}",
        "\\mathbb{1}": "\u{1D7D9}",
        "\\mathbb{2}": "\u{1D7DA}",
        "\\mathbb{3}": "\u{1D7DB}",
        "\\mathbb{4}": "\u{1D7DC}",
        "\\mathbb{5}": "\u{1D7DD}",
        "\\mathbb{6}": "\u{1D7DE}",
        "\\mathbb{7}": "\u{1D7DF}",
        "\\mathbb{8}": "\u{1D7E0}",
        "\\mathbb{9}": "\u{1D7E1}",
        "\\mathsf{0}": "\u{1D7E2}",
        "\\mathsf{1}": "\u{1D7E3}",
        "\\mathsf{2}": "\u{1D7E4}",
        "\\mathsf{3}": "\u{1D7E5}",
        "\\mathsf{4}": "\u{1D7E6}",
        "\\mathsf{5}": "\u{1D7E7}",
        "\\mathsf{6}": "\u{1D7E8}",
        "\\mathsf{7}": "\u{1D7E9}",
        "\\mathsf{8}": "\u{1D7EA}",
        "\\mathsf{9}": "\u{1D7EB}",
        "\\mathsfbf{0}": "\u{1D7EC}",
        "\\mathsfbf{1}": "\u{1D7ED}",
        "\\mathsfbf{2}": "\u{1D7EE}",
        "\\mathsfbf{3}": "\u{1D7EF}",
        "\\mathsfbf{4}": "\u{1D7F0}",
        "\\mathsfbf{5}": "\u{1D7F1}",
        "\\mathsfbf{6}": "\u{1D7F2}",
        "\\mathsfbf{7}": "\u{1D7F3}",
        "\\mathsfbf{8}": "\u{1D7F4}",
        "\\mathsfbf{9}": "\u{1D7F5}",
        "\\mathtt{0}": "\u{1D7F6}",
        "\\mathtt{1}": "\u{1D7F7}",
        "\\mathtt{2}": "\u{1D7F8}",
        "\\mathtt{3}": "\u{1D7F9}",
        "\\mathtt{4}": "\u{1D7FA}",
        "\\mathtt{5}": "\u{1D7FB}",
        "\\mathtt{6}": "\u{1D7FC}",
        "\\mathtt{7}": "\u{1D7FD}",
        "\\mathtt{8}": "\u{1D7FE}",
        "\\mathtt{9}": "\u{1D7FF}"
      };
    }
  });

  // node_modules/unicode2latex/tables/diacritics.json
  var require_diacritics = __commonJS({
    "node_modules/unicode2latex/tables/diacritics.json"(exports, module) {
      module.exports = {
        commands: [
          "acute",
          "bar",
          "breve",
          "c",
          "d",
          "ddot",
          "dot",
          "grave",
          "hat",
          "k",
          "mathring",
          "overline",
          "r",
          "textacutemacron",
          "textacutewedge",
          "textadvancing",
          "textbrevemacron",
          "textcircumdot",
          "textcorner",
          "textdotacute",
          "textdotbreve",
          "textdoublegrave",
          "textdoublevbaraccent",
          "textgravedot",
          "textgravemacron",
          "textinvsubbridge",
          "textlowering",
          "textovercross",
          "textraising",
          "textretracting",
          "textringmacron",
          "textseagull",
          "textsubarch",
          "textsubbar",
          "textsubbridge",
          "textsubgrave",
          "textsublhalfring",
          "textsubplus",
          "textsubrhalfring",
          "textsubring",
          "textsubsquare",
          "textsubtilde",
          "textsubumlaut",
          "textsubwedge",
          "textsuperimposetilde",
          "textsyllabic",
          "texttildedot",
          "textvbaraccent",
          "tilde",
          "u",
          "underbar",
          "v"
        ],
        tolatex: {
          "\u0300": {
            command: "`",
            mode: "text"
          },
          "\u0300\u0304": {
            command: "textgravemacron",
            mode: "text"
          },
          "\u0300\u0307": {
            command: "textgravedot",
            mode: "text"
          },
          "\u0301": {
            command: "'",
            mode: "text"
          },
          "\u0301\u0304": {
            command: "textacutemacron",
            mode: "text"
          },
          "\u0301\u0307": {
            command: "textdotacute",
            mode: "text"
          },
          "\u0301\u030C": {
            command: "textacutewedge",
            mode: "text"
          },
          "\u0302": {
            command: "^",
            mode: "text"
          },
          "\u0302\u0307": {
            command: "textcircumdot",
            mode: "text"
          },
          "\u0303": {
            command: "~",
            mode: "text"
          },
          "\u0303\u0307": {
            command: "texttildedot",
            mode: "text"
          },
          "\u0304": {
            command: "=",
            mode: "text"
          },
          "\u0304\u0300": {
            command: "textgravemacron",
            mode: "text"
          },
          "\u0304\u0301": {
            command: "textacutemacron",
            mode: "text"
          },
          "\u0304\u0306": {
            command: "textbrevemacron",
            mode: "text"
          },
          "\u0304\u030A": {
            command: "textringmacron",
            mode: "text"
          },
          "\u0305": {
            command: "overline",
            mode: "math"
          },
          "\u0306": {
            command: "u",
            mode: "text"
          },
          "\u0306\u0304": {
            command: "textbrevemacron",
            mode: "text"
          },
          "\u0306\u0307": {
            command: "textdotbreve",
            mode: "text"
          },
          "\u0307": {
            command: ".",
            mode: "text"
          },
          "\u0307\u0300": {
            command: "textgravedot",
            mode: "text"
          },
          "\u0307\u0301": {
            command: "textdotacute",
            mode: "text"
          },
          "\u0307\u0302": {
            command: "textcircumdot",
            mode: "text"
          },
          "\u0307\u0303": {
            command: "texttildedot",
            mode: "text"
          },
          "\u0307\u0306": {
            command: "textdotbreve",
            mode: "text"
          },
          "\u0308": {
            command: '"',
            mode: "text"
          },
          "\u030A": {
            command: "r",
            mode: "text"
          },
          "\u030A\u0304": {
            command: "textringmacron",
            mode: "text"
          },
          "\u030B": {
            command: "H",
            mode: "text"
          },
          "\u030C": {
            command: "v",
            mode: "text"
          },
          "\u030C\u0301": {
            command: "textacutewedge",
            mode: "text"
          },
          "\u030D": {
            command: "textvbaraccent",
            mode: "text"
          },
          "\u030E": {
            command: "textdoublevbaraccent",
            mode: "text"
          },
          "\u030F": {
            command: "textdoublegrave",
            mode: "text"
          },
          "\u0310": {
            command: "textdotbreve",
            mode: "text"
          },
          "\u0316": {
            command: "textsubgrave",
            mode: "text"
          },
          "\u0318": {
            command: "textadvancing",
            mode: "text"
          },
          "\u0319": {
            command: "textretracting",
            mode: "text"
          },
          "\u031A": {
            command: "textcorner",
            mode: "text"
          },
          "\u031C": {
            command: "textsublhalfring",
            mode: "text"
          },
          "\u031D": {
            command: "textraising",
            mode: "text"
          },
          "\u031E": {
            command: "textlowering",
            mode: "text"
          },
          "\u031F": {
            command: "textsubplus",
            mode: "text"
          },
          "\u0323": {
            command: "d",
            mode: "text"
          },
          "\u0324": {
            command: "textsubumlaut",
            mode: "text"
          },
          "\u0325": {
            command: "textsubring",
            mode: "text"
          },
          "\u0327": {
            command: "c",
            mode: "text"
          },
          "\u0328": {
            command: "k",
            mode: "text"
          },
          "\u0329": {
            command: "textsyllabic",
            mode: "text"
          },
          "\u032A": {
            command: "textsubbridge",
            mode: "text"
          },
          "\u032C": {
            command: "textsubwedge",
            mode: "text"
          },
          "\u032F": {
            command: "textsubarch",
            mode: "text"
          },
          "\u0330": {
            command: "textsubtilde",
            mode: "text"
          },
          "\u0331": {
            command: "textsubbar",
            mode: "text"
          },
          "\u0334": {
            command: "textsuperimposetilde",
            mode: "text"
          },
          "\u0339": {
            command: "textsubrhalfring",
            mode: "text"
          },
          "\u033A": {
            command: "textinvsubbridge",
            mode: "text"
          },
          "\u033B": {
            command: "textsubsquare",
            mode: "text"
          },
          "\u033C": {
            command: "textseagull",
            mode: "text"
          },
          "\u033D": {
            command: "textovercross",
            mode: "text"
          }
        },
        tounicode: {
          '"': "\u0308",
          "'": "\u0301",
          ".": "\u0307",
          "=": "\u0304",
          H: "\u030B",
          "^": "\u0302",
          "`": "\u0300",
          acute: "\u0301",
          bar: "\u0304",
          breve: "\u0306",
          c: "\u0327",
          d: "\u0323",
          ddot: "\u0308",
          dot: "\u0307",
          grave: "\u0300",
          hat: "\u0302",
          k: "\u0328",
          mathring: "\u030A",
          overline: "\u0305",
          r: "\u030A",
          textacutemacron: "\u0304\u0301",
          textacutewedge: "\u030C\u0301",
          textadvancing: "\u0318",
          textbrevemacron: "\u0304\u0306",
          textcircumdot: "\u0307\u0302",
          textcorner: "\u031A",
          textdotacute: "\u0301\u0307",
          textdotbreve: "\u0310",
          textdoublegrave: "\u030F",
          textdoublevbaraccent: "\u030E",
          textgravedot: "\u0307\u0300",
          textgravemacron: "\u0300\u0304",
          textinvsubbridge: "\u033A",
          textlowering: "\u031E",
          textovercross: "\u033D",
          textraising: "\u031D",
          textretracting: "\u0319",
          textringmacron: "\u0304\u030A",
          textseagull: "\u033C",
          textsubarch: "\u032F",
          textsubbar: "\u0331",
          textsubbridge: "\u032A",
          textsubgrave: "\u0316",
          textsublhalfring: "\u031C",
          textsubplus: "\u031F",
          textsubrhalfring: "\u0339",
          textsubring: "\u0325",
          textsubsquare: "\u033B",
          textsubtilde: "\u0330",
          textsubumlaut: "\u0324",
          textsubwedge: "\u032C",
          textsuperimposetilde: "\u0334",
          textsyllabic: "\u0329",
          texttildedot: "\u0307\u0303",
          textvbaraccent: "\u030D",
          tilde: "\u0303",
          u: "\u0306",
          underbar: "\u0331",
          v: "\u030C",
          "~": "\u0303"
        }
      };
    }
  });

  // node_modules/unicode2latex/index.js
  var require_unicode2latex = __commonJS({
    "node_modules/unicode2latex/index.js"(exports, module) {
      init_globals();
      module.exports = {
        ascii: require_ascii(),
        ascii_bibtex_creator: require_ascii_bibtex_creator(),
        unicode: require_unicode(),
        latex: require_latex(),
        diacritics: require_diacritics()
      };
    }
  });

  // node_modules/@retorquere/bibtex-parser/crossref.json
  var require_crossref = __commonJS({
    "node_modules/@retorquere/bibtex-parser/crossref.json"(exports, module) {
      module.exports = [
        {
          source: ["mvbook", "book"],
          target: ["inbook", "bookinbook", "suppbook"],
          fields: [
            { source: "author", target: "author" },
            { source: "author", target: "bookauthor" }
          ]
        },
        {
          source: ["mvbook"],
          target: ["book", "inbook", "bookinbook", "suppbook"],
          fields: [
            { source: "title", target: "maintitle" },
            { source: "subtitle", target: "mainsubtitle" },
            { source: "titleaddon", target: "maintitleaddon" }
          ]
        },
        {
          source: ["mvcollection", "mvreference"],
          target: [
            "collection",
            "reference",
            "incollection",
            "inreference",
            "suppcollection"
          ],
          fields: [
            { source: "title", target: "maintitle" },
            { source: "subtitle", target: "mainsubtitle" },
            { source: "titleaddon", target: "maintitleaddon" }
          ]
        },
        {
          source: ["mvproceedings"],
          target: ["proceedings", "inproceedings"],
          fields: [
            { source: "title", target: "maintitle" },
            { source: "subtitle", target: "mainsubtitle" },
            { source: "titleaddon", target: "maintitleaddon" }
          ]
        },
        {
          source: ["book"],
          target: ["inbook", "bookinbook", "suppbook"],
          fields: [
            { source: "title", target: "booktitle" },
            { source: "subtitle", target: "booksubtitle" },
            { source: "titleaddon", target: "booktitleaddon" }
          ]
        },
        {
          source: ["collection", "reference"],
          target: ["incollection", "inreference", "suppcollection"],
          fields: [
            { source: "title", target: "booktitle" },
            { source: "subtitle", target: "booksubtitle" },
            { source: "titleaddon", target: "booktitleaddon" }
          ]
        },
        {
          source: ["proceedings"],
          target: ["inproceedings"],
          fields: [
            { source: "title", target: "booktitle" },
            { source: "subtitle", target: "booksubtitle" },
            { source: "titleaddon", target: "booktitleaddon" }
          ]
        },
        {
          source: ["periodical"],
          target: ["article", "suppperiodical"],
          fields: [
            { source: "title", target: "journaltitle" },
            { source: "subtitle", target: "journalsubtitle" }
          ]
        }
      ];
    }
  });

  // node_modules/core-js-pure/internals/global.js
  var require_global2 = __commonJS({
    "node_modules/core-js-pure/internals/global.js"(exports, module) {
      init_globals();
      var check = function(it) {
        return it && it.Math == Math && it;
      };
      module.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || function() {
        return this;
      }() || Function("return this")();
    }
  });

  // node_modules/core-js-pure/internals/fails.js
  var require_fails2 = __commonJS({
    "node_modules/core-js-pure/internals/fails.js"(exports, module) {
      init_globals();
      module.exports = function(exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/function-bind-native.js
  var require_function_bind_native = __commonJS({
    "node_modules/core-js-pure/internals/function-bind-native.js"(exports, module) {
      init_globals();
      var fails = require_fails2();
      module.exports = !fails(function() {
        var test = function() {
        }.bind();
        return typeof test != "function" || test.hasOwnProperty("prototype");
      });
    }
  });

  // node_modules/core-js-pure/internals/function-apply.js
  var require_function_apply = __commonJS({
    "node_modules/core-js-pure/internals/function-apply.js"(exports, module) {
      init_globals();
      var NATIVE_BIND = require_function_bind_native();
      var FunctionPrototype = Function.prototype;
      var apply = FunctionPrototype.apply;
      var call = FunctionPrototype.call;
      module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
        return call.apply(apply, arguments);
      });
    }
  });

  // node_modules/core-js-pure/internals/function-uncurry-this.js
  var require_function_uncurry_this = __commonJS({
    "node_modules/core-js-pure/internals/function-uncurry-this.js"(exports, module) {
      init_globals();
      var NATIVE_BIND = require_function_bind_native();
      var FunctionPrototype = Function.prototype;
      var bind = FunctionPrototype.bind;
      var call = FunctionPrototype.call;
      var uncurryThis = NATIVE_BIND && bind.bind(call, call);
      module.exports = NATIVE_BIND ? function(fn) {
        return fn && uncurryThis(fn);
      } : function(fn) {
        return fn && function() {
          return call.apply(fn, arguments);
        };
      };
    }
  });

  // node_modules/core-js-pure/internals/is-callable.js
  var require_is_callable = __commonJS({
    "node_modules/core-js-pure/internals/is-callable.js"(exports, module) {
      init_globals();
      module.exports = function(argument) {
        return typeof argument == "function";
      };
    }
  });

  // node_modules/core-js-pure/internals/descriptors.js
  var require_descriptors2 = __commonJS({
    "node_modules/core-js-pure/internals/descriptors.js"(exports, module) {
      init_globals();
      var fails = require_fails2();
      module.exports = !fails(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] != 7;
      });
    }
  });

  // node_modules/core-js-pure/internals/function-call.js
  var require_function_call = __commonJS({
    "node_modules/core-js-pure/internals/function-call.js"(exports, module) {
      init_globals();
      var NATIVE_BIND = require_function_bind_native();
      var call = Function.prototype.call;
      module.exports = NATIVE_BIND ? call.bind(call) : function() {
        return call.apply(call, arguments);
      };
    }
  });

  // node_modules/core-js-pure/internals/object-property-is-enumerable.js
  var require_object_property_is_enumerable = __commonJS({
    "node_modules/core-js-pure/internals/object-property-is-enumerable.js"(exports) {
      init_globals();
      var $propertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : $propertyIsEnumerable;
    }
  });

  // node_modules/core-js-pure/internals/create-property-descriptor.js
  var require_create_property_descriptor = __commonJS({
    "node_modules/core-js-pure/internals/create-property-descriptor.js"(exports, module) {
      init_globals();
      module.exports = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
    }
  });

  // node_modules/core-js-pure/internals/classof-raw.js
  var require_classof_raw = __commonJS({
    "node_modules/core-js-pure/internals/classof-raw.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var toString = uncurryThis({}.toString);
      var stringSlice = uncurryThis("".slice);
      module.exports = function(it) {
        return stringSlice(toString(it), 8, -1);
      };
    }
  });

  // node_modules/core-js-pure/internals/indexed-object.js
  var require_indexed_object = __commonJS({
    "node_modules/core-js-pure/internals/indexed-object.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails2();
      var classof = require_classof_raw();
      var $Object = Object;
      var split = uncurryThis("".split);
      module.exports = fails(function() {
        return !$Object("z").propertyIsEnumerable(0);
      }) ? function(it) {
        return classof(it) == "String" ? split(it, "") : $Object(it);
      } : $Object;
    }
  });

  // node_modules/core-js-pure/internals/require-object-coercible.js
  var require_require_object_coercible = __commonJS({
    "node_modules/core-js-pure/internals/require-object-coercible.js"(exports, module) {
      init_globals();
      var $TypeError = TypeError;
      module.exports = function(it) {
        if (it == void 0)
          throw $TypeError("Can't call method on " + it);
        return it;
      };
    }
  });

  // node_modules/core-js-pure/internals/to-indexed-object.js
  var require_to_indexed_object = __commonJS({
    "node_modules/core-js-pure/internals/to-indexed-object.js"(exports, module) {
      init_globals();
      var IndexedObject = require_indexed_object();
      var requireObjectCoercible = require_require_object_coercible();
      module.exports = function(it) {
        return IndexedObject(requireObjectCoercible(it));
      };
    }
  });

  // node_modules/core-js-pure/internals/is-object.js
  var require_is_object2 = __commonJS({
    "node_modules/core-js-pure/internals/is-object.js"(exports, module) {
      init_globals();
      var isCallable = require_is_callable();
      module.exports = function(it) {
        return typeof it == "object" ? it !== null : isCallable(it);
      };
    }
  });

  // node_modules/core-js-pure/internals/path.js
  var require_path = __commonJS({
    "node_modules/core-js-pure/internals/path.js"(exports, module) {
      init_globals();
      module.exports = {};
    }
  });

  // node_modules/core-js-pure/internals/get-built-in.js
  var require_get_built_in = __commonJS({
    "node_modules/core-js-pure/internals/get-built-in.js"(exports, module) {
      init_globals();
      var path = require_path();
      var global2 = require_global2();
      var isCallable = require_is_callable();
      var aFunction = function(variable) {
        return isCallable(variable) ? variable : void 0;
      };
      module.exports = function(namespace, method) {
        return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
      };
    }
  });

  // node_modules/core-js-pure/internals/object-is-prototype-of.js
  var require_object_is_prototype_of = __commonJS({
    "node_modules/core-js-pure/internals/object-is-prototype-of.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      module.exports = uncurryThis({}.isPrototypeOf);
    }
  });

  // node_modules/core-js-pure/internals/engine-user-agent.js
  var require_engine_user_agent = __commonJS({
    "node_modules/core-js-pure/internals/engine-user-agent.js"(exports, module) {
      init_globals();
      var getBuiltIn = require_get_built_in();
      module.exports = getBuiltIn("navigator", "userAgent") || "";
    }
  });

  // node_modules/core-js-pure/internals/engine-v8-version.js
  var require_engine_v8_version = __commonJS({
    "node_modules/core-js-pure/internals/engine-v8-version.js"(exports, module) {
      init_globals();
      var global2 = require_global2();
      var userAgent = require_engine_user_agent();
      var process2 = global2.process;
      var Deno = global2.Deno;
      var versions = process2 && process2.versions || Deno && Deno.version;
      var v8 = versions && versions.v8;
      var match;
      var version2;
      if (v8) {
        match = v8.split(".");
        version2 = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
      }
      if (!version2 && userAgent) {
        match = userAgent.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
          match = userAgent.match(/Chrome\/(\d+)/);
          if (match)
            version2 = +match[1];
        }
      }
      module.exports = version2;
    }
  });

  // node_modules/core-js-pure/internals/native-symbol.js
  var require_native_symbol = __commonJS({
    "node_modules/core-js-pure/internals/native-symbol.js"(exports, module) {
      init_globals();
      var V8_VERSION = require_engine_v8_version();
      var fails = require_fails2();
      module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
        var symbol = Symbol();
        return !String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
      });
    }
  });

  // node_modules/core-js-pure/internals/use-symbol-as-uid.js
  var require_use_symbol_as_uid = __commonJS({
    "node_modules/core-js-pure/internals/use-symbol-as-uid.js"(exports, module) {
      init_globals();
      var NATIVE_SYMBOL = require_native_symbol();
      module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
    }
  });

  // node_modules/core-js-pure/internals/is-symbol.js
  var require_is_symbol = __commonJS({
    "node_modules/core-js-pure/internals/is-symbol.js"(exports, module) {
      init_globals();
      var getBuiltIn = require_get_built_in();
      var isCallable = require_is_callable();
      var isPrototypeOf = require_object_is_prototype_of();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var $Object = Object;
      module.exports = USE_SYMBOL_AS_UID ? function(it) {
        return typeof it == "symbol";
      } : function(it) {
        var $Symbol = getBuiltIn("Symbol");
        return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
      };
    }
  });

  // node_modules/core-js-pure/internals/try-to-string.js
  var require_try_to_string = __commonJS({
    "node_modules/core-js-pure/internals/try-to-string.js"(exports, module) {
      init_globals();
      var $String = String;
      module.exports = function(argument) {
        try {
          return $String(argument);
        } catch (error) {
          return "Object";
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/a-callable.js
  var require_a_callable = __commonJS({
    "node_modules/core-js-pure/internals/a-callable.js"(exports, module) {
      init_globals();
      var isCallable = require_is_callable();
      var tryToString = require_try_to_string();
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isCallable(argument))
          return argument;
        throw $TypeError(tryToString(argument) + " is not a function");
      };
    }
  });

  // node_modules/core-js-pure/internals/get-method.js
  var require_get_method = __commonJS({
    "node_modules/core-js-pure/internals/get-method.js"(exports, module) {
      init_globals();
      var aCallable = require_a_callable();
      module.exports = function(V, P) {
        var func = V[P];
        return func == null ? void 0 : aCallable(func);
      };
    }
  });

  // node_modules/core-js-pure/internals/ordinary-to-primitive.js
  var require_ordinary_to_primitive = __commonJS({
    "node_modules/core-js-pure/internals/ordinary-to-primitive.js"(exports, module) {
      init_globals();
      var call = require_function_call();
      var isCallable = require_is_callable();
      var isObject = require_is_object2();
      var $TypeError = TypeError;
      module.exports = function(input, pref) {
        var fn, val;
        if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
          return val;
        if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input)))
          return val;
        if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
          return val;
        throw $TypeError("Can't convert object to primitive value");
      };
    }
  });

  // node_modules/core-js-pure/internals/is-pure.js
  var require_is_pure = __commonJS({
    "node_modules/core-js-pure/internals/is-pure.js"(exports, module) {
      init_globals();
      module.exports = true;
    }
  });

  // node_modules/core-js-pure/internals/define-global-property.js
  var require_define_global_property = __commonJS({
    "node_modules/core-js-pure/internals/define-global-property.js"(exports, module) {
      init_globals();
      var global2 = require_global2();
      var defineProperty = Object.defineProperty;
      module.exports = function(key, value) {
        try {
          defineProperty(global2, key, { value, configurable: true, writable: true });
        } catch (error) {
          global2[key] = value;
        }
        return value;
      };
    }
  });

  // node_modules/core-js-pure/internals/shared-store.js
  var require_shared_store = __commonJS({
    "node_modules/core-js-pure/internals/shared-store.js"(exports, module) {
      init_globals();
      var global2 = require_global2();
      var defineGlobalProperty = require_define_global_property();
      var SHARED = "__core-js_shared__";
      var store = global2[SHARED] || defineGlobalProperty(SHARED, {});
      module.exports = store;
    }
  });

  // node_modules/core-js-pure/internals/shared.js
  var require_shared2 = __commonJS({
    "node_modules/core-js-pure/internals/shared.js"(exports, module) {
      init_globals();
      var IS_PURE = require_is_pure();
      var store = require_shared_store();
      (module.exports = function(key, value) {
        return store[key] || (store[key] = value !== void 0 ? value : {});
      })("versions", []).push({
        version: "3.22.8",
        mode: IS_PURE ? "pure" : "global",
        copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.22.8/LICENSE",
        source: "https://github.com/zloirock/core-js"
      });
    }
  });

  // node_modules/core-js-pure/internals/to-object.js
  var require_to_object2 = __commonJS({
    "node_modules/core-js-pure/internals/to-object.js"(exports, module) {
      init_globals();
      var requireObjectCoercible = require_require_object_coercible();
      var $Object = Object;
      module.exports = function(argument) {
        return $Object(requireObjectCoercible(argument));
      };
    }
  });

  // node_modules/core-js-pure/internals/has-own-property.js
  var require_has_own_property = __commonJS({
    "node_modules/core-js-pure/internals/has-own-property.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var toObject = require_to_object2();
      var hasOwnProperty = uncurryThis({}.hasOwnProperty);
      module.exports = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty(toObject(it), key);
      };
    }
  });

  // node_modules/core-js-pure/internals/uid.js
  var require_uid2 = __commonJS({
    "node_modules/core-js-pure/internals/uid.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var id = 0;
      var postfix2 = Math.random();
      var toString = uncurryThis(1 .toString);
      module.exports = function(key) {
        return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix2, 36);
      };
    }
  });

  // node_modules/core-js-pure/internals/well-known-symbol.js
  var require_well_known_symbol = __commonJS({
    "node_modules/core-js-pure/internals/well-known-symbol.js"(exports, module) {
      init_globals();
      var global2 = require_global2();
      var shared = require_shared2();
      var hasOwn = require_has_own_property();
      var uid = require_uid2();
      var NATIVE_SYMBOL = require_native_symbol();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var WellKnownSymbolsStore = shared("wks");
      var Symbol2 = global2.Symbol;
      var symbolFor = Symbol2 && Symbol2["for"];
      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
      module.exports = function(name) {
        if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")) {
          var description = "Symbol." + name;
          if (NATIVE_SYMBOL && hasOwn(Symbol2, name)) {
            WellKnownSymbolsStore[name] = Symbol2[name];
          } else if (USE_SYMBOL_AS_UID && symbolFor) {
            WellKnownSymbolsStore[name] = symbolFor(description);
          } else {
            WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
          }
        }
        return WellKnownSymbolsStore[name];
      };
    }
  });

  // node_modules/core-js-pure/internals/to-primitive.js
  var require_to_primitive2 = __commonJS({
    "node_modules/core-js-pure/internals/to-primitive.js"(exports, module) {
      init_globals();
      var call = require_function_call();
      var isObject = require_is_object2();
      var isSymbol = require_is_symbol();
      var getMethod = require_get_method();
      var ordinaryToPrimitive = require_ordinary_to_primitive();
      var wellKnownSymbol = require_well_known_symbol();
      var $TypeError = TypeError;
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      module.exports = function(input, pref) {
        if (!isObject(input) || isSymbol(input))
          return input;
        var exoticToPrim = getMethod(input, TO_PRIMITIVE);
        var result;
        if (exoticToPrim) {
          if (pref === void 0)
            pref = "default";
          result = call(exoticToPrim, input, pref);
          if (!isObject(result) || isSymbol(result))
            return result;
          throw $TypeError("Can't convert object to primitive value");
        }
        if (pref === void 0)
          pref = "number";
        return ordinaryToPrimitive(input, pref);
      };
    }
  });

  // node_modules/core-js-pure/internals/to-property-key.js
  var require_to_property_key = __commonJS({
    "node_modules/core-js-pure/internals/to-property-key.js"(exports, module) {
      init_globals();
      var toPrimitive = require_to_primitive2();
      var isSymbol = require_is_symbol();
      module.exports = function(argument) {
        var key = toPrimitive(argument, "string");
        return isSymbol(key) ? key : key + "";
      };
    }
  });

  // node_modules/core-js-pure/internals/document-create-element.js
  var require_document_create_element = __commonJS({
    "node_modules/core-js-pure/internals/document-create-element.js"(exports, module) {
      init_globals();
      var global2 = require_global2();
      var isObject = require_is_object2();
      var document2 = global2.document;
      var EXISTS = isObject(document2) && isObject(document2.createElement);
      module.exports = function(it) {
        return EXISTS ? document2.createElement(it) : {};
      };
    }
  });

  // node_modules/core-js-pure/internals/ie8-dom-define.js
  var require_ie8_dom_define2 = __commonJS({
    "node_modules/core-js-pure/internals/ie8-dom-define.js"(exports, module) {
      init_globals();
      var DESCRIPTORS = require_descriptors2();
      var fails = require_fails2();
      var createElement = require_document_create_element();
      module.exports = !DESCRIPTORS && !fails(function() {
        return Object.defineProperty(createElement("div"), "a", {
          get: function() {
            return 7;
          }
        }).a != 7;
      });
    }
  });

  // node_modules/core-js-pure/internals/object-get-own-property-descriptor.js
  var require_object_get_own_property_descriptor = __commonJS({
    "node_modules/core-js-pure/internals/object-get-own-property-descriptor.js"(exports) {
      init_globals();
      var DESCRIPTORS = require_descriptors2();
      var call = require_function_call();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var createPropertyDescriptor = require_create_property_descriptor();
      var toIndexedObject = require_to_indexed_object();
      var toPropertyKey = require_to_property_key();
      var hasOwn = require_has_own_property();
      var IE8_DOM_DEFINE = require_ie8_dom_define2();
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPropertyKey(P);
        if (IE8_DOM_DEFINE)
          try {
            return $getOwnPropertyDescriptor(O, P);
          } catch (error) {
          }
        if (hasOwn(O, P))
          return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
      };
    }
  });

  // node_modules/core-js-pure/internals/is-forced.js
  var require_is_forced = __commonJS({
    "node_modules/core-js-pure/internals/is-forced.js"(exports, module) {
      init_globals();
      var fails = require_fails2();
      var isCallable = require_is_callable();
      var replacement = /#|\.prototype\./;
      var isForced = function(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
      };
      var normalize = isForced.normalize = function(string) {
        return String(string).replace(replacement, ".").toLowerCase();
      };
      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = "N";
      var POLYFILL = isForced.POLYFILL = "P";
      module.exports = isForced;
    }
  });

  // node_modules/core-js-pure/internals/function-bind-context.js
  var require_function_bind_context = __commonJS({
    "node_modules/core-js-pure/internals/function-bind-context.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var aCallable = require_a_callable();
      var NATIVE_BIND = require_function_bind_native();
      var bind = uncurryThis(uncurryThis.bind);
      module.exports = function(fn, that) {
        aCallable(fn);
        return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {
          return fn.apply(that, arguments);
        };
      };
    }
  });

  // node_modules/core-js-pure/internals/v8-prototype-define-bug.js
  var require_v8_prototype_define_bug = __commonJS({
    "node_modules/core-js-pure/internals/v8-prototype-define-bug.js"(exports, module) {
      init_globals();
      var DESCRIPTORS = require_descriptors2();
      var fails = require_fails2();
      module.exports = DESCRIPTORS && fails(function() {
        return Object.defineProperty(function() {
        }, "prototype", {
          value: 42,
          writable: false
        }).prototype != 42;
      });
    }
  });

  // node_modules/core-js-pure/internals/an-object.js
  var require_an_object2 = __commonJS({
    "node_modules/core-js-pure/internals/an-object.js"(exports, module) {
      init_globals();
      var isObject = require_is_object2();
      var $String = String;
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isObject(argument))
          return argument;
        throw $TypeError($String(argument) + " is not an object");
      };
    }
  });

  // node_modules/core-js-pure/internals/object-define-property.js
  var require_object_define_property = __commonJS({
    "node_modules/core-js-pure/internals/object-define-property.js"(exports) {
      init_globals();
      var DESCRIPTORS = require_descriptors2();
      var IE8_DOM_DEFINE = require_ie8_dom_define2();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
      var anObject = require_an_object2();
      var toPropertyKey = require_to_property_key();
      var $TypeError = TypeError;
      var $defineProperty = Object.defineProperty;
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var ENUMERABLE = "enumerable";
      var CONFIGURABLE = "configurable";
      var WRITABLE = "writable";
      exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
          var current = $getOwnPropertyDescriptor(O, P);
          if (current && current[WRITABLE]) {
            O[P] = Attributes.value;
            Attributes = {
              configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
              enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
              writable: false
            };
          }
        }
        return $defineProperty(O, P, Attributes);
      } : $defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (IE8_DOM_DEFINE)
          try {
            return $defineProperty(O, P, Attributes);
          } catch (error) {
          }
        if ("get" in Attributes || "set" in Attributes)
          throw $TypeError("Accessors not supported");
        if ("value" in Attributes)
          O[P] = Attributes.value;
        return O;
      };
    }
  });

  // node_modules/core-js-pure/internals/create-non-enumerable-property.js
  var require_create_non_enumerable_property = __commonJS({
    "node_modules/core-js-pure/internals/create-non-enumerable-property.js"(exports, module) {
      init_globals();
      var DESCRIPTORS = require_descriptors2();
      var definePropertyModule = require_object_define_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      module.exports = DESCRIPTORS ? function(object, key, value) {
        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
      } : function(object, key, value) {
        object[key] = value;
        return object;
      };
    }
  });

  // node_modules/core-js-pure/internals/export.js
  var require_export2 = __commonJS({
    "node_modules/core-js-pure/internals/export.js"(exports, module) {
      init_globals();
      var global2 = require_global2();
      var apply = require_function_apply();
      var uncurryThis = require_function_uncurry_this();
      var isCallable = require_is_callable();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var isForced = require_is_forced();
      var path = require_path();
      var bind = require_function_bind_context();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var hasOwn = require_has_own_property();
      var wrapConstructor = function(NativeConstructor) {
        var Wrapper = function(a, b, c) {
          if (this instanceof Wrapper) {
            switch (arguments.length) {
              case 0:
                return new NativeConstructor();
              case 1:
                return new NativeConstructor(a);
              case 2:
                return new NativeConstructor(a, b);
            }
            return new NativeConstructor(a, b, c);
          }
          return apply(NativeConstructor, this, arguments);
        };
        Wrapper.prototype = NativeConstructor.prototype;
        return Wrapper;
      };
      module.exports = function(options2, source2) {
        var TARGET = options2.target;
        var GLOBAL = options2.global;
        var STATIC = options2.stat;
        var PROTO = options2.proto;
        var nativeSource = GLOBAL ? global2 : STATIC ? global2[TARGET] : (global2[TARGET] || {}).prototype;
        var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];
        var targetPrototype = target.prototype;
        var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
        var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
        for (key in source2) {
          FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options2.forced);
          USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);
          targetProperty = target[key];
          if (USE_NATIVE)
            if (options2.dontCallGetSet) {
              descriptor = getOwnPropertyDescriptor(nativeSource, key);
              nativeProperty = descriptor && descriptor.value;
            } else
              nativeProperty = nativeSource[key];
          sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source2[key];
          if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
            continue;
          if (options2.bind && USE_NATIVE)
            resultProperty = bind(sourceProperty, global2);
          else if (options2.wrap && USE_NATIVE)
            resultProperty = wrapConstructor(sourceProperty);
          else if (PROTO && isCallable(sourceProperty))
            resultProperty = uncurryThis(sourceProperty);
          else
            resultProperty = sourceProperty;
          if (options2.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
            createNonEnumerableProperty(resultProperty, "sham", true);
          }
          createNonEnumerableProperty(target, key, resultProperty);
          if (PROTO) {
            VIRTUAL_PROTOTYPE = TARGET + "Prototype";
            if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {
              createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
            }
            createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);
            if (options2.real && targetPrototype && !targetPrototype[key]) {
              createNonEnumerableProperty(targetPrototype, key, sourceProperty);
            }
          }
        }
      };
    }
  });

  // node_modules/core-js-pure/modules/es.object.define-property.js
  var require_es_object_define_property = __commonJS({
    "node_modules/core-js-pure/modules/es.object.define-property.js"() {
      init_globals();
      var $2 = require_export2();
      var DESCRIPTORS = require_descriptors2();
      var defineProperty = require_object_define_property().f;
      $2({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty, sham: !DESCRIPTORS }, {
        defineProperty
      });
    }
  });

  // node_modules/core-js-pure/es/object/define-property.js
  var require_define_property = __commonJS({
    "node_modules/core-js-pure/es/object/define-property.js"(exports, module) {
      init_globals();
      require_es_object_define_property();
      var path = require_path();
      var Object2 = path.Object;
      var defineProperty = module.exports = function defineProperty2(it, key, desc) {
        return Object2.defineProperty(it, key, desc);
      };
      if (Object2.defineProperty.sham)
        defineProperty.sham = true;
    }
  });

  // node_modules/core-js-pure/stable/object/define-property.js
  var require_define_property2 = __commonJS({
    "node_modules/core-js-pure/stable/object/define-property.js"(exports, module) {
      init_globals();
      var parent = require_define_property();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js
  var require_define_property3 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js"(exports, module) {
      init_globals();
      module.exports = require_define_property2();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js"(exports, module) {
      init_globals();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js-pure/internals/is-array.js
  var require_is_array2 = __commonJS({
    "node_modules/core-js-pure/internals/is-array.js"(exports, module) {
      init_globals();
      var classof = require_classof_raw();
      module.exports = Array.isArray || function isArray(argument) {
        return classof(argument) == "Array";
      };
    }
  });

  // node_modules/core-js-pure/internals/to-string-tag-support.js
  var require_to_string_tag_support = __commonJS({
    "node_modules/core-js-pure/internals/to-string-tag-support.js"(exports, module) {
      init_globals();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var test = {};
      test[TO_STRING_TAG] = "z";
      module.exports = String(test) === "[object z]";
    }
  });

  // node_modules/core-js-pure/internals/classof.js
  var require_classof2 = __commonJS({
    "node_modules/core-js-pure/internals/classof.js"(exports, module) {
      init_globals();
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var isCallable = require_is_callable();
      var classofRaw = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var $Object = Object;
      var CORRECT_ARGUMENTS = classofRaw(function() {
        return arguments;
      }()) == "Arguments";
      var tryGet = function(it, key) {
        try {
          return it[key];
        } catch (error) {
        }
      };
      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
        var O, tag, result;
        return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && isCallable(O.callee) ? "Arguments" : result;
      };
    }
  });

  // node_modules/core-js-pure/internals/inspect-source.js
  var require_inspect_source = __commonJS({
    "node_modules/core-js-pure/internals/inspect-source.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var isCallable = require_is_callable();
      var store = require_shared_store();
      var functionToString = uncurryThis(Function.toString);
      if (!isCallable(store.inspectSource)) {
        store.inspectSource = function(it) {
          return functionToString(it);
        };
      }
      module.exports = store.inspectSource;
    }
  });

  // node_modules/core-js-pure/internals/is-constructor.js
  var require_is_constructor = __commonJS({
    "node_modules/core-js-pure/internals/is-constructor.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails2();
      var isCallable = require_is_callable();
      var classof = require_classof2();
      var getBuiltIn = require_get_built_in();
      var inspectSource = require_inspect_source();
      var noop2 = function() {
      };
      var empty = [];
      var construct = getBuiltIn("Reflect", "construct");
      var constructorRegExp = /^\s*(?:class|function)\b/;
      var exec = uncurryThis(constructorRegExp.exec);
      var INCORRECT_TO_STRING = !constructorRegExp.exec(noop2);
      var isConstructorModern = function isConstructor(argument) {
        if (!isCallable(argument))
          return false;
        try {
          construct(noop2, empty, argument);
          return true;
        } catch (error) {
          return false;
        }
      };
      var isConstructorLegacy = function isConstructor(argument) {
        if (!isCallable(argument))
          return false;
        switch (classof(argument)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
        } catch (error) {
          return true;
        }
      };
      isConstructorLegacy.sham = true;
      module.exports = !construct || fails(function() {
        var called;
        return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
          called = true;
        }) || called;
      }) ? isConstructorLegacy : isConstructorModern;
    }
  });

  // node_modules/core-js-pure/internals/math-trunc.js
  var require_math_trunc = __commonJS({
    "node_modules/core-js-pure/internals/math-trunc.js"(exports, module) {
      init_globals();
      var ceil = Math.ceil;
      var floor = Math.floor;
      module.exports = Math.trunc || function trunc(x) {
        var n = +x;
        return (n > 0 ? floor : ceil)(n);
      };
    }
  });

  // node_modules/core-js-pure/internals/to-integer-or-infinity.js
  var require_to_integer_or_infinity = __commonJS({
    "node_modules/core-js-pure/internals/to-integer-or-infinity.js"(exports, module) {
      init_globals();
      var trunc = require_math_trunc();
      module.exports = function(argument) {
        var number2 = +argument;
        return number2 !== number2 || number2 === 0 ? 0 : trunc(number2);
      };
    }
  });

  // node_modules/core-js-pure/internals/to-absolute-index.js
  var require_to_absolute_index2 = __commonJS({
    "node_modules/core-js-pure/internals/to-absolute-index.js"(exports, module) {
      init_globals();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var max = Math.max;
      var min = Math.min;
      module.exports = function(index, length) {
        var integer = toIntegerOrInfinity(index);
        return integer < 0 ? max(integer + length, 0) : min(integer, length);
      };
    }
  });

  // node_modules/core-js-pure/internals/to-length.js
  var require_to_length2 = __commonJS({
    "node_modules/core-js-pure/internals/to-length.js"(exports, module) {
      init_globals();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var min = Math.min;
      module.exports = function(argument) {
        return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
      };
    }
  });

  // node_modules/core-js-pure/internals/length-of-array-like.js
  var require_length_of_array_like = __commonJS({
    "node_modules/core-js-pure/internals/length-of-array-like.js"(exports, module) {
      init_globals();
      var toLength = require_to_length2();
      module.exports = function(obj) {
        return toLength(obj.length);
      };
    }
  });

  // node_modules/core-js-pure/internals/create-property.js
  var require_create_property2 = __commonJS({
    "node_modules/core-js-pure/internals/create-property.js"(exports, module) {
      init_globals();
      var toPropertyKey = require_to_property_key();
      var definePropertyModule = require_object_define_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      module.exports = function(object, key, value) {
        var propertyKey = toPropertyKey(key);
        if (propertyKey in object)
          definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
        else
          object[propertyKey] = value;
      };
    }
  });

  // node_modules/core-js-pure/internals/array-method-has-species-support.js
  var require_array_method_has_species_support = __commonJS({
    "node_modules/core-js-pure/internals/array-method-has-species-support.js"(exports, module) {
      init_globals();
      var fails = require_fails2();
      var wellKnownSymbol = require_well_known_symbol();
      var V8_VERSION = require_engine_v8_version();
      var SPECIES = wellKnownSymbol("species");
      module.exports = function(METHOD_NAME) {
        return V8_VERSION >= 51 || !fails(function() {
          var array = [];
          var constructor = array.constructor = {};
          constructor[SPECIES] = function() {
            return { foo: 1 };
          };
          return array[METHOD_NAME](Boolean).foo !== 1;
        });
      };
    }
  });

  // node_modules/core-js-pure/internals/array-slice.js
  var require_array_slice = __commonJS({
    "node_modules/core-js-pure/internals/array-slice.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      module.exports = uncurryThis([].slice);
    }
  });

  // node_modules/core-js-pure/modules/es.array.slice.js
  var require_es_array_slice = __commonJS({
    "node_modules/core-js-pure/modules/es.array.slice.js"() {
      init_globals();
      var $2 = require_export2();
      var isArray = require_is_array2();
      var isConstructor = require_is_constructor();
      var isObject = require_is_object2();
      var toAbsoluteIndex = require_to_absolute_index2();
      var lengthOfArrayLike = require_length_of_array_like();
      var toIndexedObject = require_to_indexed_object();
      var createProperty = require_create_property2();
      var wellKnownSymbol = require_well_known_symbol();
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var un$Slice = require_array_slice();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
      var SPECIES = wellKnownSymbol("species");
      var $Array = Array;
      var max = Math.max;
      $2({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        slice: function slice(start, end) {
          var O = toIndexedObject(this);
          var length = lengthOfArrayLike(O);
          var k = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
          var Constructor, result, n;
          if (isArray(O)) {
            Constructor = O.constructor;
            if (isConstructor(Constructor) && (Constructor === $Array || isArray(Constructor.prototype))) {
              Constructor = void 0;
            } else if (isObject(Constructor)) {
              Constructor = Constructor[SPECIES];
              if (Constructor === null)
                Constructor = void 0;
            }
            if (Constructor === $Array || Constructor === void 0) {
              return un$Slice(O, k, fin);
            }
          }
          result = new (Constructor === void 0 ? $Array : Constructor)(max(fin - k, 0));
          for (n = 0; k < fin; k++, n++)
            if (k in O)
              createProperty(result, n, O[k]);
          result.length = n;
          return result;
        }
      });
    }
  });

  // node_modules/core-js-pure/internals/entry-virtual.js
  var require_entry_virtual = __commonJS({
    "node_modules/core-js-pure/internals/entry-virtual.js"(exports, module) {
      init_globals();
      var path = require_path();
      module.exports = function(CONSTRUCTOR) {
        return path[CONSTRUCTOR + "Prototype"];
      };
    }
  });

  // node_modules/core-js-pure/es/array/virtual/slice.js
  var require_slice = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/slice.js"(exports, module) {
      init_globals();
      require_es_array_slice();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").slice;
    }
  });

  // node_modules/core-js-pure/es/instance/slice.js
  var require_slice2 = __commonJS({
    "node_modules/core-js-pure/es/instance/slice.js"(exports, module) {
      init_globals();
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_slice();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.slice;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.slice ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/slice.js
  var require_slice3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/slice.js"(exports, module) {
      init_globals();
      var parent = require_slice2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js
  var require_slice4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js"(exports, module) {
      init_globals();
      module.exports = require_slice3();
    }
  });

  // node_modules/core-js-pure/internals/to-string.js
  var require_to_string = __commonJS({
    "node_modules/core-js-pure/internals/to-string.js"(exports, module) {
      init_globals();
      var classof = require_classof2();
      var $String = String;
      module.exports = function(argument) {
        if (classof(argument) === "Symbol")
          throw TypeError("Cannot convert a Symbol value to a string");
        return $String(argument);
      };
    }
  });

  // node_modules/core-js-pure/internals/string-multibyte.js
  var require_string_multibyte = __commonJS({
    "node_modules/core-js-pure/internals/string-multibyte.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toString = require_to_string();
      var requireObjectCoercible = require_require_object_coercible();
      var charAt = uncurryThis("".charAt);
      var charCodeAt = uncurryThis("".charCodeAt);
      var stringSlice = uncurryThis("".slice);
      var createMethod = function(CONVERT_TO_STRING) {
        return function($this, pos) {
          var S = toString(requireObjectCoercible($this));
          var position = toIntegerOrInfinity(pos);
          var size = S.length;
          var first, second;
          if (position < 0 || position >= size)
            return CONVERT_TO_STRING ? "" : void 0;
          first = charCodeAt(S, position);
          return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
        };
      };
      module.exports = {
        codeAt: createMethod(false),
        charAt: createMethod(true)
      };
    }
  });

  // node_modules/core-js-pure/internals/native-weak-map.js
  var require_native_weak_map = __commonJS({
    "node_modules/core-js-pure/internals/native-weak-map.js"(exports, module) {
      init_globals();
      var global2 = require_global2();
      var isCallable = require_is_callable();
      var inspectSource = require_inspect_source();
      var WeakMap2 = global2.WeakMap;
      module.exports = isCallable(WeakMap2) && /native code/.test(inspectSource(WeakMap2));
    }
  });

  // node_modules/core-js-pure/internals/shared-key.js
  var require_shared_key2 = __commonJS({
    "node_modules/core-js-pure/internals/shared-key.js"(exports, module) {
      init_globals();
      var shared = require_shared2();
      var uid = require_uid2();
      var keys = shared("keys");
      module.exports = function(key) {
        return keys[key] || (keys[key] = uid(key));
      };
    }
  });

  // node_modules/core-js-pure/internals/hidden-keys.js
  var require_hidden_keys = __commonJS({
    "node_modules/core-js-pure/internals/hidden-keys.js"(exports, module) {
      init_globals();
      module.exports = {};
    }
  });

  // node_modules/core-js-pure/internals/internal-state.js
  var require_internal_state = __commonJS({
    "node_modules/core-js-pure/internals/internal-state.js"(exports, module) {
      init_globals();
      var NATIVE_WEAK_MAP = require_native_weak_map();
      var global2 = require_global2();
      var uncurryThis = require_function_uncurry_this();
      var isObject = require_is_object2();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var hasOwn = require_has_own_property();
      var shared = require_shared_store();
      var sharedKey = require_shared_key2();
      var hiddenKeys = require_hidden_keys();
      var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
      var TypeError2 = global2.TypeError;
      var WeakMap2 = global2.WeakMap;
      var set;
      var get2;
      var has;
      var enforce = function(it) {
        return has(it) ? get2(it) : set(it, {});
      };
      var getterFor = function(TYPE) {
        return function(it) {
          var state;
          if (!isObject(it) || (state = get2(it)).type !== TYPE) {
            throw TypeError2("Incompatible receiver, " + TYPE + " required");
          }
          return state;
        };
      };
      if (NATIVE_WEAK_MAP || shared.state) {
        store = shared.state || (shared.state = new WeakMap2());
        wmget = uncurryThis(store.get);
        wmhas = uncurryThis(store.has);
        wmset = uncurryThis(store.set);
        set = function(it, metadata) {
          if (wmhas(store, it))
            throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          wmset(store, it, metadata);
          return metadata;
        };
        get2 = function(it) {
          return wmget(store, it) || {};
        };
        has = function(it) {
          return wmhas(store, it);
        };
      } else {
        STATE = sharedKey("state");
        hiddenKeys[STATE] = true;
        set = function(it, metadata) {
          if (hasOwn(it, STATE))
            throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };
        get2 = function(it) {
          return hasOwn(it, STATE) ? it[STATE] : {};
        };
        has = function(it) {
          return hasOwn(it, STATE);
        };
      }
      var store;
      var wmget;
      var wmhas;
      var wmset;
      var STATE;
      module.exports = {
        set,
        get: get2,
        has,
        enforce,
        getterFor
      };
    }
  });

  // node_modules/core-js-pure/internals/function-name.js
  var require_function_name = __commonJS({
    "node_modules/core-js-pure/internals/function-name.js"(exports, module) {
      init_globals();
      var DESCRIPTORS = require_descriptors2();
      var hasOwn = require_has_own_property();
      var FunctionPrototype = Function.prototype;
      var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
      var EXISTS = hasOwn(FunctionPrototype, "name");
      var PROPER = EXISTS && function something() {
      }.name === "something";
      var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
      module.exports = {
        EXISTS,
        PROPER,
        CONFIGURABLE
      };
    }
  });

  // node_modules/core-js-pure/internals/array-includes.js
  var require_array_includes2 = __commonJS({
    "node_modules/core-js-pure/internals/array-includes.js"(exports, module) {
      init_globals();
      var toIndexedObject = require_to_indexed_object();
      var toAbsoluteIndex = require_to_absolute_index2();
      var lengthOfArrayLike = require_length_of_array_like();
      var createMethod = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = lengthOfArrayLike(O);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          if (IS_INCLUDES && el != el)
            while (length > index) {
              value = O[index++];
              if (value != value)
                return true;
            }
          else
            for (; length > index; index++) {
              if ((IS_INCLUDES || index in O) && O[index] === el)
                return IS_INCLUDES || index || 0;
            }
          return !IS_INCLUDES && -1;
        };
      };
      module.exports = {
        includes: createMethod(true),
        indexOf: createMethod(false)
      };
    }
  });

  // node_modules/core-js-pure/internals/object-keys-internal.js
  var require_object_keys_internal2 = __commonJS({
    "node_modules/core-js-pure/internals/object-keys-internal.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var hasOwn = require_has_own_property();
      var toIndexedObject = require_to_indexed_object();
      var indexOf = require_array_includes2().indexOf;
      var hiddenKeys = require_hidden_keys();
      var push = uncurryThis([].push);
      module.exports = function(object, names2) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O)
          !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
        while (names2.length > i)
          if (hasOwn(O, key = names2[i++])) {
            ~indexOf(result, key) || push(result, key);
          }
        return result;
      };
    }
  });

  // node_modules/core-js-pure/internals/enum-bug-keys.js
  var require_enum_bug_keys2 = __commonJS({
    "node_modules/core-js-pure/internals/enum-bug-keys.js"(exports, module) {
      init_globals();
      module.exports = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
      ];
    }
  });

  // node_modules/core-js-pure/internals/object-keys.js
  var require_object_keys2 = __commonJS({
    "node_modules/core-js-pure/internals/object-keys.js"(exports, module) {
      init_globals();
      var internalObjectKeys = require_object_keys_internal2();
      var enumBugKeys = require_enum_bug_keys2();
      module.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
    }
  });

  // node_modules/core-js-pure/internals/object-define-properties.js
  var require_object_define_properties = __commonJS({
    "node_modules/core-js-pure/internals/object-define-properties.js"(exports) {
      init_globals();
      var DESCRIPTORS = require_descriptors2();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
      var definePropertyModule = require_object_define_property();
      var anObject = require_an_object2();
      var toIndexedObject = require_to_indexed_object();
      var objectKeys = require_object_keys2();
      exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var props = toIndexedObject(Properties);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while (length > index)
          definePropertyModule.f(O, key = keys[index++], props[key]);
        return O;
      };
    }
  });

  // node_modules/core-js-pure/internals/html.js
  var require_html2 = __commonJS({
    "node_modules/core-js-pure/internals/html.js"(exports, module) {
      init_globals();
      var getBuiltIn = require_get_built_in();
      module.exports = getBuiltIn("document", "documentElement");
    }
  });

  // node_modules/core-js-pure/internals/object-create.js
  var require_object_create2 = __commonJS({
    "node_modules/core-js-pure/internals/object-create.js"(exports, module) {
      init_globals();
      var anObject = require_an_object2();
      var definePropertiesModule = require_object_define_properties();
      var enumBugKeys = require_enum_bug_keys2();
      var hiddenKeys = require_hidden_keys();
      var html2 = require_html2();
      var documentCreateElement = require_document_create_element();
      var sharedKey = require_shared_key2();
      var GT = ">";
      var LT = "<";
      var PROTOTYPE = "prototype";
      var SCRIPT = "script";
      var IE_PROTO = sharedKey("IE_PROTO");
      var EmptyConstructor = function() {
      };
      var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
      };
      var NullProtoObjectViaActiveX = function(activeXDocument2) {
        activeXDocument2.write(scriptTag(""));
        activeXDocument2.close();
        var temp = activeXDocument2.parentWindow.Object;
        activeXDocument2 = null;
        return temp;
      };
      var NullProtoObjectViaIFrame = function() {
        var iframe = documentCreateElement("iframe");
        var JS = "java" + SCRIPT + ":";
        var iframeDocument;
        iframe.style.display = "none";
        html2.appendChild(iframe);
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag("document.F=Object"));
        iframeDocument.close();
        return iframeDocument.F;
      };
      var activeXDocument;
      var NullProtoObject = function() {
        try {
          activeXDocument = new ActiveXObject("htmlfile");
        } catch (error) {
        }
        NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
        var length = enumBugKeys.length;
        while (length--)
          delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        return NullProtoObject();
      };
      hiddenKeys[IE_PROTO] = true;
      module.exports = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null;
          result[IE_PROTO] = O;
        } else
          result = NullProtoObject();
        return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
      };
    }
  });

  // node_modules/core-js-pure/internals/correct-prototype-getter.js
  var require_correct_prototype_getter = __commonJS({
    "node_modules/core-js-pure/internals/correct-prototype-getter.js"(exports, module) {
      init_globals();
      var fails = require_fails2();
      module.exports = !fails(function() {
        function F() {
        }
        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
      });
    }
  });

  // node_modules/core-js-pure/internals/object-get-prototype-of.js
  var require_object_get_prototype_of = __commonJS({
    "node_modules/core-js-pure/internals/object-get-prototype-of.js"(exports, module) {
      init_globals();
      var hasOwn = require_has_own_property();
      var isCallable = require_is_callable();
      var toObject = require_to_object2();
      var sharedKey = require_shared_key2();
      var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
      var IE_PROTO = sharedKey("IE_PROTO");
      var $Object = Object;
      var ObjectPrototype = $Object.prototype;
      module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
        var object = toObject(O);
        if (hasOwn(object, IE_PROTO))
          return object[IE_PROTO];
        var constructor = object.constructor;
        if (isCallable(constructor) && object instanceof constructor) {
          return constructor.prototype;
        }
        return object instanceof $Object ? ObjectPrototype : null;
      };
    }
  });

  // node_modules/core-js-pure/internals/define-built-in.js
  var require_define_built_in = __commonJS({
    "node_modules/core-js-pure/internals/define-built-in.js"(exports, module) {
      init_globals();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      module.exports = function(target, key, value, options2) {
        if (options2 && options2.enumerable)
          target[key] = value;
        else
          createNonEnumerableProperty(target, key, value);
        return target;
      };
    }
  });

  // node_modules/core-js-pure/internals/iterators-core.js
  var require_iterators_core = __commonJS({
    "node_modules/core-js-pure/internals/iterators-core.js"(exports, module) {
      init_globals();
      var fails = require_fails2();
      var isCallable = require_is_callable();
      var create = require_object_create2();
      var getPrototypeOf = require_object_get_prototype_of();
      var defineBuiltIn = require_define_built_in();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_PURE = require_is_pure();
      var ITERATOR = wellKnownSymbol("iterator");
      var BUGGY_SAFARI_ITERATORS = false;
      var IteratorPrototype;
      var PrototypeOfArrayIteratorPrototype;
      var arrayIterator;
      if ([].keys) {
        arrayIterator = [].keys();
        if (!("next" in arrayIterator))
          BUGGY_SAFARI_ITERATORS = true;
        else {
          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
          if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
            IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
      }
      var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
        var test = {};
        return IteratorPrototype[ITERATOR].call(test) !== test;
      });
      if (NEW_ITERATOR_PROTOTYPE)
        IteratorPrototype = {};
      else if (IS_PURE)
        IteratorPrototype = create(IteratorPrototype);
      if (!isCallable(IteratorPrototype[ITERATOR])) {
        defineBuiltIn(IteratorPrototype, ITERATOR, function() {
          return this;
        });
      }
      module.exports = {
        IteratorPrototype,
        BUGGY_SAFARI_ITERATORS
      };
    }
  });

  // node_modules/core-js-pure/internals/object-to-string.js
  var require_object_to_string = __commonJS({
    "node_modules/core-js-pure/internals/object-to-string.js"(exports, module) {
      init_globals();
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var classof = require_classof2();
      module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
        return "[object " + classof(this) + "]";
      };
    }
  });

  // node_modules/core-js-pure/internals/set-to-string-tag.js
  var require_set_to_string_tag2 = __commonJS({
    "node_modules/core-js-pure/internals/set-to-string-tag.js"(exports, module) {
      init_globals();
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var defineProperty = require_object_define_property().f;
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var hasOwn = require_has_own_property();
      var toString = require_object_to_string();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      module.exports = function(it, TAG, STATIC, SET_METHOD) {
        if (it) {
          var target = STATIC ? it : it.prototype;
          if (!hasOwn(target, TO_STRING_TAG)) {
            defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
          }
          if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
            createNonEnumerableProperty(target, "toString", toString);
          }
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/iterators.js
  var require_iterators2 = __commonJS({
    "node_modules/core-js-pure/internals/iterators.js"(exports, module) {
      init_globals();
      module.exports = {};
    }
  });

  // node_modules/core-js-pure/internals/create-iterator-constructor.js
  var require_create_iterator_constructor = __commonJS({
    "node_modules/core-js-pure/internals/create-iterator-constructor.js"(exports, module) {
      init_globals();
      var IteratorPrototype = require_iterators_core().IteratorPrototype;
      var create = require_object_create2();
      var createPropertyDescriptor = require_create_property_descriptor();
      var setToStringTag = require_set_to_string_tag2();
      var Iterators = require_iterators2();
      var returnThis = function() {
        return this;
      };
      module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
        var TO_STRING_TAG = NAME + " Iterator";
        IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators[TO_STRING_TAG] = returnThis;
        return IteratorConstructor;
      };
    }
  });

  // node_modules/core-js-pure/internals/a-possible-prototype.js
  var require_a_possible_prototype = __commonJS({
    "node_modules/core-js-pure/internals/a-possible-prototype.js"(exports, module) {
      init_globals();
      var isCallable = require_is_callable();
      var $String = String;
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (typeof argument == "object" || isCallable(argument))
          return argument;
        throw $TypeError("Can't set " + $String(argument) + " as a prototype");
      };
    }
  });

  // node_modules/core-js-pure/internals/object-set-prototype-of.js
  var require_object_set_prototype_of = __commonJS({
    "node_modules/core-js-pure/internals/object-set-prototype-of.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var anObject = require_an_object2();
      var aPossiblePrototype = require_a_possible_prototype();
      module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;
        try {
          setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
          setter(test, []);
          CORRECT_SETTER = test instanceof Array;
        } catch (error) {
        }
        return function setPrototypeOf(O, proto) {
          anObject(O);
          aPossiblePrototype(proto);
          if (CORRECT_SETTER)
            setter(O, proto);
          else
            O.__proto__ = proto;
          return O;
        };
      }() : void 0);
    }
  });

  // node_modules/core-js-pure/internals/define-iterator.js
  var require_define_iterator = __commonJS({
    "node_modules/core-js-pure/internals/define-iterator.js"(exports, module) {
      init_globals();
      var $2 = require_export2();
      var call = require_function_call();
      var IS_PURE = require_is_pure();
      var FunctionName = require_function_name();
      var isCallable = require_is_callable();
      var createIteratorConstructor = require_create_iterator_constructor();
      var getPrototypeOf = require_object_get_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var setToStringTag = require_set_to_string_tag2();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var defineBuiltIn = require_define_built_in();
      var wellKnownSymbol = require_well_known_symbol();
      var Iterators = require_iterators2();
      var IteratorsCore = require_iterators_core();
      var PROPER_FUNCTION_NAME = FunctionName.PROPER;
      var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
      var IteratorPrototype = IteratorsCore.IteratorPrototype;
      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
      var ITERATOR = wellKnownSymbol("iterator");
      var KEYS = "keys";
      var VALUES = "values";
      var ENTRIES = "entries";
      var returnThis = function() {
        return this;
      };
      module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);
        var getIterationMethod = function(KIND) {
          if (KIND === DEFAULT && defaultIterator)
            return defaultIterator;
          if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
            return IterablePrototype[KIND];
          switch (KIND) {
            case KEYS:
              return function keys() {
                return new IteratorConstructor(this, KIND);
              };
            case VALUES:
              return function values() {
                return new IteratorConstructor(this, KIND);
              };
            case ENTRIES:
              return function entries() {
                return new IteratorConstructor(this, KIND);
              };
          }
          return function() {
            return new IteratorConstructor(this);
          };
        };
        var TO_STRING_TAG = NAME + " Iterator";
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY;
        if (anyNativeIterator) {
          CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
          if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
              if (setPrototypeOf) {
                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
              } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
                defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
              }
            }
            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE)
              Iterators[TO_STRING_TAG] = returnThis;
          }
        }
        if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
          if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
            createNonEnumerableProperty(IterablePrototype, "name", VALUES);
          } else {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
              return call(nativeIterator, this);
            };
          }
        }
        if (DEFAULT) {
          methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
          };
          if (FORCED)
            for (KEY in methods) {
              if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
              }
            }
          else
            $2({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
        }
        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
          defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
        }
        Iterators[NAME] = defaultIterator;
        return methods;
      };
    }
  });

  // node_modules/core-js-pure/modules/es.string.iterator.js
  var require_es_string_iterator = __commonJS({
    "node_modules/core-js-pure/modules/es.string.iterator.js"() {
      init_globals();
      var charAt = require_string_multibyte().charAt;
      var toString = require_to_string();
      var InternalStateModule = require_internal_state();
      var defineIterator = require_define_iterator();
      var STRING_ITERATOR = "String Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
      defineIterator(String, "String", function(iterated) {
        setInternalState(this, {
          type: STRING_ITERATOR,
          string: toString(iterated),
          index: 0
        });
      }, function next() {
        var state = getInternalState(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length)
          return { value: void 0, done: true };
        point = charAt(string, index);
        state.index += point.length;
        return { value: point, done: false };
      });
    }
  });

  // node_modules/core-js-pure/internals/iterator-close.js
  var require_iterator_close = __commonJS({
    "node_modules/core-js-pure/internals/iterator-close.js"(exports, module) {
      init_globals();
      var call = require_function_call();
      var anObject = require_an_object2();
      var getMethod = require_get_method();
      module.exports = function(iterator, kind, value) {
        var innerResult, innerError;
        anObject(iterator);
        try {
          innerResult = getMethod(iterator, "return");
          if (!innerResult) {
            if (kind === "throw")
              throw value;
            return value;
          }
          innerResult = call(innerResult, iterator);
        } catch (error) {
          innerError = true;
          innerResult = error;
        }
        if (kind === "throw")
          throw value;
        if (innerError)
          throw innerResult;
        anObject(innerResult);
        return value;
      };
    }
  });

  // node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js
  var require_call_with_safe_iteration_closing = __commonJS({
    "node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js"(exports, module) {
      init_globals();
      var anObject = require_an_object2();
      var iteratorClose = require_iterator_close();
      module.exports = function(iterator, fn, value, ENTRIES) {
        try {
          return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
        } catch (error) {
          iteratorClose(iterator, "throw", error);
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/is-array-iterator-method.js
  var require_is_array_iterator_method = __commonJS({
    "node_modules/core-js-pure/internals/is-array-iterator-method.js"(exports, module) {
      init_globals();
      var wellKnownSymbol = require_well_known_symbol();
      var Iterators = require_iterators2();
      var ITERATOR = wellKnownSymbol("iterator");
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
      };
    }
  });

  // node_modules/core-js-pure/internals/get-iterator-method.js
  var require_get_iterator_method = __commonJS({
    "node_modules/core-js-pure/internals/get-iterator-method.js"(exports, module) {
      init_globals();
      var classof = require_classof2();
      var getMethod = require_get_method();
      var Iterators = require_iterators2();
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      module.exports = function(it) {
        if (it != void 0)
          return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
      };
    }
  });

  // node_modules/core-js-pure/internals/get-iterator.js
  var require_get_iterator = __commonJS({
    "node_modules/core-js-pure/internals/get-iterator.js"(exports, module) {
      init_globals();
      var call = require_function_call();
      var aCallable = require_a_callable();
      var anObject = require_an_object2();
      var tryToString = require_try_to_string();
      var getIteratorMethod = require_get_iterator_method();
      var $TypeError = TypeError;
      module.exports = function(argument, usingIterator) {
        var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
        if (aCallable(iteratorMethod))
          return anObject(call(iteratorMethod, argument));
        throw $TypeError(tryToString(argument) + " is not iterable");
      };
    }
  });

  // node_modules/core-js-pure/internals/array-from.js
  var require_array_from = __commonJS({
    "node_modules/core-js-pure/internals/array-from.js"(exports, module) {
      init_globals();
      var bind = require_function_bind_context();
      var call = require_function_call();
      var toObject = require_to_object2();
      var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
      var isArrayIteratorMethod = require_is_array_iterator_method();
      var isConstructor = require_is_constructor();
      var lengthOfArrayLike = require_length_of_array_like();
      var createProperty = require_create_property2();
      var getIterator = require_get_iterator();
      var getIteratorMethod = require_get_iterator_method();
      var $Array = Array;
      module.exports = function from(arrayLike) {
        var O = toObject(arrayLike);
        var IS_CONSTRUCTOR = isConstructor(this);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
        var mapping = mapfn !== void 0;
        if (mapping)
          mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
        var iteratorMethod = getIteratorMethod(O);
        var index = 0;
        var length, result, step, iterator, next, value;
        if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {
          iterator = getIterator(O, iteratorMethod);
          next = iterator.next;
          result = IS_CONSTRUCTOR ? new this() : [];
          for (; !(step = call(next, iterator)).done; index++) {
            value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
            createProperty(result, index, value);
          }
        } else {
          length = lengthOfArrayLike(O);
          result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
          for (; length > index; index++) {
            value = mapping ? mapfn(O[index], index) : O[index];
            createProperty(result, index, value);
          }
        }
        result.length = index;
        return result;
      };
    }
  });

  // node_modules/core-js-pure/internals/check-correctness-of-iteration.js
  var require_check_correctness_of_iteration = __commonJS({
    "node_modules/core-js-pure/internals/check-correctness-of-iteration.js"(exports, module) {
      init_globals();
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      var SAFE_CLOSING = false;
      try {
        called = 0;
        iteratorWithReturn = {
          next: function() {
            return { done: !!called++ };
          },
          "return": function() {
            SAFE_CLOSING = true;
          }
        };
        iteratorWithReturn[ITERATOR] = function() {
          return this;
        };
        Array.from(iteratorWithReturn, function() {
          throw 2;
        });
      } catch (error) {
      }
      var called;
      var iteratorWithReturn;
      module.exports = function(exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING)
          return false;
        var ITERATION_SUPPORT = false;
        try {
          var object = {};
          object[ITERATOR] = function() {
            return {
              next: function() {
                return { done: ITERATION_SUPPORT = true };
              }
            };
          };
          exec(object);
        } catch (error) {
        }
        return ITERATION_SUPPORT;
      };
    }
  });

  // node_modules/core-js-pure/modules/es.array.from.js
  var require_es_array_from = __commonJS({
    "node_modules/core-js-pure/modules/es.array.from.js"() {
      init_globals();
      var $2 = require_export2();
      var from = require_array_from();
      var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
      var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
        Array.from(iterable);
      });
      $2({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
        from
      });
    }
  });

  // node_modules/core-js-pure/es/array/from.js
  var require_from3 = __commonJS({
    "node_modules/core-js-pure/es/array/from.js"(exports, module) {
      init_globals();
      require_es_string_iterator();
      require_es_array_from();
      var path = require_path();
      module.exports = path.Array.from;
    }
  });

  // node_modules/core-js-pure/stable/array/from.js
  var require_from4 = __commonJS({
    "node_modules/core-js-pure/stable/array/from.js"(exports, module) {
      init_globals();
      var parent = require_from3();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js
  var require_from5 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js"(exports, module) {
      init_globals();
      module.exports = require_from4();
    }
  });

  // node_modules/core-js-pure/internals/does-not-exceed-safe-integer.js
  var require_does_not_exceed_safe_integer = __commonJS({
    "node_modules/core-js-pure/internals/does-not-exceed-safe-integer.js"(exports, module) {
      init_globals();
      var $TypeError = TypeError;
      var MAX_SAFE_INTEGER = 9007199254740991;
      module.exports = function(it) {
        if (it > MAX_SAFE_INTEGER)
          throw $TypeError("Maximum allowed index exceeded");
        return it;
      };
    }
  });

  // node_modules/core-js-pure/internals/array-species-constructor.js
  var require_array_species_constructor = __commonJS({
    "node_modules/core-js-pure/internals/array-species-constructor.js"(exports, module) {
      init_globals();
      var isArray = require_is_array2();
      var isConstructor = require_is_constructor();
      var isObject = require_is_object2();
      var wellKnownSymbol = require_well_known_symbol();
      var SPECIES = wellKnownSymbol("species");
      var $Array = Array;
      module.exports = function(originalArray) {
        var C;
        if (isArray(originalArray)) {
          C = originalArray.constructor;
          if (isConstructor(C) && (C === $Array || isArray(C.prototype)))
            C = void 0;
          else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null)
              C = void 0;
          }
        }
        return C === void 0 ? $Array : C;
      };
    }
  });

  // node_modules/core-js-pure/internals/array-species-create.js
  var require_array_species_create = __commonJS({
    "node_modules/core-js-pure/internals/array-species-create.js"(exports, module) {
      init_globals();
      var arraySpeciesConstructor = require_array_species_constructor();
      module.exports = function(originalArray, length) {
        return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
      };
    }
  });

  // node_modules/core-js-pure/modules/es.array.concat.js
  var require_es_array_concat = __commonJS({
    "node_modules/core-js-pure/modules/es.array.concat.js"() {
      init_globals();
      var $2 = require_export2();
      var fails = require_fails2();
      var isArray = require_is_array2();
      var isObject = require_is_object2();
      var toObject = require_to_object2();
      var lengthOfArrayLike = require_length_of_array_like();
      var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
      var createProperty = require_create_property2();
      var arraySpeciesCreate = require_array_species_create();
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var wellKnownSymbol = require_well_known_symbol();
      var V8_VERSION = require_engine_v8_version();
      var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
      var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
      });
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
      var isConcatSpreadable = function(O) {
        if (!isObject(O))
          return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== void 0 ? !!spreadable : isArray(O);
      };
      var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
      $2({ target: "Array", proto: true, arity: 1, forced: FORCED }, {
        concat: function concat(arg) {
          var O = toObject(this);
          var A = arraySpeciesCreate(O, 0);
          var n = 0;
          var i, k, length, len, E;
          for (i = -1, length = arguments.length; i < length; i++) {
            E = i === -1 ? O : arguments[i];
            if (isConcatSpreadable(E)) {
              len = lengthOfArrayLike(E);
              doesNotExceedSafeInteger(n + len);
              for (k = 0; k < len; k++, n++)
                if (k in E)
                  createProperty(A, n, E[k]);
            } else {
              doesNotExceedSafeInteger(n + 1);
              createProperty(A, n++, E);
            }
          }
          A.length = n;
          return A;
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.object.to-string.js
  var require_es_object_to_string = __commonJS({
    "node_modules/core-js-pure/modules/es.object.to-string.js"() {
      init_globals();
    }
  });

  // node_modules/core-js-pure/internals/object-get-own-property-names.js
  var require_object_get_own_property_names = __commonJS({
    "node_modules/core-js-pure/internals/object-get-own-property-names.js"(exports) {
      init_globals();
      var internalObjectKeys = require_object_keys_internal2();
      var enumBugKeys = require_enum_bug_keys2();
      var hiddenKeys = enumBugKeys.concat("length", "prototype");
      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
    }
  });

  // node_modules/core-js-pure/internals/array-slice-simple.js
  var require_array_slice_simple = __commonJS({
    "node_modules/core-js-pure/internals/array-slice-simple.js"(exports, module) {
      init_globals();
      var toAbsoluteIndex = require_to_absolute_index2();
      var lengthOfArrayLike = require_length_of_array_like();
      var createProperty = require_create_property2();
      var $Array = Array;
      var max = Math.max;
      module.exports = function(O, start, end) {
        var length = lengthOfArrayLike(O);
        var k = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
        var result = $Array(max(fin - k, 0));
        for (var n = 0; k < fin; k++, n++)
          createProperty(result, n, O[k]);
        result.length = n;
        return result;
      };
    }
  });

  // node_modules/core-js-pure/internals/object-get-own-property-names-external.js
  var require_object_get_own_property_names_external = __commonJS({
    "node_modules/core-js-pure/internals/object-get-own-property-names-external.js"(exports, module) {
      init_globals();
      var classof = require_classof_raw();
      var toIndexedObject = require_to_indexed_object();
      var $getOwnPropertyNames = require_object_get_own_property_names().f;
      var arraySlice = require_array_slice_simple();
      var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      var getWindowNames = function(it) {
        try {
          return $getOwnPropertyNames(it);
        } catch (error) {
          return arraySlice(windowNames);
        }
      };
      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && classof(it) == "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
      };
    }
  });

  // node_modules/core-js-pure/internals/object-get-own-property-symbols.js
  var require_object_get_own_property_symbols = __commonJS({
    "node_modules/core-js-pure/internals/object-get-own-property-symbols.js"(exports) {
      init_globals();
      exports.f = Object.getOwnPropertySymbols;
    }
  });

  // node_modules/core-js-pure/internals/well-known-symbol-wrapped.js
  var require_well_known_symbol_wrapped = __commonJS({
    "node_modules/core-js-pure/internals/well-known-symbol-wrapped.js"(exports) {
      init_globals();
      var wellKnownSymbol = require_well_known_symbol();
      exports.f = wellKnownSymbol;
    }
  });

  // node_modules/core-js-pure/internals/define-well-known-symbol.js
  var require_define_well_known_symbol = __commonJS({
    "node_modules/core-js-pure/internals/define-well-known-symbol.js"(exports, module) {
      init_globals();
      var path = require_path();
      var hasOwn = require_has_own_property();
      var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
      var defineProperty = require_object_define_property().f;
      module.exports = function(NAME) {
        var Symbol2 = path.Symbol || (path.Symbol = {});
        if (!hasOwn(Symbol2, NAME))
          defineProperty(Symbol2, NAME, {
            value: wrappedWellKnownSymbolModule.f(NAME)
          });
      };
    }
  });

  // node_modules/core-js-pure/internals/symbol-define-to-primitive.js
  var require_symbol_define_to_primitive = __commonJS({
    "node_modules/core-js-pure/internals/symbol-define-to-primitive.js"(exports, module) {
      init_globals();
      var call = require_function_call();
      var getBuiltIn = require_get_built_in();
      var wellKnownSymbol = require_well_known_symbol();
      var defineBuiltIn = require_define_built_in();
      module.exports = function() {
        var Symbol2 = getBuiltIn("Symbol");
        var SymbolPrototype = Symbol2 && Symbol2.prototype;
        var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
        var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
        if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
          defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function(hint) {
            return call(valueOf, this);
          }, { arity: 1 });
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/array-iteration.js
  var require_array_iteration = __commonJS({
    "node_modules/core-js-pure/internals/array-iteration.js"(exports, module) {
      init_globals();
      var bind = require_function_bind_context();
      var uncurryThis = require_function_uncurry_this();
      var IndexedObject = require_indexed_object();
      var toObject = require_to_object2();
      var lengthOfArrayLike = require_length_of_array_like();
      var arraySpeciesCreate = require_array_species_create();
      var push = uncurryThis([].push);
      var createMethod = function(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var IS_FILTER_REJECT = TYPE == 7;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function($this, callbackfn, that, specificCreate) {
          var O = toObject($this);
          var self2 = IndexedObject(O);
          var boundFunction = bind(callbackfn, that);
          var length = lengthOfArrayLike(self2);
          var index = 0;
          var create = specificCreate || arraySpeciesCreate;
          var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : void 0;
          var value, result;
          for (; length > index; index++)
            if (NO_HOLES || index in self2) {
              value = self2[index];
              result = boundFunction(value, index, O);
              if (TYPE) {
                if (IS_MAP)
                  target[index] = result;
                else if (result)
                  switch (TYPE) {
                    case 3:
                      return true;
                    case 5:
                      return value;
                    case 6:
                      return index;
                    case 2:
                      push(target, value);
                  }
                else
                  switch (TYPE) {
                    case 4:
                      return false;
                    case 7:
                      push(target, value);
                  }
              }
            }
          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
      };
      module.exports = {
        forEach: createMethod(0),
        map: createMethod(1),
        filter: createMethod(2),
        some: createMethod(3),
        every: createMethod(4),
        find: createMethod(5),
        findIndex: createMethod(6),
        filterReject: createMethod(7)
      };
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.constructor.js
  var require_es_symbol_constructor = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.constructor.js"() {
      init_globals();
      var $2 = require_export2();
      var global2 = require_global2();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var IS_PURE = require_is_pure();
      var DESCRIPTORS = require_descriptors2();
      var NATIVE_SYMBOL = require_native_symbol();
      var fails = require_fails2();
      var hasOwn = require_has_own_property();
      var isPrototypeOf = require_object_is_prototype_of();
      var anObject = require_an_object2();
      var toIndexedObject = require_to_indexed_object();
      var toPropertyKey = require_to_property_key();
      var $toString = require_to_string();
      var createPropertyDescriptor = require_create_property_descriptor();
      var nativeObjectCreate = require_object_create2();
      var objectKeys = require_object_keys2();
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var definePropertyModule = require_object_define_property();
      var definePropertiesModule = require_object_define_properties();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var defineBuiltIn = require_define_built_in();
      var shared = require_shared2();
      var sharedKey = require_shared_key2();
      var hiddenKeys = require_hidden_keys();
      var uid = require_uid2();
      var wellKnownSymbol = require_well_known_symbol();
      var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      var defineSymbolToPrimitive = require_symbol_define_to_primitive();
      var setToStringTag = require_set_to_string_tag2();
      var InternalStateModule = require_internal_state();
      var $forEach = require_array_iteration().forEach;
      var HIDDEN = sharedKey("hidden");
      var SYMBOL = "Symbol";
      var PROTOTYPE = "prototype";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(SYMBOL);
      var ObjectPrototype = Object[PROTOTYPE];
      var $Symbol = global2.Symbol;
      var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
      var TypeError2 = global2.TypeError;
      var QObject = global2.QObject;
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
      var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
      var push = uncurryThis([].push);
      var AllSymbols = shared("symbols");
      var ObjectPrototypeSymbols = shared("op-symbols");
      var WellKnownSymbolsStore = shared("wks");
      var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
      var setSymbolDescriptor = DESCRIPTORS && fails(function() {
        return nativeObjectCreate(nativeDefineProperty({}, "a", {
          get: function() {
            return nativeDefineProperty(this, "a", { value: 7 }).a;
          }
        })).a != 7;
      }) ? function(O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
        if (ObjectPrototypeDescriptor)
          delete ObjectPrototype[P];
        nativeDefineProperty(O, P, Attributes);
        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
          nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
        }
      } : nativeDefineProperty;
      var wrap = function(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
        setInternalState(symbol, {
          type: SYMBOL,
          tag,
          description
        });
        if (!DESCRIPTORS)
          symbol.description = description;
        return symbol;
      };
      var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype)
          $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPropertyKey(P);
        anObject(Attributes);
        if (hasOwn(AllSymbols, key)) {
          if (!Attributes.enumerable) {
            if (!hasOwn(O, HIDDEN))
              nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
            O[HIDDEN][key] = true;
          } else {
            if (hasOwn(O, HIDDEN) && O[HIDDEN][key])
              O[HIDDEN][key] = false;
            Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
          }
          return setSymbolDescriptor(O, key, Attributes);
        }
        return nativeDefineProperty(O, key, Attributes);
      };
      var $defineProperties = function defineProperties(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys, function(key) {
          if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key))
            $defineProperty(O, key, properties[key]);
        });
        return O;
      };
      var $create = function create(O, Properties) {
        return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
      };
      var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPropertyKey(V);
        var enumerable = call(nativePropertyIsEnumerable, this, P);
        if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P))
          return false;
        return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
      };
      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject(O);
        var key = toPropertyKey(P);
        if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key))
          return;
        var descriptor = nativeGetOwnPropertyDescriptor(it, key);
        if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
          descriptor.enumerable = true;
        }
        return descriptor;
      };
      var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names2 = nativeGetOwnPropertyNames(toIndexedObject(O));
        var result = [];
        $forEach(names2, function(key) {
          if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key))
            push(result, key);
        });
        return result;
      };
      var $getOwnPropertySymbols = function(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names2 = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
        var result = [];
        $forEach(names2, function(key) {
          if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
            push(result, AllSymbols[key]);
          }
        });
        return result;
      };
      if (!NATIVE_SYMBOL) {
        $Symbol = function Symbol2() {
          if (isPrototypeOf(SymbolPrototype, this))
            throw TypeError2("Symbol is not a constructor");
          var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
          var tag = uid(description);
          var setter = function(value) {
            if (this === ObjectPrototype)
              call(setter, ObjectPrototypeSymbols, value);
            if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag))
              this[HIDDEN][tag] = false;
            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
          };
          if (DESCRIPTORS && USE_SETTER)
            setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
          return wrap(tag, description);
        };
        SymbolPrototype = $Symbol[PROTOTYPE];
        defineBuiltIn(SymbolPrototype, "toString", function toString() {
          return getInternalState(this).tag;
        });
        defineBuiltIn($Symbol, "withoutSetter", function(description) {
          return wrap(uid(description), description);
        });
        propertyIsEnumerableModule.f = $propertyIsEnumerable;
        definePropertyModule.f = $defineProperty;
        definePropertiesModule.f = $defineProperties;
        getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
        wrappedWellKnownSymbolModule.f = function(name) {
          return wrap(wellKnownSymbol(name), name);
        };
        if (DESCRIPTORS) {
          nativeDefineProperty(SymbolPrototype, "description", {
            configurable: true,
            get: function description() {
              return getInternalState(this).description;
            }
          });
          if (!IS_PURE) {
            defineBuiltIn(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
          }
        }
      }
      $2({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
        Symbol: $Symbol
      });
      $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
        defineWellKnownSymbol(name);
      });
      $2({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
        useSetter: function() {
          USE_SETTER = true;
        },
        useSimple: function() {
          USE_SETTER = false;
        }
      });
      $2({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
        create: $create,
        defineProperty: $defineProperty,
        defineProperties: $defineProperties,
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
      });
      $2({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
        getOwnPropertyNames: $getOwnPropertyNames
      });
      defineSymbolToPrimitive();
      setToStringTag($Symbol, SYMBOL);
      hiddenKeys[HIDDEN] = true;
    }
  });

  // node_modules/core-js-pure/internals/native-symbol-registry.js
  var require_native_symbol_registry = __commonJS({
    "node_modules/core-js-pure/internals/native-symbol-registry.js"(exports, module) {
      init_globals();
      var NATIVE_SYMBOL = require_native_symbol();
      module.exports = NATIVE_SYMBOL && !!Symbol["for"] && !!Symbol.keyFor;
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.for.js
  var require_es_symbol_for = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.for.js"() {
      init_globals();
      var $2 = require_export2();
      var getBuiltIn = require_get_built_in();
      var hasOwn = require_has_own_property();
      var toString = require_to_string();
      var shared = require_shared2();
      var NATIVE_SYMBOL_REGISTRY = require_native_symbol_registry();
      var StringToSymbolRegistry = shared("string-to-symbol-registry");
      var SymbolToStringRegistry = shared("symbol-to-string-registry");
      $2({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
        "for": function(key) {
          var string = toString(key);
          if (hasOwn(StringToSymbolRegistry, string))
            return StringToSymbolRegistry[string];
          var symbol = getBuiltIn("Symbol")(string);
          StringToSymbolRegistry[string] = symbol;
          SymbolToStringRegistry[symbol] = string;
          return symbol;
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.key-for.js
  var require_es_symbol_key_for = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.key-for.js"() {
      init_globals();
      var $2 = require_export2();
      var hasOwn = require_has_own_property();
      var isSymbol = require_is_symbol();
      var tryToString = require_try_to_string();
      var shared = require_shared2();
      var NATIVE_SYMBOL_REGISTRY = require_native_symbol_registry();
      var SymbolToStringRegistry = shared("symbol-to-string-registry");
      $2({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym))
            throw TypeError(tryToString(sym) + " is not a symbol");
          if (hasOwn(SymbolToStringRegistry, sym))
            return SymbolToStringRegistry[sym];
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.json.stringify.js
  var require_es_json_stringify = __commonJS({
    "node_modules/core-js-pure/modules/es.json.stringify.js"() {
      init_globals();
      var $2 = require_export2();
      var getBuiltIn = require_get_built_in();
      var apply = require_function_apply();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails2();
      var isArray = require_is_array2();
      var isCallable = require_is_callable();
      var isObject = require_is_object2();
      var isSymbol = require_is_symbol();
      var arraySlice = require_array_slice();
      var NATIVE_SYMBOL = require_native_symbol();
      var $stringify = getBuiltIn("JSON", "stringify");
      var exec = uncurryThis(/./.exec);
      var charAt = uncurryThis("".charAt);
      var charCodeAt = uncurryThis("".charCodeAt);
      var replace = uncurryThis("".replace);
      var numberToString = uncurryThis(1 .toString);
      var tester = /[\uD800-\uDFFF]/g;
      var low = /^[\uD800-\uDBFF]$/;
      var hi = /^[\uDC00-\uDFFF]$/;
      var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function() {
        var symbol = getBuiltIn("Symbol")();
        return $stringify([symbol]) != "[null]" || $stringify({ a: symbol }) != "{}" || $stringify(Object(symbol)) != "{}";
      });
      var ILL_FORMED_UNICODE = fails(function() {
        return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
      });
      var stringifyWithSymbolsFix = function(it, replacer) {
        var args = arraySlice(arguments);
        var $replacer = replacer;
        if (!isObject(replacer) && it === void 0 || isSymbol(it))
          return;
        if (!isArray(replacer))
          replacer = function(key, value) {
            if (isCallable($replacer))
              value = call($replacer, this, key, value);
            if (!isSymbol(value))
              return value;
          };
        args[1] = replacer;
        return apply($stringify, null, args);
      };
      var fixIllFormed = function(match, offset, string) {
        var prev = charAt(string, offset - 1);
        var next = charAt(string, offset + 1);
        if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
          return "\\u" + numberToString(charCodeAt(match, 0), 16);
        }
        return match;
      };
      if ($stringify) {
        $2({ target: "JSON", stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
          stringify: function stringify(it, replacer, space) {
            var args = arraySlice(arguments);
            var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
            return ILL_FORMED_UNICODE && typeof result == "string" ? replace(result, tester, fixIllFormed) : result;
          }
        });
      }
    }
  });

  // node_modules/core-js-pure/modules/es.object.get-own-property-symbols.js
  var require_es_object_get_own_property_symbols = __commonJS({
    "node_modules/core-js-pure/modules/es.object.get-own-property-symbols.js"() {
      init_globals();
      var $2 = require_export2();
      var NATIVE_SYMBOL = require_native_symbol();
      var fails = require_fails2();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var toObject = require_to_object2();
      var FORCED = !NATIVE_SYMBOL || fails(function() {
        getOwnPropertySymbolsModule.f(1);
      });
      $2({ target: "Object", stat: true, forced: FORCED }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
          return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.js
  var require_es_symbol = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.js"() {
      init_globals();
      require_es_symbol_constructor();
      require_es_symbol_for();
      require_es_symbol_key_for();
      require_es_json_stringify();
      require_es_object_get_own_property_symbols();
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.async-iterator.js
  var require_es_symbol_async_iterator = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.async-iterator.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("asyncIterator");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.description.js
  var require_es_symbol_description = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.description.js"() {
      init_globals();
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.has-instance.js
  var require_es_symbol_has_instance = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.has-instance.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("hasInstance");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js
  var require_es_symbol_is_concat_spreadable = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("isConcatSpreadable");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.iterator.js
  var require_es_symbol_iterator = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.iterator.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("iterator");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.match.js
  var require_es_symbol_match = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.match.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("match");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.match-all.js
  var require_es_symbol_match_all = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.match-all.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("matchAll");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.replace.js
  var require_es_symbol_replace = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.replace.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("replace");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.search.js
  var require_es_symbol_search = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.search.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("search");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.species.js
  var require_es_symbol_species = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.species.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("species");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.split.js
  var require_es_symbol_split = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.split.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("split");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.to-primitive.js
  var require_es_symbol_to_primitive = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.to-primitive.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      var defineSymbolToPrimitive = require_symbol_define_to_primitive();
      defineWellKnownSymbol("toPrimitive");
      defineSymbolToPrimitive();
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.to-string-tag.js
  var require_es_symbol_to_string_tag = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.to-string-tag.js"() {
      init_globals();
      var getBuiltIn = require_get_built_in();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      var setToStringTag = require_set_to_string_tag2();
      defineWellKnownSymbol("toStringTag");
      setToStringTag(getBuiltIn("Symbol"), "Symbol");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.unscopables.js
  var require_es_symbol_unscopables = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.unscopables.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("unscopables");
    }
  });

  // node_modules/core-js-pure/modules/es.json.to-string-tag.js
  var require_es_json_to_string_tag = __commonJS({
    "node_modules/core-js-pure/modules/es.json.to-string-tag.js"() {
      init_globals();
      var global2 = require_global2();
      var setToStringTag = require_set_to_string_tag2();
      setToStringTag(global2.JSON, "JSON", true);
    }
  });

  // node_modules/core-js-pure/modules/es.math.to-string-tag.js
  var require_es_math_to_string_tag = __commonJS({
    "node_modules/core-js-pure/modules/es.math.to-string-tag.js"() {
      init_globals();
    }
  });

  // node_modules/core-js-pure/modules/es.reflect.to-string-tag.js
  var require_es_reflect_to_string_tag = __commonJS({
    "node_modules/core-js-pure/modules/es.reflect.to-string-tag.js"() {
      init_globals();
    }
  });

  // node_modules/core-js-pure/es/symbol/index.js
  var require_symbol3 = __commonJS({
    "node_modules/core-js-pure/es/symbol/index.js"(exports, module) {
      init_globals();
      require_es_array_concat();
      require_es_object_to_string();
      require_es_symbol();
      require_es_symbol_async_iterator();
      require_es_symbol_description();
      require_es_symbol_has_instance();
      require_es_symbol_is_concat_spreadable();
      require_es_symbol_iterator();
      require_es_symbol_match();
      require_es_symbol_match_all();
      require_es_symbol_replace();
      require_es_symbol_search();
      require_es_symbol_species();
      require_es_symbol_split();
      require_es_symbol_to_primitive();
      require_es_symbol_to_string_tag();
      require_es_symbol_unscopables();
      require_es_json_to_string_tag();
      require_es_math_to_string_tag();
      require_es_reflect_to_string_tag();
      var path = require_path();
      module.exports = path.Symbol;
    }
  });

  // node_modules/core-js-pure/internals/add-to-unscopables.js
  var require_add_to_unscopables2 = __commonJS({
    "node_modules/core-js-pure/internals/add-to-unscopables.js"(exports, module) {
      init_globals();
      module.exports = function() {
      };
    }
  });

  // node_modules/core-js-pure/modules/es.array.iterator.js
  var require_es_array_iterator = __commonJS({
    "node_modules/core-js-pure/modules/es.array.iterator.js"(exports, module) {
      init_globals();
      var toIndexedObject = require_to_indexed_object();
      var addToUnscopables = require_add_to_unscopables2();
      var Iterators = require_iterators2();
      var InternalStateModule = require_internal_state();
      var defineProperty = require_object_define_property().f;
      var defineIterator = require_define_iterator();
      var IS_PURE = require_is_pure();
      var DESCRIPTORS = require_descriptors2();
      var ARRAY_ITERATOR = "Array Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
      module.exports = defineIterator(Array, "Array", function(iterated, kind) {
        setInternalState(this, {
          type: ARRAY_ITERATOR,
          target: toIndexedObject(iterated),
          index: 0,
          kind
        });
      }, function() {
        var state = getInternalState(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
          state.target = void 0;
          return { value: void 0, done: true };
        }
        if (kind == "keys")
          return { value: index, done: false };
        if (kind == "values")
          return { value: target[index], done: false };
        return { value: [index, target[index]], done: false };
      }, "values");
      var values = Iterators.Arguments = Iterators.Array;
      addToUnscopables("keys");
      addToUnscopables("values");
      addToUnscopables("entries");
      if (!IS_PURE && DESCRIPTORS && values.name !== "values")
        try {
          defineProperty(values, "name", { value: "values" });
        } catch (error) {
        }
    }
  });

  // node_modules/core-js-pure/internals/dom-iterables.js
  var require_dom_iterables = __commonJS({
    "node_modules/core-js-pure/internals/dom-iterables.js"(exports, module) {
      init_globals();
      module.exports = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
      };
    }
  });

  // node_modules/core-js-pure/modules/web.dom-collections.iterator.js
  var require_web_dom_collections_iterator = __commonJS({
    "node_modules/core-js-pure/modules/web.dom-collections.iterator.js"() {
      init_globals();
      require_es_array_iterator();
      var DOMIterables = require_dom_iterables();
      var global2 = require_global2();
      var classof = require_classof2();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var Iterators = require_iterators2();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      for (COLLECTION_NAME in DOMIterables) {
        Collection = global2[COLLECTION_NAME];
        CollectionPrototype = Collection && Collection.prototype;
        if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
          createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
        }
        Iterators[COLLECTION_NAME] = Iterators.Array;
      }
      var Collection;
      var CollectionPrototype;
      var COLLECTION_NAME;
    }
  });

  // node_modules/core-js-pure/stable/symbol/index.js
  var require_symbol4 = __commonJS({
    "node_modules/core-js-pure/stable/symbol/index.js"(exports, module) {
      init_globals();
      var parent = require_symbol3();
      require_web_dom_collections_iterator();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js
  var require_symbol5 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js"(exports, module) {
      init_globals();
      module.exports = require_symbol4();
    }
  });

  // node_modules/core-js-pure/es/get-iterator-method.js
  var require_get_iterator_method2 = __commonJS({
    "node_modules/core-js-pure/es/get-iterator-method.js"(exports, module) {
      init_globals();
      require_es_array_iterator();
      require_es_string_iterator();
      var getIteratorMethod = require_get_iterator_method();
      module.exports = getIteratorMethod;
    }
  });

  // node_modules/core-js-pure/stable/get-iterator-method.js
  var require_get_iterator_method3 = __commonJS({
    "node_modules/core-js-pure/stable/get-iterator-method.js"(exports, module) {
      init_globals();
      var parent = require_get_iterator_method2();
      require_web_dom_collections_iterator();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/get-iterator-method.js
  var require_get_iterator_method4 = __commonJS({
    "node_modules/core-js-pure/actual/get-iterator-method.js"(exports, module) {
      init_globals();
      var parent = require_get_iterator_method3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/get-iterator-method.js
  var require_get_iterator_method5 = __commonJS({
    "node_modules/core-js-pure/full/get-iterator-method.js"(exports, module) {
      init_globals();
      var parent = require_get_iterator_method4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/get-iterator-method.js
  var require_get_iterator_method6 = __commonJS({
    "node_modules/core-js-pure/features/get-iterator-method.js"(exports, module) {
      init_globals();
      module.exports = require_get_iterator_method5();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js
  var require_get_iterator_method7 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js"(exports, module) {
      init_globals();
      module.exports = require_get_iterator_method6();
    }
  });

  // node_modules/core-js-pure/modules/es.array.is-array.js
  var require_es_array_is_array = __commonJS({
    "node_modules/core-js-pure/modules/es.array.is-array.js"() {
      init_globals();
      var $2 = require_export2();
      var isArray = require_is_array2();
      $2({ target: "Array", stat: true }, {
        isArray
      });
    }
  });

  // node_modules/core-js-pure/es/array/is-array.js
  var require_is_array3 = __commonJS({
    "node_modules/core-js-pure/es/array/is-array.js"(exports, module) {
      init_globals();
      require_es_array_is_array();
      var path = require_path();
      module.exports = path.Array.isArray;
    }
  });

  // node_modules/core-js-pure/stable/array/is-array.js
  var require_is_array4 = __commonJS({
    "node_modules/core-js-pure/stable/array/is-array.js"(exports, module) {
      init_globals();
      var parent = require_is_array3();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js
  var require_is_array5 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js"(exports, module) {
      init_globals();
      module.exports = require_is_array4();
    }
  });

  // node_modules/core-js-pure/actual/array/is-array.js
  var require_is_array6 = __commonJS({
    "node_modules/core-js-pure/actual/array/is-array.js"(exports, module) {
      init_globals();
      var parent = require_is_array4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/array/is-array.js
  var require_is_array7 = __commonJS({
    "node_modules/core-js-pure/full/array/is-array.js"(exports, module) {
      init_globals();
      var parent = require_is_array6();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/array/is-array.js
  var require_is_array8 = __commonJS({
    "node_modules/core-js-pure/features/array/is-array.js"(exports, module) {
      init_globals();
      module.exports = require_is_array7();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/array/is-array.js
  var require_is_array9 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/array/is-array.js"(exports, module) {
      init_globals();
      module.exports = require_is_array8();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js
  var require_arrayWithHoles = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js"(exports, module) {
      init_globals();
      var _Array$isArray = require_is_array9();
      function _arrayWithHoles(arr) {
        if (_Array$isArray(arr))
          return arr;
      }
      module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js-pure/actual/symbol/index.js
  var require_symbol6 = __commonJS({
    "node_modules/core-js-pure/actual/symbol/index.js"(exports, module) {
      init_globals();
      var parent = require_symbol4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js
  var require_esnext_symbol_async_dispose = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("asyncDispose");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.dispose.js
  var require_esnext_symbol_dispose = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.dispose.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("dispose");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.matcher.js
  var require_esnext_symbol_matcher = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.matcher.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("matcher");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.metadata.js
  var require_esnext_symbol_metadata = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.metadata.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("metadata");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.observable.js
  var require_esnext_symbol_observable = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.observable.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("observable");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js
  var require_esnext_symbol_pattern_match = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("patternMatch");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.replace-all.js
  var require_esnext_symbol_replace_all = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.replace-all.js"() {
      init_globals();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("replaceAll");
    }
  });

  // node_modules/core-js-pure/full/symbol/index.js
  var require_symbol7 = __commonJS({
    "node_modules/core-js-pure/full/symbol/index.js"(exports, module) {
      init_globals();
      var parent = require_symbol6();
      require_esnext_symbol_async_dispose();
      require_esnext_symbol_dispose();
      require_esnext_symbol_matcher();
      require_esnext_symbol_metadata();
      require_esnext_symbol_observable();
      require_esnext_symbol_pattern_match();
      require_esnext_symbol_replace_all();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/symbol/index.js
  var require_symbol8 = __commonJS({
    "node_modules/core-js-pure/features/symbol/index.js"(exports, module) {
      init_globals();
      module.exports = require_symbol7();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/symbol.js
  var require_symbol9 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/symbol.js"(exports, module) {
      init_globals();
      module.exports = require_symbol8();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js
  var require_iterableToArrayLimit = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js"(exports, module) {
      init_globals();
      var _Symbol = require_symbol9();
      var _getIteratorMethod = require_get_iterator_method7();
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof _Symbol !== "undefined" && _getIteratorMethod(arr) || arr["@@iterator"];
        if (_i == null)
          return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js-pure/actual/instance/slice.js
  var require_slice5 = __commonJS({
    "node_modules/core-js-pure/actual/instance/slice.js"(exports, module) {
      init_globals();
      var parent = require_slice3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/instance/slice.js
  var require_slice6 = __commonJS({
    "node_modules/core-js-pure/full/instance/slice.js"(exports, module) {
      init_globals();
      var parent = require_slice5();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/instance/slice.js
  var require_slice7 = __commonJS({
    "node_modules/core-js-pure/features/instance/slice.js"(exports, module) {
      init_globals();
      module.exports = require_slice6();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/instance/slice.js
  var require_slice8 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/instance/slice.js"(exports, module) {
      init_globals();
      module.exports = require_slice7();
    }
  });

  // node_modules/core-js-pure/actual/array/from.js
  var require_from6 = __commonJS({
    "node_modules/core-js-pure/actual/array/from.js"(exports, module) {
      init_globals();
      var parent = require_from4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/array/from.js
  var require_from7 = __commonJS({
    "node_modules/core-js-pure/full/array/from.js"(exports, module) {
      init_globals();
      var parent = require_from6();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/array/from.js
  var require_from8 = __commonJS({
    "node_modules/core-js-pure/features/array/from.js"(exports, module) {
      init_globals();
      module.exports = require_from7();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/array/from.js
  var require_from9 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/array/from.js"(exports, module) {
      init_globals();
      module.exports = require_from8();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js
  var require_arrayLikeToArray = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js"(exports, module) {
      init_globals();
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js
  var require_unsupportedIterableToArray = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js"(exports, module) {
      init_globals();
      var _sliceInstanceProperty = require_slice8();
      var _Array$from = require_from9();
      var arrayLikeToArray = require_arrayLikeToArray();
      function _unsupportedIterableToArray(o, minLen) {
        var _context;
        if (!o)
          return;
        if (typeof o === "string")
          return arrayLikeToArray(o, minLen);
        var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return _Array$from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return arrayLikeToArray(o, minLen);
      }
      module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js
  var require_nonIterableRest = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js"(exports, module) {
      init_globals();
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js
  var require_slicedToArray = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js"(exports, module) {
      init_globals();
      var arrayWithHoles = require_arrayWithHoles();
      var iterableToArrayLimit = require_iterableToArrayLimit();
      var unsupportedIterableToArray = require_unsupportedIterableToArray();
      var nonIterableRest = require_nonIterableRest();
      function _slicedToArray(arr, i) {
        return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
      }
      module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js-pure/modules/es.regexp.flags.js
  var require_es_regexp_flags = __commonJS({
    "node_modules/core-js-pure/modules/es.regexp.flags.js"() {
      init_globals();
    }
  });

  // node_modules/core-js-pure/internals/regexp-flags.js
  var require_regexp_flags = __commonJS({
    "node_modules/core-js-pure/internals/regexp-flags.js"(exports, module) {
      init_globals();
      var anObject = require_an_object2();
      module.exports = function() {
        var that = anObject(this);
        var result = "";
        if (that.hasIndices)
          result += "d";
        if (that.global)
          result += "g";
        if (that.ignoreCase)
          result += "i";
        if (that.multiline)
          result += "m";
        if (that.dotAll)
          result += "s";
        if (that.unicode)
          result += "u";
        if (that.sticky)
          result += "y";
        return result;
      };
    }
  });

  // node_modules/core-js-pure/internals/regexp-get-flags.js
  var require_regexp_get_flags = __commonJS({
    "node_modules/core-js-pure/internals/regexp-get-flags.js"(exports, module) {
      init_globals();
      var call = require_function_call();
      var hasOwn = require_has_own_property();
      var isPrototypeOf = require_object_is_prototype_of();
      var regExpFlags = require_regexp_flags();
      var RegExpPrototype = RegExp.prototype;
      module.exports = function(R) {
        var flags = R.flags;
        return flags === void 0 && !("flags" in RegExpPrototype) && !hasOwn(R, "flags") && isPrototypeOf(RegExpPrototype, R) ? call(regExpFlags, R) : flags;
      };
    }
  });

  // node_modules/core-js-pure/es/regexp/flags.js
  var require_flags = __commonJS({
    "node_modules/core-js-pure/es/regexp/flags.js"(exports, module) {
      init_globals();
      require_es_regexp_flags();
      var getRegExpFlags = require_regexp_get_flags();
      module.exports = getRegExpFlags;
    }
  });

  // node_modules/core-js-pure/es/instance/flags.js
  var require_flags2 = __commonJS({
    "node_modules/core-js-pure/es/instance/flags.js"(exports, module) {
      init_globals();
      var isPrototypeOf = require_object_is_prototype_of();
      var flags = require_flags();
      var RegExpPrototype = RegExp.prototype;
      module.exports = function(it) {
        return it === RegExpPrototype || isPrototypeOf(RegExpPrototype, it) ? flags(it) : it.flags;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/flags.js
  var require_flags3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/flags.js"(exports, module) {
      init_globals();
      var parent = require_flags2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/flags.js
  var require_flags4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/flags.js"(exports, module) {
      init_globals();
      module.exports = require_flags3();
    }
  });

  // node_modules/core-js-pure/internals/delete-property-or-throw.js
  var require_delete_property_or_throw = __commonJS({
    "node_modules/core-js-pure/internals/delete-property-or-throw.js"(exports, module) {
      init_globals();
      var tryToString = require_try_to_string();
      var $TypeError = TypeError;
      module.exports = function(O, P) {
        if (!delete O[P])
          throw $TypeError("Cannot delete property " + tryToString(P) + " of " + tryToString(O));
      };
    }
  });

  // node_modules/core-js-pure/internals/array-sort.js
  var require_array_sort = __commonJS({
    "node_modules/core-js-pure/internals/array-sort.js"(exports, module) {
      init_globals();
      var arraySlice = require_array_slice_simple();
      var floor = Math.floor;
      var mergeSort = function(array, comparefn) {
        var length = array.length;
        var middle = floor(length / 2);
        return length < 8 ? insertionSort(array, comparefn) : merge(
          array,
          mergeSort(arraySlice(array, 0, middle), comparefn),
          mergeSort(arraySlice(array, middle), comparefn),
          comparefn
        );
      };
      var insertionSort = function(array, comparefn) {
        var length = array.length;
        var i = 1;
        var element, j;
        while (i < length) {
          j = i;
          element = array[i];
          while (j && comparefn(array[j - 1], element) > 0) {
            array[j] = array[--j];
          }
          if (j !== i++)
            array[j] = element;
        }
        return array;
      };
      var merge = function(array, left, right, comparefn) {
        var llength = left.length;
        var rlength = right.length;
        var lindex = 0;
        var rindex = 0;
        while (lindex < llength || rindex < rlength) {
          array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
        }
        return array;
      };
      module.exports = mergeSort;
    }
  });

  // node_modules/core-js-pure/internals/array-method-is-strict.js
  var require_array_method_is_strict = __commonJS({
    "node_modules/core-js-pure/internals/array-method-is-strict.js"(exports, module) {
      init_globals();
      var fails = require_fails2();
      module.exports = function(METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function() {
          method.call(null, argument || function() {
            return 1;
          }, 1);
        });
      };
    }
  });

  // node_modules/core-js-pure/internals/engine-ff-version.js
  var require_engine_ff_version = __commonJS({
    "node_modules/core-js-pure/internals/engine-ff-version.js"(exports, module) {
      init_globals();
      var userAgent = require_engine_user_agent();
      var firefox = userAgent.match(/firefox\/(\d+)/i);
      module.exports = !!firefox && +firefox[1];
    }
  });

  // node_modules/core-js-pure/internals/engine-is-ie-or-edge.js
  var require_engine_is_ie_or_edge = __commonJS({
    "node_modules/core-js-pure/internals/engine-is-ie-or-edge.js"(exports, module) {
      init_globals();
      var UA = require_engine_user_agent();
      module.exports = /MSIE|Trident/.test(UA);
    }
  });

  // node_modules/core-js-pure/internals/engine-webkit-version.js
  var require_engine_webkit_version = __commonJS({
    "node_modules/core-js-pure/internals/engine-webkit-version.js"(exports, module) {
      init_globals();
      var userAgent = require_engine_user_agent();
      var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
      module.exports = !!webkit && +webkit[1];
    }
  });

  // node_modules/core-js-pure/modules/es.array.sort.js
  var require_es_array_sort = __commonJS({
    "node_modules/core-js-pure/modules/es.array.sort.js"() {
      init_globals();
      var $2 = require_export2();
      var uncurryThis = require_function_uncurry_this();
      var aCallable = require_a_callable();
      var toObject = require_to_object2();
      var lengthOfArrayLike = require_length_of_array_like();
      var deletePropertyOrThrow = require_delete_property_or_throw();
      var toString = require_to_string();
      var fails = require_fails2();
      var internalSort = require_array_sort();
      var arrayMethodIsStrict = require_array_method_is_strict();
      var FF = require_engine_ff_version();
      var IE_OR_EDGE = require_engine_is_ie_or_edge();
      var V8 = require_engine_v8_version();
      var WEBKIT = require_engine_webkit_version();
      var test = [];
      var un$Sort = uncurryThis(test.sort);
      var push = uncurryThis(test.push);
      var FAILS_ON_UNDEFINED = fails(function() {
        test.sort(void 0);
      });
      var FAILS_ON_NULL = fails(function() {
        test.sort(null);
      });
      var STRICT_METHOD = arrayMethodIsStrict("sort");
      var STABLE_SORT = !fails(function() {
        if (V8)
          return V8 < 70;
        if (FF && FF > 3)
          return;
        if (IE_OR_EDGE)
          return true;
        if (WEBKIT)
          return WEBKIT < 603;
        var result = "";
        var code2, chr, value, index;
        for (code2 = 65; code2 < 76; code2++) {
          chr = String.fromCharCode(code2);
          switch (code2) {
            case 66:
            case 69:
            case 70:
            case 72:
              value = 3;
              break;
            case 68:
            case 71:
              value = 4;
              break;
            default:
              value = 2;
          }
          for (index = 0; index < 47; index++) {
            test.push({ k: chr + index, v: value });
          }
        }
        test.sort(function(a, b) {
          return b.v - a.v;
        });
        for (index = 0; index < test.length; index++) {
          chr = test[index].k.charAt(0);
          if (result.charAt(result.length - 1) !== chr)
            result += chr;
        }
        return result !== "DGBEFHACIJK";
      });
      var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
      var getSortCompare = function(comparefn) {
        return function(x, y) {
          if (y === void 0)
            return -1;
          if (x === void 0)
            return 1;
          if (comparefn !== void 0)
            return +comparefn(x, y) || 0;
          return toString(x) > toString(y) ? 1 : -1;
        };
      };
      $2({ target: "Array", proto: true, forced: FORCED }, {
        sort: function sort(comparefn) {
          if (comparefn !== void 0)
            aCallable(comparefn);
          var array = toObject(this);
          if (STABLE_SORT)
            return comparefn === void 0 ? un$Sort(array) : un$Sort(array, comparefn);
          var items = [];
          var arrayLength = lengthOfArrayLike(array);
          var itemsLength, index;
          for (index = 0; index < arrayLength; index++) {
            if (index in array)
              push(items, array[index]);
          }
          internalSort(items, getSortCompare(comparefn));
          itemsLength = items.length;
          index = 0;
          while (index < itemsLength)
            array[index] = items[index++];
          while (index < arrayLength)
            deletePropertyOrThrow(array, index++);
          return array;
        }
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/sort.js
  var require_sort = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/sort.js"(exports, module) {
      init_globals();
      require_es_array_sort();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").sort;
    }
  });

  // node_modules/core-js-pure/es/instance/sort.js
  var require_sort2 = __commonJS({
    "node_modules/core-js-pure/es/instance/sort.js"(exports, module) {
      init_globals();
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_sort();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.sort;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.sort ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/sort.js
  var require_sort3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/sort.js"(exports, module) {
      init_globals();
      var parent = require_sort2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js
  var require_sort4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js"(exports, module) {
      init_globals();
      module.exports = require_sort3();
    }
  });

  // node_modules/core-js-pure/internals/whitespaces.js
  var require_whitespaces = __commonJS({
    "node_modules/core-js-pure/internals/whitespaces.js"(exports, module) {
      init_globals();
      module.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
    }
  });

  // node_modules/core-js-pure/internals/string-trim.js
  var require_string_trim = __commonJS({
    "node_modules/core-js-pure/internals/string-trim.js"(exports, module) {
      init_globals();
      var uncurryThis = require_function_uncurry_this();
      var requireObjectCoercible = require_require_object_coercible();
      var toString = require_to_string();
      var whitespaces = require_whitespaces();
      var replace = uncurryThis("".replace);
      var whitespace = "[" + whitespaces + "]";
      var ltrim = RegExp("^" + whitespace + whitespace + "*");
      var rtrim = RegExp(whitespace + whitespace + "*$");
      var createMethod = function(TYPE) {
        return function($this) {
          var string = toString(requireObjectCoercible($this));
          if (TYPE & 1)
            string = replace(string, ltrim, "");
          if (TYPE & 2)
            string = replace(string, rtrim, "");
          return string;
        };
      };
      module.exports = {
        start: createMethod(1),
        end: createMethod(2),
        trim: createMethod(3)
      };
    }
  });

  // node_modules/core-js-pure/internals/number-parse-int.js
  var require_number_parse_int = __commonJS({
    "node_modules/core-js-pure/internals/number-parse-int.js"(exports, module) {
      init_globals();
      var global2 = require_global2();
      var fails = require_fails2();
      var uncurryThis = require_function_uncurry_this();
      var toString = require_to_string();
      var trim = require_string_trim().trim;
      var whitespaces = require_whitespaces();
      var $parseInt = global2.parseInt;
      var Symbol2 = global2.Symbol;
      var ITERATOR = Symbol2 && Symbol2.iterator;
      var hex = /^[+-]?0x/i;
      var exec = uncurryThis(hex.exec);
      var FORCED = $parseInt(whitespaces + "08") !== 8 || $parseInt(whitespaces + "0x16") !== 22 || ITERATOR && !fails(function() {
        $parseInt(Object(ITERATOR));
      });
      module.exports = FORCED ? function parseInt2(string, radix) {
        var S = trim(toString(string));
        return $parseInt(S, radix >>> 0 || (exec(hex, S) ? 16 : 10));
      } : $parseInt;
    }
  });

  // node_modules/core-js-pure/modules/es.parse-int.js
  var require_es_parse_int = __commonJS({
    "node_modules/core-js-pure/modules/es.parse-int.js"() {
      init_globals();
      var $2 = require_export2();
      var $parseInt = require_number_parse_int();
      $2({ global: true, forced: parseInt != $parseInt }, {
        parseInt: $parseInt
      });
    }
  });

  // node_modules/core-js-pure/es/parse-int.js
  var require_parse_int = __commonJS({
    "node_modules/core-js-pure/es/parse-int.js"(exports, module) {
      init_globals();
      require_es_parse_int();
      var path = require_path();
      module.exports = path.parseInt;
    }
  });

  // node_modules/core-js-pure/stable/parse-int.js
  var require_parse_int2 = __commonJS({
    "node_modules/core-js-pure/stable/parse-int.js"(exports, module) {
      init_globals();
      var parent = require_parse_int();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js
  var require_parse_int3 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js"(exports, module) {
      init_globals();
      module.exports = require_parse_int2();
    }
  });

  // node_modules/core-js-pure/modules/es.array.index-of.js
  var require_es_array_index_of = __commonJS({
    "node_modules/core-js-pure/modules/es.array.index-of.js"() {
      init_globals();
      var $2 = require_export2();
      var uncurryThis = require_function_uncurry_this();
      var $IndexOf = require_array_includes2().indexOf;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var un$IndexOf = uncurryThis([].indexOf);
      var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
      var STRICT_METHOD = arrayMethodIsStrict("indexOf");
      $2({ target: "Array", proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD }, {
        indexOf: function indexOf(searchElement) {
          var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
          return NEGATIVE_ZERO ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
        }
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/index-of.js
  var require_index_of = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/index-of.js"(exports, module) {
      init_globals();
      require_es_array_index_of();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").indexOf;
    }
  });

  // node_modules/core-js-pure/es/instance/index-of.js
  var require_index_of2 = __commonJS({
    "node_modules/core-js-pure/es/instance/index-of.js"(exports, module) {
      init_globals();
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_index_of();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.indexOf;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.indexOf ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/index-of.js
  var require_index_of3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/index-of.js"(exports, module) {
      init_globals();
      var parent = require_index_of2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js
  var require_index_of4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js"(exports, module) {
      init_globals();
      module.exports = require_index_of3();
    }
  });

  // node_modules/core-js-pure/internals/array-for-each.js
  var require_array_for_each = __commonJS({
    "node_modules/core-js-pure/internals/array-for-each.js"(exports, module) {
      init_globals();
      var $forEach = require_array_iteration().forEach;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var STRICT_METHOD = arrayMethodIsStrict("forEach");
      module.exports = !STRICT_METHOD ? function forEach(callbackfn) {
        return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      } : [].forEach;
    }
  });

  // node_modules/core-js-pure/modules/es.array.for-each.js
  var require_es_array_for_each = __commonJS({
    "node_modules/core-js-pure/modules/es.array.for-each.js"() {
      init_globals();
      var $2 = require_export2();
      var forEach = require_array_for_each();
      $2({ target: "Array", proto: true, forced: [].forEach != forEach }, {
        forEach
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/for-each.js
  var require_for_each = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/for-each.js"(exports, module) {
      init_globals();
      require_es_array_for_each();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").forEach;
    }
  });

  // node_modules/core-js-pure/stable/array/virtual/for-each.js
  var require_for_each2 = __commonJS({
    "node_modules/core-js-pure/stable/array/virtual/for-each.js"(exports, module) {
      init_globals();
      var parent = require_for_each();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/stable/instance/for-each.js
  var require_for_each3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/for-each.js"(exports, module) {
      init_globals();
      require_web_dom_collections_iterator();
      var classof = require_classof2();
      var hasOwn = require_has_own_property();
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_for_each2();
      var ArrayPrototype = Array.prototype;
      var DOMIterables = {
        DOMTokenList: true,
        NodeList: true
      };
      module.exports = function(it) {
        var own = it.forEach;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.forEach || hasOwn(DOMIterables, classof(it)) ? method : own;
      };
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js
  var require_for_each4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js"(exports, module) {
      init_globals();
      module.exports = require_for_each3();
    }
  });

  // node_modules/core-js-pure/modules/es.object.create.js
  var require_es_object_create = __commonJS({
    "node_modules/core-js-pure/modules/es.object.create.js"() {
      init_globals();
      var $2 = require_export2();
      var DESCRIPTORS = require_descriptors2();
      var create = require_object_create2();
      $2({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
        create
      });
    }
  });

  // node_modules/core-js-pure/es/object/create.js
  var require_create = __commonJS({
    "node_modules/core-js-pure/es/object/create.js"(exports, module) {
      init_globals();
      require_es_object_create();
      var path = require_path();
      var Object2 = path.Object;
      module.exports = function create(P, D) {
        return Object2.create(P, D);
      };
    }
  });

  // node_modules/core-js-pure/stable/object/create.js
  var require_create2 = __commonJS({
    "node_modules/core-js-pure/stable/object/create.js"(exports, module) {
      init_globals();
      var parent = require_create();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js
  var require_create3 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js"(exports, module) {
      init_globals();
      module.exports = require_create2();
    }
  });

  // node_modules/core-js-pure/es/array/virtual/concat.js
  var require_concat = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/concat.js"(exports, module) {
      init_globals();
      require_es_array_concat();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").concat;
    }
  });

  // node_modules/core-js-pure/es/instance/concat.js
  var require_concat2 = __commonJS({
    "node_modules/core-js-pure/es/instance/concat.js"(exports, module) {
      init_globals();
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_concat();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.concat;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.concat ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/concat.js
  var require_concat3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/concat.js"(exports, module) {
      init_globals();
      var parent = require_concat2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js
  var require_concat4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js"(exports, module) {
      init_globals();
      module.exports = require_concat3();
    }
  });

  // node_modules/xregexp/lib/xregexp.js
  var require_xregexp = __commonJS({
    "node_modules/xregexp/lib/xregexp.js"(exports, module) {
      init_globals();
      var _sliceInstanceProperty2 = require_slice4();
      var _Array$from = require_from5();
      var _Symbol = require_symbol5();
      var _getIteratorMethod = require_get_iterator_method7();
      var _Array$isArray = require_is_array5();
      var _Object$defineProperty = require_define_property3();
      var _interopRequireDefault = require_interopRequireDefault();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
      var _flags = _interopRequireDefault(require_flags4());
      var _sort = _interopRequireDefault(require_sort4());
      var _slice = _interopRequireDefault(require_slice4());
      var _parseInt2 = _interopRequireDefault(require_parse_int3());
      var _indexOf = _interopRequireDefault(require_index_of4());
      var _forEach = _interopRequireDefault(require_for_each4());
      var _create = _interopRequireDefault(require_create3());
      var _concat = _interopRequireDefault(require_concat4());
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
        if (!it) {
          if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it)
              o = it;
            var i = 0;
            var F = function F2() {
            };
            return { s: F, n: function n() {
              if (i >= o.length)
                return { done: true };
              return { done: false, value: o[i++] };
            }, e: function e(_e) {
              throw _e;
            }, f: F };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return { s: function s() {
          it = it.call(o);
        }, n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        }, e: function e(_e2) {
          didErr = true;
          err = _e2;
        }, f: function f() {
          try {
            if (!normalCompletion && it["return"] != null)
              it["return"]();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _unsupportedIterableToArray(o, minLen) {
        var _context9;
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = _sliceInstanceProperty2(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return _Array$from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      var REGEX_DATA = "xregexp";
      var features = {
        astral: false,
        namespacing: true
      };
      var fixed = {};
      var regexCache = {};
      var patternCache = {};
      var tokens = [];
      var defaultScope = "default";
      var classScope = "class";
      var nativeTokens = {
        "default": /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
        "class": /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
      };
      var replacementToken = /\$(?:\{([^\}]+)\}|<([^>]+)>|(\d\d?|[\s\S]?))/g;
      var correctExecNpcg = /()??/.exec("")[1] === void 0;
      var hasFlagsProp = (0, _flags["default"])(/x/) !== void 0;
      function hasNativeFlag(flag) {
        var isSupported = true;
        try {
          new RegExp("", flag);
          if (flag === "y") {
            var gy = function() {
              return "gy";
            }();
            var incompleteY = ".a".replace(new RegExp("a", gy), ".") === "..";
            if (incompleteY) {
              isSupported = false;
            }
          }
        } catch (exception) {
          isSupported = false;
        }
        return isSupported;
      }
      var hasNativeD = hasNativeFlag("d");
      var hasNativeS = hasNativeFlag("s");
      var hasNativeU = hasNativeFlag("u");
      var hasNativeY = hasNativeFlag("y");
      var registeredFlags = {
        d: hasNativeD,
        g: true,
        i: true,
        m: true,
        s: hasNativeS,
        u: hasNativeU,
        y: hasNativeY
      };
      var nonnativeFlags = hasNativeS ? /[^dgimsuy]+/g : /[^dgimuy]+/g;
      function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
        var _context;
        regex[REGEX_DATA] = {
          captureNames
        };
        if (isInternalOnly) {
          return regex;
        }
        if (regex.__proto__) {
          regex.__proto__ = XRegExp.prototype;
        } else {
          for (var p in XRegExp.prototype) {
            regex[p] = XRegExp.prototype[p];
          }
        }
        regex[REGEX_DATA].source = xSource;
        regex[REGEX_DATA].flags = xFlags ? (0, _sort["default"])(_context = xFlags.split("")).call(_context).join("") : xFlags;
        return regex;
      }
      function clipDuplicates(str) {
        return str.replace(/([\s\S])(?=[\s\S]*\1)/g, "");
      }
      function copyRegex(regex, options2) {
        var _context2;
        if (!XRegExp.isRegExp(regex)) {
          throw new TypeError("Type RegExp expected");
        }
        var xData = regex[REGEX_DATA] || {};
        var flags = getNativeFlags(regex);
        var flagsToAdd = "";
        var flagsToRemove = "";
        var xregexpSource = null;
        var xregexpFlags = null;
        options2 = options2 || {};
        if (options2.removeG) {
          flagsToRemove += "g";
        }
        if (options2.removeY) {
          flagsToRemove += "y";
        }
        if (flagsToRemove) {
          flags = flags.replace(new RegExp("[".concat(flagsToRemove, "]+"), "g"), "");
        }
        if (options2.addG) {
          flagsToAdd += "g";
        }
        if (options2.addY) {
          flagsToAdd += "y";
        }
        if (flagsToAdd) {
          flags = clipDuplicates(flags + flagsToAdd);
        }
        if (!options2.isInternalOnly) {
          if (xData.source !== void 0) {
            xregexpSource = xData.source;
          }
          if ((0, _flags["default"])(xData) != null) {
            xregexpFlags = flagsToAdd ? clipDuplicates((0, _flags["default"])(xData) + flagsToAdd) : (0, _flags["default"])(xData);
          }
        }
        regex = augment(new RegExp(options2.source || regex.source, flags), hasNamedCapture(regex) ? (0, _slice["default"])(_context2 = xData.captureNames).call(_context2, 0) : null, xregexpSource, xregexpFlags, options2.isInternalOnly);
        return regex;
      }
      function dec(hex2) {
        return (0, _parseInt2["default"])(hex2, 16);
      }
      function getContextualTokenSeparator(match, scope, flags) {
        var matchEndPos = match.index + match[0].length;
        var precedingChar = match.input[match.index - 1];
        var followingChar = match.input[matchEndPos];
        if (/^[()|]$/.test(precedingChar) || /^[()|]$/.test(followingChar) || match.index === 0 || matchEndPos === match.input.length || /\(\?(?:[:=!]|<[=!])$/.test(match.input.substring(match.index - 4, match.index)) || isQuantifierNext(match.input, matchEndPos, flags)) {
          return "";
        }
        return "(?:)";
      }
      function getNativeFlags(regex) {
        return hasFlagsProp ? (0, _flags["default"])(regex) : /\/([a-z]*)$/i.exec(RegExp.prototype.toString.call(regex))[1];
      }
      function hasNamedCapture(regex) {
        return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
      }
      function hex(dec2) {
        return (0, _parseInt2["default"])(dec2, 10).toString(16);
      }
      function isQuantifierNext(pattern, pos, flags) {
        var inlineCommentPattern = "\\(\\?#[^)]*\\)";
        var lineCommentPattern = "#[^#\\n]*";
        var quantifierPattern = "[?*+]|{\\d+(?:,\\d*)?}";
        var regex = (0, _indexOf["default"])(flags).call(flags, "x") !== -1 ? /^(?:\s|#[^#\n]*|\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/ : /^(?:\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/;
        return regex.test((0, _slice["default"])(pattern).call(pattern, pos));
      }
      function isType(value, type2) {
        return Object.prototype.toString.call(value) === "[object ".concat(type2, "]");
      }
      function nullThrows(value) {
        if (value == null) {
          throw new TypeError("Cannot convert null or undefined to object");
        }
        return value;
      }
      function pad4(str) {
        while (str.length < 4) {
          str = "0".concat(str);
        }
        return str;
      }
      function prepareFlags(pattern, flags) {
        if (clipDuplicates(flags) !== flags) {
          throw new SyntaxError("Invalid duplicate regex flag ".concat(flags));
        }
        pattern = pattern.replace(/^\(\?([\w$]+)\)/, function($0, $1) {
          if (/[dgy]/.test($1)) {
            throw new SyntaxError("Cannot use flags dgy in mode modifier ".concat($0));
          }
          flags = clipDuplicates(flags + $1);
          return "";
        });
        var _iterator = _createForOfIteratorHelper(flags), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var flag = _step.value;
            if (!registeredFlags[flag]) {
              throw new SyntaxError("Unknown regex flag ".concat(flag));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return {
          pattern,
          flags
        };
      }
      function prepareOptions(value) {
        var options2 = {};
        if (isType(value, "String")) {
          (0, _forEach["default"])(XRegExp).call(XRegExp, value, /[^\s,]+/, function(match) {
            options2[match] = true;
          });
          return options2;
        }
        return value;
      }
      function registerFlag(flag) {
        if (!/^[\w$]$/.test(flag)) {
          throw new Error("Flag must be a single character A-Za-z0-9_$");
        }
        registeredFlags[flag] = true;
      }
      function runTokens(pattern, flags, pos, scope, context) {
        var i = tokens.length;
        var leadChar = pattern[pos];
        var result = null;
        var match;
        var t;
        while (i--) {
          t = tokens[i];
          if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== "all" || t.flag && !((0, _indexOf["default"])(flags).call(flags, t.flag) !== -1)) {
            continue;
          }
          match = XRegExp.exec(pattern, t.regex, pos, "sticky");
          if (match) {
            result = {
              matchLength: match[0].length,
              output: t.handler.call(context, match, scope, flags),
              reparse: t.reparse
            };
            break;
          }
        }
        return result;
      }
      function setAstral(on) {
        features.astral = on;
      }
      function setNamespacing(on) {
        features.namespacing = on;
      }
      function XRegExp(pattern, flags) {
        if (XRegExp.isRegExp(pattern)) {
          if (flags !== void 0) {
            throw new TypeError("Cannot supply flags when copying a RegExp");
          }
          return copyRegex(pattern);
        }
        pattern = pattern === void 0 ? "" : String(pattern);
        flags = flags === void 0 ? "" : String(flags);
        if (XRegExp.isInstalled("astral") && !((0, _indexOf["default"])(flags).call(flags, "A") !== -1)) {
          flags += "A";
        }
        if (!patternCache[pattern]) {
          patternCache[pattern] = {};
        }
        if (!patternCache[pattern][flags]) {
          var context = {
            hasNamedCapture: false,
            captureNames: []
          };
          var scope = defaultScope;
          var output = "";
          var pos = 0;
          var result;
          var applied = prepareFlags(pattern, flags);
          var appliedPattern = applied.pattern;
          var appliedFlags = (0, _flags["default"])(applied);
          while (pos < appliedPattern.length) {
            do {
              result = runTokens(appliedPattern, appliedFlags, pos, scope, context);
              if (result && result.reparse) {
                appliedPattern = (0, _slice["default"])(appliedPattern).call(appliedPattern, 0, pos) + result.output + (0, _slice["default"])(appliedPattern).call(appliedPattern, pos + result.matchLength);
              }
            } while (result && result.reparse);
            if (result) {
              output += result.output;
              pos += result.matchLength || 1;
            } else {
              var _XRegExp$exec = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, "sticky"), _XRegExp$exec2 = (0, _slicedToArray2["default"])(_XRegExp$exec, 1), token = _XRegExp$exec2[0];
              output += token;
              pos += token.length;
              if (token === "[" && scope === defaultScope) {
                scope = classScope;
              } else if (token === "]" && scope === classScope) {
                scope = defaultScope;
              }
            }
          }
          patternCache[pattern][flags] = {
            pattern: output.replace(/(?:\(\?:\))+/g, "(?:)"),
            flags: appliedFlags.replace(nonnativeFlags, ""),
            captures: context.hasNamedCapture ? context.captureNames : null
          };
        }
        var generated = patternCache[pattern][flags];
        return augment(new RegExp(generated.pattern, (0, _flags["default"])(generated)), generated.captures, pattern, flags);
      }
      XRegExp.prototype = /(?:)/;
      XRegExp.version = "5.1.1";
      XRegExp._clipDuplicates = clipDuplicates;
      XRegExp._hasNativeFlag = hasNativeFlag;
      XRegExp._dec = dec;
      XRegExp._hex = hex;
      XRegExp._pad4 = pad4;
      XRegExp.addToken = function(regex, handler, options2) {
        options2 = options2 || {};
        var _options = options2, optionalFlags = _options.optionalFlags;
        if (options2.flag) {
          registerFlag(options2.flag);
        }
        if (optionalFlags) {
          optionalFlags = optionalFlags.split("");
          var _iterator2 = _createForOfIteratorHelper(optionalFlags), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var flag = _step2.value;
              registerFlag(flag);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        tokens.push({
          regex: copyRegex(regex, {
            addG: true,
            addY: hasNativeY,
            isInternalOnly: true
          }),
          handler,
          scope: options2.scope || defaultScope,
          flag: options2.flag,
          reparse: options2.reparse,
          leadChar: options2.leadChar
        });
        XRegExp.cache.flush("patterns");
      };
      XRegExp.cache = function(pattern, flags) {
        if (!regexCache[pattern]) {
          regexCache[pattern] = {};
        }
        return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));
      };
      XRegExp.cache.flush = function(cacheName) {
        if (cacheName === "patterns") {
          patternCache = {};
        } else {
          regexCache = {};
        }
      };
      XRegExp.escape = function(str) {
        return String(nullThrows(str)).replace(/[\\\[\]{}()*+?.^$|]/g, "\\$&").replace(/[\s#\-,]/g, function(match) {
          return "\\u".concat(pad4(hex(match.charCodeAt(0))));
        });
      };
      XRegExp.exec = function(str, regex, pos, sticky) {
        var cacheKey = "g";
        var addY = false;
        var fakeY = false;
        var match;
        addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);
        if (addY) {
          cacheKey += "y";
        } else if (sticky) {
          fakeY = true;
          cacheKey += "FakeY";
        }
        regex[REGEX_DATA] = regex[REGEX_DATA] || {};
        var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
          addG: true,
          addY,
          source: fakeY ? "".concat(regex.source, "|()") : void 0,
          removeY: sticky === false,
          isInternalOnly: true
        }));
        pos = pos || 0;
        r2.lastIndex = pos;
        match = fixed.exec.call(r2, str);
        if (fakeY && match && match.pop() === "") {
          match = null;
        }
        if (regex.global) {
          regex.lastIndex = match ? r2.lastIndex : 0;
        }
        return match;
      };
      XRegExp.forEach = function(str, regex, callback) {
        var pos = 0;
        var i = -1;
        var match;
        while (match = XRegExp.exec(str, regex, pos)) {
          callback(match, ++i, str, regex);
          pos = match.index + (match[0].length || 1);
        }
      };
      XRegExp.globalize = function(regex) {
        return copyRegex(regex, {
          addG: true
        });
      };
      XRegExp.install = function(options2) {
        options2 = prepareOptions(options2);
        if (!features.astral && options2.astral) {
          setAstral(true);
        }
        if (!features.namespacing && options2.namespacing) {
          setNamespacing(true);
        }
      };
      XRegExp.isInstalled = function(feature) {
        return !!features[feature];
      };
      XRegExp.isRegExp = function(value) {
        return Object.prototype.toString.call(value) === "[object RegExp]";
      };
      XRegExp.match = function(str, regex, scope) {
        var global2 = regex.global && scope !== "one" || scope === "all";
        var cacheKey = (global2 ? "g" : "") + (regex.sticky ? "y" : "") || "noGY";
        regex[REGEX_DATA] = regex[REGEX_DATA] || {};
        var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
          addG: !!global2,
          removeG: scope === "one",
          isInternalOnly: true
        }));
        var result = String(nullThrows(str)).match(r2);
        if (regex.global) {
          regex.lastIndex = scope === "one" && result ? result.index + result[0].length : 0;
        }
        return global2 ? result || [] : result && result[0];
      };
      XRegExp.matchChain = function(str, chain) {
        return function recurseChain(values, level) {
          var item = chain[level].regex ? chain[level] : {
            regex: chain[level]
          };
          var matches = [];
          function addMatch(match) {
            if (item.backref) {
              var ERR_UNDEFINED_GROUP = "Backreference to undefined group: ".concat(item.backref);
              var isNamedBackref = isNaN(item.backref);
              if (isNamedBackref && XRegExp.isInstalled("namespacing")) {
                if (!(match.groups && item.backref in match.groups)) {
                  throw new ReferenceError(ERR_UNDEFINED_GROUP);
                }
              } else if (!match.hasOwnProperty(item.backref)) {
                throw new ReferenceError(ERR_UNDEFINED_GROUP);
              }
              var backrefValue = isNamedBackref && XRegExp.isInstalled("namespacing") ? match.groups[item.backref] : match[item.backref];
              matches.push(backrefValue || "");
            } else {
              matches.push(match[0]);
            }
          }
          var _iterator3 = _createForOfIteratorHelper(values), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var value = _step3.value;
              (0, _forEach["default"])(XRegExp).call(XRegExp, value, item.regex, addMatch);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);
        }([str], 0);
      };
      XRegExp.replace = function(str, search, replacement, scope) {
        var isRegex = XRegExp.isRegExp(search);
        var global2 = search.global && scope !== "one" || scope === "all";
        var cacheKey = (global2 ? "g" : "") + (search.sticky ? "y" : "") || "noGY";
        var s2 = search;
        if (isRegex) {
          search[REGEX_DATA] = search[REGEX_DATA] || {};
          s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {
            addG: !!global2,
            removeG: scope === "one",
            isInternalOnly: true
          }));
        } else if (global2) {
          s2 = new RegExp(XRegExp.escape(String(search)), "g");
        }
        var result = fixed.replace.call(nullThrows(str), s2, replacement);
        if (isRegex && search.global) {
          search.lastIndex = 0;
        }
        return result;
      };
      XRegExp.replaceEach = function(str, replacements) {
        var _iterator4 = _createForOfIteratorHelper(replacements), _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
            var r = _step4.value;
            str = XRegExp.replace(str, r[0], r[1], r[2]);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        return str;
      };
      XRegExp.split = function(str, separator, limit) {
        return fixed.split.call(nullThrows(str), separator, limit);
      };
      XRegExp.test = function(str, regex, pos, sticky) {
        return !!XRegExp.exec(str, regex, pos, sticky);
      };
      XRegExp.uninstall = function(options2) {
        options2 = prepareOptions(options2);
        if (features.astral && options2.astral) {
          setAstral(false);
        }
        if (features.namespacing && options2.namespacing) {
          setNamespacing(false);
        }
      };
      XRegExp.union = function(patterns, flags, options2) {
        options2 = options2 || {};
        var conjunction = options2.conjunction || "or";
        var numCaptures = 0;
        var numPriorCaptures;
        var captureNames;
        function rewrite(match, paren, backref) {
          var name = captureNames[numCaptures - numPriorCaptures];
          if (paren) {
            ++numCaptures;
            if (name) {
              return "(?<".concat(name, ">");
            }
          } else if (backref) {
            return "\\".concat(+backref + numPriorCaptures);
          }
          return match;
        }
        if (!(isType(patterns, "Array") && patterns.length)) {
          throw new TypeError("Must provide a nonempty array of patterns to merge");
        }
        var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
        var output = [];
        var _iterator5 = _createForOfIteratorHelper(patterns), _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
            var pattern = _step5.value;
            if (XRegExp.isRegExp(pattern)) {
              numPriorCaptures = numCaptures;
              captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || [];
              output.push(XRegExp(pattern.source).source.replace(parts, rewrite));
            } else {
              output.push(XRegExp.escape(pattern));
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
        var separator = conjunction === "none" ? "" : "|";
        return XRegExp(output.join(separator), flags);
      };
      fixed.exec = function(str) {
        var origLastIndex = this.lastIndex;
        var match = RegExp.prototype.exec.apply(this, arguments);
        if (match) {
          if (!correctExecNpcg && match.length > 1 && (0, _indexOf["default"])(match).call(match, "") !== -1) {
            var _context3;
            var r2 = copyRegex(this, {
              removeG: true,
              isInternalOnly: true
            });
            (0, _slice["default"])(_context3 = String(str)).call(_context3, match.index).replace(r2, function() {
              var len = arguments.length;
              for (var i2 = 1; i2 < len - 2; ++i2) {
                if ((i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]) === void 0) {
                  match[i2] = void 0;
                }
              }
            });
          }
          if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
            var groupsObject = match;
            if (XRegExp.isInstalled("namespacing")) {
              match.groups = (0, _create["default"])(null);
              groupsObject = match.groups;
            }
            for (var i = 1; i < match.length; ++i) {
              var name = this[REGEX_DATA].captureNames[i - 1];
              if (name) {
                groupsObject[name] = match[i];
              }
            }
          } else if (!match.groups && XRegExp.isInstalled("namespacing")) {
            match.groups = void 0;
          }
          if (this.global && !match[0].length && this.lastIndex > match.index) {
            this.lastIndex = match.index;
          }
        }
        if (!this.global) {
          this.lastIndex = origLastIndex;
        }
        return match;
      };
      fixed.test = function(str) {
        return !!fixed.exec.call(this, str);
      };
      fixed.match = function(regex) {
        if (!XRegExp.isRegExp(regex)) {
          regex = new RegExp(regex);
        } else if (regex.global) {
          var result = String.prototype.match.apply(this, arguments);
          regex.lastIndex = 0;
          return result;
        }
        return fixed.exec.call(regex, nullThrows(this));
      };
      fixed.replace = function(search, replacement) {
        var isRegex = XRegExp.isRegExp(search);
        var origLastIndex;
        var captureNames;
        var result;
        if (isRegex) {
          if (search[REGEX_DATA]) {
            captureNames = search[REGEX_DATA].captureNames;
          }
          origLastIndex = search.lastIndex;
        } else {
          search += "";
        }
        if (isType(replacement, "Function")) {
          result = String(this).replace(search, function() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            if (captureNames) {
              var groupsObject;
              if (XRegExp.isInstalled("namespacing")) {
                groupsObject = (0, _create["default"])(null);
                args.push(groupsObject);
              } else {
                args[0] = new String(args[0]);
                groupsObject = args[0];
              }
              for (var i = 0; i < captureNames.length; ++i) {
                if (captureNames[i]) {
                  groupsObject[captureNames[i]] = args[i + 1];
                }
              }
            }
            return replacement.apply(void 0, args);
          });
        } else {
          result = String(nullThrows(this)).replace(search, function() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            return String(replacement).replace(replacementToken, replacer);
            function replacer($0, bracketed, angled, dollarToken) {
              bracketed = bracketed || angled;
              var numNonCaptureArgs = isType(args[args.length - 1], "Object") ? 4 : 3;
              var numCaptures = args.length - numNonCaptureArgs;
              if (bracketed) {
                if (/^\d+$/.test(bracketed)) {
                  var _n = +bracketed;
                  if (_n <= numCaptures) {
                    return args[_n] || "";
                  }
                }
                var n = captureNames ? (0, _indexOf["default"])(captureNames).call(captureNames, bracketed) : -1;
                if (n < 0) {
                  throw new SyntaxError("Backreference to undefined group ".concat($0));
                }
                return args[n + 1] || "";
              }
              if (dollarToken === "" || dollarToken === " ") {
                throw new SyntaxError("Invalid token ".concat($0));
              }
              if (dollarToken === "&" || +dollarToken === 0) {
                return args[0];
              }
              if (dollarToken === "$") {
                return "$";
              }
              if (dollarToken === "`") {
                var _context4;
                return (0, _slice["default"])(_context4 = args[args.length - 1]).call(_context4, 0, args[args.length - 2]);
              }
              if (dollarToken === "'") {
                var _context5;
                return (0, _slice["default"])(_context5 = args[args.length - 1]).call(_context5, args[args.length - 2] + args[0].length);
              }
              dollarToken = +dollarToken;
              if (!isNaN(dollarToken)) {
                if (dollarToken > numCaptures) {
                  throw new SyntaxError("Backreference to undefined group ".concat($0));
                }
                return args[dollarToken] || "";
              }
              throw new SyntaxError("Invalid token ".concat($0));
            }
          });
        }
        if (isRegex) {
          if (search.global) {
            search.lastIndex = 0;
          } else {
            search.lastIndex = origLastIndex;
          }
        }
        return result;
      };
      fixed.split = function(separator, limit) {
        if (!XRegExp.isRegExp(separator)) {
          return String.prototype.split.apply(this, arguments);
        }
        var str = String(this);
        var output = [];
        var origLastIndex = separator.lastIndex;
        var lastLastIndex = 0;
        var lastLength;
        limit = (limit === void 0 ? -1 : limit) >>> 0;
        (0, _forEach["default"])(XRegExp).call(XRegExp, str, separator, function(match) {
          if (match.index + match[0].length > lastLastIndex) {
            output.push((0, _slice["default"])(str).call(str, lastLastIndex, match.index));
            if (match.length > 1 && match.index < str.length) {
              Array.prototype.push.apply(output, (0, _slice["default"])(match).call(match, 1));
            }
            lastLength = match[0].length;
            lastLastIndex = match.index + lastLength;
          }
        });
        if (lastLastIndex === str.length) {
          if (!separator.test("") || lastLength) {
            output.push("");
          }
        } else {
          output.push((0, _slice["default"])(str).call(str, lastLastIndex));
        }
        separator.lastIndex = origLastIndex;
        return output.length > limit ? (0, _slice["default"])(output).call(output, 0, limit) : output;
      };
      XRegExp.addToken(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/, function(match, scope) {
        if (match[1] === "B" && scope === defaultScope) {
          return match[0];
        }
        throw new SyntaxError("Invalid escape ".concat(match[0]));
      }, {
        scope: "all",
        leadChar: "\\"
      });
      XRegExp.addToken(/\\u{([\dA-Fa-f]+)}/, function(match, scope, flags) {
        var code2 = dec(match[1]);
        if (code2 > 1114111) {
          throw new SyntaxError("Invalid Unicode code point ".concat(match[0]));
        }
        if (code2 <= 65535) {
          return "\\u".concat(pad4(hex(code2)));
        }
        if (hasNativeU && (0, _indexOf["default"])(flags).call(flags, "u") !== -1) {
          return match[0];
        }
        throw new SyntaxError("Cannot use Unicode code point above \\u{FFFF} without flag u");
      }, {
        scope: "all",
        leadChar: "\\"
      });
      XRegExp.addToken(/\(\?#[^)]*\)/, getContextualTokenSeparator, {
        leadChar: "("
      });
      XRegExp.addToken(/\s+|#[^\n]*\n?/, getContextualTokenSeparator, {
        flag: "x"
      });
      if (!hasNativeS) {
        XRegExp.addToken(/\./, function() {
          return "[\\s\\S]";
        }, {
          flag: "s",
          leadChar: "."
        });
      }
      XRegExp.addToken(/\\k<([^>]+)>/, function(match) {
        var _context6, _context7;
        var index = isNaN(match[1]) ? (0, _indexOf["default"])(_context6 = this.captureNames).call(_context6, match[1]) + 1 : +match[1];
        var endIndex = match.index + match[0].length;
        if (!index || index > this.captureNames.length) {
          throw new SyntaxError("Backreference to undefined group ".concat(match[0]));
        }
        return (0, _concat["default"])(_context7 = "\\".concat(index)).call(_context7, endIndex === match.input.length || isNaN(match.input[endIndex]) ? "" : "(?:)");
      }, {
        leadChar: "\\"
      });
      XRegExp.addToken(/\\(\d+)/, function(match, scope) {
        if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== "0") {
          throw new SyntaxError("Cannot use octal escape or backreference to undefined group ".concat(match[0]));
        }
        return match[0];
      }, {
        scope: "all",
        leadChar: "\\"
      });
      XRegExp.addToken(/\(\?P?<((?:[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])(?:[\$0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u07FD\u0800-\u082D\u0840-\u085B\u0860-\u086A\u0870-\u0887\u0889-\u088E\u0898-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3C-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1715\u171F-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B4C\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CD0-\u1CD2\u1CD4-\u1CFA\u1D00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA827\uA82C\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDD30-\uDD39\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF50\uDF70-\uDF85\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC46\uDC66-\uDC75\uDC7F-\uDCBA\uDCC2\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDC9-\uDDCC\uDDCE-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3B-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC5E-\uDC61\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF39\uDF40-\uDF46]|\uD806[\uDC00-\uDC3A\uDCA0-\uDCE9\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B-\uDD43\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDE1\uDDE3\uDDE4\uDE00-\uDE3E\uDE47\uDE50-\uDE99\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDE70-\uDEBE\uDEC0-\uDEC9\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFE4\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD837[\uDF00-\uDF1E]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD30-\uDD3D\uDD40-\uDD49\uDD4E\uDE90-\uDEAE\uDEC0-\uDEF9]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4B\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]|\uDB40[\uDD00-\uDDEF])*)>/, function(match) {
        var _context8;
        if (!XRegExp.isInstalled("namespacing") && (match[1] === "length" || match[1] === "__proto__")) {
          throw new SyntaxError("Cannot use reserved word as capture name ".concat(match[0]));
        }
        if ((0, _indexOf["default"])(_context8 = this.captureNames).call(_context8, match[1]) !== -1) {
          throw new SyntaxError("Cannot use same name for multiple groups ".concat(match[0]));
        }
        this.captureNames.push(match[1]);
        this.hasNamedCapture = true;
        return "(";
      }, {
        leadChar: "("
      });
      XRegExp.addToken(/\((?!\?)/, function(match, scope, flags) {
        if ((0, _indexOf["default"])(flags).call(flags, "n") !== -1) {
          return "(?:";
        }
        this.captureNames.push(null);
        return "(";
      }, {
        optionalFlags: "n",
        leadChar: "("
      });
      var _default = XRegExp;
      exports["default"] = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/core-js-pure/internals/array-reduce.js
  var require_array_reduce = __commonJS({
    "node_modules/core-js-pure/internals/array-reduce.js"(exports, module) {
      init_globals();
      var aCallable = require_a_callable();
      var toObject = require_to_object2();
      var IndexedObject = require_indexed_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var $TypeError = TypeError;
      var createMethod = function(IS_RIGHT) {
        return function(that, callbackfn, argumentsLength, memo) {
          aCallable(callbackfn);
          var O = toObject(that);
          var self2 = IndexedObject(O);
          var length = lengthOfArrayLike(O);
          var index = IS_RIGHT ? length - 1 : 0;
          var i = IS_RIGHT ? -1 : 1;
          if (argumentsLength < 2)
            while (true) {
              if (index in self2) {
                memo = self2[index];
                index += i;
                break;
              }
              index += i;
              if (IS_RIGHT ? index < 0 : length <= index) {
                throw $TypeError("Reduce of empty array with no initial value");
              }
            }
          for (; IS_RIGHT ? index >= 0 : length > index; index += i)
            if (index in self2) {
              memo = callbackfn(memo, self2[index], index, O);
            }
          return memo;
        };
      };
      module.exports = {
        left: createMethod(false),
        right: createMethod(true)
      };
    }
  });

  // node_modules/core-js-pure/internals/engine-is-node.js
  var require_engine_is_node = __commonJS({
    "node_modules/core-js-pure/internals/engine-is-node.js"(exports, module) {
      init_globals();
      var classof = require_classof_raw();
      var global2 = require_global2();
      module.exports = classof(global2.process) == "process";
    }
  });

  // node_modules/core-js-pure/modules/es.array.reduce.js
  var require_es_array_reduce = __commonJS({
    "node_modules/core-js-pure/modules/es.array.reduce.js"() {
      init_globals();
      var $2 = require_export2();
      var $reduce = require_array_reduce().left;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var CHROME_VERSION = require_engine_v8_version();
      var IS_NODE = require_engine_is_node();
      var STRICT_METHOD = arrayMethodIsStrict("reduce");
      var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
      $2({ target: "Array", proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {
        reduce: function reduce(callbackfn) {
          var length = arguments.length;
          return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/reduce.js
  var require_reduce = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/reduce.js"(exports, module) {
      init_globals();
      require_es_array_reduce();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").reduce;
    }
  });

  // node_modules/core-js-pure/es/instance/reduce.js
  var require_reduce2 = __commonJS({
    "node_modules/core-js-pure/es/instance/reduce.js"(exports, module) {
      init_globals();
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_reduce();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.reduce;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.reduce ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/reduce.js
  var require_reduce3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/reduce.js"(exports, module) {
      init_globals();
      var parent = require_reduce2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js
  var require_reduce4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js"(exports, module) {
      init_globals();
      module.exports = require_reduce3();
    }
  });

  // node_modules/core-js-pure/modules/es.array.map.js
  var require_es_array_map = __commonJS({
    "node_modules/core-js-pure/modules/es.array.map.js"() {
      init_globals();
      var $2 = require_export2();
      var $map = require_array_iteration().map;
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
      $2({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        map: function map(callbackfn) {
          return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/map.js
  var require_map = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/map.js"(exports, module) {
      init_globals();
      require_es_array_map();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").map;
    }
  });

  // node_modules/core-js-pure/es/instance/map.js
  var require_map2 = __commonJS({
    "node_modules/core-js-pure/es/instance/map.js"(exports, module) {
      init_globals();
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_map();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.map;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.map ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/map.js
  var require_map3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/map.js"(exports, module) {
      init_globals();
      var parent = require_map2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js
  var require_map4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js"(exports, module) {
      init_globals();
      module.exports = require_map3();
    }
  });

  // node_modules/xregexp/lib/addons/build.js
  var require_build = __commonJS({
    "node_modules/xregexp/lib/addons/build.js"(exports, module) {
      init_globals();
      var _Object$defineProperty = require_define_property3();
      var _interopRequireDefault = require_interopRequireDefault();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _reduce = _interopRequireDefault(require_reduce4());
      var _map = _interopRequireDefault(require_map4());
      var _indexOf = _interopRequireDefault(require_index_of4());
      var _concat = _interopRequireDefault(require_concat4());
      var _default = function _default2(XRegExp) {
        var REGEX_DATA = "xregexp";
        var subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
        var parts = XRegExp.union([/\({{([\w$]+)}}\)|{{([\w$]+)}}/, subParts], "g", {
          conjunction: "or"
        });
        function deanchor(pattern) {
          var leadingAnchor = /^(?:\(\?:\))*\^/;
          var trailingAnchor = /\$(?:\(\?:\))*$/;
          if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) && trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ""))) {
            return pattern.replace(leadingAnchor, "").replace(trailingAnchor, "");
          }
          return pattern;
        }
        function asXRegExp(value, addFlagX) {
          var flags = addFlagX ? "x" : "";
          return XRegExp.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? value : XRegExp(value.source, flags) : XRegExp(value, flags);
        }
        function interpolate(substitution) {
          return substitution instanceof RegExp ? substitution : XRegExp.escape(substitution);
        }
        function reduceToSubpatternsObject(subpatterns, interpolated, subpatternIndex) {
          subpatterns["subpattern".concat(subpatternIndex)] = interpolated;
          return subpatterns;
        }
        function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {
          var hasSubpattern = subpatternIndex < rawLiterals.length - 1;
          return raw + (hasSubpattern ? "{{subpattern".concat(subpatternIndex, "}}") : "");
        }
        XRegExp.tag = function(flags) {
          return function(literals) {
            var _context, _context2;
            for (var _len = arguments.length, substitutions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              substitutions[_key - 1] = arguments[_key];
            }
            var subpatterns = (0, _reduce["default"])(_context = (0, _map["default"])(substitutions).call(substitutions, interpolate)).call(_context, reduceToSubpatternsObject, {});
            var pattern = (0, _map["default"])(_context2 = literals.raw).call(_context2, embedSubpatternAfter).join("");
            return XRegExp.build(pattern, subpatterns, flags);
          };
        };
        XRegExp.build = function(pattern, subs, flags) {
          flags = flags || "";
          var addFlagX = (0, _indexOf["default"])(flags).call(flags, "x") !== -1;
          var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern);
          if (inlineFlags) {
            flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);
          }
          var data = {};
          for (var p in subs) {
            if (subs.hasOwnProperty(p)) {
              var sub = asXRegExp(subs[p], addFlagX);
              data[p] = {
                pattern: deanchor(sub.source),
                names: sub[REGEX_DATA].captureNames || []
              };
            }
          }
          var patternAsRegex = asXRegExp(pattern, addFlagX);
          var numCaps = 0;
          var numPriorCaps;
          var numOuterCaps = 0;
          var outerCapsMap = [0];
          var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
          var output = patternAsRegex.source.replace(parts, function($0, $1, $2, $3, $4) {
            var subName = $1 || $2;
            var capName;
            var intro;
            var localCapIndex;
            if (subName) {
              var _context3;
              if (!data.hasOwnProperty(subName)) {
                throw new ReferenceError("Undefined property ".concat($0));
              }
              if ($1) {
                capName = outerCapNames[numOuterCaps];
                outerCapsMap[++numOuterCaps] = ++numCaps;
                intro = "(?<".concat(capName || subName, ">");
              } else {
                intro = "(?:";
              }
              numPriorCaps = numCaps;
              var rewrittenSubpattern = data[subName].pattern.replace(subParts, function(match, paren, backref) {
                if (paren) {
                  capName = data[subName].names[numCaps - numPriorCaps];
                  ++numCaps;
                  if (capName) {
                    return "(?<".concat(capName, ">");
                  }
                } else if (backref) {
                  localCapIndex = +backref - 1;
                  return data[subName].names[localCapIndex] ? "\\k<".concat(data[subName].names[localCapIndex], ">") : "\\".concat(+backref + numPriorCaps);
                }
                return match;
              });
              return (0, _concat["default"])(_context3 = "".concat(intro)).call(_context3, rewrittenSubpattern, ")");
            }
            if ($3) {
              capName = outerCapNames[numOuterCaps];
              outerCapsMap[++numOuterCaps] = ++numCaps;
              if (capName) {
                return "(?<".concat(capName, ">");
              }
            } else if ($4) {
              localCapIndex = +$4 - 1;
              return outerCapNames[localCapIndex] ? "\\k<".concat(outerCapNames[localCapIndex], ">") : "\\".concat(outerCapsMap[+$4]);
            }
            return $0;
          });
          return XRegExp(output, flags);
        };
      };
      exports["default"] = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/xregexp/lib/addons/matchrecursive.js
  var require_matchrecursive = __commonJS({
    "node_modules/xregexp/lib/addons/matchrecursive.js"(exports, module) {
      init_globals();
      var _Object$defineProperty = require_define_property3();
      var _interopRequireDefault = require_interopRequireDefault();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _indexOf = _interopRequireDefault(require_index_of4());
      var _concat = _interopRequireDefault(require_concat4());
      var _slice = _interopRequireDefault(require_slice4());
      var _default = function _default2(XRegExp) {
        function row(name, value, start, end) {
          return {
            name,
            value,
            start,
            end
          };
        }
        XRegExp.matchRecursive = function(str, left, right, flags, options2) {
          flags = flags || "";
          options2 = options2 || {};
          var global2 = (0, _indexOf["default"])(flags).call(flags, "g") !== -1;
          var sticky = (0, _indexOf["default"])(flags).call(flags, "y") !== -1;
          var basicFlags = flags.replace(/y/g, "");
          left = XRegExp(left, basicFlags);
          right = XRegExp(right, basicFlags);
          var esc;
          var _options = options2, escapeChar = _options.escapeChar;
          if (escapeChar) {
            var _context, _context2;
            if (escapeChar.length > 1) {
              throw new Error("Cannot use more than one escape character");
            }
            escapeChar = XRegExp.escape(escapeChar);
            esc = new RegExp(
              (0, _concat["default"])(_context = (0, _concat["default"])(_context2 = "(?:".concat(escapeChar, "[\\S\\s]|(?:(?!")).call(
                _context2,
                XRegExp.union([left, right], "", {
                  conjunction: "or"
                }).source,
                ")[^"
              )).call(_context, escapeChar, "])+)+"),
              flags.replace(XRegExp._hasNativeFlag("s") ? /[^imsu]/g : /[^imu]/g, "")
            );
          }
          var openTokens = 0;
          var delimStart = 0;
          var delimEnd = 0;
          var lastOuterEnd = 0;
          var outerStart;
          var innerStart;
          var leftMatch;
          var rightMatch;
          var vN = options2.valueNames;
          var output = [];
          while (true) {
            if (escapeChar) {
              delimEnd += (XRegExp.exec(str, esc, delimEnd, "sticky") || [""])[0].length;
            }
            leftMatch = XRegExp.exec(str, left, delimEnd);
            rightMatch = XRegExp.exec(str, right, delimEnd);
            if (leftMatch && rightMatch) {
              if (leftMatch.index <= rightMatch.index) {
                rightMatch = null;
              } else {
                leftMatch = null;
              }
            }
            if (leftMatch || rightMatch) {
              delimStart = (leftMatch || rightMatch).index;
              delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
            } else if (!openTokens) {
              break;
            }
            if (sticky && !openTokens && delimStart > lastOuterEnd) {
              break;
            }
            if (leftMatch) {
              if (!openTokens) {
                outerStart = delimStart;
                innerStart = delimEnd;
              }
              openTokens += 1;
            } else if (rightMatch && openTokens) {
              openTokens -= 1;
              if (!openTokens) {
                if (vN) {
                  if (vN[0] && outerStart > lastOuterEnd) {
                    output.push(row(vN[0], (0, _slice["default"])(str).call(str, lastOuterEnd, outerStart), lastOuterEnd, outerStart));
                  }
                  if (vN[1]) {
                    output.push(row(vN[1], (0, _slice["default"])(str).call(str, outerStart, innerStart), outerStart, innerStart));
                  }
                  if (vN[2]) {
                    output.push(row(vN[2], (0, _slice["default"])(str).call(str, innerStart, delimStart), innerStart, delimStart));
                  }
                  if (vN[3]) {
                    output.push(row(vN[3], (0, _slice["default"])(str).call(str, delimStart, delimEnd), delimStart, delimEnd));
                  }
                } else {
                  output.push((0, _slice["default"])(str).call(str, innerStart, delimStart));
                }
                lastOuterEnd = delimEnd;
                if (!global2) {
                  break;
                }
              }
            } else {
              var unbalanced = options2.unbalanced || "error";
              if (unbalanced === "skip" || unbalanced === "skip-lazy") {
                if (rightMatch) {
                  rightMatch = null;
                } else {
                  if (unbalanced === "skip") {
                    var outerStartDelimLength = XRegExp.exec(str, left, outerStart, "sticky")[0].length;
                    delimEnd = outerStart + (outerStartDelimLength || 1);
                  } else {
                    delimEnd = outerStart + 1;
                  }
                  openTokens = 0;
                }
              } else if (unbalanced === "error") {
                var _context3;
                var delimSide = rightMatch ? "right" : "left";
                var errorPos = rightMatch ? delimStart : outerStart;
                throw new Error((0, _concat["default"])(_context3 = "Unbalanced ".concat(delimSide, " delimiter found in string at position ")).call(_context3, errorPos));
              } else {
                throw new Error("Unsupported value for unbalanced: ".concat(unbalanced));
              }
            }
            if (delimStart === delimEnd) {
              delimEnd += 1;
            }
          }
          if (global2 && output.length > 0 && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
            output.push(row(vN[0], (0, _slice["default"])(str).call(str, lastOuterEnd), lastOuterEnd, str.length));
          }
          return output;
        };
      };
      exports["default"] = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/xregexp/lib/addons/unicode-base.js
  var require_unicode_base = __commonJS({
    "node_modules/xregexp/lib/addons/unicode-base.js"(exports, module) {
      init_globals();
      var _sliceInstanceProperty = require_slice4();
      var _Array$from = require_from5();
      var _Symbol = require_symbol5();
      var _getIteratorMethod = require_get_iterator_method7();
      var _Array$isArray = require_is_array5();
      var _Object$defineProperty = require_define_property3();
      var _interopRequireDefault = require_interopRequireDefault();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
      var _forEach = _interopRequireDefault(require_for_each4());
      var _concat = _interopRequireDefault(require_concat4());
      var _indexOf = _interopRequireDefault(require_index_of4());
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
        if (!it) {
          if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it)
              o = it;
            var i = 0;
            var F = function F2() {
            };
            return { s: F, n: function n() {
              if (i >= o.length)
                return { done: true };
              return { done: false, value: o[i++] };
            }, e: function e(_e) {
              throw _e;
            }, f: F };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return { s: function s() {
          it = it.call(o);
        }, n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        }, e: function e(_e2) {
          didErr = true;
          err = _e2;
        }, f: function f() {
          try {
            if (!normalCompletion && it["return"] != null)
              it["return"]();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _unsupportedIterableToArray(o, minLen) {
        var _context4;
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = _sliceInstanceProperty(_context4 = Object.prototype.toString.call(o)).call(_context4, 8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return _Array$from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      var _default = function _default2(XRegExp) {
        var unicode2 = {};
        var unicodeTypes = {};
        var dec = XRegExp._dec;
        var hex = XRegExp._hex;
        var pad4 = XRegExp._pad4;
        function normalize(name) {
          return name.replace(/[- _]+/g, "").toLowerCase();
        }
        function charCode(chr) {
          var esc = /^\\[xu](.+)/.exec(chr);
          return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === "\\" ? 1 : 0);
        }
        function invertBmp(range) {
          var output = "";
          var lastEnd = -1;
          (0, _forEach["default"])(XRegExp).call(XRegExp, range, /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/, function(m) {
            var start = charCode(m[1]);
            if (start > lastEnd + 1) {
              output += "\\u".concat(pad4(hex(lastEnd + 1)));
              if (start > lastEnd + 2) {
                output += "-\\u".concat(pad4(hex(start - 1)));
              }
            }
            lastEnd = charCode(m[2] || m[1]);
          });
          if (lastEnd < 65535) {
            output += "\\u".concat(pad4(hex(lastEnd + 1)));
            if (lastEnd < 65534) {
              output += "-\\uFFFF";
            }
          }
          return output;
        }
        function cacheInvertedBmp(slug) {
          var prop = "b!";
          return unicode2[slug][prop] || (unicode2[slug][prop] = invertBmp(unicode2[slug].bmp));
        }
        function buildAstral(slug, isNegated) {
          var item = unicode2[slug];
          var combined = "";
          if (item.bmp && !item.isBmpLast) {
            var _context;
            combined = (0, _concat["default"])(_context = "[".concat(item.bmp, "]")).call(_context, item.astral ? "|" : "");
          }
          if (item.astral) {
            combined += item.astral;
          }
          if (item.isBmpLast && item.bmp) {
            var _context2;
            combined += (0, _concat["default"])(_context2 = "".concat(item.astral ? "|" : "", "[")).call(_context2, item.bmp, "]");
          }
          return isNegated ? "(?:(?!".concat(combined, ")(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))") : "(?:".concat(combined, ")");
        }
        function cacheAstral(slug, isNegated) {
          var prop = isNegated ? "a!" : "a=";
          return unicode2[slug][prop] || (unicode2[slug][prop] = buildAstral(slug, isNegated));
        }
        XRegExp.addToken(
          /\\([pP])(?:{(\^?)(?:(\w+)=)?([^}]*)}|([A-Za-z]))/,
          function(match, scope, flags) {
            var ERR_DOUBLE_NEG = "Invalid double negation ";
            var ERR_UNKNOWN_NAME = "Unknown Unicode token ";
            var ERR_UNKNOWN_REF = "Unicode token missing data ";
            var ERR_ASTRAL_ONLY = "Astral mode required for Unicode token ";
            var ERR_ASTRAL_IN_CLASS = "Astral mode does not support Unicode tokens within character classes";
            var _match = (0, _slicedToArray2["default"])(match, 6), fullToken = _match[0], pPrefix = _match[1], caretNegation = _match[2], typePrefix = _match[3], tokenName = _match[4], tokenSingleCharName = _match[5];
            var isNegated = pPrefix === "P" || !!caretNegation;
            var isAstralMode = (0, _indexOf["default"])(flags).call(flags, "A") !== -1;
            var slug = normalize(tokenSingleCharName || tokenName);
            var item = unicode2[slug];
            if (pPrefix === "P" && caretNegation) {
              throw new SyntaxError(ERR_DOUBLE_NEG + fullToken);
            }
            if (!unicode2.hasOwnProperty(slug)) {
              throw new SyntaxError(ERR_UNKNOWN_NAME + fullToken);
            }
            if (typePrefix) {
              if (!(unicodeTypes[typePrefix] && unicodeTypes[typePrefix][slug])) {
                throw new SyntaxError(ERR_UNKNOWN_NAME + fullToken);
              }
            }
            if (item.inverseOf) {
              slug = normalize(item.inverseOf);
              if (!unicode2.hasOwnProperty(slug)) {
                var _context3;
                throw new ReferenceError((0, _concat["default"])(_context3 = "".concat(ERR_UNKNOWN_REF + fullToken, " -> ")).call(_context3, item.inverseOf));
              }
              item = unicode2[slug];
              isNegated = !isNegated;
            }
            if (!(item.bmp || isAstralMode)) {
              throw new SyntaxError(ERR_ASTRAL_ONLY + fullToken);
            }
            if (isAstralMode) {
              if (scope === "class") {
                throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
              }
              return cacheAstral(slug, isNegated);
            }
            return scope === "class" ? isNegated ? cacheInvertedBmp(slug) : item.bmp : "".concat((isNegated ? "[^" : "[") + item.bmp, "]");
          },
          {
            scope: "all",
            optionalFlags: "A",
            leadChar: "\\"
          }
        );
        XRegExp.addUnicodeData = function(data, typePrefix) {
          var ERR_NO_NAME = "Unicode token requires name";
          var ERR_NO_DATA = "Unicode token has no character data ";
          if (typePrefix) {
            unicodeTypes[typePrefix] = {};
          }
          var _iterator = _createForOfIteratorHelper(data), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var item = _step.value;
              if (!item.name) {
                throw new Error(ERR_NO_NAME);
              }
              if (!(item.inverseOf || item.bmp || item.astral)) {
                throw new Error(ERR_NO_DATA + item.name);
              }
              var normalizedName = normalize(item.name);
              unicode2[normalizedName] = item;
              if (typePrefix) {
                unicodeTypes[typePrefix][normalizedName] = true;
              }
              if (item.alias) {
                var normalizedAlias = normalize(item.alias);
                unicode2[normalizedAlias] = item;
                if (typePrefix) {
                  unicodeTypes[typePrefix][normalizedAlias] = true;
                }
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          XRegExp.cache.flush("patterns");
        };
        XRegExp._getUnicodeProperty = function(name) {
          var slug = normalize(name);
          return unicode2[slug];
        };
      };
      exports["default"] = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/xregexp/tools/output/categories.js
  var require_categories = __commonJS({
    "node_modules/xregexp/tools/output/categories.js"(exports, module) {
      init_globals();
      module.exports = [
        {
          "name": "C",
          "alias": "Other",
          "isBmpLast": true,
          "bmp": "\0-\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F-\u0897\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF",
          "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCBD\uDCC3-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]"
        },
        {
          "name": "Cc",
          "alias": "Control",
          "bmp": "\0-\x7F-\x9F"
        },
        {
          "name": "Cf",
          "alias": "Format",
          "bmp": "\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB",
          "astral": "\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC38]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]"
        },
        {
          "name": "Cn",
          "alias": "Unassigned",
          "bmp": "\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F\u0892-\u0897\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF",
          "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCC3-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F\uDC39-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]"
        },
        {
          "name": "Co",
          "alias": "Private_Use",
          "bmp": "\uE000-\uF8FF",
          "astral": "[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]"
        },
        {
          "name": "Cs",
          "alias": "Surrogate",
          "bmp": "\uD800-\uDFFF"
        },
        {
          "name": "L",
          "alias": "Letter",
          "bmp": "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
          "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
        },
        {
          "name": "LC",
          "alias": "Cased_Letter",
          "bmp": "A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F5\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A",
          "astral": "\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD00-\uDD43]"
        },
        {
          "name": "Ll",
          "alias": "Lowercase_Letter",
          "bmp": "a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
          "astral": "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD22-\uDD43]"
        },
        {
          "name": "Lm",
          "alias": "Modifier_Letter",
          "bmp": "\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u08C9\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F2-\uA7F4\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uAB69\uFF70\uFF9E\uFF9F",
          "astral": "\uD801[\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD838[\uDD37-\uDD3D]|\u{1E94B}"
        },
        {
          "name": "Lo",
          "alias": "Other_Letter",
          "bmp": "\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C8\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
          "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF4A\uDF50]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\u{1DF0A}|\uD838[\uDD00-\uDD2C\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
        },
        {
          "name": "Lt",
          "alias": "Titlecase_Letter",
          "bmp": "\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC"
        },
        {
          "name": "Lu",
          "alias": "Uppercase_Letter",
          "bmp": "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7D0\uA7D6\uA7D8\uA7F5\uFF21-\uFF3A",
          "astral": "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]"
        },
        {
          "name": "M",
          "alias": "Mark",
          "bmp": "\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
          "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC82\uDCB0-\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE\uDDCF\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
        },
        {
          "name": "Mc",
          "alias": "Spacing_Mark",
          "bmp": "\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC",
          "astral": "\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD30-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]"
        },
        {
          "name": "Me",
          "alias": "Enclosing_Mark",
          "bmp": "\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672"
        },
        {
          "name": "Mn",
          "alias": "Nonspacing_Mark",
          "bmp": "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
          "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC01\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
        },
        {
          "name": "N",
          "alias": "Number",
          "bmp": "0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
          "astral": "\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]"
        },
        {
          "name": "Nd",
          "alias": "Decimal_Number",
          "bmp": "0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
          "astral": "\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9\uDD50-\uDD59]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]"
        },
        {
          "name": "Nl",
          "alias": "Letter_Number",
          "bmp": "\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF",
          "astral": "\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]"
        },
        {
          "name": "No",
          "alias": "Other_Number",
          "bmp": "\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835",
          "astral": "\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C\uDFC0-\uDFD4]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]"
        },
        {
          "name": "P",
          "alias": "Punctuation",
          "bmp": "!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65",
          "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
        },
        {
          "name": "Pc",
          "alias": "Connector_Punctuation",
          "bmp": "_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F"
        },
        {
          "name": "Pd",
          "alias": "Dash_Punctuation",
          "bmp": "\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u2E5D\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D",
          "astral": "\u{10EAD}"
        },
        {
          "name": "Pe",
          "alias": "Close_Punctuation",
          "bmp": "\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u2E56\u2E58\u2E5A\u2E5C\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63"
        },
        {
          "name": "Pf",
          "alias": "Final_Punctuation",
          "bmp": "\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21"
        },
        {
          "name": "Pi",
          "alias": "Initial_Punctuation",
          "bmp": "\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20"
        },
        {
          "name": "Po",
          "alias": "Other_Punctuation",
          "bmp": "!-#%-'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4F\u2E52-\u2E54\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65",
          "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
        },
        {
          "name": "Ps",
          "alias": "Open_Punctuation",
          "bmp": "\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u2E55\u2E57\u2E59\u2E5B\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62"
        },
        {
          "name": "S",
          "alias": "Symbol",
          "bmp": "\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD",
          "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
        },
        {
          "name": "Sc",
          "alias": "Currency_Symbol",
          "bmp": "\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20C0\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6",
          "astral": "\uD807[\uDFDD-\uDFE0]|\u{1E2FF}|\u{1ECB0}"
        },
        {
          "name": "Sk",
          "alias": "Modifier_Symbol",
          "bmp": "\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u0888\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uAB6A\uAB6B\uFBB2-\uFBC2\uFF3E\uFF40\uFFE3",
          "astral": "\uD83C[\uDFFB-\uDFFF]"
        },
        {
          "name": "Sm",
          "alias": "Math_Symbol",
          "bmp": "\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC",
          "astral": "\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]"
        },
        {
          "name": "So",
          "alias": "Other_Symbol",
          "bmp": "\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFD40-\uFD4F\uFDCF\uFDFD-\uFDFF\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD",
          "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFDC\uDFE1-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\u{1E14F}|\uD83B[\uDCAC\uDD2E]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
        },
        {
          "name": "Z",
          "alias": "Separator",
          "bmp": " \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
        },
        {
          "name": "Zl",
          "alias": "Line_Separator",
          "bmp": "\u2028"
        },
        {
          "name": "Zp",
          "alias": "Paragraph_Separator",
          "bmp": "\u2029"
        },
        {
          "name": "Zs",
          "alias": "Space_Separator",
          "bmp": " \xA0\u1680\u2000-\u200A\u202F\u205F\u3000"
        }
      ];
    }
  });

  // node_modules/xregexp/lib/addons/unicode-categories.js
  var require_unicode_categories = __commonJS({
    "node_modules/xregexp/lib/addons/unicode-categories.js"(exports, module) {
      init_globals();
      var _Object$defineProperty = require_define_property3();
      var _interopRequireDefault = require_interopRequireDefault();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _categories = _interopRequireDefault(require_categories());
      var _default = function _default2(XRegExp) {
        if (!XRegExp.addUnicodeData) {
          throw new ReferenceError("Unicode Base must be loaded before Unicode Categories");
        }
        XRegExp.addUnicodeData(_categories["default"]);
      };
      exports["default"] = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/xregexp/tools/output/properties.js
  var require_properties = __commonJS({
    "node_modules/xregexp/tools/output/properties.js"(exports, module) {
      init_globals();
      module.exports = [
        {
          "name": "ASCII",
          "bmp": "\0-\x7F"
        },
        {
          "name": "Alphabetic",
          "bmp": "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u108F\u109A-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1713\u171F-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1ABF\u1AC0\u1ACC-\u1ACE\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4C\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA805\uA807-\uA827\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8F2-\uA8F7\uA8FB\uA8FD-\uA8FF\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uA9E0-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
          "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC71-\uDC75\uDC82-\uDCB8\uDCC2\uDCD0-\uDCE8\uDD00-\uDD32\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE\uDDCF\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDEB8\uDF00-\uDF1A\uDF1D-\uDF2A\uDF40-\uDF46]|\uD806[\uDC00-\uDC38\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDEE0-\uDEF6\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
        },
        {
          "name": "Any",
          "isBmpLast": true,
          "bmp": "\0-\uFFFF",
          "astral": "[\uD800-\uDBFF][\uDC00-\uDFFF]"
        },
        {
          "name": "Default_Ignorable_Code_Point",
          "bmp": "\xAD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180B-\u180F\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8",
          "astral": "\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]"
        },
        {
          "name": "Lowercase",
          "bmp": "a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
          "astral": "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDF80\uDF83-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD22-\uDD43]"
        },
        {
          "name": "Noncharacter_Code_Point",
          "bmp": "\uFDD0-\uFDEF\uFFFE\uFFFF",
          "astral": "[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]"
        },
        {
          "name": "Uppercase",
          "bmp": "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7D0\uA7D6\uA7D8\uA7F5\uFF21-\uFF3A",
          "astral": "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]"
        },
        {
          "name": "White_Space",
          "bmp": "	-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
        }
      ];
    }
  });

  // node_modules/xregexp/lib/addons/unicode-properties.js
  var require_unicode_properties = __commonJS({
    "node_modules/xregexp/lib/addons/unicode-properties.js"(exports, module) {
      init_globals();
      var _Object$defineProperty = require_define_property3();
      var _interopRequireDefault = require_interopRequireDefault();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _properties = _interopRequireDefault(require_properties());
      var _default = function _default2(XRegExp) {
        if (!XRegExp.addUnicodeData) {
          throw new ReferenceError("Unicode Base must be loaded before Unicode Properties");
        }
        var unicodeData = _properties["default"];
        unicodeData.push({
          name: "Assigned",
          inverseOf: "Cn"
        });
        XRegExp.addUnicodeData(unicodeData);
      };
      exports["default"] = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/xregexp/tools/output/scripts.js
  var require_scripts = __commonJS({
    "node_modules/xregexp/tools/output/scripts.js"(exports, module) {
      init_globals();
      module.exports = [
        {
          "name": "Adlam",
          "astral": "\uD83A[\uDD00-\uDD4B\uDD50-\uDD59\uDD5E\uDD5F]"
        },
        {
          "name": "Ahom",
          "astral": "\uD805[\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF46]"
        },
        {
          "name": "Anatolian_Hieroglyphs",
          "astral": "\uD811[\uDC00-\uDE46]"
        },
        {
          "name": "Arabic",
          "bmp": "\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061C-\u061E\u0620-\u063F\u0641-\u064A\u0656-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u0870-\u088E\u0890\u0891\u0898-\u08E1\u08E3-\u08FF\uFB50-\uFBC2\uFBD3-\uFD3D\uFD40-\uFD8F\uFD92-\uFDC7\uFDCF\uFDF0-\uFDFF\uFE70-\uFE74\uFE76-\uFEFC",
          "astral": "\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]"
        },
        {
          "name": "Armenian",
          "bmp": "\u0531-\u0556\u0559-\u058A\u058D-\u058F\uFB13-\uFB17"
        },
        {
          "name": "Avestan",
          "astral": "\uD802[\uDF00-\uDF35\uDF39-\uDF3F]"
        },
        {
          "name": "Balinese",
          "bmp": "\u1B00-\u1B4C\u1B50-\u1B7E"
        },
        {
          "name": "Bamum",
          "bmp": "\uA6A0-\uA6F7",
          "astral": "\uD81A[\uDC00-\uDE38]"
        },
        {
          "name": "Bassa_Vah",
          "astral": "\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]"
        },
        {
          "name": "Batak",
          "bmp": "\u1BC0-\u1BF3\u1BFC-\u1BFF"
        },
        {
          "name": "Bengali",
          "bmp": "\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE"
        },
        {
          "name": "Bhaiksuki",
          "astral": "\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]"
        },
        {
          "name": "Bopomofo",
          "bmp": "\u02EA\u02EB\u3105-\u312F\u31A0-\u31BF"
        },
        {
          "name": "Brahmi",
          "astral": "\uD804[\uDC00-\uDC4D\uDC52-\uDC75\uDC7F]"
        },
        {
          "name": "Braille",
          "bmp": "\u2800-\u28FF"
        },
        {
          "name": "Buginese",
          "bmp": "\u1A00-\u1A1B\u1A1E\u1A1F"
        },
        {
          "name": "Buhid",
          "bmp": "\u1740-\u1753"
        },
        {
          "name": "Canadian_Aboriginal",
          "bmp": "\u1400-\u167F\u18B0-\u18F5",
          "astral": "\uD806[\uDEB0-\uDEBF]"
        },
        {
          "name": "Carian",
          "astral": "\uD800[\uDEA0-\uDED0]"
        },
        {
          "name": "Caucasian_Albanian",
          "astral": "\uD801[\uDD30-\uDD63\uDD6F]"
        },
        {
          "name": "Chakma",
          "astral": "\uD804[\uDD00-\uDD34\uDD36-\uDD47]"
        },
        {
          "name": "Cham",
          "bmp": "\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F"
        },
        {
          "name": "Cherokee",
          "bmp": "\u13A0-\u13F5\u13F8-\u13FD\uAB70-\uABBF"
        },
        {
          "name": "Chorasmian",
          "astral": "\uD803[\uDFB0-\uDFCB]"
        },
        {
          "name": "Common",
          "bmp": "\0-@\\[-`\\{-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7\u02B9-\u02DF\u02E5-\u02E9\u02EC-\u02FF\u0374\u037E\u0385\u0387\u0605\u060C\u061B\u061F\u0640\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20C0\u2100-\u2125\u2127-\u2129\u212C-\u2131\u2133-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2E00-\u2E5D\u2FF0-\u2FFB\u3000-\u3004\u3006\u3008-\u3020\u3030-\u3037\u303C-\u303F\u309B\u309C\u30A0\u30FB\u30FC\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u32FF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721\uA788-\uA78A\uA830-\uA839\uA92E\uA9CF\uAB5B\uAB6A\uAB6B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFF70\uFF9E\uFF9F\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD",
          "astral": "\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9C\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD82F[\uDCA0-\uDCA3]|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDEE0-\uDEF3\uDF00-\uDF56\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83B[\uDC71-\uDCB4\uDD01-\uDD3D]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDDAD\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA\uDFF0-\uDFF9]|\uDB40[\uDC01\uDC20-\uDC7F]"
        },
        {
          "name": "Coptic",
          "bmp": "\u03E2-\u03EF\u2C80-\u2CF3\u2CF9-\u2CFF"
        },
        {
          "name": "Cuneiform",
          "astral": "\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]"
        },
        {
          "name": "Cypriot",
          "astral": "\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]"
        },
        {
          "name": "Cypro_Minoan",
          "astral": "\uD80B[\uDF90-\uDFF2]"
        },
        {
          "name": "Cyrillic",
          "bmp": "\u0400-\u0484\u0487-\u052F\u1C80-\u1C88\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F"
        },
        {
          "name": "Deseret",
          "astral": "\uD801[\uDC00-\uDC4F]"
        },
        {
          "name": "Devanagari",
          "bmp": "\u0900-\u0950\u0955-\u0963\u0966-\u097F\uA8E0-\uA8FF"
        },
        {
          "name": "Dives_Akuru",
          "astral": "\uD806[\uDD00-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B-\uDD46\uDD50-\uDD59]"
        },
        {
          "name": "Dogra",
          "astral": "\uD806[\uDC00-\uDC3B]"
        },
        {
          "name": "Duployan",
          "astral": "\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]"
        },
        {
          "name": "Egyptian_Hieroglyphs",
          "astral": "\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E\uDC30-\uDC38]"
        },
        {
          "name": "Elbasan",
          "astral": "\uD801[\uDD00-\uDD27]"
        },
        {
          "name": "Elymaic",
          "astral": "\uD803[\uDFE0-\uDFF6]"
        },
        {
          "name": "Ethiopic",
          "bmp": "\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E",
          "astral": "\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]"
        },
        {
          "name": "Georgian",
          "bmp": "\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u1C90-\u1CBA\u1CBD-\u1CBF\u2D00-\u2D25\u2D27\u2D2D"
        },
        {
          "name": "Glagolitic",
          "bmp": "\u2C00-\u2C5F",
          "astral": "\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]"
        },
        {
          "name": "Gothic",
          "astral": "\uD800[\uDF30-\uDF4A]"
        },
        {
          "name": "Grantha",
          "astral": "\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]"
        },
        {
          "name": "Greek",
          "bmp": "\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65",
          "astral": "\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]"
        },
        {
          "name": "Gujarati",
          "bmp": "\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF"
        },
        {
          "name": "Gunjala_Gondi",
          "astral": "\uD807[\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9]"
        },
        {
          "name": "Gurmukhi",
          "bmp": "\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76"
        },
        {
          "name": "Han",
          "bmp": "\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFA6D\uFA70-\uFAD9",
          "astral": "\uD81B[\uDFE2\uDFE3\uDFF0\uDFF1]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
        },
        {
          "name": "Hangul",
          "bmp": "\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC"
        },
        {
          "name": "Hanifi_Rohingya",
          "astral": "\uD803[\uDD00-\uDD27\uDD30-\uDD39]"
        },
        {
          "name": "Hanunoo",
          "bmp": "\u1720-\u1734"
        },
        {
          "name": "Hatran",
          "astral": "\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]"
        },
        {
          "name": "Hebrew",
          "bmp": "\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F"
        },
        {
          "name": "Hiragana",
          "bmp": "\u3041-\u3096\u309D-\u309F",
          "astral": "\uD82C[\uDC01-\uDD1F\uDD50-\uDD52]|\u{1F200}"
        },
        {
          "name": "Imperial_Aramaic",
          "astral": "\uD802[\uDC40-\uDC55\uDC57-\uDC5F]"
        },
        {
          "name": "Inherited",
          "bmp": "\u0300-\u036F\u0485\u0486\u064B-\u0655\u0670\u0951-\u0954\u1AB0-\u1ACE\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u200C\u200D\u20D0-\u20F0\u302A-\u302D\u3099\u309A\uFE00-\uFE0F\uFE20-\uFE2D",
          "astral": "\uD800[\uDDFD\uDEE0]|\u{1133B}|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]"
        },
        {
          "name": "Inscriptional_Pahlavi",
          "astral": "\uD802[\uDF60-\uDF72\uDF78-\uDF7F]"
        },
        {
          "name": "Inscriptional_Parthian",
          "astral": "\uD802[\uDF40-\uDF55\uDF58-\uDF5F]"
        },
        {
          "name": "Javanese",
          "bmp": "\uA980-\uA9CD\uA9D0-\uA9D9\uA9DE\uA9DF"
        },
        {
          "name": "Kaithi",
          "astral": "\uD804[\uDC80-\uDCC2\uDCCD]"
        },
        {
          "name": "Kannada",
          "bmp": "\u0C80-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2"
        },
        {
          "name": "Katakana",
          "bmp": "\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D",
          "astral": "\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00\uDD20-\uDD22\uDD64-\uDD67]"
        },
        {
          "name": "Kayah_Li",
          "bmp": "\uA900-\uA92D\uA92F"
        },
        {
          "name": "Kharoshthi",
          "astral": "\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F-\uDE48\uDE50-\uDE58]"
        },
        {
          "name": "Khitan_Small_Script",
          "astral": "\u{16FE4}|\uD822[\uDF00-\uDFFF]|\uD823[\uDC00-\uDCD5]"
        },
        {
          "name": "Khmer",
          "bmp": "\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF"
        },
        {
          "name": "Khojki",
          "astral": "\uD804[\uDE00-\uDE11\uDE13-\uDE3E]"
        },
        {
          "name": "Khudawadi",
          "astral": "\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]"
        },
        {
          "name": "Lao",
          "bmp": "\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF"
        },
        {
          "name": "Latin",
          "bmp": "A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB64\uAB66-\uAB69\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A",
          "astral": "\uD801[\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD837[\uDF00-\uDF1E]"
        },
        {
          "name": "Lepcha",
          "bmp": "\u1C00-\u1C37\u1C3B-\u1C49\u1C4D-\u1C4F"
        },
        {
          "name": "Limbu",
          "bmp": "\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u194F"
        },
        {
          "name": "Linear_A",
          "astral": "\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]"
        },
        {
          "name": "Linear_B",
          "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]"
        },
        {
          "name": "Lisu",
          "bmp": "\uA4D0-\uA4FF",
          "astral": "\u{11FB0}"
        },
        {
          "name": "Lycian",
          "astral": "\uD800[\uDE80-\uDE9C]"
        },
        {
          "name": "Lydian",
          "astral": "\uD802[\uDD20-\uDD39\uDD3F]"
        },
        {
          "name": "Mahajani",
          "astral": "\uD804[\uDD50-\uDD76]"
        },
        {
          "name": "Makasar",
          "astral": "\uD807[\uDEE0-\uDEF8]"
        },
        {
          "name": "Malayalam",
          "bmp": "\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F"
        },
        {
          "name": "Mandaic",
          "bmp": "\u0840-\u085B\u085E"
        },
        {
          "name": "Manichaean",
          "astral": "\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]"
        },
        {
          "name": "Marchen",
          "astral": "\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]"
        },
        {
          "name": "Masaram_Gondi",
          "astral": "\uD807[\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]"
        },
        {
          "name": "Medefaidrin",
          "astral": "\uD81B[\uDE40-\uDE9A]"
        },
        {
          "name": "Meetei_Mayek",
          "bmp": "\uAAE0-\uAAF6\uABC0-\uABED\uABF0-\uABF9"
        },
        {
          "name": "Mende_Kikakui",
          "astral": "\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]"
        },
        {
          "name": "Meroitic_Cursive",
          "astral": "\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]"
        },
        {
          "name": "Meroitic_Hieroglyphs",
          "astral": "\uD802[\uDD80-\uDD9F]"
        },
        {
          "name": "Miao",
          "astral": "\uD81B[\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F]"
        },
        {
          "name": "Modi",
          "astral": "\uD805[\uDE00-\uDE44\uDE50-\uDE59]"
        },
        {
          "name": "Mongolian",
          "bmp": "\u1800\u1801\u1804\u1806-\u1819\u1820-\u1878\u1880-\u18AA",
          "astral": "\uD805[\uDE60-\uDE6C]"
        },
        {
          "name": "Mro",
          "astral": "\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]"
        },
        {
          "name": "Multani",
          "astral": "\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]"
        },
        {
          "name": "Myanmar",
          "bmp": "\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F"
        },
        {
          "name": "Nabataean",
          "astral": "\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]"
        },
        {
          "name": "Nandinagari",
          "astral": "\uD806[\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDE4]"
        },
        {
          "name": "New_Tai_Lue",
          "bmp": "\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE\u19DF"
        },
        {
          "name": "Newa",
          "astral": "\uD805[\uDC00-\uDC5B\uDC5D-\uDC61]"
        },
        {
          "name": "Nko",
          "bmp": "\u07C0-\u07FA\u07FD-\u07FF"
        },
        {
          "name": "Nushu",
          "astral": "\u{16FE1}|\uD82C[\uDD70-\uDEFB]"
        },
        {
          "name": "Nyiakeng_Puachue_Hmong",
          "astral": "\uD838[\uDD00-\uDD2C\uDD30-\uDD3D\uDD40-\uDD49\uDD4E\uDD4F]"
        },
        {
          "name": "Ogham",
          "bmp": "\u1680-\u169C"
        },
        {
          "name": "Ol_Chiki",
          "bmp": "\u1C50-\u1C7F"
        },
        {
          "name": "Old_Hungarian",
          "astral": "\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]"
        },
        {
          "name": "Old_Italic",
          "astral": "\uD800[\uDF00-\uDF23\uDF2D-\uDF2F]"
        },
        {
          "name": "Old_North_Arabian",
          "astral": "\uD802[\uDE80-\uDE9F]"
        },
        {
          "name": "Old_Permic",
          "astral": "\uD800[\uDF50-\uDF7A]"
        },
        {
          "name": "Old_Persian",
          "astral": "\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]"
        },
        {
          "name": "Old_Sogdian",
          "astral": "\uD803[\uDF00-\uDF27]"
        },
        {
          "name": "Old_South_Arabian",
          "astral": "\uD802[\uDE60-\uDE7F]"
        },
        {
          "name": "Old_Turkic",
          "astral": "\uD803[\uDC00-\uDC48]"
        },
        {
          "name": "Old_Uyghur",
          "astral": "\uD803[\uDF70-\uDF89]"
        },
        {
          "name": "Oriya",
          "bmp": "\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77"
        },
        {
          "name": "Osage",
          "astral": "\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]"
        },
        {
          "name": "Osmanya",
          "astral": "\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]"
        },
        {
          "name": "Pahawh_Hmong",
          "astral": "\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]"
        },
        {
          "name": "Palmyrene",
          "astral": "\uD802[\uDC60-\uDC7F]"
        },
        {
          "name": "Pau_Cin_Hau",
          "astral": "\uD806[\uDEC0-\uDEF8]"
        },
        {
          "name": "Phags_Pa",
          "bmp": "\uA840-\uA877"
        },
        {
          "name": "Phoenician",
          "astral": "\uD802[\uDD00-\uDD1B\uDD1F]"
        },
        {
          "name": "Psalter_Pahlavi",
          "astral": "\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]"
        },
        {
          "name": "Rejang",
          "bmp": "\uA930-\uA953\uA95F"
        },
        {
          "name": "Runic",
          "bmp": "\u16A0-\u16EA\u16EE-\u16F8"
        },
        {
          "name": "Samaritan",
          "bmp": "\u0800-\u082D\u0830-\u083E"
        },
        {
          "name": "Saurashtra",
          "bmp": "\uA880-\uA8C5\uA8CE-\uA8D9"
        },
        {
          "name": "Sharada",
          "astral": "\uD804[\uDD80-\uDDDF]"
        },
        {
          "name": "Shavian",
          "astral": "\uD801[\uDC50-\uDC7F]"
        },
        {
          "name": "Siddham",
          "astral": "\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]"
        },
        {
          "name": "SignWriting",
          "astral": "\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]"
        },
        {
          "name": "Sinhala",
          "bmp": "\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4",
          "astral": "\uD804[\uDDE1-\uDDF4]"
        },
        {
          "name": "Sogdian",
          "astral": "\uD803[\uDF30-\uDF59]"
        },
        {
          "name": "Sora_Sompeng",
          "astral": "\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]"
        },
        {
          "name": "Soyombo",
          "astral": "\uD806[\uDE50-\uDEA2]"
        },
        {
          "name": "Sundanese",
          "bmp": "\u1B80-\u1BBF\u1CC0-\u1CC7"
        },
        {
          "name": "Syloti_Nagri",
          "bmp": "\uA800-\uA82C"
        },
        {
          "name": "Syriac",
          "bmp": "\u0700-\u070D\u070F-\u074A\u074D-\u074F\u0860-\u086A"
        },
        {
          "name": "Tagalog",
          "bmp": "\u1700-\u1715\u171F"
        },
        {
          "name": "Tagbanwa",
          "bmp": "\u1760-\u176C\u176E-\u1770\u1772\u1773"
        },
        {
          "name": "Tai_Le",
          "bmp": "\u1950-\u196D\u1970-\u1974"
        },
        {
          "name": "Tai_Tham",
          "bmp": "\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD"
        },
        {
          "name": "Tai_Viet",
          "bmp": "\uAA80-\uAAC2\uAADB-\uAADF"
        },
        {
          "name": "Takri",
          "astral": "\uD805[\uDE80-\uDEB9\uDEC0-\uDEC9]"
        },
        {
          "name": "Tamil",
          "bmp": "\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA",
          "astral": "\uD807[\uDFC0-\uDFF1\uDFFF]"
        },
        {
          "name": "Tangsa",
          "astral": "\uD81A[\uDE70-\uDEBE\uDEC0-\uDEC9]"
        },
        {
          "name": "Tangut",
          "astral": "\u{16FE0}|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEFF]|\uD823[\uDD00-\uDD08]"
        },
        {
          "name": "Telugu",
          "bmp": "\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3C-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C66-\u0C6F\u0C77-\u0C7F"
        },
        {
          "name": "Thaana",
          "bmp": "\u0780-\u07B1"
        },
        {
          "name": "Thai",
          "bmp": "\u0E01-\u0E3A\u0E40-\u0E5B"
        },
        {
          "name": "Tibetan",
          "bmp": "\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA"
        },
        {
          "name": "Tifinagh",
          "bmp": "\u2D30-\u2D67\u2D6F\u2D70\u2D7F"
        },
        {
          "name": "Tirhuta",
          "astral": "\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]"
        },
        {
          "name": "Toto",
          "astral": "\uD838[\uDE90-\uDEAE]"
        },
        {
          "name": "Ugaritic",
          "astral": "\uD800[\uDF80-\uDF9D\uDF9F]"
        },
        {
          "name": "Vai",
          "bmp": "\uA500-\uA62B"
        },
        {
          "name": "Vithkuqi",
          "astral": "\uD801[\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]"
        },
        {
          "name": "Wancho",
          "astral": "\uD838[\uDEC0-\uDEF9\uDEFF]"
        },
        {
          "name": "Warang_Citi",
          "astral": "\uD806[\uDCA0-\uDCF2\uDCFF]"
        },
        {
          "name": "Yezidi",
          "astral": "\uD803[\uDE80-\uDEA9\uDEAB-\uDEAD\uDEB0\uDEB1]"
        },
        {
          "name": "Yi",
          "bmp": "\uA000-\uA48C\uA490-\uA4C6"
        },
        {
          "name": "Zanabazar_Square",
          "astral": "\uD806[\uDE00-\uDE47]"
        }
      ];
    }
  });

  // node_modules/xregexp/lib/addons/unicode-scripts.js
  var require_unicode_scripts = __commonJS({
    "node_modules/xregexp/lib/addons/unicode-scripts.js"(exports, module) {
      init_globals();
      var _Object$defineProperty = require_define_property3();
      var _interopRequireDefault = require_interopRequireDefault();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _scripts = _interopRequireDefault(require_scripts());
      var _default = function _default2(XRegExp) {
        if (!XRegExp.addUnicodeData) {
          throw new ReferenceError("Unicode Base must be loaded before Unicode Scripts");
        }
        XRegExp.addUnicodeData(_scripts["default"], "Script");
      };
      exports["default"] = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/xregexp/lib/index.js
  var require_lib = __commonJS({
    "node_modules/xregexp/lib/index.js"(exports, module) {
      init_globals();
      var _Object$defineProperty = require_define_property3();
      var _interopRequireDefault = require_interopRequireDefault();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _xregexp = _interopRequireDefault(require_xregexp());
      var _build = _interopRequireDefault(require_build());
      var _matchrecursive = _interopRequireDefault(require_matchrecursive());
      var _unicodeBase = _interopRequireDefault(require_unicode_base());
      var _unicodeCategories = _interopRequireDefault(require_unicode_categories());
      var _unicodeProperties = _interopRequireDefault(require_unicode_properties());
      var _unicodeScripts = _interopRequireDefault(require_unicode_scripts());
      (0, _build["default"])(_xregexp["default"]);
      (0, _matchrecursive["default"])(_xregexp["default"]);
      (0, _unicodeBase["default"])(_xregexp["default"]);
      (0, _unicodeCategories["default"])(_xregexp["default"]);
      (0, _unicodeProperties["default"])(_xregexp["default"]);
      (0, _unicodeScripts["default"])(_xregexp["default"]);
      var _default = _xregexp["default"];
      exports["default"] = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/@retorquere/bibtex-parser/index.js
  var require_bibtex_parser = __commonJS({
    "node_modules/@retorquere/bibtex-parser/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.jabref = exports.chunker = exports.promises = exports.ast = exports.parse = exports.fields = exports.toSentenceCase = void 0;
      var tslib_1 = require_tslib();
      var bibtex = tslib_1.__importStar(require_grammar());
      var chunker2 = tslib_1.__importStar(require_chunker());
      var jabref_1 = require_jabref();
      var unicode2latex_1 = require_unicode2latex();
      var crossref_json_1 = tslib_1.__importDefault(require_crossref());
      var xregexp_1 = tslib_1.__importDefault(require_lib());
      function restore(text, orig, preserve) {
        for (const { start, end } of preserve) {
          text = text.substring(0, start) + orig.substring(start, end) + text.substring(end);
        }
        return text;
      }
      var SentenceCaser = class {
        constructor() {
          this.acronym = (0, xregexp_1.default)("^(\\p{Lu}[.])+(?=$|[\\P{L}])");
          this.quoted = (0, xregexp_1.default)('^"[^"]+"(?=$|[\\P{L}])');
          this.innerCaps = (0, xregexp_1.default)("\\p{Ll}\\p{Lu}");
          this.allCaps = (0, xregexp_1.default)("^\\p{Lu}+$");
          this.aint = (0, xregexp_1.default)("^\\p{L}n't(?=$|[\\P{L}])");
          this.word = (0, xregexp_1.default)("^\\p{L}+(-\\p{L}+)*");
          this.and = (0, xregexp_1.default)("^\\p{Lu}&\\p{Lu}(?=$|[\\P{L}])");
        }
        convert(text, ignoreHTML = false) {
          this.input = text;
          this.result = "";
          this.sentenceStart = true;
          const preserve = [];
          if (ignoreHTML) {
            let replace = true;
            while (replace) {
              replace = false;
              this.input = this.input.replace(/[^<>]<[^>]+>/, (match, i) => {
                preserve.push({ start: i + 1, end: i + match.length });
                replace = true;
                return match[0].repeat(match.length);
              });
            }
            replace = true;
            while (replace) {
              replace = false;
              this.input = this.input.replace(/<[^>]+>[^<>]/, (match, i) => {
                preserve.push({ start: i, end: i + match.length - 1 });
                replace = true;
                return match[match.length - 1].repeat(match.length);
              });
            }
          }
          this.input = this.input.replace(/[;:]\s+A\s/g, (match) => match.toLowerCase());
          this.input = this.input.replace(/[–—]\s*A\s/g, (match) => match.toLowerCase());
          let m;
          while (this.input) {
            if (m = xregexp_1.default.exec(this.input, this.quoted)) {
              this.add(m[0], void 0, true);
            } else if (m = xregexp_1.default.exec(this.input, this.acronym)) {
              this.add(m[0], void 0, true);
            } else if (m = xregexp_1.default.exec(this.input, this.aint)) {
              this.add(m[0], void 0, false);
            } else if (m = xregexp_1.default.exec(this.input, this.word)) {
              this.add(m[0], "-", false);
            } else if (m = xregexp_1.default.exec(this.input, this.and)) {
              this.add(m[0], void 0, true);
            } else {
              this.add(this.input[0], void 0, false);
            }
          }
          return restore(this.result, text, preserve);
        }
        add(word, splitter, keep) {
          if (splitter) {
            word = word.split(splitter).map((part, i) => {
              if ((keep || this.sentenceStart) && i === 0)
                return part;
              if (xregexp_1.default.exec(part, this.innerCaps))
                return part;
              if (xregexp_1.default.exec(part, this.allCaps))
                return part;
              return part.toLowerCase();
            }).join(splitter);
          } else {
            if (!keep)
              word = word.toLowerCase();
          }
          this.result += word;
          this.input = this.input.substr(word.length);
          if (!word.match(/^\s+$/)) {
            this.sentenceStart = !!word.match(/^[.?!]$/) || word.length === 2 && word[1] === ".";
          }
        }
      };
      var sentenceCaser = new SentenceCaser();
      function toSentenceCase2(text, ignoreHTML = false) {
        return sentenceCaser.convert(text, ignoreHTML);
      }
      exports.toSentenceCase = toSentenceCase2;
      var ParserError = class extends Error {
        constructor(message, node) {
          super(message);
          Object.setPrototypeOf(this, new.target.prototype);
          this.name = this.constructor.name;
          this.node = node;
        }
      };
      var TeXError = class extends Error {
        constructor(message, node, text) {
          super(message);
          Object.setPrototypeOf(this, new.target.prototype);
          this.name = this.constructor.name;
          this.node = node;
          this.text = text;
        }
      };
      function charCat(charcats, select) {
        return charcats.filter((cat) => select.includes(cat.alias)).map((cat) => cat.bmp).join("");
      }
      var charCategories2 = require_categories();
      var charClass = {
        Lu: charCat(charCategories2, ["Uppercase_Letter", "Titlecase_Letter"]),
        Ll: charCat(charCategories2, ["Lowercase_Letter"]),
        LnotLu: charCat(charCategories2, ["Lowercase_Letter", "Modifier_Letter", "Other_Letter", "Nonspacing_Mark", "Spacing_Mark", "Decimal_Number", "Letter_Number"]),
        P: charCat(charCategories2, ["Punctuation"]),
        L: charCat(charCategories2, ["Letter"]),
        N: charCat(charCategories2, ["Decimal_Number", "Letter_Number"]),
        AlphaNum: charCat(charCategories2, ["Letter", "Decimal_Number", "Letter_Number"]),
        LC: charCat(charCategories2, ["Cased_Letter"])
      };
      var marker = {
        and: "",
        comma: "",
        space: "",
        literal: "",
        markup: "",
        re: {
          and: /./,
          comma: /./,
          space: /./,
          literal: /./,
          literalName: /./
        },
        clean(s) {
          return s.replace(marker.re.space, " ").replace(marker.re.comma, ", ").replace(marker.re.literal, "");
        }
      };
      marker.re = {
        and: new RegExp(marker.and, "g"),
        comma: new RegExp(marker.comma, "g"),
        space: new RegExp(marker.space, "g"),
        literal: new RegExp(marker.literal, "g"),
        literalName: new RegExp(`^${marker.literal}([^${marker.literal}]*)${marker.literal}$`)
      };
      var preserveCase = {
        leadingCap: new RegExp(`^[${charClass.Lu}][${charClass.LnotLu}]+[${charClass.P}]?$`),
        allCaps: new RegExp(`^[${charClass.Lu}${charClass.N}]{2,}$`),
        allLower: new RegExp(`^[${charClass.Ll}${charClass.N}]{2,}$`),
        joined: new RegExp(`^[${charClass.Lu}][${charClass.LnotLu}]*([-+][${charClass.L}${charClass.N}]+)*[${charClass.P}]*$`),
        hasUpper: new RegExp(`[${charClass.Lu}]`),
        hasLower: new RegExp(`[${charClass.Ll}]`),
        isNumber: /^[0-9]+$/,
        hasAlpha: new RegExp(`[${charClass.L}]`),
        hasAlphaNum: new RegExp(`[${charClass.AlphaNum}]`),
        notAlphaNum: new RegExp(`[^${charClass.AlphaNum}]`, "g"),
        sentenceStart: new RegExp(`(^|([\u2014:?!.]\\s+))[${charClass.Lu}]`, "g"),
        markup: /<\/?span[^>]*>/g,
        acronym: new RegExp(`.*\\.${marker.markup}*[${charClass.Lu}]${marker.markup}*\\.$`),
        notCaseSensitive: new RegExp(`[^${charClass.LC}]`),
        isCaseSensitive: new RegExp(`[${charClass.LC}]`),
        quoted: /("[^"]+")|(“[^“]+“)/g
      };
      exports.fields = {
        creator: [
          "author",
          "bookauthor",
          "collaborator",
          "commentator",
          "director",
          "editor",
          "editora",
          "editorb",
          "editors",
          "holder",
          "scriptwriter",
          "translator"
        ],
        title: [
          "title",
          "series",
          "shorttitle",
          "booktitle",
          "type",
          "origtitle",
          "maintitle",
          "eventtitle"
        ],
        unnest: [
          "publisher",
          "location"
        ],
        verbatim: [
          "doi",
          "eprint",
          "file",
          "files",
          "groups",
          "ids",
          "url",
          "verba",
          "verbb",
          "verbc"
        ],
        html: [
          "annotation",
          "comment",
          "annote",
          "review",
          "notes",
          "note"
        ],
        unabbrev: [
          "journal",
          "journaltitle",
          "journal-full"
        ]
      };
      var english = [
        "american",
        "british",
        "canadian",
        "english",
        "australian",
        "newzealand",
        "usenglish",
        "ukenglish",
        "en",
        "eng",
        "en-au",
        "en-bz",
        "en-ca",
        "en-cb",
        "en-gb",
        "en-ie",
        "en-jm",
        "en-nz",
        "en-ph",
        "en-tt",
        "en-us",
        "en-za",
        "en-zw",
        "anglais"
      ];
      var Parser2 = class {
        constructor(options2 = {}) {
          this.in_preamble = false;
          this.preamble = [];
          this.log = function(_str) {
          };
          for (const [option, value] of Object.entries(options2)) {
            if (typeof value === "undefined")
              delete options2[option];
          }
          if (options2.errorHandler === false) {
            options2.errorHandler = function(_err) {
            };
          } else if (typeof options2.errorHandler === "undefined") {
            options2.errorHandler = function(err) {
              throw err;
            };
          }
          if (typeof options2.sentenceCase === "boolean") {
            options2.sentenceCase = options2.sentenceCase ? english : [];
          } else {
            options2.sentenceCase = options2.sentenceCase || english;
          }
          if (!options2.strings)
            options2.strings = {};
          if (!options2.unabbreviate)
            options2.unabbreviate = {};
          if (options2.raw) {
            options2.sentenceCase = false;
            options2.caseProtection = false;
          }
          this.options = Object.assign({ caseProtection: "as-needed", verbatimFields: [/^citeulike-linkout-[0-9]+$/, /^bdsk-url-[0-9]+$/, ...exports.fields.verbatim], verbatimCommands: ["url"], unnestFields: [...exports.fields.title, ...exports.fields.unnest, ...exports.fields.verbatim], unnestMode: "unwrap", htmlFields: exports.fields.html, guessAlreadySentenceCased: true, applyCrossRef: options2.applyCrossRef || typeof options2.applyCrossRef === "undefined", markup: {} }, options2);
          const markup_defaults = {
            enquote: { open: "\u201C", close: "\u201D" },
            sub: { open: "<sub>", close: "</sub>" },
            sup: { open: "<sup>", close: "</sup>" },
            bold: { open: "<b>", close: "</b>" },
            italics: { open: "<i>", close: "</i>" },
            smallCaps: { open: '<span style="font-variant:small-caps;">', close: "</span>" },
            caseProtect: { open: '<span class="nocase">', close: "</span>" },
            roman: { open: "", close: "" },
            fixedWidth: { open: "<tt>", close: "</tt>" }
          };
          for (const [markup, { open, close }] of Object.entries(markup_defaults)) {
            this.options.markup[markup] = this.options.markup[markup] || { open, close };
          }
          for (const i of [1, 2, 3, 4]) {
            this.options.markup[`h${i}`] = this.options.markup[`h${i}`] || { open: `<h${i}>`, close: `</h${i}>` };
          }
          this.unresolvedStrings = {};
          this.errors = [];
          this.comments = [];
          this.entries = [];
          this.strings = {};
          this.newcommands = {};
          this.default_strings = {
            JAN: [this.text("01")],
            FEB: [this.text("02")],
            MAR: [this.text("03")],
            APR: [this.text("04")],
            MAY: [this.text("05")],
            JUN: [this.text("06")],
            JUL: [this.text("07")],
            AUG: [this.text("08")],
            SEP: [this.text("09")],
            OCT: [this.text("10")],
            NOV: [this.text("11")],
            DEC: [this.text("12")],
            ACMCS: [this.text("ACM Computing Surveys")],
            ACTA: [this.text("Acta Informatica")],
            CACM: [this.text("Communications of the ACM")],
            IBMJRD: [this.text("IBM Journal of Research and Development")],
            IBMSJ: [this.text("IBM Systems Journal")],
            IEEESE: [this.text("IEEE Transactions on Software Engineering")],
            IEEETC: [this.text("IEEE Transactions on Computers")],
            IEEETCAD: [this.text("IEEE Transactions on Computer-Aided Design of Integrated Circuits")],
            IPL: [this.text("Information Processing Letters")],
            JACM: [this.text("Journal of the ACM")],
            JCSS: [this.text("Journal of Computer and System Sciences")],
            SCP: [this.text("Science of Computer Programming")],
            SICOMP: [this.text("SIAM Journal on Computing")],
            TOCS: [this.text("ACM Transactions on Computer Systems")],
            TODS: [this.text("ACM Transactions on Database Systems")],
            TOG: [this.text("ACM Transactions on Graphics")],
            TOMS: [this.text("ACM Transactions on Mathematical Software")],
            TOOIS: [this.text("ACM Transactions on Office Information Systems")],
            TOPLAS: [this.text("ACM Transactions on Programming Languages and Systems")],
            TCS: [this.text("Theoretical Computer Science")]
          };
          if (typeof this.options.strings === "string") {
            const strings = this.options.strings;
            this.options.strings = {};
            this.parseChunk({ text: strings, offset: { pos: 0, line: 0 } });
            this.preloaded_strings = this.strings;
            this.strings = {};
          } else {
            this.preloaded_strings = {};
          }
        }
        ast(input, clean = true) {
          let parsed = [];
          for (const chunk of chunker2.parse(input)) {
            const { children } = bibtex.parse(chunk.text, Object.assign(Object.assign({}, this.options), { combiningDiacritics: unicode2latex_1.diacritics.commands }));
            if (clean)
              this.clean(children);
            parsed = parsed.concat(children);
          }
          return parsed;
        }
        parse(input) {
          for (const chunk of chunker2.parse(input)) {
            this.parseChunk(chunk);
          }
          return this.parsed();
        }
        async parseAsync(input) {
          for (const chunk of await chunker2.promises.parse(input)) {
            this.parseChunk(chunk);
          }
          return this.parsed();
        }
        parsed() {
          this.field = null;
          const strings = {};
          this.cleaning = { type: "other" };
          for (const [key, value] of Object.entries(this.strings)) {
            this.field = {
              name: "@string",
              text: "",
              level: 0,
              preserveRanges: null,
              words: {
                upper: 0,
                lower: 0,
                other: 0
              }
            };
            this.convert(this.clean(value));
            strings[key] = this.field.text;
          }
          if (this.options.applyCrossRef) {
            const entries = this.entries.reduce((acc, entry) => {
              acc[entry.key] = entry;
              return acc;
            }, {});
            for (const entry of this.entries) {
              if (entry.fields.crossref) {
                for (const parent_key of entry.fields.crossref) {
                  const parent = entries[parent_key];
                  const mapping = parent && crossref_json_1.default.find((xref) => xref.source.includes(parent.type) && xref.target.includes(entry.type));
                  if (parent && mapping) {
                    for (const { source: source2, target } of mapping.fields) {
                      if (parent.fields[source2] && !entry.fields[target]) {
                        entry.fields[target] = JSON.parse(JSON.stringify(parent.fields[source2]));
                      }
                    }
                  }
                }
              }
            }
          }
          const { comments, jabref } = (0, jabref_1.parse)(this.comments);
          return {
            errors: this.errors,
            entries: this.entries,
            comments,
            jabref,
            strings,
            preamble: this.preamble
          };
        }
        preserve(start, end, reason) {
          if (!this.field.preserveRanges)
            return;
          if (!end) {
            this.field.preserveRanges = null;
            return;
          }
          this.field.preserveRanges.push({ start, end, description: reason });
        }
        parseChunk(chunk) {
          this.chunk = chunk.text;
          try {
            let bib = bibtex.parse(chunk.text, Object.assign(Object.assign({}, this.options), { combiningDiacritics: unicode2latex_1.diacritics.commands }));
            if (bib.kind !== "Bibliography")
              throw new Error(this.show(bib));
            bib = this.clean(bib);
            for (const entity of bib.children) {
              switch (entity.kind) {
                case "Entry":
                case "BracedComment":
                case "LineComment":
                case "PreambleExpression":
                  this.convert(entity);
                  break;
                case "StringDeclaration":
                case "NonEntryText":
                  break;
              }
            }
            return bib;
          } catch (err) {
            if (!err.location)
              throw err;
            this.errors.push({
              message: err.message,
              line: err.location.start.line + chunk.offset.line,
              column: err.location.start.column,
              source: this.chunk
            });
            return null;
          }
        }
        show(o) {
          let text = JSON.stringify(o);
          if (this.chunk)
            text += `
${this.chunk.trim()}`;
          return text;
        }
        text(value = "") {
          return { kind: "Text", value, mode: "text" };
        }
        error(err, returnvalue) {
          if (typeof this.options.errorHandler === "function")
            this.options.errorHandler(err);
          return returnvalue || this.text();
        }
        condense(node) {
          node.value = this.clean(node.value);
          node.value = node.value.reduce((acc, child) => {
            if (child.kind === "Block" && !child.case && Object.keys(child.markup).length === 0) {
              acc = acc.concat(child.value);
            } else {
              acc.push(child);
            }
            return acc;
          }, []);
          node.value = node.value.reduce((acc, child, i) => {
            if (acc.length === 0) {
              acc.push(child);
              return acc;
            }
            const last = acc[acc.length - 1];
            const next = node.value[i + 1];
            if (this.options.caseProtection === "strict" && this.onlyCaseProtected(last) && child.kind === "Text" && !child.value.match(preserveCase.isCaseSensitive) && this.onlyCaseProtected(next)) {
              last.value.push(child);
              delete last.source;
              return acc;
            }
            if (last.kind === "Block" && child.kind === "Block" && Object.keys(last.markup).sort().join("/") === Object.keys(child.markup).sort().join("/")) {
              last.value = last.value.concat(child.value);
              delete last.source;
              return acc;
            }
            if (last.kind === "Text" && child.kind === "Text" && last.mode === child.mode) {
              last.value += child.value;
              delete last.source;
              return acc;
            }
            acc.push(child);
            return acc;
          }, []);
        }
        onlyCaseProtected(node) {
          return (node === null || node === void 0 ? void 0 : node.kind) === "Block" && node.case === "protect" && Object.keys(node.markup).join("/") === "";
        }
        argument(node, kind) {
          if (!node.arguments || !node.arguments.required.length)
            return kind === "none";
          if (typeof kind === "number") {
            return node.arguments.required.length === kind ? node.arguments.required : false;
          }
          if (node.arguments.required.length !== 1)
            return false;
          if (kind === "text") {
            const first = node.arguments.required[0];
            if (first.kind === "Block") {
              switch (first.value.length) {
                case 0:
                  return "";
                case 1:
                  if (first.value[0].kind === "Text")
                    return first.value[0].value;
                  break;
              }
            }
            kind = "Text";
          }
          if (node.arguments.required.length !== 1 || node.arguments.required[0].kind !== kind)
            return false;
          switch (node.arguments.required[0].kind) {
            case "Text":
              return node.arguments.required[0].value;
            case "RegularCommand":
              return node.arguments.required[0];
            case "Block":
              return node.arguments.required[0];
          }
          return false;
        }
        clean(node) {
          if (Array.isArray(node))
            return node.map((child) => this.clean(child));
          delete node.loc;
          switch (node.kind) {
            case "InlineMath":
            case "DisplayMath":
              return this.clean_block(node);
            case "Environment":
              return this.clean_environment(node);
            case "Block":
              return this.clean_block(node);
            case "Bibliography":
              return this.clean_bib(node);
            case "RegularCommand":
              return this.clean_command(node);
            case "DiacriticCommand":
              return this.clean_diacritic(node);
            case "Entry":
              return this.clean_entry(node);
            case "Field":
              return this.options.raw ? node : this.clean_field(node);
            case "StringDeclaration":
              return this.clean_stringdecl(node);
            case "StringReference":
              return this.clean_stringref(node);
            case "SubscriptCommand":
            case "SuperscriptCommand":
              return this.clean_script(node);
            case "SymbolCommand":
              return this.clean_symbol(node);
            case "PreambleExpression":
              return this.clean_preamble(node);
            case "Number":
            case "Text":
            case "BracedComment":
            case "LineComment":
              return node;
            default:
              return this.error(new ParserError(`no cleanup method for ${this.show(node)}`, node), this.text());
          }
        }
        clean_preamble(node) {
          this.in_preamble = true;
          try {
            return this.clean(node.value);
          } finally {
            this.in_preamble = false;
          }
        }
        clean_bib(node) {
          node.children = node.children.filter((child) => child.kind !== "NonEntryText").map((child) => this.clean(child));
          return node;
        }
        clean_stringdecl(node) {
          this.strings[node.name.toUpperCase()] = node.value;
          return node;
        }
        clean_stringref(node) {
          const name = node.name.toUpperCase();
          const stringvalue = this.strings[name] || this.options.strings[name] || this.preloaded_strings[name] || this.default_strings[name] || exports.fields.unabbrev.includes(this.cleaning.name) && this.options.unabbreviate[name] && [this.text(this.options.unabbreviate[name])];
          if (!stringvalue) {
            if (!this.unresolvedStrings[name])
              this.errors.push({ message: `Unresolved @string reference ${JSON.stringify(node.name)}` });
            this.unresolvedStrings[name] = true;
          }
          return this.clean({
            kind: "Block",
            case: stringvalue ? void 0 : "preserve",
            markup: {},
            value: stringvalue ? JSON.parse(JSON.stringify(stringvalue)) : [this.text(node.name)]
          });
        }
        clean_entry(node) {
          const shortjournals = [];
          for (const field of node.fields) {
            if (exports.fields.unabbrev.includes(field.name) && Array.isArray(field.value)) {
              const abbr = field.value.map((v) => v.source).join("").toUpperCase();
              const journal = this.options.unabbreviate[abbr];
              if (journal) {
                shortjournals.push(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(field))), { name: "shortjournal" }));
                field.value = [this.text(journal)];
              }
            }
          }
          node.fields = node.fields.concat(shortjournals).map((child) => this.clean(child));
          return node;
        }
        startCleaning(name) {
          name = name.toLowerCase();
          if (exports.fields.title.includes(name)) {
            this.cleaning = { type: "title", name };
          } else if (exports.fields.creator.includes(name.replace(/s$/, ""))) {
            this.cleaning = { type: "creator", name: name.replace(/s$/, "") };
          } else {
            this.cleaning = { type: "other", name };
          }
        }
        stripNoCase(node, strip, preserve) {
          switch (node.kind) {
            case "RegularCommand":
              if (["chsf", "bibstring", "cite"].includes(node.command))
                strip = true;
              node.arguments.required.map((arg) => this.stripNoCase(arg, strip, preserve));
              break;
            case "Block":
            case "InlineMath":
            case "DisplayMath":
              if (strip && node.case === "protect") {
                if (preserve) {
                  node.case = "preserve";
                } else {
                  delete node.case;
                }
              }
              node.value.map((v) => this.stripNoCase(v, strip || node.case === "protect", preserve));
              break;
            case "Field":
              if (Array.isArray(node.value))
                node.value.forEach((v) => this.stripNoCase(v, strip, preserve));
              break;
          }
        }
        isVerbatimField(name) {
          return !!this.options.verbatimFields.find((p) => typeof p === "string" ? name === p : name.match(p));
        }
        clean_field(node) {
          this.startCleaning(node.name);
          this.stripNoCase(node, !this.options.caseProtection || this.isVerbatimField(node.name), this.options.sentenceCase.length === 0);
          if (Array.isArray(node.value))
            this.condense(node);
          return node;
        }
        clean_script(node) {
          let m, value, singlechar;
          if (singlechar = unicode2latex_1.latex[node.source])
            return this.text(singlechar);
          if ((m = node.source.match(/^([\^_])([^{}]+)$/)) && ((singlechar = unicode2latex_1.latex[`${m[1]}${m[2]}`]) || (singlechar = unicode2latex_1.latex[`${m[1]}{${m[2]}}`])))
            return this.text(singlechar);
          if ((m = node.source.match(/^([\^_])\{([^{}]+)\}$/)) && ((singlechar = unicode2latex_1.latex[`${m[1]}${m[2]}`]) || (singlechar = unicode2latex_1.latex[`${m[1]}{${m[2]}}`])))
            return this.text(singlechar);
          const cmd = node.kind === "SuperscriptCommand" ? "^" : "_";
          if (typeof node.value === "string" && (singlechar = unicode2latex_1.latex[`${cmd}${node.value}`] || unicode2latex_1.latex[`${cmd}{${node.value}}`])) {
            return this.text(singlechar);
          }
          if (typeof node.value === "string") {
            value = [this.text(node.value)];
          } else if (!Array.isArray(node.value)) {
            value = [node.value];
          } else {
            value = node.value;
          }
          const mode = node.kind === "SuperscriptCommand" ? "sup" : "sub";
          return this.clean({
            kind: "Block",
            markup: { [mode]: true },
            value
          });
        }
        clean_environment(node) {
          this.condense(node);
          return node;
        }
        needsProtection(word) {
          return !word.match(preserveCase.hasUpper) && !!word.match(preserveCase.hasLower);
        }
        clean_block(node) {
          var _a3;
          this.condense(node);
          if (this.options.caseProtection !== "strict" && ((_a3 = this.cleaning) === null || _a3 === void 0 ? void 0 : _a3.type) === "title" && node.case === "protect") {
            let preserve = true;
            for (const child of node.value) {
              if (child.kind === "Text") {
                const value = child.value.trim();
                preserve = !value.match(preserveCase.isCaseSensitive) || !value.split(/\s+/).find((word) => this.needsProtection(word));
              } else {
                preserve = false;
              }
              if (!preserve)
                break;
            }
            if (preserve)
              node.case = "preserve";
          }
          if (node.kind === "Block") {
            for (const [markup, on] of Object.entries(node.markup)) {
              if (!on)
                delete node.markup[markup];
            }
          }
          return node;
        }
        clean_diacritic(node) {
          const char = node.dotless ? `\\${node.character}` : node.character;
          let unicode2 = unicode2latex_1.latex[`\\${node.mark}{${char}}`] || unicode2latex_1.latex[`\\${node.mark}${char}`] || unicode2latex_1.latex[`{\\${node.mark} ${char}}`] || unicode2latex_1.latex[`{\\${node.mark}${char}}`] || unicode2latex_1.latex[`\\${node.mark} ${char}`];
          if (!unicode2 && !node.dotless && node.character.length === 1 && unicode2latex_1.diacritics.tounicode[node.mark])
            unicode2 = node.character + unicode2latex_1.diacritics.tounicode[node.mark];
          if (!unicode2 && !this.in_preamble)
            return this.error(new TeXError(`Unhandled \\${node.mark}{${char}}`, node, this.chunk));
          return this.text(unicode2);
        }
        clean_symbol(node) {
          if (node.command === "\\")
            return this.text("\n");
          return this.text(unicode2latex_1.latex[`\\${node.command}`] || node.command);
        }
        first_text_block(node) {
          if (!node)
            return null;
          if (node.kind === "Block") {
            for (const child of node.value) {
              switch (child.kind) {
                case "Text":
                  return child.value ? node : null;
                case "Block":
                  const candidate = this.first_text_block(child);
                  if (candidate)
                    return candidate;
                  break;
                default:
                  return null;
              }
            }
          } else {
            return null;
          }
        }
        clean_command(node) {
          var _a3;
          let arg, unicode2;
          if (unicode2 = unicode2latex_1.latex[node.source])
            return this.text(unicode2);
          switch (node.command) {
            case "newcommand":
              if (((_a3 = node.arguments) === null || _a3 === void 0 ? void 0 : _a3.required.length) === 2 && node.arguments.required[0].kind === "Block" && node.arguments.required[0].value.length === 1 && node.arguments.required[0].value[0].kind === "RegularCommand" && node.arguments.required[1].kind === "Block") {
                this.newcommands[node.arguments.required[0].value[0].command] = node.arguments.required[1].value;
                return this.text();
              }
              break;
            case "item":
              return { kind: "Markup", value: "<li>", source: node.source };
            case "frac":
              if (arg = this.argument(node, 2)) {
                if (arg[0].kind === "Text" && arg[1].kind === "Text" && (unicode2 = unicode2latex_1.latex[`\\frac{${arg[0].value}}{${arg[1].value}}`]))
                  return this.text(unicode2);
                return this.clean({
                  kind: "Block",
                  case: "protect",
                  markup: {},
                  value: [
                    { kind: "Block", markup: { sup: true }, value: [arg[0]] },
                    this.text("\u2044"),
                    { kind: "Block", markup: { sub: true }, value: [arg[1]] }
                  ]
                });
              }
              break;
            case "vspace":
            case "vphantom":
            case "path":
            case "aftergroup":
            case "ignorespaces":
            case "relax":
            case "noopsort":
            case "ifdefined":
            case "DeclarePrefChars":
            case "else":
            case "fi":
            case "makeatletter":
              return this.text();
            case "ElsevierGlyph":
              if (arg = this.argument(node, "Text")) {
                if (unicode2 = unicode2latex_1.latex[`\\${node.command}{${arg}}`])
                  return this.text(unicode2);
                return this.text(String.fromCharCode(parseInt(arg, 16)));
              }
              break;
            case "chsf":
              if (this.argument(node, "none"))
                return this.text();
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "enquote":
            case "mkbibquote":
            case "bibstring":
            case "cite":
            case "textsc":
            case "textbf":
            case "mkbibbold":
            case "section":
            case "subsection":
            case "subsubsection":
            case "subsubsubsection":
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "textsuperscript":
            case "sp":
              if ((arg = this.argument(node, "Text")) && (unicode2 = unicode2latex_1.latex[`^{${arg}}`]))
                return this.text(unicode2);
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "textsubscript":
            case "sb":
              if ((arg = this.argument(node, "Text")) && (unicode2 = unicode2latex_1.latex[`_{${arg}}`]))
                return this.text(unicode2);
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "mkbibitalic":
            case "mkbibemph":
            case "textit":
            case "emph":
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              if (arg = this.argument(node, "Text"))
                return this.clean({ kind: "Block", markup: { italics: true }, value: [this.text(arg)] });
              break;
            case "bibcyr":
              if (this.argument(node, "none"))
                return this.text();
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "hspace":
            case "mathrm":
            case "textrm":
            case "ocirc":
            case "mbox":
              if (arg = this.argument(node, "text")) {
                if (node.command === "mbox" && !arg)
                  return this.text("\u200B");
                unicode2 = unicode2latex_1.latex[`\\${node.command}{${arg}}`];
                return this.text(unicode2 || (node.command === "hspace" ? " " : arg));
              } else if (!node.arguments.required.length) {
                return node.command === "mbox" ? this.text("\u200B") : this.text();
              } else if (arg = this.argument(node, "Block")) {
                return this.clean(arg);
              }
              break;
            case "href":
              node.arguments.required = node.arguments.required.map((a) => this.clean(a));
              return node;
            case "url":
              if (arg = this.argument(node, "Text"))
                return this.text(arg);
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "sl":
            case "em":
            case "it":
            case "itshape":
            case "bf":
            case "bfseries":
            case "sc":
            case "scshape":
            case "tt":
            case "rm":
            case "sf":
            case "verb":
              return this.text();
            case "left":
            case "right":
              return this.text();
            case "par":
              return this.text("\n\n");
            case "cyr":
              if (this.argument(node, "none"))
                return this.text();
              break;
            case "polhk":
              if (unicode2 = this.argument(node, "text")) {
                if (unicode2.length === 1)
                  return this.text(`${unicode2}\u0328`);
              }
              if (this.argument(node, "none"))
                return this.text("\u0328");
              break;
            default:
              if (node.kind === "RegularCommand" && this.newcommands[node.command]) {
                return this.clean({
                  kind: "Block",
                  markup: {},
                  value: JSON.parse(JSON.stringify(this.newcommands[node.command]))
                });
              }
              if (unicode2latex_1.diacritics.tounicode[node.command]) {
                node.arguments.required = this.clean(node.arguments.required);
                let block;
                if (node.arguments.required.length === 1 && node.arguments.required[0].kind === "Text") {
                  block = {
                    kind: "Block",
                    markup: {},
                    value: [{
                      kind: "DiacriticCommand",
                      mark: node.command,
                      character: node.arguments.required[0].value,
                      dotless: false,
                      loc: node.arguments.required[0].loc,
                      source: node.arguments.required[0].source
                    }]
                  };
                  return this.clean(block);
                } else if (block = this.first_text_block(node.arguments.required[0])) {
                  let fixed = false;
                  block.value = block.value.reduce((value, child) => {
                    if (!fixed && child.kind === "Text") {
                      fixed = true;
                      value.push({ kind: "DiacriticCommand", mark: node.command, character: child.value[0] });
                      value.push(Object.assign(Object.assign({}, child), { value: child.value.substring(1) }));
                    } else {
                      value.push(child);
                    }
                    return value;
                  }, []);
                  return this.clean({
                    kind: "Block",
                    markup: {},
                    value: node.arguments.required
                  });
                } else {
                  if (node.command === "overline")
                    return this.text(" ");
                  return this.clean({
                    kind: "Block",
                    markup: {},
                    value: [this.text(` ${unicode2latex_1.diacritics.tounicode[node.command]}`)].concat(node.arguments.required)
                  });
                }
              }
              if (unicode2 = unicode2latex_1.latex[node.source] || unicode2latex_1.latex[`${node.source}{}`])
                return this.text(unicode2);
              if ((unicode2 = unicode2latex_1.latex[`\\${node.command}`] || unicode2latex_1.latex[`\\${node.command}{}`]) && this.argument(node, "none"))
                return this.text(unicode2);
              if ((arg = this.argument(node, "Text")) && (unicode2 = unicode2latex_1.latex[`\\${node.command}{${arg}}`]))
                return this.text(unicode2);
              break;
          }
          if (this.in_preamble)
            return this.text(node.source);
          if (this.options.unknownCommandHandler) {
            return this.options.unknownCommandHandler.call(this, node);
          } else if (this.options.unknownCommandHandler === false) {
            return this.text();
          } else {
            return this.error(new TeXError(`Unhandled command: ${node.command}${this.show(node)}`, node, this.chunk));
          }
        }
        preserveCase(word) {
          var _a3, _b;
          if (!word.trim())
            return false;
          if (!word.match(preserveCase.hasAlphaNum))
            return true;
          word = word.replace(/[/’'”:()]/g, "");
          if (word === "I")
            return true;
          if (word.length === 1)
            return false;
          if (word.replace(preserveCase.notCaseSensitive) === "")
            return false;
          if (word.match(preserveCase.leadingCap) && ((_b = (_a3 = this.field) === null || _a3 === void 0 ? void 0 : _a3.text) === null || _b === void 0 ? void 0 : _b.length) === 0)
            return false;
          if (word.match(preserveCase.allCaps))
            return true;
          if (word.length > 1 && word.match(preserveCase.joined))
            return false;
          if (word.match(preserveCase.hasUpper))
            return true;
          if (word.match(preserveCase.isNumber))
            return true;
          return false;
        }
        convert(node) {
          if (Array.isArray(node))
            return node.map((child) => this.convert(child));
          if (this.options.raw && this.field)
            node = this.text(node.source);
          switch (node.kind) {
            case "Markup":
              if (this.field)
                this.field.text += node.value;
              break;
            case "BracedComment":
            case "LineComment":
              this.comments.push(node.value);
              break;
            case "Entry":
              this.convert_entry(node);
              break;
            case "Number":
              this.convert_number(node);
              break;
            case "Text":
              this.convert_text(node);
              break;
            case "Block":
            case "InlineMath":
            case "DisplayMath":
              const start = this.field ? this.field.text.length : null;
              const preserve = typeof start === "number" && this.field.preserveRanges;
              this.convert_block(node);
              if (preserve && (node.case || node.kind.endsWith("Math")))
                this.preserve(start, this.field.text.length);
              break;
            case "Environment":
              this.convert_environment(node);
              break;
            case "PreambleExpression":
              this.preamble.push(node.value.map((preamble) => preamble.source).join("\n\n"));
              break;
            case "StringDeclaration":
              break;
            default:
              if (node.kind === "RegularCommand" && node.command === "href") {
                this.convert_href(node);
              } else {
                return this.error(new ParserError(`no converter for ${node.kind}: ${this.show(node)}`, node));
              }
          }
        }
        splitOnce(s, sep, fromEnd = false) {
          const split = fromEnd ? s.lastIndexOf(sep) : s.indexOf(sep);
          return split < 0 ? [s, ""] : [s.substr(0, split), s.substr(split + 1)];
        }
        parseName(name) {
          let parsed = null;
          const parts = name.split(marker.comma);
          if (parts.length && !parts.find((p) => !p.match(/^[a-z]+(-i)?=/i))) {
            for (const part of parts) {
              parsed = parsed || {};
              const [attr, value] = this.splitOnce(part.replace(marker.re.space, ""), "=").map((v) => v.trim());
              if (!value) {
                parsed = null;
                break;
              }
              switch (attr.toLowerCase()) {
                case "family":
                  parsed.lastName = value;
                  break;
                case "given-i":
                  parsed.initial = value;
                  break;
                case "given":
                  parsed.firstName = value;
                  break;
                case "prefix":
                  parsed.prefix = value;
                  break;
                case "suffix":
                  parsed.suffix = value;
                  break;
                case "useprefix":
                  parsed.useprefix = value.toLowerCase() === "true";
                  break;
                case "juniorcomma":
                  parsed.useprefix = value.toLowerCase() === "true";
                  break;
                default:
                  parsed[attr.toLowerCase()] = value;
                  break;
              }
            }
          }
          const prefix = /(.+?)\s+(vere|von|van den|van der|van|de|del|della|der|di|da|pietro|vanden|du|st.|st|la|lo|ter|bin|ibn|te|ten|op|ben|al)\s+(.+)/;
          let m;
          switch (parsed ? 0 : parts.length) {
            case 0:
              break;
            case 1:
              if (marker.re.literalName.test(parts[0])) {
                parsed = { literal: parts[0] };
              } else if (m = parts[0].replace(marker.re.space, " ").match(prefix)) {
                parsed = {
                  firstName: m[1],
                  prefix: m[2],
                  lastName: m[3]
                };
              } else {
                const [firstName, lastName] = this.splitOnce(parts[0], marker.space, true);
                if (lastName) {
                  parsed = { firstName, lastName };
                } else {
                  parsed = { lastName: firstName };
                }
              }
              break;
            case 2:
              parsed = {
                lastName: parts[0],
                firstName: parts[1]
              };
              break;
            default:
              parsed = {
                lastName: parts[0],
                suffix: parts[1],
                firstName: parts.slice(2).join(marker.comma)
              };
          }
          for (const [k, v] of Object.entries(parsed)) {
            if (typeof v !== "string")
              continue;
            parsed[k] = marker.clean(v).trim();
          }
          return parsed;
        }
        convert_entry(node) {
          this.entry = {
            key: node.id,
            type: node.type,
            fields: {},
            creators: {}
          };
          this.entries.push(this.entry);
          const order = ["langid", "hyphenation", "language"];
          node.fields.sort((a, b) => {
            const ia = order.indexOf(a.name);
            const ib = order.indexOf(b.name);
            if (ia === -1 && ib === -1)
              return a.name.localeCompare(b.name);
            if (ia === -1)
              return 1;
            if (ib === -1)
              return -1;
            return ia - ib;
          });
          let sentenceCase = !!this.options.sentenceCase.length;
          for (const field of node.fields) {
            if (field.kind !== "Field")
              return this.error(new ParserError(`Expected Field, got ${field.kind}`, node));
            this.startCleaning(field.name);
            this.field = {
              name: field.name,
              text: "",
              level: 0,
              words: {
                upper: 0,
                lower: 0,
                other: 0
              },
              preserveRanges: sentenceCase && exports.fields.title.includes(field.name) ? [] : null,
              html: this.options.htmlFields.includes(field.name)
            };
            this.entry.fields[this.field.name] = this.entry.fields[this.field.name] || [];
            if (field.value.kind === "Number") {
              this.entry.fields[this.field.name].push(field.value.value);
              this.field = null;
              continue;
            }
            this.convert(field.value);
            this.field.text = this.field.text.trim();
            this.field.text = this.field.text.replace(/<\/([a-z])><\1>/g, "");
            this.field.text = this.field.text.replace(/<([a-z])>(\s*)<\/\1>/g, "$1");
            if (!this.field.text)
              continue;
            switch (this.field.name) {
              case "langid":
              case "hyphenation":
                sentenceCase = sentenceCase && this.options.sentenceCase.includes(this.field.text.toLowerCase());
                break;
              case "language":
                sentenceCase = sentenceCase && !!this.field.text.toLowerCase().trim().split(/\s*,\s*/).find((lang) => this.options.sentenceCase.includes(lang));
                break;
            }
            if (this.field.name.match(/^(keywords?|groups)$/)) {
              for (let text of this.field.text.split(marker.comma)) {
                text = text.trim();
                if (text)
                  this.entry.fields[this.field.name].push(text);
              }
            } else if (this.cleaning.type === "creator") {
              if (!this.entry.creators[this.field.name])
                this.entry.creators[this.field.name] = [];
              if (this.field.text.includes(`${marker.comma}${marker.and}`)) {
                this.field.text = this.field.text.replace(new RegExp(`${marker.comma}${marker.and}`, "g"), marker.and).replace(new RegExp(marker.comma), marker.and);
              }
              for (const creator of this.field.text.split(marker.and)) {
                this.entry.fields[this.field.name].push(marker.clean(creator));
                this.entry.creators[this.field.name].push(this.parseName(creator));
              }
            } else if (exports.fields.unabbrev.includes(field.name)) {
              this.entry.fields[this.field.name].push((this.options.unabbreviate[this.field.text] || this.field.text).normalize("NFC"));
            } else {
              if (this.field.preserveRanges) {
                if (this.options.guessAlreadySentenceCased && Math.max(this.field.words.upper, this.field.words.lower) > this.field.words.other + Math.min(this.field.words.upper, this.field.words.lower)) {
                  this.preserve(null, null);
                } else {
                  const txt = this.field.text.replace(preserveCase.markup, (markup) => marker.markup.repeat(markup.length));
                  let match;
                  preserveCase.sentenceStart.lastIndex = 0;
                  while (match = preserveCase.sentenceStart.exec(txt)) {
                    if (match.index > 2 && txt.substr(0, match.index + 1).match(preserveCase.acronym))
                      continue;
                    this.preserve(match.index, match.index + match[0].length);
                  }
                  preserveCase.quoted.lastIndex = 0;
                  while (match = preserveCase.quoted.exec(this.field.text)) {
                    this.preserve(match.index, match.index + match[0].length);
                  }
                }
              }
              this.entry.fields[this.field.name].push(this.convertToSentenceCase(this.field.text).normalize("NFC"));
            }
          }
          this.field = null;
        }
        convertToSentenceCase(text) {
          if (!this.field.preserveRanges)
            return text;
          const sentenceCased = restore(sentenceCaser.convert(text, true), text, this.field.preserveRanges);
          if (text !== sentenceCased)
            this.entry.sentenceCased = true;
          return sentenceCased;
        }
        convert_number(node) {
          this.field.text += `${node.value}`;
        }
        convert_text(node) {
          if (node.mode === "verbatim") {
            this.field.text += node.value.trim();
            return;
          }
          for (const word of node.value.split(/\b/)) {
            if (word.match(preserveCase.allLower)) {
              this.field.words.lower++;
            } else if (word.match(preserveCase.allCaps)) {
              this.field.words.upper++;
            } else if (word.match(preserveCase.hasAlpha)) {
              this.field.words.other++;
            }
          }
          if (this.field.level === 0 && this.cleaning.type === "creator") {
            this.field.text += node.value.replace(/\s+and\s+/ig, marker.and).replace(/\s*,\s*/g, marker.comma).replace(/\s+/g, marker.space);
            return;
          }
          if (this.field.level === 0 && this.field.name.match(/^(keywords?|groups)$/)) {
            this.field.text += node.value.replace(/\s*[;,]\s*/g, marker.comma);
            return;
          }
          if (this.field.html) {
            this.field.text += node.value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
          } else if (this.field.preserveRanges) {
            const words = node.value.split(/(\s+)/);
            for (const word of words) {
              const start = this.field.text.length;
              this.field.text += word;
              if (this.preserveCase(word))
                this.preserve(start, this.field.text.length);
            }
          } else {
            this.field.text += node.value;
          }
        }
        convert_environment(node) {
          const [open, close] = {
            enumerate: ["<ol>", "</ol>"],
            itemize: ["<ul>", "</ul>"],
            quotation: ["<blockquote>", "</blockquote>"]
          }[node.env] || ["", ""];
          if (!open)
            this.error(new TeXError(`Unhandled \\${node.env}{...}`, node, this.chunk));
          this.field.text += open;
          this.convert_block(Object.assign(Object.assign({}, node), { kind: "Block", markup: {} }));
          this.field.text += close;
        }
        convert_href(node) {
          this.field.text += '<a href="';
          this.convert(node.arguments.required[0]);
          this.field.text += '">';
          this.convert(node.arguments.required[1]);
          this.field.text += "</a>";
        }
        convert_block(node) {
          const start = this.field.text.length;
          let prefix = "";
          let postfix2 = "";
          if (this.options.caseProtection !== "strict" && this.cleaning.type === "other")
            delete node.case;
          if (this.cleaning.type === "creator" && node.case === "protect") {
            prefix += marker.literal;
            postfix2 = marker.literal + postfix2;
            delete node.case;
          }
          if (node.case === "protect") {
            prefix += this.options.markup.caseProtect.open;
            postfix2 = this.options.markup.caseProtect.close + postfix2;
          }
          if (node.kind === "Block") {
            for (const markup of Object.keys(node.markup)) {
              if (!this.options.markup[markup]) {
                this.error(new ParserError(`markup: ${markup}`, node));
                return;
              }
              prefix += this.options.markup[markup].open;
              postfix2 = `${this.options.markup[markup].close}${postfix2}`;
            }
          }
          const end = {
            withoutPrefix: this.field.text.length,
            withPrefix: this.field.text.length + prefix.length
          };
          this.field.text += prefix;
          this.field.level++;
          this.convert(node.value);
          this.field.level--;
          const added = this.field.text.substring(end.withPrefix);
          const added_text = added.replace(/<\/?[^>]+>/g, "");
          const needsProtection = added_text && (this.options.caseProtection === "strict" && added_text.match(preserveCase.isCaseSensitive) || this.options.caseProtection === "as-needed" && added_text.split(/\s+/).find((word) => this.needsProtection(word)));
          if (!added) {
            this.field.text = this.field.text.substring(0, end.withoutPrefix);
          } else if (this.field.preserveRanges && prefix === this.options.markup.caseProtect.open && !needsProtection) {
            this.field.text = this.field.text.substring(0, end.withoutPrefix) + added;
            this.field.preserveRanges = this.field.preserveRanges.filter((range) => range.start < end.withoutPrefix);
          } else {
            this.field.text += postfix2;
          }
          this.field.text = this.field.text.replace(/<(sup|sub)>([^<>]+)<\/\1>$/i, (m, mode, chars) => {
            const cmd = mode === "sup" ? "^" : "_";
            let script = "";
            for (const char of chars) {
              const unicode2 = unicode2latex_1.latex[`${cmd}${char}`] || unicode2latex_1.latex[`${cmd}{${char}}`];
              script += unicode2 ? unicode2 : `<${mode}>${char}</${mode}>`;
            }
            script = script.replace(new RegExp(`</${mode}><${mode}>`, "g"), "");
            return script.length < m.length ? script : m;
          });
          if (node.case && this.field.preserveRanges)
            this.preserve(start, this.field.text.length);
        }
      };
      function parse3(input, options2 = {}) {
        const parser = new Parser2(options2);
        return parser.parse(input);
      }
      exports.parse = parse3;
      function ast(input, options2 = {}, clean = true) {
        const parser = new Parser2(options2);
        return parser.ast(input, clean);
      }
      exports.ast = ast;
      exports.promises = {
        async parse(input, options2 = {}) {
          const parser = new Parser2(options2);
          return await parser.parseAsync(input);
        }
      };
      exports.chunker = tslib_1.__importStar(require_chunker());
      exports.jabref = tslib_1.__importStar(require_jabref());
    }
  });

  // node_modules/he/he.js
  var require_he = __commonJS({
    "node_modules/he/he.js"(exports, module) {
      init_globals();
      (function(root) {
        var freeExports = typeof exports == "object" && exports;
        var freeModule = typeof module == "object" && module && module.exports == freeExports && module;
        var freeGlobal = typeof global == "object" && global;
        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
          root = freeGlobal;
        }
        var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
        var regexAsciiWhitelist = /[\x01-\x7F]/g;
        var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
        var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
        var encodeMap = { "\xAD": "shy", "\u200C": "zwnj", "\u200D": "zwj", "\u200E": "lrm", "\u2063": "ic", "\u2062": "it", "\u2061": "af", "\u200F": "rlm", "\u200B": "ZeroWidthSpace", "\u2060": "NoBreak", "\u0311": "DownBreve", "\u20DB": "tdot", "\u20DC": "DotDot", "	": "Tab", "\n": "NewLine", "\u2008": "puncsp", "\u205F": "MediumSpace", "\u2009": "thinsp", "\u200A": "hairsp", "\u2004": "emsp13", "\u2002": "ensp", "\u2005": "emsp14", "\u2003": "emsp", "\u2007": "numsp", "\xA0": "nbsp", "\u205F\u200A": "ThickSpace", "\u203E": "oline", "_": "lowbar", "\u2010": "dash", "\u2013": "ndash", "\u2014": "mdash", "\u2015": "horbar", ",": "comma", ";": "semi", "\u204F": "bsemi", ":": "colon", "\u2A74": "Colone", "!": "excl", "\xA1": "iexcl", "?": "quest", "\xBF": "iquest", ".": "period", "\u2025": "nldr", "\u2026": "mldr", "\xB7": "middot", "'": "apos", "\u2018": "lsquo", "\u2019": "rsquo", "\u201A": "sbquo", "\u2039": "lsaquo", "\u203A": "rsaquo", '"': "quot", "\u201C": "ldquo", "\u201D": "rdquo", "\u201E": "bdquo", "\xAB": "laquo", "\xBB": "raquo", "(": "lpar", ")": "rpar", "[": "lsqb", "]": "rsqb", "{": "lcub", "}": "rcub", "\u2308": "lceil", "\u2309": "rceil", "\u230A": "lfloor", "\u230B": "rfloor", "\u2985": "lopar", "\u2986": "ropar", "\u298B": "lbrke", "\u298C": "rbrke", "\u298D": "lbrkslu", "\u298E": "rbrksld", "\u298F": "lbrksld", "\u2990": "rbrkslu", "\u2991": "langd", "\u2992": "rangd", "\u2993": "lparlt", "\u2994": "rpargt", "\u2995": "gtlPar", "\u2996": "ltrPar", "\u27E6": "lobrk", "\u27E7": "robrk", "\u27E8": "lang", "\u27E9": "rang", "\u27EA": "Lang", "\u27EB": "Rang", "\u27EC": "loang", "\u27ED": "roang", "\u2772": "lbbrk", "\u2773": "rbbrk", "\u2016": "Vert", "\xA7": "sect", "\xB6": "para", "@": "commat", "*": "ast", "/": "sol", "undefined": null, "&": "amp", "#": "num", "%": "percnt", "\u2030": "permil", "\u2031": "pertenk", "\u2020": "dagger", "\u2021": "Dagger", "\u2022": "bull", "\u2043": "hybull", "\u2032": "prime", "\u2033": "Prime", "\u2034": "tprime", "\u2057": "qprime", "\u2035": "bprime", "\u2041": "caret", "`": "grave", "\xB4": "acute", "\u02DC": "tilde", "^": "Hat", "\xAF": "macr", "\u02D8": "breve", "\u02D9": "dot", "\xA8": "die", "\u02DA": "ring", "\u02DD": "dblac", "\xB8": "cedil", "\u02DB": "ogon", "\u02C6": "circ", "\u02C7": "caron", "\xB0": "deg", "\xA9": "copy", "\xAE": "reg", "\u2117": "copysr", "\u2118": "wp", "\u211E": "rx", "\u2127": "mho", "\u2129": "iiota", "\u2190": "larr", "\u219A": "nlarr", "\u2192": "rarr", "\u219B": "nrarr", "\u2191": "uarr", "\u2193": "darr", "\u2194": "harr", "\u21AE": "nharr", "\u2195": "varr", "\u2196": "nwarr", "\u2197": "nearr", "\u2198": "searr", "\u2199": "swarr", "\u219D": "rarrw", "\u219D\u0338": "nrarrw", "\u219E": "Larr", "\u219F": "Uarr", "\u21A0": "Rarr", "\u21A1": "Darr", "\u21A2": "larrtl", "\u21A3": "rarrtl", "\u21A4": "mapstoleft", "\u21A5": "mapstoup", "\u21A6": "map", "\u21A7": "mapstodown", "\u21A9": "larrhk", "\u21AA": "rarrhk", "\u21AB": "larrlp", "\u21AC": "rarrlp", "\u21AD": "harrw", "\u21B0": "lsh", "\u21B1": "rsh", "\u21B2": "ldsh", "\u21B3": "rdsh", "\u21B5": "crarr", "\u21B6": "cularr", "\u21B7": "curarr", "\u21BA": "olarr", "\u21BB": "orarr", "\u21BC": "lharu", "\u21BD": "lhard", "\u21BE": "uharr", "\u21BF": "uharl", "\u21C0": "rharu", "\u21C1": "rhard", "\u21C2": "dharr", "\u21C3": "dharl", "\u21C4": "rlarr", "\u21C5": "udarr", "\u21C6": "lrarr", "\u21C7": "llarr", "\u21C8": "uuarr", "\u21C9": "rrarr", "\u21CA": "ddarr", "\u21CB": "lrhar", "\u21CC": "rlhar", "\u21D0": "lArr", "\u21CD": "nlArr", "\u21D1": "uArr", "\u21D2": "rArr", "\u21CF": "nrArr", "\u21D3": "dArr", "\u21D4": "iff", "\u21CE": "nhArr", "\u21D5": "vArr", "\u21D6": "nwArr", "\u21D7": "neArr", "\u21D8": "seArr", "\u21D9": "swArr", "\u21DA": "lAarr", "\u21DB": "rAarr", "\u21DD": "zigrarr", "\u21E4": "larrb", "\u21E5": "rarrb", "\u21F5": "duarr", "\u21FD": "loarr", "\u21FE": "roarr", "\u21FF": "hoarr", "\u2200": "forall", "\u2201": "comp", "\u2202": "part", "\u2202\u0338": "npart", "\u2203": "exist", "\u2204": "nexist", "\u2205": "empty", "\u2207": "Del", "\u2208": "in", "\u2209": "notin", "\u220B": "ni", "\u220C": "notni", "\u03F6": "bepsi", "\u220F": "prod", "\u2210": "coprod", "\u2211": "sum", "+": "plus", "\xB1": "pm", "\xF7": "div", "\xD7": "times", "<": "lt", "\u226E": "nlt", "<\u20D2": "nvlt", "=": "equals", "\u2260": "ne", "=\u20E5": "bne", "\u2A75": "Equal", ">": "gt", "\u226F": "ngt", ">\u20D2": "nvgt", "\xAC": "not", "|": "vert", "\xA6": "brvbar", "\u2212": "minus", "\u2213": "mp", "\u2214": "plusdo", "\u2044": "frasl", "\u2216": "setmn", "\u2217": "lowast", "\u2218": "compfn", "\u221A": "Sqrt", "\u221D": "prop", "\u221E": "infin", "\u221F": "angrt", "\u2220": "ang", "\u2220\u20D2": "nang", "\u2221": "angmsd", "\u2222": "angsph", "\u2223": "mid", "\u2224": "nmid", "\u2225": "par", "\u2226": "npar", "\u2227": "and", "\u2228": "or", "\u2229": "cap", "\u2229\uFE00": "caps", "\u222A": "cup", "\u222A\uFE00": "cups", "\u222B": "int", "\u222C": "Int", "\u222D": "tint", "\u2A0C": "qint", "\u222E": "oint", "\u222F": "Conint", "\u2230": "Cconint", "\u2231": "cwint", "\u2232": "cwconint", "\u2233": "awconint", "\u2234": "there4", "\u2235": "becaus", "\u2236": "ratio", "\u2237": "Colon", "\u2238": "minusd", "\u223A": "mDDot", "\u223B": "homtht", "\u223C": "sim", "\u2241": "nsim", "\u223C\u20D2": "nvsim", "\u223D": "bsim", "\u223D\u0331": "race", "\u223E": "ac", "\u223E\u0333": "acE", "\u223F": "acd", "\u2240": "wr", "\u2242": "esim", "\u2242\u0338": "nesim", "\u2243": "sime", "\u2244": "nsime", "\u2245": "cong", "\u2247": "ncong", "\u2246": "simne", "\u2248": "ap", "\u2249": "nap", "\u224A": "ape", "\u224B": "apid", "\u224B\u0338": "napid", "\u224C": "bcong", "\u224D": "CupCap", "\u226D": "NotCupCap", "\u224D\u20D2": "nvap", "\u224E": "bump", "\u224E\u0338": "nbump", "\u224F": "bumpe", "\u224F\u0338": "nbumpe", "\u2250": "doteq", "\u2250\u0338": "nedot", "\u2251": "eDot", "\u2252": "efDot", "\u2253": "erDot", "\u2254": "colone", "\u2255": "ecolon", "\u2256": "ecir", "\u2257": "cire", "\u2259": "wedgeq", "\u225A": "veeeq", "\u225C": "trie", "\u225F": "equest", "\u2261": "equiv", "\u2262": "nequiv", "\u2261\u20E5": "bnequiv", "\u2264": "le", "\u2270": "nle", "\u2264\u20D2": "nvle", "\u2265": "ge", "\u2271": "nge", "\u2265\u20D2": "nvge", "\u2266": "lE", "\u2266\u0338": "nlE", "\u2267": "gE", "\u2267\u0338": "ngE", "\u2268\uFE00": "lvnE", "\u2268": "lnE", "\u2269": "gnE", "\u2269\uFE00": "gvnE", "\u226A": "ll", "\u226A\u0338": "nLtv", "\u226A\u20D2": "nLt", "\u226B": "gg", "\u226B\u0338": "nGtv", "\u226B\u20D2": "nGt", "\u226C": "twixt", "\u2272": "lsim", "\u2274": "nlsim", "\u2273": "gsim", "\u2275": "ngsim", "\u2276": "lg", "\u2278": "ntlg", "\u2277": "gl", "\u2279": "ntgl", "\u227A": "pr", "\u2280": "npr", "\u227B": "sc", "\u2281": "nsc", "\u227C": "prcue", "\u22E0": "nprcue", "\u227D": "sccue", "\u22E1": "nsccue", "\u227E": "prsim", "\u227F": "scsim", "\u227F\u0338": "NotSucceedsTilde", "\u2282": "sub", "\u2284": "nsub", "\u2282\u20D2": "vnsub", "\u2283": "sup", "\u2285": "nsup", "\u2283\u20D2": "vnsup", "\u2286": "sube", "\u2288": "nsube", "\u2287": "supe", "\u2289": "nsupe", "\u228A\uFE00": "vsubne", "\u228A": "subne", "\u228B\uFE00": "vsupne", "\u228B": "supne", "\u228D": "cupdot", "\u228E": "uplus", "\u228F": "sqsub", "\u228F\u0338": "NotSquareSubset", "\u2290": "sqsup", "\u2290\u0338": "NotSquareSuperset", "\u2291": "sqsube", "\u22E2": "nsqsube", "\u2292": "sqsupe", "\u22E3": "nsqsupe", "\u2293": "sqcap", "\u2293\uFE00": "sqcaps", "\u2294": "sqcup", "\u2294\uFE00": "sqcups", "\u2295": "oplus", "\u2296": "ominus", "\u2297": "otimes", "\u2298": "osol", "\u2299": "odot", "\u229A": "ocir", "\u229B": "oast", "\u229D": "odash", "\u229E": "plusb", "\u229F": "minusb", "\u22A0": "timesb", "\u22A1": "sdotb", "\u22A2": "vdash", "\u22AC": "nvdash", "\u22A3": "dashv", "\u22A4": "top", "\u22A5": "bot", "\u22A7": "models", "\u22A8": "vDash", "\u22AD": "nvDash", "\u22A9": "Vdash", "\u22AE": "nVdash", "\u22AA": "Vvdash", "\u22AB": "VDash", "\u22AF": "nVDash", "\u22B0": "prurel", "\u22B2": "vltri", "\u22EA": "nltri", "\u22B3": "vrtri", "\u22EB": "nrtri", "\u22B4": "ltrie", "\u22EC": "nltrie", "\u22B4\u20D2": "nvltrie", "\u22B5": "rtrie", "\u22ED": "nrtrie", "\u22B5\u20D2": "nvrtrie", "\u22B6": "origof", "\u22B7": "imof", "\u22B8": "mumap", "\u22B9": "hercon", "\u22BA": "intcal", "\u22BB": "veebar", "\u22BD": "barvee", "\u22BE": "angrtvb", "\u22BF": "lrtri", "\u22C0": "Wedge", "\u22C1": "Vee", "\u22C2": "xcap", "\u22C3": "xcup", "\u22C4": "diam", "\u22C5": "sdot", "\u22C6": "Star", "\u22C7": "divonx", "\u22C8": "bowtie", "\u22C9": "ltimes", "\u22CA": "rtimes", "\u22CB": "lthree", "\u22CC": "rthree", "\u22CD": "bsime", "\u22CE": "cuvee", "\u22CF": "cuwed", "\u22D0": "Sub", "\u22D1": "Sup", "\u22D2": "Cap", "\u22D3": "Cup", "\u22D4": "fork", "\u22D5": "epar", "\u22D6": "ltdot", "\u22D7": "gtdot", "\u22D8": "Ll", "\u22D8\u0338": "nLl", "\u22D9": "Gg", "\u22D9\u0338": "nGg", "\u22DA\uFE00": "lesg", "\u22DA": "leg", "\u22DB": "gel", "\u22DB\uFE00": "gesl", "\u22DE": "cuepr", "\u22DF": "cuesc", "\u22E6": "lnsim", "\u22E7": "gnsim", "\u22E8": "prnsim", "\u22E9": "scnsim", "\u22EE": "vellip", "\u22EF": "ctdot", "\u22F0": "utdot", "\u22F1": "dtdot", "\u22F2": "disin", "\u22F3": "isinsv", "\u22F4": "isins", "\u22F5": "isindot", "\u22F5\u0338": "notindot", "\u22F6": "notinvc", "\u22F7": "notinvb", "\u22F9": "isinE", "\u22F9\u0338": "notinE", "\u22FA": "nisd", "\u22FB": "xnis", "\u22FC": "nis", "\u22FD": "notnivc", "\u22FE": "notnivb", "\u2305": "barwed", "\u2306": "Barwed", "\u230C": "drcrop", "\u230D": "dlcrop", "\u230E": "urcrop", "\u230F": "ulcrop", "\u2310": "bnot", "\u2312": "profline", "\u2313": "profsurf", "\u2315": "telrec", "\u2316": "target", "\u231C": "ulcorn", "\u231D": "urcorn", "\u231E": "dlcorn", "\u231F": "drcorn", "\u2322": "frown", "\u2323": "smile", "\u232D": "cylcty", "\u232E": "profalar", "\u2336": "topbot", "\u233D": "ovbar", "\u233F": "solbar", "\u237C": "angzarr", "\u23B0": "lmoust", "\u23B1": "rmoust", "\u23B4": "tbrk", "\u23B5": "bbrk", "\u23B6": "bbrktbrk", "\u23DC": "OverParenthesis", "\u23DD": "UnderParenthesis", "\u23DE": "OverBrace", "\u23DF": "UnderBrace", "\u23E2": "trpezium", "\u23E7": "elinters", "\u2423": "blank", "\u2500": "boxh", "\u2502": "boxv", "\u250C": "boxdr", "\u2510": "boxdl", "\u2514": "boxur", "\u2518": "boxul", "\u251C": "boxvr", "\u2524": "boxvl", "\u252C": "boxhd", "\u2534": "boxhu", "\u253C": "boxvh", "\u2550": "boxH", "\u2551": "boxV", "\u2552": "boxdR", "\u2553": "boxDr", "\u2554": "boxDR", "\u2555": "boxdL", "\u2556": "boxDl", "\u2557": "boxDL", "\u2558": "boxuR", "\u2559": "boxUr", "\u255A": "boxUR", "\u255B": "boxuL", "\u255C": "boxUl", "\u255D": "boxUL", "\u255E": "boxvR", "\u255F": "boxVr", "\u2560": "boxVR", "\u2561": "boxvL", "\u2562": "boxVl", "\u2563": "boxVL", "\u2564": "boxHd", "\u2565": "boxhD", "\u2566": "boxHD", "\u2567": "boxHu", "\u2568": "boxhU", "\u2569": "boxHU", "\u256A": "boxvH", "\u256B": "boxVh", "\u256C": "boxVH", "\u2580": "uhblk", "\u2584": "lhblk", "\u2588": "block", "\u2591": "blk14", "\u2592": "blk12", "\u2593": "blk34", "\u25A1": "squ", "\u25AA": "squf", "\u25AB": "EmptyVerySmallSquare", "\u25AD": "rect", "\u25AE": "marker", "\u25B1": "fltns", "\u25B3": "xutri", "\u25B4": "utrif", "\u25B5": "utri", "\u25B8": "rtrif", "\u25B9": "rtri", "\u25BD": "xdtri", "\u25BE": "dtrif", "\u25BF": "dtri", "\u25C2": "ltrif", "\u25C3": "ltri", "\u25CA": "loz", "\u25CB": "cir", "\u25EC": "tridot", "\u25EF": "xcirc", "\u25F8": "ultri", "\u25F9": "urtri", "\u25FA": "lltri", "\u25FB": "EmptySmallSquare", "\u25FC": "FilledSmallSquare", "\u2605": "starf", "\u2606": "star", "\u260E": "phone", "\u2640": "female", "\u2642": "male", "\u2660": "spades", "\u2663": "clubs", "\u2665": "hearts", "\u2666": "diams", "\u266A": "sung", "\u2713": "check", "\u2717": "cross", "\u2720": "malt", "\u2736": "sext", "\u2758": "VerticalSeparator", "\u27C8": "bsolhsub", "\u27C9": "suphsol", "\u27F5": "xlarr", "\u27F6": "xrarr", "\u27F7": "xharr", "\u27F8": "xlArr", "\u27F9": "xrArr", "\u27FA": "xhArr", "\u27FC": "xmap", "\u27FF": "dzigrarr", "\u2902": "nvlArr", "\u2903": "nvrArr", "\u2904": "nvHarr", "\u2905": "Map", "\u290C": "lbarr", "\u290D": "rbarr", "\u290E": "lBarr", "\u290F": "rBarr", "\u2910": "RBarr", "\u2911": "DDotrahd", "\u2912": "UpArrowBar", "\u2913": "DownArrowBar", "\u2916": "Rarrtl", "\u2919": "latail", "\u291A": "ratail", "\u291B": "lAtail", "\u291C": "rAtail", "\u291D": "larrfs", "\u291E": "rarrfs", "\u291F": "larrbfs", "\u2920": "rarrbfs", "\u2923": "nwarhk", "\u2924": "nearhk", "\u2925": "searhk", "\u2926": "swarhk", "\u2927": "nwnear", "\u2928": "toea", "\u2929": "tosa", "\u292A": "swnwar", "\u2933": "rarrc", "\u2933\u0338": "nrarrc", "\u2935": "cudarrr", "\u2936": "ldca", "\u2937": "rdca", "\u2938": "cudarrl", "\u2939": "larrpl", "\u293C": "curarrm", "\u293D": "cularrp", "\u2945": "rarrpl", "\u2948": "harrcir", "\u2949": "Uarrocir", "\u294A": "lurdshar", "\u294B": "ldrushar", "\u294E": "LeftRightVector", "\u294F": "RightUpDownVector", "\u2950": "DownLeftRightVector", "\u2951": "LeftUpDownVector", "\u2952": "LeftVectorBar", "\u2953": "RightVectorBar", "\u2954": "RightUpVectorBar", "\u2955": "RightDownVectorBar", "\u2956": "DownLeftVectorBar", "\u2957": "DownRightVectorBar", "\u2958": "LeftUpVectorBar", "\u2959": "LeftDownVectorBar", "\u295A": "LeftTeeVector", "\u295B": "RightTeeVector", "\u295C": "RightUpTeeVector", "\u295D": "RightDownTeeVector", "\u295E": "DownLeftTeeVector", "\u295F": "DownRightTeeVector", "\u2960": "LeftUpTeeVector", "\u2961": "LeftDownTeeVector", "\u2962": "lHar", "\u2963": "uHar", "\u2964": "rHar", "\u2965": "dHar", "\u2966": "luruhar", "\u2967": "ldrdhar", "\u2968": "ruluhar", "\u2969": "rdldhar", "\u296A": "lharul", "\u296B": "llhard", "\u296C": "rharul", "\u296D": "lrhard", "\u296E": "udhar", "\u296F": "duhar", "\u2970": "RoundImplies", "\u2971": "erarr", "\u2972": "simrarr", "\u2973": "larrsim", "\u2974": "rarrsim", "\u2975": "rarrap", "\u2976": "ltlarr", "\u2978": "gtrarr", "\u2979": "subrarr", "\u297B": "suplarr", "\u297C": "lfisht", "\u297D": "rfisht", "\u297E": "ufisht", "\u297F": "dfisht", "\u299A": "vzigzag", "\u299C": "vangrt", "\u299D": "angrtvbd", "\u29A4": "ange", "\u29A5": "range", "\u29A6": "dwangle", "\u29A7": "uwangle", "\u29A8": "angmsdaa", "\u29A9": "angmsdab", "\u29AA": "angmsdac", "\u29AB": "angmsdad", "\u29AC": "angmsdae", "\u29AD": "angmsdaf", "\u29AE": "angmsdag", "\u29AF": "angmsdah", "\u29B0": "bemptyv", "\u29B1": "demptyv", "\u29B2": "cemptyv", "\u29B3": "raemptyv", "\u29B4": "laemptyv", "\u29B5": "ohbar", "\u29B6": "omid", "\u29B7": "opar", "\u29B9": "operp", "\u29BB": "olcross", "\u29BC": "odsold", "\u29BE": "olcir", "\u29BF": "ofcir", "\u29C0": "olt", "\u29C1": "ogt", "\u29C2": "cirscir", "\u29C3": "cirE", "\u29C4": "solb", "\u29C5": "bsolb", "\u29C9": "boxbox", "\u29CD": "trisb", "\u29CE": "rtriltri", "\u29CF": "LeftTriangleBar", "\u29CF\u0338": "NotLeftTriangleBar", "\u29D0": "RightTriangleBar", "\u29D0\u0338": "NotRightTriangleBar", "\u29DC": "iinfin", "\u29DD": "infintie", "\u29DE": "nvinfin", "\u29E3": "eparsl", "\u29E4": "smeparsl", "\u29E5": "eqvparsl", "\u29EB": "lozf", "\u29F4": "RuleDelayed", "\u29F6": "dsol", "\u2A00": "xodot", "\u2A01": "xoplus", "\u2A02": "xotime", "\u2A04": "xuplus", "\u2A06": "xsqcup", "\u2A0D": "fpartint", "\u2A10": "cirfnint", "\u2A11": "awint", "\u2A12": "rppolint", "\u2A13": "scpolint", "\u2A14": "npolint", "\u2A15": "pointint", "\u2A16": "quatint", "\u2A17": "intlarhk", "\u2A22": "pluscir", "\u2A23": "plusacir", "\u2A24": "simplus", "\u2A25": "plusdu", "\u2A26": "plussim", "\u2A27": "plustwo", "\u2A29": "mcomma", "\u2A2A": "minusdu", "\u2A2D": "loplus", "\u2A2E": "roplus", "\u2A2F": "Cross", "\u2A30": "timesd", "\u2A31": "timesbar", "\u2A33": "smashp", "\u2A34": "lotimes", "\u2A35": "rotimes", "\u2A36": "otimesas", "\u2A37": "Otimes", "\u2A38": "odiv", "\u2A39": "triplus", "\u2A3A": "triminus", "\u2A3B": "tritime", "\u2A3C": "iprod", "\u2A3F": "amalg", "\u2A40": "capdot", "\u2A42": "ncup", "\u2A43": "ncap", "\u2A44": "capand", "\u2A45": "cupor", "\u2A46": "cupcap", "\u2A47": "capcup", "\u2A48": "cupbrcap", "\u2A49": "capbrcup", "\u2A4A": "cupcup", "\u2A4B": "capcap", "\u2A4C": "ccups", "\u2A4D": "ccaps", "\u2A50": "ccupssm", "\u2A53": "And", "\u2A54": "Or", "\u2A55": "andand", "\u2A56": "oror", "\u2A57": "orslope", "\u2A58": "andslope", "\u2A5A": "andv", "\u2A5B": "orv", "\u2A5C": "andd", "\u2A5D": "ord", "\u2A5F": "wedbar", "\u2A66": "sdote", "\u2A6A": "simdot", "\u2A6D": "congdot", "\u2A6D\u0338": "ncongdot", "\u2A6E": "easter", "\u2A6F": "apacir", "\u2A70": "apE", "\u2A70\u0338": "napE", "\u2A71": "eplus", "\u2A72": "pluse", "\u2A73": "Esim", "\u2A77": "eDDot", "\u2A78": "equivDD", "\u2A79": "ltcir", "\u2A7A": "gtcir", "\u2A7B": "ltquest", "\u2A7C": "gtquest", "\u2A7D": "les", "\u2A7D\u0338": "nles", "\u2A7E": "ges", "\u2A7E\u0338": "nges", "\u2A7F": "lesdot", "\u2A80": "gesdot", "\u2A81": "lesdoto", "\u2A82": "gesdoto", "\u2A83": "lesdotor", "\u2A84": "gesdotol", "\u2A85": "lap", "\u2A86": "gap", "\u2A87": "lne", "\u2A88": "gne", "\u2A89": "lnap", "\u2A8A": "gnap", "\u2A8B": "lEg", "\u2A8C": "gEl", "\u2A8D": "lsime", "\u2A8E": "gsime", "\u2A8F": "lsimg", "\u2A90": "gsiml", "\u2A91": "lgE", "\u2A92": "glE", "\u2A93": "lesges", "\u2A94": "gesles", "\u2A95": "els", "\u2A96": "egs", "\u2A97": "elsdot", "\u2A98": "egsdot", "\u2A99": "el", "\u2A9A": "eg", "\u2A9D": "siml", "\u2A9E": "simg", "\u2A9F": "simlE", "\u2AA0": "simgE", "\u2AA1": "LessLess", "\u2AA1\u0338": "NotNestedLessLess", "\u2AA2": "GreaterGreater", "\u2AA2\u0338": "NotNestedGreaterGreater", "\u2AA4": "glj", "\u2AA5": "gla", "\u2AA6": "ltcc", "\u2AA7": "gtcc", "\u2AA8": "lescc", "\u2AA9": "gescc", "\u2AAA": "smt", "\u2AAB": "lat", "\u2AAC": "smte", "\u2AAC\uFE00": "smtes", "\u2AAD": "late", "\u2AAD\uFE00": "lates", "\u2AAE": "bumpE", "\u2AAF": "pre", "\u2AAF\u0338": "npre", "\u2AB0": "sce", "\u2AB0\u0338": "nsce", "\u2AB3": "prE", "\u2AB4": "scE", "\u2AB5": "prnE", "\u2AB6": "scnE", "\u2AB7": "prap", "\u2AB8": "scap", "\u2AB9": "prnap", "\u2ABA": "scnap", "\u2ABB": "Pr", "\u2ABC": "Sc", "\u2ABD": "subdot", "\u2ABE": "supdot", "\u2ABF": "subplus", "\u2AC0": "supplus", "\u2AC1": "submult", "\u2AC2": "supmult", "\u2AC3": "subedot", "\u2AC4": "supedot", "\u2AC5": "subE", "\u2AC5\u0338": "nsubE", "\u2AC6": "supE", "\u2AC6\u0338": "nsupE", "\u2AC7": "subsim", "\u2AC8": "supsim", "\u2ACB\uFE00": "vsubnE", "\u2ACB": "subnE", "\u2ACC\uFE00": "vsupnE", "\u2ACC": "supnE", "\u2ACF": "csub", "\u2AD0": "csup", "\u2AD1": "csube", "\u2AD2": "csupe", "\u2AD3": "subsup", "\u2AD4": "supsub", "\u2AD5": "subsub", "\u2AD6": "supsup", "\u2AD7": "suphsub", "\u2AD8": "supdsub", "\u2AD9": "forkv", "\u2ADA": "topfork", "\u2ADB": "mlcp", "\u2AE4": "Dashv", "\u2AE6": "Vdashl", "\u2AE7": "Barv", "\u2AE8": "vBar", "\u2AE9": "vBarv", "\u2AEB": "Vbar", "\u2AEC": "Not", "\u2AED": "bNot", "\u2AEE": "rnmid", "\u2AEF": "cirmid", "\u2AF0": "midcir", "\u2AF1": "topcir", "\u2AF2": "nhpar", "\u2AF3": "parsim", "\u2AFD": "parsl", "\u2AFD\u20E5": "nparsl", "\u266D": "flat", "\u266E": "natur", "\u266F": "sharp", "\xA4": "curren", "\xA2": "cent", "$": "dollar", "\xA3": "pound", "\xA5": "yen", "\u20AC": "euro", "\xB9": "sup1", "\xBD": "half", "\u2153": "frac13", "\xBC": "frac14", "\u2155": "frac15", "\u2159": "frac16", "\u215B": "frac18", "\xB2": "sup2", "\u2154": "frac23", "\u2156": "frac25", "\xB3": "sup3", "\xBE": "frac34", "\u2157": "frac35", "\u215C": "frac38", "\u2158": "frac45", "\u215A": "frac56", "\u215D": "frac58", "\u215E": "frac78", "\u{1D4B6}": "ascr", "\u{1D552}": "aopf", "\u{1D51E}": "afr", "\u{1D538}": "Aopf", "\u{1D504}": "Afr", "\u{1D49C}": "Ascr", "\xAA": "ordf", "\xE1": "aacute", "\xC1": "Aacute", "\xE0": "agrave", "\xC0": "Agrave", "\u0103": "abreve", "\u0102": "Abreve", "\xE2": "acirc", "\xC2": "Acirc", "\xE5": "aring", "\xC5": "angst", "\xE4": "auml", "\xC4": "Auml", "\xE3": "atilde", "\xC3": "Atilde", "\u0105": "aogon", "\u0104": "Aogon", "\u0101": "amacr", "\u0100": "Amacr", "\xE6": "aelig", "\xC6": "AElig", "\u{1D4B7}": "bscr", "\u{1D553}": "bopf", "\u{1D51F}": "bfr", "\u{1D539}": "Bopf", "\u212C": "Bscr", "\u{1D505}": "Bfr", "\u{1D520}": "cfr", "\u{1D4B8}": "cscr", "\u{1D554}": "copf", "\u212D": "Cfr", "\u{1D49E}": "Cscr", "\u2102": "Copf", "\u0107": "cacute", "\u0106": "Cacute", "\u0109": "ccirc", "\u0108": "Ccirc", "\u010D": "ccaron", "\u010C": "Ccaron", "\u010B": "cdot", "\u010A": "Cdot", "\xE7": "ccedil", "\xC7": "Ccedil", "\u2105": "incare", "\u{1D521}": "dfr", "\u2146": "dd", "\u{1D555}": "dopf", "\u{1D4B9}": "dscr", "\u{1D49F}": "Dscr", "\u{1D507}": "Dfr", "\u2145": "DD", "\u{1D53B}": "Dopf", "\u010F": "dcaron", "\u010E": "Dcaron", "\u0111": "dstrok", "\u0110": "Dstrok", "\xF0": "eth", "\xD0": "ETH", "\u2147": "ee", "\u212F": "escr", "\u{1D522}": "efr", "\u{1D556}": "eopf", "\u2130": "Escr", "\u{1D508}": "Efr", "\u{1D53C}": "Eopf", "\xE9": "eacute", "\xC9": "Eacute", "\xE8": "egrave", "\xC8": "Egrave", "\xEA": "ecirc", "\xCA": "Ecirc", "\u011B": "ecaron", "\u011A": "Ecaron", "\xEB": "euml", "\xCB": "Euml", "\u0117": "edot", "\u0116": "Edot", "\u0119": "eogon", "\u0118": "Eogon", "\u0113": "emacr", "\u0112": "Emacr", "\u{1D523}": "ffr", "\u{1D557}": "fopf", "\u{1D4BB}": "fscr", "\u{1D509}": "Ffr", "\u{1D53D}": "Fopf", "\u2131": "Fscr", "\uFB00": "fflig", "\uFB03": "ffilig", "\uFB04": "ffllig", "\uFB01": "filig", "fj": "fjlig", "\uFB02": "fllig", "\u0192": "fnof", "\u210A": "gscr", "\u{1D558}": "gopf", "\u{1D524}": "gfr", "\u{1D4A2}": "Gscr", "\u{1D53E}": "Gopf", "\u{1D50A}": "Gfr", "\u01F5": "gacute", "\u011F": "gbreve", "\u011E": "Gbreve", "\u011D": "gcirc", "\u011C": "Gcirc", "\u0121": "gdot", "\u0120": "Gdot", "\u0122": "Gcedil", "\u{1D525}": "hfr", "\u210E": "planckh", "\u{1D4BD}": "hscr", "\u{1D559}": "hopf", "\u210B": "Hscr", "\u210C": "Hfr", "\u210D": "Hopf", "\u0125": "hcirc", "\u0124": "Hcirc", "\u210F": "hbar", "\u0127": "hstrok", "\u0126": "Hstrok", "\u{1D55A}": "iopf", "\u{1D526}": "ifr", "\u{1D4BE}": "iscr", "\u2148": "ii", "\u{1D540}": "Iopf", "\u2110": "Iscr", "\u2111": "Im", "\xED": "iacute", "\xCD": "Iacute", "\xEC": "igrave", "\xCC": "Igrave", "\xEE": "icirc", "\xCE": "Icirc", "\xEF": "iuml", "\xCF": "Iuml", "\u0129": "itilde", "\u0128": "Itilde", "\u0130": "Idot", "\u012F": "iogon", "\u012E": "Iogon", "\u012B": "imacr", "\u012A": "Imacr", "\u0133": "ijlig", "\u0132": "IJlig", "\u0131": "imath", "\u{1D4BF}": "jscr", "\u{1D55B}": "jopf", "\u{1D527}": "jfr", "\u{1D4A5}": "Jscr", "\u{1D50D}": "Jfr", "\u{1D541}": "Jopf", "\u0135": "jcirc", "\u0134": "Jcirc", "\u0237": "jmath", "\u{1D55C}": "kopf", "\u{1D4C0}": "kscr", "\u{1D528}": "kfr", "\u{1D4A6}": "Kscr", "\u{1D542}": "Kopf", "\u{1D50E}": "Kfr", "\u0137": "kcedil", "\u0136": "Kcedil", "\u{1D529}": "lfr", "\u{1D4C1}": "lscr", "\u2113": "ell", "\u{1D55D}": "lopf", "\u2112": "Lscr", "\u{1D50F}": "Lfr", "\u{1D543}": "Lopf", "\u013A": "lacute", "\u0139": "Lacute", "\u013E": "lcaron", "\u013D": "Lcaron", "\u013C": "lcedil", "\u013B": "Lcedil", "\u0142": "lstrok", "\u0141": "Lstrok", "\u0140": "lmidot", "\u013F": "Lmidot", "\u{1D52A}": "mfr", "\u{1D55E}": "mopf", "\u{1D4C2}": "mscr", "\u{1D510}": "Mfr", "\u{1D544}": "Mopf", "\u2133": "Mscr", "\u{1D52B}": "nfr", "\u{1D55F}": "nopf", "\u{1D4C3}": "nscr", "\u2115": "Nopf", "\u{1D4A9}": "Nscr", "\u{1D511}": "Nfr", "\u0144": "nacute", "\u0143": "Nacute", "\u0148": "ncaron", "\u0147": "Ncaron", "\xF1": "ntilde", "\xD1": "Ntilde", "\u0146": "ncedil", "\u0145": "Ncedil", "\u2116": "numero", "\u014B": "eng", "\u014A": "ENG", "\u{1D560}": "oopf", "\u{1D52C}": "ofr", "\u2134": "oscr", "\u{1D4AA}": "Oscr", "\u{1D512}": "Ofr", "\u{1D546}": "Oopf", "\xBA": "ordm", "\xF3": "oacute", "\xD3": "Oacute", "\xF2": "ograve", "\xD2": "Ograve", "\xF4": "ocirc", "\xD4": "Ocirc", "\xF6": "ouml", "\xD6": "Ouml", "\u0151": "odblac", "\u0150": "Odblac", "\xF5": "otilde", "\xD5": "Otilde", "\xF8": "oslash", "\xD8": "Oslash", "\u014D": "omacr", "\u014C": "Omacr", "\u0153": "oelig", "\u0152": "OElig", "\u{1D52D}": "pfr", "\u{1D4C5}": "pscr", "\u{1D561}": "popf", "\u2119": "Popf", "\u{1D513}": "Pfr", "\u{1D4AB}": "Pscr", "\u{1D562}": "qopf", "\u{1D52E}": "qfr", "\u{1D4C6}": "qscr", "\u{1D4AC}": "Qscr", "\u{1D514}": "Qfr", "\u211A": "Qopf", "\u0138": "kgreen", "\u{1D52F}": "rfr", "\u{1D563}": "ropf", "\u{1D4C7}": "rscr", "\u211B": "Rscr", "\u211C": "Re", "\u211D": "Ropf", "\u0155": "racute", "\u0154": "Racute", "\u0159": "rcaron", "\u0158": "Rcaron", "\u0157": "rcedil", "\u0156": "Rcedil", "\u{1D564}": "sopf", "\u{1D4C8}": "sscr", "\u{1D530}": "sfr", "\u{1D54A}": "Sopf", "\u{1D516}": "Sfr", "\u{1D4AE}": "Sscr", "\u24C8": "oS", "\u015B": "sacute", "\u015A": "Sacute", "\u015D": "scirc", "\u015C": "Scirc", "\u0161": "scaron", "\u0160": "Scaron", "\u015F": "scedil", "\u015E": "Scedil", "\xDF": "szlig", "\u{1D531}": "tfr", "\u{1D4C9}": "tscr", "\u{1D565}": "topf", "\u{1D4AF}": "Tscr", "\u{1D517}": "Tfr", "\u{1D54B}": "Topf", "\u0165": "tcaron", "\u0164": "Tcaron", "\u0163": "tcedil", "\u0162": "Tcedil", "\u2122": "trade", "\u0167": "tstrok", "\u0166": "Tstrok", "\u{1D4CA}": "uscr", "\u{1D566}": "uopf", "\u{1D532}": "ufr", "\u{1D54C}": "Uopf", "\u{1D518}": "Ufr", "\u{1D4B0}": "Uscr", "\xFA": "uacute", "\xDA": "Uacute", "\xF9": "ugrave", "\xD9": "Ugrave", "\u016D": "ubreve", "\u016C": "Ubreve", "\xFB": "ucirc", "\xDB": "Ucirc", "\u016F": "uring", "\u016E": "Uring", "\xFC": "uuml", "\xDC": "Uuml", "\u0171": "udblac", "\u0170": "Udblac", "\u0169": "utilde", "\u0168": "Utilde", "\u0173": "uogon", "\u0172": "Uogon", "\u016B": "umacr", "\u016A": "Umacr", "\u{1D533}": "vfr", "\u{1D567}": "vopf", "\u{1D4CB}": "vscr", "\u{1D519}": "Vfr", "\u{1D54D}": "Vopf", "\u{1D4B1}": "Vscr", "\u{1D568}": "wopf", "\u{1D4CC}": "wscr", "\u{1D534}": "wfr", "\u{1D4B2}": "Wscr", "\u{1D54E}": "Wopf", "\u{1D51A}": "Wfr", "\u0175": "wcirc", "\u0174": "Wcirc", "\u{1D535}": "xfr", "\u{1D4CD}": "xscr", "\u{1D569}": "xopf", "\u{1D54F}": "Xopf", "\u{1D51B}": "Xfr", "\u{1D4B3}": "Xscr", "\u{1D536}": "yfr", "\u{1D4CE}": "yscr", "\u{1D56A}": "yopf", "\u{1D4B4}": "Yscr", "\u{1D51C}": "Yfr", "\u{1D550}": "Yopf", "\xFD": "yacute", "\xDD": "Yacute", "\u0177": "ycirc", "\u0176": "Ycirc", "\xFF": "yuml", "\u0178": "Yuml", "\u{1D4CF}": "zscr", "\u{1D537}": "zfr", "\u{1D56B}": "zopf", "\u2128": "Zfr", "\u2124": "Zopf", "\u{1D4B5}": "Zscr", "\u017A": "zacute", "\u0179": "Zacute", "\u017E": "zcaron", "\u017D": "Zcaron", "\u017C": "zdot", "\u017B": "Zdot", "\u01B5": "imped", "\xFE": "thorn", "\xDE": "THORN", "\u0149": "napos", "\u03B1": "alpha", "\u0391": "Alpha", "\u03B2": "beta", "\u0392": "Beta", "\u03B3": "gamma", "\u0393": "Gamma", "\u03B4": "delta", "\u0394": "Delta", "\u03B5": "epsi", "\u03F5": "epsiv", "\u0395": "Epsilon", "\u03DD": "gammad", "\u03DC": "Gammad", "\u03B6": "zeta", "\u0396": "Zeta", "\u03B7": "eta", "\u0397": "Eta", "\u03B8": "theta", "\u03D1": "thetav", "\u0398": "Theta", "\u03B9": "iota", "\u0399": "Iota", "\u03BA": "kappa", "\u03F0": "kappav", "\u039A": "Kappa", "\u03BB": "lambda", "\u039B": "Lambda", "\u03BC": "mu", "\xB5": "micro", "\u039C": "Mu", "\u03BD": "nu", "\u039D": "Nu", "\u03BE": "xi", "\u039E": "Xi", "\u03BF": "omicron", "\u039F": "Omicron", "\u03C0": "pi", "\u03D6": "piv", "\u03A0": "Pi", "\u03C1": "rho", "\u03F1": "rhov", "\u03A1": "Rho", "\u03C3": "sigma", "\u03A3": "Sigma", "\u03C2": "sigmaf", "\u03C4": "tau", "\u03A4": "Tau", "\u03C5": "upsi", "\u03A5": "Upsilon", "\u03D2": "Upsi", "\u03C6": "phi", "\u03D5": "phiv", "\u03A6": "Phi", "\u03C7": "chi", "\u03A7": "Chi", "\u03C8": "psi", "\u03A8": "Psi", "\u03C9": "omega", "\u03A9": "ohm", "\u0430": "acy", "\u0410": "Acy", "\u0431": "bcy", "\u0411": "Bcy", "\u0432": "vcy", "\u0412": "Vcy", "\u0433": "gcy", "\u0413": "Gcy", "\u0453": "gjcy", "\u0403": "GJcy", "\u0434": "dcy", "\u0414": "Dcy", "\u0452": "djcy", "\u0402": "DJcy", "\u0435": "iecy", "\u0415": "IEcy", "\u0451": "iocy", "\u0401": "IOcy", "\u0454": "jukcy", "\u0404": "Jukcy", "\u0436": "zhcy", "\u0416": "ZHcy", "\u0437": "zcy", "\u0417": "Zcy", "\u0455": "dscy", "\u0405": "DScy", "\u0438": "icy", "\u0418": "Icy", "\u0456": "iukcy", "\u0406": "Iukcy", "\u0457": "yicy", "\u0407": "YIcy", "\u0439": "jcy", "\u0419": "Jcy", "\u0458": "jsercy", "\u0408": "Jsercy", "\u043A": "kcy", "\u041A": "Kcy", "\u045C": "kjcy", "\u040C": "KJcy", "\u043B": "lcy", "\u041B": "Lcy", "\u0459": "ljcy", "\u0409": "LJcy", "\u043C": "mcy", "\u041C": "Mcy", "\u043D": "ncy", "\u041D": "Ncy", "\u045A": "njcy", "\u040A": "NJcy", "\u043E": "ocy", "\u041E": "Ocy", "\u043F": "pcy", "\u041F": "Pcy", "\u0440": "rcy", "\u0420": "Rcy", "\u0441": "scy", "\u0421": "Scy", "\u0442": "tcy", "\u0422": "Tcy", "\u045B": "tshcy", "\u040B": "TSHcy", "\u0443": "ucy", "\u0423": "Ucy", "\u045E": "ubrcy", "\u040E": "Ubrcy", "\u0444": "fcy", "\u0424": "Fcy", "\u0445": "khcy", "\u0425": "KHcy", "\u0446": "tscy", "\u0426": "TScy", "\u0447": "chcy", "\u0427": "CHcy", "\u045F": "dzcy", "\u040F": "DZcy", "\u0448": "shcy", "\u0428": "SHcy", "\u0449": "shchcy", "\u0429": "SHCHcy", "\u044A": "hardcy", "\u042A": "HARDcy", "\u044B": "ycy", "\u042B": "Ycy", "\u044C": "softcy", "\u042C": "SOFTcy", "\u044D": "ecy", "\u042D": "Ecy", "\u044E": "yucy", "\u042E": "YUcy", "\u044F": "yacy", "\u042F": "YAcy", "\u2135": "aleph", "\u2136": "beth", "\u2137": "gimel", "\u2138": "daleth" };
        var regexEscape = /["&'<>`]/g;
        var escapeMap = {
          '"': "&quot;",
          "&": "&amp;",
          "'": "&#x27;",
          "<": "&lt;",
          ">": "&gt;",
          "`": "&#x60;"
        };
        var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
        var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
        var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
        var decodeMap2 = { "aacute": "\xE1", "Aacute": "\xC1", "abreve": "\u0103", "Abreve": "\u0102", "ac": "\u223E", "acd": "\u223F", "acE": "\u223E\u0333", "acirc": "\xE2", "Acirc": "\xC2", "acute": "\xB4", "acy": "\u0430", "Acy": "\u0410", "aelig": "\xE6", "AElig": "\xC6", "af": "\u2061", "afr": "\u{1D51E}", "Afr": "\u{1D504}", "agrave": "\xE0", "Agrave": "\xC0", "alefsym": "\u2135", "aleph": "\u2135", "alpha": "\u03B1", "Alpha": "\u0391", "amacr": "\u0101", "Amacr": "\u0100", "amalg": "\u2A3F", "amp": "&", "AMP": "&", "and": "\u2227", "And": "\u2A53", "andand": "\u2A55", "andd": "\u2A5C", "andslope": "\u2A58", "andv": "\u2A5A", "ang": "\u2220", "ange": "\u29A4", "angle": "\u2220", "angmsd": "\u2221", "angmsdaa": "\u29A8", "angmsdab": "\u29A9", "angmsdac": "\u29AA", "angmsdad": "\u29AB", "angmsdae": "\u29AC", "angmsdaf": "\u29AD", "angmsdag": "\u29AE", "angmsdah": "\u29AF", "angrt": "\u221F", "angrtvb": "\u22BE", "angrtvbd": "\u299D", "angsph": "\u2222", "angst": "\xC5", "angzarr": "\u237C", "aogon": "\u0105", "Aogon": "\u0104", "aopf": "\u{1D552}", "Aopf": "\u{1D538}", "ap": "\u2248", "apacir": "\u2A6F", "ape": "\u224A", "apE": "\u2A70", "apid": "\u224B", "apos": "'", "ApplyFunction": "\u2061", "approx": "\u2248", "approxeq": "\u224A", "aring": "\xE5", "Aring": "\xC5", "ascr": "\u{1D4B6}", "Ascr": "\u{1D49C}", "Assign": "\u2254", "ast": "*", "asymp": "\u2248", "asympeq": "\u224D", "atilde": "\xE3", "Atilde": "\xC3", "auml": "\xE4", "Auml": "\xC4", "awconint": "\u2233", "awint": "\u2A11", "backcong": "\u224C", "backepsilon": "\u03F6", "backprime": "\u2035", "backsim": "\u223D", "backsimeq": "\u22CD", "Backslash": "\u2216", "Barv": "\u2AE7", "barvee": "\u22BD", "barwed": "\u2305", "Barwed": "\u2306", "barwedge": "\u2305", "bbrk": "\u23B5", "bbrktbrk": "\u23B6", "bcong": "\u224C", "bcy": "\u0431", "Bcy": "\u0411", "bdquo": "\u201E", "becaus": "\u2235", "because": "\u2235", "Because": "\u2235", "bemptyv": "\u29B0", "bepsi": "\u03F6", "bernou": "\u212C", "Bernoullis": "\u212C", "beta": "\u03B2", "Beta": "\u0392", "beth": "\u2136", "between": "\u226C", "bfr": "\u{1D51F}", "Bfr": "\u{1D505}", "bigcap": "\u22C2", "bigcirc": "\u25EF", "bigcup": "\u22C3", "bigodot": "\u2A00", "bigoplus": "\u2A01", "bigotimes": "\u2A02", "bigsqcup": "\u2A06", "bigstar": "\u2605", "bigtriangledown": "\u25BD", "bigtriangleup": "\u25B3", "biguplus": "\u2A04", "bigvee": "\u22C1", "bigwedge": "\u22C0", "bkarow": "\u290D", "blacklozenge": "\u29EB", "blacksquare": "\u25AA", "blacktriangle": "\u25B4", "blacktriangledown": "\u25BE", "blacktriangleleft": "\u25C2", "blacktriangleright": "\u25B8", "blank": "\u2423", "blk12": "\u2592", "blk14": "\u2591", "blk34": "\u2593", "block": "\u2588", "bne": "=\u20E5", "bnequiv": "\u2261\u20E5", "bnot": "\u2310", "bNot": "\u2AED", "bopf": "\u{1D553}", "Bopf": "\u{1D539}", "bot": "\u22A5", "bottom": "\u22A5", "bowtie": "\u22C8", "boxbox": "\u29C9", "boxdl": "\u2510", "boxdL": "\u2555", "boxDl": "\u2556", "boxDL": "\u2557", "boxdr": "\u250C", "boxdR": "\u2552", "boxDr": "\u2553", "boxDR": "\u2554", "boxh": "\u2500", "boxH": "\u2550", "boxhd": "\u252C", "boxhD": "\u2565", "boxHd": "\u2564", "boxHD": "\u2566", "boxhu": "\u2534", "boxhU": "\u2568", "boxHu": "\u2567", "boxHU": "\u2569", "boxminus": "\u229F", "boxplus": "\u229E", "boxtimes": "\u22A0", "boxul": "\u2518", "boxuL": "\u255B", "boxUl": "\u255C", "boxUL": "\u255D", "boxur": "\u2514", "boxuR": "\u2558", "boxUr": "\u2559", "boxUR": "\u255A", "boxv": "\u2502", "boxV": "\u2551", "boxvh": "\u253C", "boxvH": "\u256A", "boxVh": "\u256B", "boxVH": "\u256C", "boxvl": "\u2524", "boxvL": "\u2561", "boxVl": "\u2562", "boxVL": "\u2563", "boxvr": "\u251C", "boxvR": "\u255E", "boxVr": "\u255F", "boxVR": "\u2560", "bprime": "\u2035", "breve": "\u02D8", "Breve": "\u02D8", "brvbar": "\xA6", "bscr": "\u{1D4B7}", "Bscr": "\u212C", "bsemi": "\u204F", "bsim": "\u223D", "bsime": "\u22CD", "bsol": "\\", "bsolb": "\u29C5", "bsolhsub": "\u27C8", "bull": "\u2022", "bullet": "\u2022", "bump": "\u224E", "bumpe": "\u224F", "bumpE": "\u2AAE", "bumpeq": "\u224F", "Bumpeq": "\u224E", "cacute": "\u0107", "Cacute": "\u0106", "cap": "\u2229", "Cap": "\u22D2", "capand": "\u2A44", "capbrcup": "\u2A49", "capcap": "\u2A4B", "capcup": "\u2A47", "capdot": "\u2A40", "CapitalDifferentialD": "\u2145", "caps": "\u2229\uFE00", "caret": "\u2041", "caron": "\u02C7", "Cayleys": "\u212D", "ccaps": "\u2A4D", "ccaron": "\u010D", "Ccaron": "\u010C", "ccedil": "\xE7", "Ccedil": "\xC7", "ccirc": "\u0109", "Ccirc": "\u0108", "Cconint": "\u2230", "ccups": "\u2A4C", "ccupssm": "\u2A50", "cdot": "\u010B", "Cdot": "\u010A", "cedil": "\xB8", "Cedilla": "\xB8", "cemptyv": "\u29B2", "cent": "\xA2", "centerdot": "\xB7", "CenterDot": "\xB7", "cfr": "\u{1D520}", "Cfr": "\u212D", "chcy": "\u0447", "CHcy": "\u0427", "check": "\u2713", "checkmark": "\u2713", "chi": "\u03C7", "Chi": "\u03A7", "cir": "\u25CB", "circ": "\u02C6", "circeq": "\u2257", "circlearrowleft": "\u21BA", "circlearrowright": "\u21BB", "circledast": "\u229B", "circledcirc": "\u229A", "circleddash": "\u229D", "CircleDot": "\u2299", "circledR": "\xAE", "circledS": "\u24C8", "CircleMinus": "\u2296", "CirclePlus": "\u2295", "CircleTimes": "\u2297", "cire": "\u2257", "cirE": "\u29C3", "cirfnint": "\u2A10", "cirmid": "\u2AEF", "cirscir": "\u29C2", "ClockwiseContourIntegral": "\u2232", "CloseCurlyDoubleQuote": "\u201D", "CloseCurlyQuote": "\u2019", "clubs": "\u2663", "clubsuit": "\u2663", "colon": ":", "Colon": "\u2237", "colone": "\u2254", "Colone": "\u2A74", "coloneq": "\u2254", "comma": ",", "commat": "@", "comp": "\u2201", "compfn": "\u2218", "complement": "\u2201", "complexes": "\u2102", "cong": "\u2245", "congdot": "\u2A6D", "Congruent": "\u2261", "conint": "\u222E", "Conint": "\u222F", "ContourIntegral": "\u222E", "copf": "\u{1D554}", "Copf": "\u2102", "coprod": "\u2210", "Coproduct": "\u2210", "copy": "\xA9", "COPY": "\xA9", "copysr": "\u2117", "CounterClockwiseContourIntegral": "\u2233", "crarr": "\u21B5", "cross": "\u2717", "Cross": "\u2A2F", "cscr": "\u{1D4B8}", "Cscr": "\u{1D49E}", "csub": "\u2ACF", "csube": "\u2AD1", "csup": "\u2AD0", "csupe": "\u2AD2", "ctdot": "\u22EF", "cudarrl": "\u2938", "cudarrr": "\u2935", "cuepr": "\u22DE", "cuesc": "\u22DF", "cularr": "\u21B6", "cularrp": "\u293D", "cup": "\u222A", "Cup": "\u22D3", "cupbrcap": "\u2A48", "cupcap": "\u2A46", "CupCap": "\u224D", "cupcup": "\u2A4A", "cupdot": "\u228D", "cupor": "\u2A45", "cups": "\u222A\uFE00", "curarr": "\u21B7", "curarrm": "\u293C", "curlyeqprec": "\u22DE", "curlyeqsucc": "\u22DF", "curlyvee": "\u22CE", "curlywedge": "\u22CF", "curren": "\xA4", "curvearrowleft": "\u21B6", "curvearrowright": "\u21B7", "cuvee": "\u22CE", "cuwed": "\u22CF", "cwconint": "\u2232", "cwint": "\u2231", "cylcty": "\u232D", "dagger": "\u2020", "Dagger": "\u2021", "daleth": "\u2138", "darr": "\u2193", "dArr": "\u21D3", "Darr": "\u21A1", "dash": "\u2010", "dashv": "\u22A3", "Dashv": "\u2AE4", "dbkarow": "\u290F", "dblac": "\u02DD", "dcaron": "\u010F", "Dcaron": "\u010E", "dcy": "\u0434", "Dcy": "\u0414", "dd": "\u2146", "DD": "\u2145", "ddagger": "\u2021", "ddarr": "\u21CA", "DDotrahd": "\u2911", "ddotseq": "\u2A77", "deg": "\xB0", "Del": "\u2207", "delta": "\u03B4", "Delta": "\u0394", "demptyv": "\u29B1", "dfisht": "\u297F", "dfr": "\u{1D521}", "Dfr": "\u{1D507}", "dHar": "\u2965", "dharl": "\u21C3", "dharr": "\u21C2", "DiacriticalAcute": "\xB4", "DiacriticalDot": "\u02D9", "DiacriticalDoubleAcute": "\u02DD", "DiacriticalGrave": "`", "DiacriticalTilde": "\u02DC", "diam": "\u22C4", "diamond": "\u22C4", "Diamond": "\u22C4", "diamondsuit": "\u2666", "diams": "\u2666", "die": "\xA8", "DifferentialD": "\u2146", "digamma": "\u03DD", "disin": "\u22F2", "div": "\xF7", "divide": "\xF7", "divideontimes": "\u22C7", "divonx": "\u22C7", "djcy": "\u0452", "DJcy": "\u0402", "dlcorn": "\u231E", "dlcrop": "\u230D", "dollar": "$", "dopf": "\u{1D555}", "Dopf": "\u{1D53B}", "dot": "\u02D9", "Dot": "\xA8", "DotDot": "\u20DC", "doteq": "\u2250", "doteqdot": "\u2251", "DotEqual": "\u2250", "dotminus": "\u2238", "dotplus": "\u2214", "dotsquare": "\u22A1", "doublebarwedge": "\u2306", "DoubleContourIntegral": "\u222F", "DoubleDot": "\xA8", "DoubleDownArrow": "\u21D3", "DoubleLeftArrow": "\u21D0", "DoubleLeftRightArrow": "\u21D4", "DoubleLeftTee": "\u2AE4", "DoubleLongLeftArrow": "\u27F8", "DoubleLongLeftRightArrow": "\u27FA", "DoubleLongRightArrow": "\u27F9", "DoubleRightArrow": "\u21D2", "DoubleRightTee": "\u22A8", "DoubleUpArrow": "\u21D1", "DoubleUpDownArrow": "\u21D5", "DoubleVerticalBar": "\u2225", "downarrow": "\u2193", "Downarrow": "\u21D3", "DownArrow": "\u2193", "DownArrowBar": "\u2913", "DownArrowUpArrow": "\u21F5", "DownBreve": "\u0311", "downdownarrows": "\u21CA", "downharpoonleft": "\u21C3", "downharpoonright": "\u21C2", "DownLeftRightVector": "\u2950", "DownLeftTeeVector": "\u295E", "DownLeftVector": "\u21BD", "DownLeftVectorBar": "\u2956", "DownRightTeeVector": "\u295F", "DownRightVector": "\u21C1", "DownRightVectorBar": "\u2957", "DownTee": "\u22A4", "DownTeeArrow": "\u21A7", "drbkarow": "\u2910", "drcorn": "\u231F", "drcrop": "\u230C", "dscr": "\u{1D4B9}", "Dscr": "\u{1D49F}", "dscy": "\u0455", "DScy": "\u0405", "dsol": "\u29F6", "dstrok": "\u0111", "Dstrok": "\u0110", "dtdot": "\u22F1", "dtri": "\u25BF", "dtrif": "\u25BE", "duarr": "\u21F5", "duhar": "\u296F", "dwangle": "\u29A6", "dzcy": "\u045F", "DZcy": "\u040F", "dzigrarr": "\u27FF", "eacute": "\xE9", "Eacute": "\xC9", "easter": "\u2A6E", "ecaron": "\u011B", "Ecaron": "\u011A", "ecir": "\u2256", "ecirc": "\xEA", "Ecirc": "\xCA", "ecolon": "\u2255", "ecy": "\u044D", "Ecy": "\u042D", "eDDot": "\u2A77", "edot": "\u0117", "eDot": "\u2251", "Edot": "\u0116", "ee": "\u2147", "efDot": "\u2252", "efr": "\u{1D522}", "Efr": "\u{1D508}", "eg": "\u2A9A", "egrave": "\xE8", "Egrave": "\xC8", "egs": "\u2A96", "egsdot": "\u2A98", "el": "\u2A99", "Element": "\u2208", "elinters": "\u23E7", "ell": "\u2113", "els": "\u2A95", "elsdot": "\u2A97", "emacr": "\u0113", "Emacr": "\u0112", "empty": "\u2205", "emptyset": "\u2205", "EmptySmallSquare": "\u25FB", "emptyv": "\u2205", "EmptyVerySmallSquare": "\u25AB", "emsp": "\u2003", "emsp13": "\u2004", "emsp14": "\u2005", "eng": "\u014B", "ENG": "\u014A", "ensp": "\u2002", "eogon": "\u0119", "Eogon": "\u0118", "eopf": "\u{1D556}", "Eopf": "\u{1D53C}", "epar": "\u22D5", "eparsl": "\u29E3", "eplus": "\u2A71", "epsi": "\u03B5", "epsilon": "\u03B5", "Epsilon": "\u0395", "epsiv": "\u03F5", "eqcirc": "\u2256", "eqcolon": "\u2255", "eqsim": "\u2242", "eqslantgtr": "\u2A96", "eqslantless": "\u2A95", "Equal": "\u2A75", "equals": "=", "EqualTilde": "\u2242", "equest": "\u225F", "Equilibrium": "\u21CC", "equiv": "\u2261", "equivDD": "\u2A78", "eqvparsl": "\u29E5", "erarr": "\u2971", "erDot": "\u2253", "escr": "\u212F", "Escr": "\u2130", "esdot": "\u2250", "esim": "\u2242", "Esim": "\u2A73", "eta": "\u03B7", "Eta": "\u0397", "eth": "\xF0", "ETH": "\xD0", "euml": "\xEB", "Euml": "\xCB", "euro": "\u20AC", "excl": "!", "exist": "\u2203", "Exists": "\u2203", "expectation": "\u2130", "exponentiale": "\u2147", "ExponentialE": "\u2147", "fallingdotseq": "\u2252", "fcy": "\u0444", "Fcy": "\u0424", "female": "\u2640", "ffilig": "\uFB03", "fflig": "\uFB00", "ffllig": "\uFB04", "ffr": "\u{1D523}", "Ffr": "\u{1D509}", "filig": "\uFB01", "FilledSmallSquare": "\u25FC", "FilledVerySmallSquare": "\u25AA", "fjlig": "fj", "flat": "\u266D", "fllig": "\uFB02", "fltns": "\u25B1", "fnof": "\u0192", "fopf": "\u{1D557}", "Fopf": "\u{1D53D}", "forall": "\u2200", "ForAll": "\u2200", "fork": "\u22D4", "forkv": "\u2AD9", "Fouriertrf": "\u2131", "fpartint": "\u2A0D", "frac12": "\xBD", "frac13": "\u2153", "frac14": "\xBC", "frac15": "\u2155", "frac16": "\u2159", "frac18": "\u215B", "frac23": "\u2154", "frac25": "\u2156", "frac34": "\xBE", "frac35": "\u2157", "frac38": "\u215C", "frac45": "\u2158", "frac56": "\u215A", "frac58": "\u215D", "frac78": "\u215E", "frasl": "\u2044", "frown": "\u2322", "fscr": "\u{1D4BB}", "Fscr": "\u2131", "gacute": "\u01F5", "gamma": "\u03B3", "Gamma": "\u0393", "gammad": "\u03DD", "Gammad": "\u03DC", "gap": "\u2A86", "gbreve": "\u011F", "Gbreve": "\u011E", "Gcedil": "\u0122", "gcirc": "\u011D", "Gcirc": "\u011C", "gcy": "\u0433", "Gcy": "\u0413", "gdot": "\u0121", "Gdot": "\u0120", "ge": "\u2265", "gE": "\u2267", "gel": "\u22DB", "gEl": "\u2A8C", "geq": "\u2265", "geqq": "\u2267", "geqslant": "\u2A7E", "ges": "\u2A7E", "gescc": "\u2AA9", "gesdot": "\u2A80", "gesdoto": "\u2A82", "gesdotol": "\u2A84", "gesl": "\u22DB\uFE00", "gesles": "\u2A94", "gfr": "\u{1D524}", "Gfr": "\u{1D50A}", "gg": "\u226B", "Gg": "\u22D9", "ggg": "\u22D9", "gimel": "\u2137", "gjcy": "\u0453", "GJcy": "\u0403", "gl": "\u2277", "gla": "\u2AA5", "glE": "\u2A92", "glj": "\u2AA4", "gnap": "\u2A8A", "gnapprox": "\u2A8A", "gne": "\u2A88", "gnE": "\u2269", "gneq": "\u2A88", "gneqq": "\u2269", "gnsim": "\u22E7", "gopf": "\u{1D558}", "Gopf": "\u{1D53E}", "grave": "`", "GreaterEqual": "\u2265", "GreaterEqualLess": "\u22DB", "GreaterFullEqual": "\u2267", "GreaterGreater": "\u2AA2", "GreaterLess": "\u2277", "GreaterSlantEqual": "\u2A7E", "GreaterTilde": "\u2273", "gscr": "\u210A", "Gscr": "\u{1D4A2}", "gsim": "\u2273", "gsime": "\u2A8E", "gsiml": "\u2A90", "gt": ">", "Gt": "\u226B", "GT": ">", "gtcc": "\u2AA7", "gtcir": "\u2A7A", "gtdot": "\u22D7", "gtlPar": "\u2995", "gtquest": "\u2A7C", "gtrapprox": "\u2A86", "gtrarr": "\u2978", "gtrdot": "\u22D7", "gtreqless": "\u22DB", "gtreqqless": "\u2A8C", "gtrless": "\u2277", "gtrsim": "\u2273", "gvertneqq": "\u2269\uFE00", "gvnE": "\u2269\uFE00", "Hacek": "\u02C7", "hairsp": "\u200A", "half": "\xBD", "hamilt": "\u210B", "hardcy": "\u044A", "HARDcy": "\u042A", "harr": "\u2194", "hArr": "\u21D4", "harrcir": "\u2948", "harrw": "\u21AD", "Hat": "^", "hbar": "\u210F", "hcirc": "\u0125", "Hcirc": "\u0124", "hearts": "\u2665", "heartsuit": "\u2665", "hellip": "\u2026", "hercon": "\u22B9", "hfr": "\u{1D525}", "Hfr": "\u210C", "HilbertSpace": "\u210B", "hksearow": "\u2925", "hkswarow": "\u2926", "hoarr": "\u21FF", "homtht": "\u223B", "hookleftarrow": "\u21A9", "hookrightarrow": "\u21AA", "hopf": "\u{1D559}", "Hopf": "\u210D", "horbar": "\u2015", "HorizontalLine": "\u2500", "hscr": "\u{1D4BD}", "Hscr": "\u210B", "hslash": "\u210F", "hstrok": "\u0127", "Hstrok": "\u0126", "HumpDownHump": "\u224E", "HumpEqual": "\u224F", "hybull": "\u2043", "hyphen": "\u2010", "iacute": "\xED", "Iacute": "\xCD", "ic": "\u2063", "icirc": "\xEE", "Icirc": "\xCE", "icy": "\u0438", "Icy": "\u0418", "Idot": "\u0130", "iecy": "\u0435", "IEcy": "\u0415", "iexcl": "\xA1", "iff": "\u21D4", "ifr": "\u{1D526}", "Ifr": "\u2111", "igrave": "\xEC", "Igrave": "\xCC", "ii": "\u2148", "iiiint": "\u2A0C", "iiint": "\u222D", "iinfin": "\u29DC", "iiota": "\u2129", "ijlig": "\u0133", "IJlig": "\u0132", "Im": "\u2111", "imacr": "\u012B", "Imacr": "\u012A", "image": "\u2111", "ImaginaryI": "\u2148", "imagline": "\u2110", "imagpart": "\u2111", "imath": "\u0131", "imof": "\u22B7", "imped": "\u01B5", "Implies": "\u21D2", "in": "\u2208", "incare": "\u2105", "infin": "\u221E", "infintie": "\u29DD", "inodot": "\u0131", "int": "\u222B", "Int": "\u222C", "intcal": "\u22BA", "integers": "\u2124", "Integral": "\u222B", "intercal": "\u22BA", "Intersection": "\u22C2", "intlarhk": "\u2A17", "intprod": "\u2A3C", "InvisibleComma": "\u2063", "InvisibleTimes": "\u2062", "iocy": "\u0451", "IOcy": "\u0401", "iogon": "\u012F", "Iogon": "\u012E", "iopf": "\u{1D55A}", "Iopf": "\u{1D540}", "iota": "\u03B9", "Iota": "\u0399", "iprod": "\u2A3C", "iquest": "\xBF", "iscr": "\u{1D4BE}", "Iscr": "\u2110", "isin": "\u2208", "isindot": "\u22F5", "isinE": "\u22F9", "isins": "\u22F4", "isinsv": "\u22F3", "isinv": "\u2208", "it": "\u2062", "itilde": "\u0129", "Itilde": "\u0128", "iukcy": "\u0456", "Iukcy": "\u0406", "iuml": "\xEF", "Iuml": "\xCF", "jcirc": "\u0135", "Jcirc": "\u0134", "jcy": "\u0439", "Jcy": "\u0419", "jfr": "\u{1D527}", "Jfr": "\u{1D50D}", "jmath": "\u0237", "jopf": "\u{1D55B}", "Jopf": "\u{1D541}", "jscr": "\u{1D4BF}", "Jscr": "\u{1D4A5}", "jsercy": "\u0458", "Jsercy": "\u0408", "jukcy": "\u0454", "Jukcy": "\u0404", "kappa": "\u03BA", "Kappa": "\u039A", "kappav": "\u03F0", "kcedil": "\u0137", "Kcedil": "\u0136", "kcy": "\u043A", "Kcy": "\u041A", "kfr": "\u{1D528}", "Kfr": "\u{1D50E}", "kgreen": "\u0138", "khcy": "\u0445", "KHcy": "\u0425", "kjcy": "\u045C", "KJcy": "\u040C", "kopf": "\u{1D55C}", "Kopf": "\u{1D542}", "kscr": "\u{1D4C0}", "Kscr": "\u{1D4A6}", "lAarr": "\u21DA", "lacute": "\u013A", "Lacute": "\u0139", "laemptyv": "\u29B4", "lagran": "\u2112", "lambda": "\u03BB", "Lambda": "\u039B", "lang": "\u27E8", "Lang": "\u27EA", "langd": "\u2991", "langle": "\u27E8", "lap": "\u2A85", "Laplacetrf": "\u2112", "laquo": "\xAB", "larr": "\u2190", "lArr": "\u21D0", "Larr": "\u219E", "larrb": "\u21E4", "larrbfs": "\u291F", "larrfs": "\u291D", "larrhk": "\u21A9", "larrlp": "\u21AB", "larrpl": "\u2939", "larrsim": "\u2973", "larrtl": "\u21A2", "lat": "\u2AAB", "latail": "\u2919", "lAtail": "\u291B", "late": "\u2AAD", "lates": "\u2AAD\uFE00", "lbarr": "\u290C", "lBarr": "\u290E", "lbbrk": "\u2772", "lbrace": "{", "lbrack": "[", "lbrke": "\u298B", "lbrksld": "\u298F", "lbrkslu": "\u298D", "lcaron": "\u013E", "Lcaron": "\u013D", "lcedil": "\u013C", "Lcedil": "\u013B", "lceil": "\u2308", "lcub": "{", "lcy": "\u043B", "Lcy": "\u041B", "ldca": "\u2936", "ldquo": "\u201C", "ldquor": "\u201E", "ldrdhar": "\u2967", "ldrushar": "\u294B", "ldsh": "\u21B2", "le": "\u2264", "lE": "\u2266", "LeftAngleBracket": "\u27E8", "leftarrow": "\u2190", "Leftarrow": "\u21D0", "LeftArrow": "\u2190", "LeftArrowBar": "\u21E4", "LeftArrowRightArrow": "\u21C6", "leftarrowtail": "\u21A2", "LeftCeiling": "\u2308", "LeftDoubleBracket": "\u27E6", "LeftDownTeeVector": "\u2961", "LeftDownVector": "\u21C3", "LeftDownVectorBar": "\u2959", "LeftFloor": "\u230A", "leftharpoondown": "\u21BD", "leftharpoonup": "\u21BC", "leftleftarrows": "\u21C7", "leftrightarrow": "\u2194", "Leftrightarrow": "\u21D4", "LeftRightArrow": "\u2194", "leftrightarrows": "\u21C6", "leftrightharpoons": "\u21CB", "leftrightsquigarrow": "\u21AD", "LeftRightVector": "\u294E", "LeftTee": "\u22A3", "LeftTeeArrow": "\u21A4", "LeftTeeVector": "\u295A", "leftthreetimes": "\u22CB", "LeftTriangle": "\u22B2", "LeftTriangleBar": "\u29CF", "LeftTriangleEqual": "\u22B4", "LeftUpDownVector": "\u2951", "LeftUpTeeVector": "\u2960", "LeftUpVector": "\u21BF", "LeftUpVectorBar": "\u2958", "LeftVector": "\u21BC", "LeftVectorBar": "\u2952", "leg": "\u22DA", "lEg": "\u2A8B", "leq": "\u2264", "leqq": "\u2266", "leqslant": "\u2A7D", "les": "\u2A7D", "lescc": "\u2AA8", "lesdot": "\u2A7F", "lesdoto": "\u2A81", "lesdotor": "\u2A83", "lesg": "\u22DA\uFE00", "lesges": "\u2A93", "lessapprox": "\u2A85", "lessdot": "\u22D6", "lesseqgtr": "\u22DA", "lesseqqgtr": "\u2A8B", "LessEqualGreater": "\u22DA", "LessFullEqual": "\u2266", "LessGreater": "\u2276", "lessgtr": "\u2276", "LessLess": "\u2AA1", "lesssim": "\u2272", "LessSlantEqual": "\u2A7D", "LessTilde": "\u2272", "lfisht": "\u297C", "lfloor": "\u230A", "lfr": "\u{1D529}", "Lfr": "\u{1D50F}", "lg": "\u2276", "lgE": "\u2A91", "lHar": "\u2962", "lhard": "\u21BD", "lharu": "\u21BC", "lharul": "\u296A", "lhblk": "\u2584", "ljcy": "\u0459", "LJcy": "\u0409", "ll": "\u226A", "Ll": "\u22D8", "llarr": "\u21C7", "llcorner": "\u231E", "Lleftarrow": "\u21DA", "llhard": "\u296B", "lltri": "\u25FA", "lmidot": "\u0140", "Lmidot": "\u013F", "lmoust": "\u23B0", "lmoustache": "\u23B0", "lnap": "\u2A89", "lnapprox": "\u2A89", "lne": "\u2A87", "lnE": "\u2268", "lneq": "\u2A87", "lneqq": "\u2268", "lnsim": "\u22E6", "loang": "\u27EC", "loarr": "\u21FD", "lobrk": "\u27E6", "longleftarrow": "\u27F5", "Longleftarrow": "\u27F8", "LongLeftArrow": "\u27F5", "longleftrightarrow": "\u27F7", "Longleftrightarrow": "\u27FA", "LongLeftRightArrow": "\u27F7", "longmapsto": "\u27FC", "longrightarrow": "\u27F6", "Longrightarrow": "\u27F9", "LongRightArrow": "\u27F6", "looparrowleft": "\u21AB", "looparrowright": "\u21AC", "lopar": "\u2985", "lopf": "\u{1D55D}", "Lopf": "\u{1D543}", "loplus": "\u2A2D", "lotimes": "\u2A34", "lowast": "\u2217", "lowbar": "_", "LowerLeftArrow": "\u2199", "LowerRightArrow": "\u2198", "loz": "\u25CA", "lozenge": "\u25CA", "lozf": "\u29EB", "lpar": "(", "lparlt": "\u2993", "lrarr": "\u21C6", "lrcorner": "\u231F", "lrhar": "\u21CB", "lrhard": "\u296D", "lrm": "\u200E", "lrtri": "\u22BF", "lsaquo": "\u2039", "lscr": "\u{1D4C1}", "Lscr": "\u2112", "lsh": "\u21B0", "Lsh": "\u21B0", "lsim": "\u2272", "lsime": "\u2A8D", "lsimg": "\u2A8F", "lsqb": "[", "lsquo": "\u2018", "lsquor": "\u201A", "lstrok": "\u0142", "Lstrok": "\u0141", "lt": "<", "Lt": "\u226A", "LT": "<", "ltcc": "\u2AA6", "ltcir": "\u2A79", "ltdot": "\u22D6", "lthree": "\u22CB", "ltimes": "\u22C9", "ltlarr": "\u2976", "ltquest": "\u2A7B", "ltri": "\u25C3", "ltrie": "\u22B4", "ltrif": "\u25C2", "ltrPar": "\u2996", "lurdshar": "\u294A", "luruhar": "\u2966", "lvertneqq": "\u2268\uFE00", "lvnE": "\u2268\uFE00", "macr": "\xAF", "male": "\u2642", "malt": "\u2720", "maltese": "\u2720", "map": "\u21A6", "Map": "\u2905", "mapsto": "\u21A6", "mapstodown": "\u21A7", "mapstoleft": "\u21A4", "mapstoup": "\u21A5", "marker": "\u25AE", "mcomma": "\u2A29", "mcy": "\u043C", "Mcy": "\u041C", "mdash": "\u2014", "mDDot": "\u223A", "measuredangle": "\u2221", "MediumSpace": "\u205F", "Mellintrf": "\u2133", "mfr": "\u{1D52A}", "Mfr": "\u{1D510}", "mho": "\u2127", "micro": "\xB5", "mid": "\u2223", "midast": "*", "midcir": "\u2AF0", "middot": "\xB7", "minus": "\u2212", "minusb": "\u229F", "minusd": "\u2238", "minusdu": "\u2A2A", "MinusPlus": "\u2213", "mlcp": "\u2ADB", "mldr": "\u2026", "mnplus": "\u2213", "models": "\u22A7", "mopf": "\u{1D55E}", "Mopf": "\u{1D544}", "mp": "\u2213", "mscr": "\u{1D4C2}", "Mscr": "\u2133", "mstpos": "\u223E", "mu": "\u03BC", "Mu": "\u039C", "multimap": "\u22B8", "mumap": "\u22B8", "nabla": "\u2207", "nacute": "\u0144", "Nacute": "\u0143", "nang": "\u2220\u20D2", "nap": "\u2249", "napE": "\u2A70\u0338", "napid": "\u224B\u0338", "napos": "\u0149", "napprox": "\u2249", "natur": "\u266E", "natural": "\u266E", "naturals": "\u2115", "nbsp": "\xA0", "nbump": "\u224E\u0338", "nbumpe": "\u224F\u0338", "ncap": "\u2A43", "ncaron": "\u0148", "Ncaron": "\u0147", "ncedil": "\u0146", "Ncedil": "\u0145", "ncong": "\u2247", "ncongdot": "\u2A6D\u0338", "ncup": "\u2A42", "ncy": "\u043D", "Ncy": "\u041D", "ndash": "\u2013", "ne": "\u2260", "nearhk": "\u2924", "nearr": "\u2197", "neArr": "\u21D7", "nearrow": "\u2197", "nedot": "\u2250\u0338", "NegativeMediumSpace": "\u200B", "NegativeThickSpace": "\u200B", "NegativeThinSpace": "\u200B", "NegativeVeryThinSpace": "\u200B", "nequiv": "\u2262", "nesear": "\u2928", "nesim": "\u2242\u0338", "NestedGreaterGreater": "\u226B", "NestedLessLess": "\u226A", "NewLine": "\n", "nexist": "\u2204", "nexists": "\u2204", "nfr": "\u{1D52B}", "Nfr": "\u{1D511}", "nge": "\u2271", "ngE": "\u2267\u0338", "ngeq": "\u2271", "ngeqq": "\u2267\u0338", "ngeqslant": "\u2A7E\u0338", "nges": "\u2A7E\u0338", "nGg": "\u22D9\u0338", "ngsim": "\u2275", "ngt": "\u226F", "nGt": "\u226B\u20D2", "ngtr": "\u226F", "nGtv": "\u226B\u0338", "nharr": "\u21AE", "nhArr": "\u21CE", "nhpar": "\u2AF2", "ni": "\u220B", "nis": "\u22FC", "nisd": "\u22FA", "niv": "\u220B", "njcy": "\u045A", "NJcy": "\u040A", "nlarr": "\u219A", "nlArr": "\u21CD", "nldr": "\u2025", "nle": "\u2270", "nlE": "\u2266\u0338", "nleftarrow": "\u219A", "nLeftarrow": "\u21CD", "nleftrightarrow": "\u21AE", "nLeftrightarrow": "\u21CE", "nleq": "\u2270", "nleqq": "\u2266\u0338", "nleqslant": "\u2A7D\u0338", "nles": "\u2A7D\u0338", "nless": "\u226E", "nLl": "\u22D8\u0338", "nlsim": "\u2274", "nlt": "\u226E", "nLt": "\u226A\u20D2", "nltri": "\u22EA", "nltrie": "\u22EC", "nLtv": "\u226A\u0338", "nmid": "\u2224", "NoBreak": "\u2060", "NonBreakingSpace": "\xA0", "nopf": "\u{1D55F}", "Nopf": "\u2115", "not": "\xAC", "Not": "\u2AEC", "NotCongruent": "\u2262", "NotCupCap": "\u226D", "NotDoubleVerticalBar": "\u2226", "NotElement": "\u2209", "NotEqual": "\u2260", "NotEqualTilde": "\u2242\u0338", "NotExists": "\u2204", "NotGreater": "\u226F", "NotGreaterEqual": "\u2271", "NotGreaterFullEqual": "\u2267\u0338", "NotGreaterGreater": "\u226B\u0338", "NotGreaterLess": "\u2279", "NotGreaterSlantEqual": "\u2A7E\u0338", "NotGreaterTilde": "\u2275", "NotHumpDownHump": "\u224E\u0338", "NotHumpEqual": "\u224F\u0338", "notin": "\u2209", "notindot": "\u22F5\u0338", "notinE": "\u22F9\u0338", "notinva": "\u2209", "notinvb": "\u22F7", "notinvc": "\u22F6", "NotLeftTriangle": "\u22EA", "NotLeftTriangleBar": "\u29CF\u0338", "NotLeftTriangleEqual": "\u22EC", "NotLess": "\u226E", "NotLessEqual": "\u2270", "NotLessGreater": "\u2278", "NotLessLess": "\u226A\u0338", "NotLessSlantEqual": "\u2A7D\u0338", "NotLessTilde": "\u2274", "NotNestedGreaterGreater": "\u2AA2\u0338", "NotNestedLessLess": "\u2AA1\u0338", "notni": "\u220C", "notniva": "\u220C", "notnivb": "\u22FE", "notnivc": "\u22FD", "NotPrecedes": "\u2280", "NotPrecedesEqual": "\u2AAF\u0338", "NotPrecedesSlantEqual": "\u22E0", "NotReverseElement": "\u220C", "NotRightTriangle": "\u22EB", "NotRightTriangleBar": "\u29D0\u0338", "NotRightTriangleEqual": "\u22ED", "NotSquareSubset": "\u228F\u0338", "NotSquareSubsetEqual": "\u22E2", "NotSquareSuperset": "\u2290\u0338", "NotSquareSupersetEqual": "\u22E3", "NotSubset": "\u2282\u20D2", "NotSubsetEqual": "\u2288", "NotSucceeds": "\u2281", "NotSucceedsEqual": "\u2AB0\u0338", "NotSucceedsSlantEqual": "\u22E1", "NotSucceedsTilde": "\u227F\u0338", "NotSuperset": "\u2283\u20D2", "NotSupersetEqual": "\u2289", "NotTilde": "\u2241", "NotTildeEqual": "\u2244", "NotTildeFullEqual": "\u2247", "NotTildeTilde": "\u2249", "NotVerticalBar": "\u2224", "npar": "\u2226", "nparallel": "\u2226", "nparsl": "\u2AFD\u20E5", "npart": "\u2202\u0338", "npolint": "\u2A14", "npr": "\u2280", "nprcue": "\u22E0", "npre": "\u2AAF\u0338", "nprec": "\u2280", "npreceq": "\u2AAF\u0338", "nrarr": "\u219B", "nrArr": "\u21CF", "nrarrc": "\u2933\u0338", "nrarrw": "\u219D\u0338", "nrightarrow": "\u219B", "nRightarrow": "\u21CF", "nrtri": "\u22EB", "nrtrie": "\u22ED", "nsc": "\u2281", "nsccue": "\u22E1", "nsce": "\u2AB0\u0338", "nscr": "\u{1D4C3}", "Nscr": "\u{1D4A9}", "nshortmid": "\u2224", "nshortparallel": "\u2226", "nsim": "\u2241", "nsime": "\u2244", "nsimeq": "\u2244", "nsmid": "\u2224", "nspar": "\u2226", "nsqsube": "\u22E2", "nsqsupe": "\u22E3", "nsub": "\u2284", "nsube": "\u2288", "nsubE": "\u2AC5\u0338", "nsubset": "\u2282\u20D2", "nsubseteq": "\u2288", "nsubseteqq": "\u2AC5\u0338", "nsucc": "\u2281", "nsucceq": "\u2AB0\u0338", "nsup": "\u2285", "nsupe": "\u2289", "nsupE": "\u2AC6\u0338", "nsupset": "\u2283\u20D2", "nsupseteq": "\u2289", "nsupseteqq": "\u2AC6\u0338", "ntgl": "\u2279", "ntilde": "\xF1", "Ntilde": "\xD1", "ntlg": "\u2278", "ntriangleleft": "\u22EA", "ntrianglelefteq": "\u22EC", "ntriangleright": "\u22EB", "ntrianglerighteq": "\u22ED", "nu": "\u03BD", "Nu": "\u039D", "num": "#", "numero": "\u2116", "numsp": "\u2007", "nvap": "\u224D\u20D2", "nvdash": "\u22AC", "nvDash": "\u22AD", "nVdash": "\u22AE", "nVDash": "\u22AF", "nvge": "\u2265\u20D2", "nvgt": ">\u20D2", "nvHarr": "\u2904", "nvinfin": "\u29DE", "nvlArr": "\u2902", "nvle": "\u2264\u20D2", "nvlt": "<\u20D2", "nvltrie": "\u22B4\u20D2", "nvrArr": "\u2903", "nvrtrie": "\u22B5\u20D2", "nvsim": "\u223C\u20D2", "nwarhk": "\u2923", "nwarr": "\u2196", "nwArr": "\u21D6", "nwarrow": "\u2196", "nwnear": "\u2927", "oacute": "\xF3", "Oacute": "\xD3", "oast": "\u229B", "ocir": "\u229A", "ocirc": "\xF4", "Ocirc": "\xD4", "ocy": "\u043E", "Ocy": "\u041E", "odash": "\u229D", "odblac": "\u0151", "Odblac": "\u0150", "odiv": "\u2A38", "odot": "\u2299", "odsold": "\u29BC", "oelig": "\u0153", "OElig": "\u0152", "ofcir": "\u29BF", "ofr": "\u{1D52C}", "Ofr": "\u{1D512}", "ogon": "\u02DB", "ograve": "\xF2", "Ograve": "\xD2", "ogt": "\u29C1", "ohbar": "\u29B5", "ohm": "\u03A9", "oint": "\u222E", "olarr": "\u21BA", "olcir": "\u29BE", "olcross": "\u29BB", "oline": "\u203E", "olt": "\u29C0", "omacr": "\u014D", "Omacr": "\u014C", "omega": "\u03C9", "Omega": "\u03A9", "omicron": "\u03BF", "Omicron": "\u039F", "omid": "\u29B6", "ominus": "\u2296", "oopf": "\u{1D560}", "Oopf": "\u{1D546}", "opar": "\u29B7", "OpenCurlyDoubleQuote": "\u201C", "OpenCurlyQuote": "\u2018", "operp": "\u29B9", "oplus": "\u2295", "or": "\u2228", "Or": "\u2A54", "orarr": "\u21BB", "ord": "\u2A5D", "order": "\u2134", "orderof": "\u2134", "ordf": "\xAA", "ordm": "\xBA", "origof": "\u22B6", "oror": "\u2A56", "orslope": "\u2A57", "orv": "\u2A5B", "oS": "\u24C8", "oscr": "\u2134", "Oscr": "\u{1D4AA}", "oslash": "\xF8", "Oslash": "\xD8", "osol": "\u2298", "otilde": "\xF5", "Otilde": "\xD5", "otimes": "\u2297", "Otimes": "\u2A37", "otimesas": "\u2A36", "ouml": "\xF6", "Ouml": "\xD6", "ovbar": "\u233D", "OverBar": "\u203E", "OverBrace": "\u23DE", "OverBracket": "\u23B4", "OverParenthesis": "\u23DC", "par": "\u2225", "para": "\xB6", "parallel": "\u2225", "parsim": "\u2AF3", "parsl": "\u2AFD", "part": "\u2202", "PartialD": "\u2202", "pcy": "\u043F", "Pcy": "\u041F", "percnt": "%", "period": ".", "permil": "\u2030", "perp": "\u22A5", "pertenk": "\u2031", "pfr": "\u{1D52D}", "Pfr": "\u{1D513}", "phi": "\u03C6", "Phi": "\u03A6", "phiv": "\u03D5", "phmmat": "\u2133", "phone": "\u260E", "pi": "\u03C0", "Pi": "\u03A0", "pitchfork": "\u22D4", "piv": "\u03D6", "planck": "\u210F", "planckh": "\u210E", "plankv": "\u210F", "plus": "+", "plusacir": "\u2A23", "plusb": "\u229E", "pluscir": "\u2A22", "plusdo": "\u2214", "plusdu": "\u2A25", "pluse": "\u2A72", "PlusMinus": "\xB1", "plusmn": "\xB1", "plussim": "\u2A26", "plustwo": "\u2A27", "pm": "\xB1", "Poincareplane": "\u210C", "pointint": "\u2A15", "popf": "\u{1D561}", "Popf": "\u2119", "pound": "\xA3", "pr": "\u227A", "Pr": "\u2ABB", "prap": "\u2AB7", "prcue": "\u227C", "pre": "\u2AAF", "prE": "\u2AB3", "prec": "\u227A", "precapprox": "\u2AB7", "preccurlyeq": "\u227C", "Precedes": "\u227A", "PrecedesEqual": "\u2AAF", "PrecedesSlantEqual": "\u227C", "PrecedesTilde": "\u227E", "preceq": "\u2AAF", "precnapprox": "\u2AB9", "precneqq": "\u2AB5", "precnsim": "\u22E8", "precsim": "\u227E", "prime": "\u2032", "Prime": "\u2033", "primes": "\u2119", "prnap": "\u2AB9", "prnE": "\u2AB5", "prnsim": "\u22E8", "prod": "\u220F", "Product": "\u220F", "profalar": "\u232E", "profline": "\u2312", "profsurf": "\u2313", "prop": "\u221D", "Proportion": "\u2237", "Proportional": "\u221D", "propto": "\u221D", "prsim": "\u227E", "prurel": "\u22B0", "pscr": "\u{1D4C5}", "Pscr": "\u{1D4AB}", "psi": "\u03C8", "Psi": "\u03A8", "puncsp": "\u2008", "qfr": "\u{1D52E}", "Qfr": "\u{1D514}", "qint": "\u2A0C", "qopf": "\u{1D562}", "Qopf": "\u211A", "qprime": "\u2057", "qscr": "\u{1D4C6}", "Qscr": "\u{1D4AC}", "quaternions": "\u210D", "quatint": "\u2A16", "quest": "?", "questeq": "\u225F", "quot": '"', "QUOT": '"', "rAarr": "\u21DB", "race": "\u223D\u0331", "racute": "\u0155", "Racute": "\u0154", "radic": "\u221A", "raemptyv": "\u29B3", "rang": "\u27E9", "Rang": "\u27EB", "rangd": "\u2992", "range": "\u29A5", "rangle": "\u27E9", "raquo": "\xBB", "rarr": "\u2192", "rArr": "\u21D2", "Rarr": "\u21A0", "rarrap": "\u2975", "rarrb": "\u21E5", "rarrbfs": "\u2920", "rarrc": "\u2933", "rarrfs": "\u291E", "rarrhk": "\u21AA", "rarrlp": "\u21AC", "rarrpl": "\u2945", "rarrsim": "\u2974", "rarrtl": "\u21A3", "Rarrtl": "\u2916", "rarrw": "\u219D", "ratail": "\u291A", "rAtail": "\u291C", "ratio": "\u2236", "rationals": "\u211A", "rbarr": "\u290D", "rBarr": "\u290F", "RBarr": "\u2910", "rbbrk": "\u2773", "rbrace": "}", "rbrack": "]", "rbrke": "\u298C", "rbrksld": "\u298E", "rbrkslu": "\u2990", "rcaron": "\u0159", "Rcaron": "\u0158", "rcedil": "\u0157", "Rcedil": "\u0156", "rceil": "\u2309", "rcub": "}", "rcy": "\u0440", "Rcy": "\u0420", "rdca": "\u2937", "rdldhar": "\u2969", "rdquo": "\u201D", "rdquor": "\u201D", "rdsh": "\u21B3", "Re": "\u211C", "real": "\u211C", "realine": "\u211B", "realpart": "\u211C", "reals": "\u211D", "rect": "\u25AD", "reg": "\xAE", "REG": "\xAE", "ReverseElement": "\u220B", "ReverseEquilibrium": "\u21CB", "ReverseUpEquilibrium": "\u296F", "rfisht": "\u297D", "rfloor": "\u230B", "rfr": "\u{1D52F}", "Rfr": "\u211C", "rHar": "\u2964", "rhard": "\u21C1", "rharu": "\u21C0", "rharul": "\u296C", "rho": "\u03C1", "Rho": "\u03A1", "rhov": "\u03F1", "RightAngleBracket": "\u27E9", "rightarrow": "\u2192", "Rightarrow": "\u21D2", "RightArrow": "\u2192", "RightArrowBar": "\u21E5", "RightArrowLeftArrow": "\u21C4", "rightarrowtail": "\u21A3", "RightCeiling": "\u2309", "RightDoubleBracket": "\u27E7", "RightDownTeeVector": "\u295D", "RightDownVector": "\u21C2", "RightDownVectorBar": "\u2955", "RightFloor": "\u230B", "rightharpoondown": "\u21C1", "rightharpoonup": "\u21C0", "rightleftarrows": "\u21C4", "rightleftharpoons": "\u21CC", "rightrightarrows": "\u21C9", "rightsquigarrow": "\u219D", "RightTee": "\u22A2", "RightTeeArrow": "\u21A6", "RightTeeVector": "\u295B", "rightthreetimes": "\u22CC", "RightTriangle": "\u22B3", "RightTriangleBar": "\u29D0", "RightTriangleEqual": "\u22B5", "RightUpDownVector": "\u294F", "RightUpTeeVector": "\u295C", "RightUpVector": "\u21BE", "RightUpVectorBar": "\u2954", "RightVector": "\u21C0", "RightVectorBar": "\u2953", "ring": "\u02DA", "risingdotseq": "\u2253", "rlarr": "\u21C4", "rlhar": "\u21CC", "rlm": "\u200F", "rmoust": "\u23B1", "rmoustache": "\u23B1", "rnmid": "\u2AEE", "roang": "\u27ED", "roarr": "\u21FE", "robrk": "\u27E7", "ropar": "\u2986", "ropf": "\u{1D563}", "Ropf": "\u211D", "roplus": "\u2A2E", "rotimes": "\u2A35", "RoundImplies": "\u2970", "rpar": ")", "rpargt": "\u2994", "rppolint": "\u2A12", "rrarr": "\u21C9", "Rrightarrow": "\u21DB", "rsaquo": "\u203A", "rscr": "\u{1D4C7}", "Rscr": "\u211B", "rsh": "\u21B1", "Rsh": "\u21B1", "rsqb": "]", "rsquo": "\u2019", "rsquor": "\u2019", "rthree": "\u22CC", "rtimes": "\u22CA", "rtri": "\u25B9", "rtrie": "\u22B5", "rtrif": "\u25B8", "rtriltri": "\u29CE", "RuleDelayed": "\u29F4", "ruluhar": "\u2968", "rx": "\u211E", "sacute": "\u015B", "Sacute": "\u015A", "sbquo": "\u201A", "sc": "\u227B", "Sc": "\u2ABC", "scap": "\u2AB8", "scaron": "\u0161", "Scaron": "\u0160", "sccue": "\u227D", "sce": "\u2AB0", "scE": "\u2AB4", "scedil": "\u015F", "Scedil": "\u015E", "scirc": "\u015D", "Scirc": "\u015C", "scnap": "\u2ABA", "scnE": "\u2AB6", "scnsim": "\u22E9", "scpolint": "\u2A13", "scsim": "\u227F", "scy": "\u0441", "Scy": "\u0421", "sdot": "\u22C5", "sdotb": "\u22A1", "sdote": "\u2A66", "searhk": "\u2925", "searr": "\u2198", "seArr": "\u21D8", "searrow": "\u2198", "sect": "\xA7", "semi": ";", "seswar": "\u2929", "setminus": "\u2216", "setmn": "\u2216", "sext": "\u2736", "sfr": "\u{1D530}", "Sfr": "\u{1D516}", "sfrown": "\u2322", "sharp": "\u266F", "shchcy": "\u0449", "SHCHcy": "\u0429", "shcy": "\u0448", "SHcy": "\u0428", "ShortDownArrow": "\u2193", "ShortLeftArrow": "\u2190", "shortmid": "\u2223", "shortparallel": "\u2225", "ShortRightArrow": "\u2192", "ShortUpArrow": "\u2191", "shy": "\xAD", "sigma": "\u03C3", "Sigma": "\u03A3", "sigmaf": "\u03C2", "sigmav": "\u03C2", "sim": "\u223C", "simdot": "\u2A6A", "sime": "\u2243", "simeq": "\u2243", "simg": "\u2A9E", "simgE": "\u2AA0", "siml": "\u2A9D", "simlE": "\u2A9F", "simne": "\u2246", "simplus": "\u2A24", "simrarr": "\u2972", "slarr": "\u2190", "SmallCircle": "\u2218", "smallsetminus": "\u2216", "smashp": "\u2A33", "smeparsl": "\u29E4", "smid": "\u2223", "smile": "\u2323", "smt": "\u2AAA", "smte": "\u2AAC", "smtes": "\u2AAC\uFE00", "softcy": "\u044C", "SOFTcy": "\u042C", "sol": "/", "solb": "\u29C4", "solbar": "\u233F", "sopf": "\u{1D564}", "Sopf": "\u{1D54A}", "spades": "\u2660", "spadesuit": "\u2660", "spar": "\u2225", "sqcap": "\u2293", "sqcaps": "\u2293\uFE00", "sqcup": "\u2294", "sqcups": "\u2294\uFE00", "Sqrt": "\u221A", "sqsub": "\u228F", "sqsube": "\u2291", "sqsubset": "\u228F", "sqsubseteq": "\u2291", "sqsup": "\u2290", "sqsupe": "\u2292", "sqsupset": "\u2290", "sqsupseteq": "\u2292", "squ": "\u25A1", "square": "\u25A1", "Square": "\u25A1", "SquareIntersection": "\u2293", "SquareSubset": "\u228F", "SquareSubsetEqual": "\u2291", "SquareSuperset": "\u2290", "SquareSupersetEqual": "\u2292", "SquareUnion": "\u2294", "squarf": "\u25AA", "squf": "\u25AA", "srarr": "\u2192", "sscr": "\u{1D4C8}", "Sscr": "\u{1D4AE}", "ssetmn": "\u2216", "ssmile": "\u2323", "sstarf": "\u22C6", "star": "\u2606", "Star": "\u22C6", "starf": "\u2605", "straightepsilon": "\u03F5", "straightphi": "\u03D5", "strns": "\xAF", "sub": "\u2282", "Sub": "\u22D0", "subdot": "\u2ABD", "sube": "\u2286", "subE": "\u2AC5", "subedot": "\u2AC3", "submult": "\u2AC1", "subne": "\u228A", "subnE": "\u2ACB", "subplus": "\u2ABF", "subrarr": "\u2979", "subset": "\u2282", "Subset": "\u22D0", "subseteq": "\u2286", "subseteqq": "\u2AC5", "SubsetEqual": "\u2286", "subsetneq": "\u228A", "subsetneqq": "\u2ACB", "subsim": "\u2AC7", "subsub": "\u2AD5", "subsup": "\u2AD3", "succ": "\u227B", "succapprox": "\u2AB8", "succcurlyeq": "\u227D", "Succeeds": "\u227B", "SucceedsEqual": "\u2AB0", "SucceedsSlantEqual": "\u227D", "SucceedsTilde": "\u227F", "succeq": "\u2AB0", "succnapprox": "\u2ABA", "succneqq": "\u2AB6", "succnsim": "\u22E9", "succsim": "\u227F", "SuchThat": "\u220B", "sum": "\u2211", "Sum": "\u2211", "sung": "\u266A", "sup": "\u2283", "Sup": "\u22D1", "sup1": "\xB9", "sup2": "\xB2", "sup3": "\xB3", "supdot": "\u2ABE", "supdsub": "\u2AD8", "supe": "\u2287", "supE": "\u2AC6", "supedot": "\u2AC4", "Superset": "\u2283", "SupersetEqual": "\u2287", "suphsol": "\u27C9", "suphsub": "\u2AD7", "suplarr": "\u297B", "supmult": "\u2AC2", "supne": "\u228B", "supnE": "\u2ACC", "supplus": "\u2AC0", "supset": "\u2283", "Supset": "\u22D1", "supseteq": "\u2287", "supseteqq": "\u2AC6", "supsetneq": "\u228B", "supsetneqq": "\u2ACC", "supsim": "\u2AC8", "supsub": "\u2AD4", "supsup": "\u2AD6", "swarhk": "\u2926", "swarr": "\u2199", "swArr": "\u21D9", "swarrow": "\u2199", "swnwar": "\u292A", "szlig": "\xDF", "Tab": "	", "target": "\u2316", "tau": "\u03C4", "Tau": "\u03A4", "tbrk": "\u23B4", "tcaron": "\u0165", "Tcaron": "\u0164", "tcedil": "\u0163", "Tcedil": "\u0162", "tcy": "\u0442", "Tcy": "\u0422", "tdot": "\u20DB", "telrec": "\u2315", "tfr": "\u{1D531}", "Tfr": "\u{1D517}", "there4": "\u2234", "therefore": "\u2234", "Therefore": "\u2234", "theta": "\u03B8", "Theta": "\u0398", "thetasym": "\u03D1", "thetav": "\u03D1", "thickapprox": "\u2248", "thicksim": "\u223C", "ThickSpace": "\u205F\u200A", "thinsp": "\u2009", "ThinSpace": "\u2009", "thkap": "\u2248", "thksim": "\u223C", "thorn": "\xFE", "THORN": "\xDE", "tilde": "\u02DC", "Tilde": "\u223C", "TildeEqual": "\u2243", "TildeFullEqual": "\u2245", "TildeTilde": "\u2248", "times": "\xD7", "timesb": "\u22A0", "timesbar": "\u2A31", "timesd": "\u2A30", "tint": "\u222D", "toea": "\u2928", "top": "\u22A4", "topbot": "\u2336", "topcir": "\u2AF1", "topf": "\u{1D565}", "Topf": "\u{1D54B}", "topfork": "\u2ADA", "tosa": "\u2929", "tprime": "\u2034", "trade": "\u2122", "TRADE": "\u2122", "triangle": "\u25B5", "triangledown": "\u25BF", "triangleleft": "\u25C3", "trianglelefteq": "\u22B4", "triangleq": "\u225C", "triangleright": "\u25B9", "trianglerighteq": "\u22B5", "tridot": "\u25EC", "trie": "\u225C", "triminus": "\u2A3A", "TripleDot": "\u20DB", "triplus": "\u2A39", "trisb": "\u29CD", "tritime": "\u2A3B", "trpezium": "\u23E2", "tscr": "\u{1D4C9}", "Tscr": "\u{1D4AF}", "tscy": "\u0446", "TScy": "\u0426", "tshcy": "\u045B", "TSHcy": "\u040B", "tstrok": "\u0167", "Tstrok": "\u0166", "twixt": "\u226C", "twoheadleftarrow": "\u219E", "twoheadrightarrow": "\u21A0", "uacute": "\xFA", "Uacute": "\xDA", "uarr": "\u2191", "uArr": "\u21D1", "Uarr": "\u219F", "Uarrocir": "\u2949", "ubrcy": "\u045E", "Ubrcy": "\u040E", "ubreve": "\u016D", "Ubreve": "\u016C", "ucirc": "\xFB", "Ucirc": "\xDB", "ucy": "\u0443", "Ucy": "\u0423", "udarr": "\u21C5", "udblac": "\u0171", "Udblac": "\u0170", "udhar": "\u296E", "ufisht": "\u297E", "ufr": "\u{1D532}", "Ufr": "\u{1D518}", "ugrave": "\xF9", "Ugrave": "\xD9", "uHar": "\u2963", "uharl": "\u21BF", "uharr": "\u21BE", "uhblk": "\u2580", "ulcorn": "\u231C", "ulcorner": "\u231C", "ulcrop": "\u230F", "ultri": "\u25F8", "umacr": "\u016B", "Umacr": "\u016A", "uml": "\xA8", "UnderBar": "_", "UnderBrace": "\u23DF", "UnderBracket": "\u23B5", "UnderParenthesis": "\u23DD", "Union": "\u22C3", "UnionPlus": "\u228E", "uogon": "\u0173", "Uogon": "\u0172", "uopf": "\u{1D566}", "Uopf": "\u{1D54C}", "uparrow": "\u2191", "Uparrow": "\u21D1", "UpArrow": "\u2191", "UpArrowBar": "\u2912", "UpArrowDownArrow": "\u21C5", "updownarrow": "\u2195", "Updownarrow": "\u21D5", "UpDownArrow": "\u2195", "UpEquilibrium": "\u296E", "upharpoonleft": "\u21BF", "upharpoonright": "\u21BE", "uplus": "\u228E", "UpperLeftArrow": "\u2196", "UpperRightArrow": "\u2197", "upsi": "\u03C5", "Upsi": "\u03D2", "upsih": "\u03D2", "upsilon": "\u03C5", "Upsilon": "\u03A5", "UpTee": "\u22A5", "UpTeeArrow": "\u21A5", "upuparrows": "\u21C8", "urcorn": "\u231D", "urcorner": "\u231D", "urcrop": "\u230E", "uring": "\u016F", "Uring": "\u016E", "urtri": "\u25F9", "uscr": "\u{1D4CA}", "Uscr": "\u{1D4B0}", "utdot": "\u22F0", "utilde": "\u0169", "Utilde": "\u0168", "utri": "\u25B5", "utrif": "\u25B4", "uuarr": "\u21C8", "uuml": "\xFC", "Uuml": "\xDC", "uwangle": "\u29A7", "vangrt": "\u299C", "varepsilon": "\u03F5", "varkappa": "\u03F0", "varnothing": "\u2205", "varphi": "\u03D5", "varpi": "\u03D6", "varpropto": "\u221D", "varr": "\u2195", "vArr": "\u21D5", "varrho": "\u03F1", "varsigma": "\u03C2", "varsubsetneq": "\u228A\uFE00", "varsubsetneqq": "\u2ACB\uFE00", "varsupsetneq": "\u228B\uFE00", "varsupsetneqq": "\u2ACC\uFE00", "vartheta": "\u03D1", "vartriangleleft": "\u22B2", "vartriangleright": "\u22B3", "vBar": "\u2AE8", "Vbar": "\u2AEB", "vBarv": "\u2AE9", "vcy": "\u0432", "Vcy": "\u0412", "vdash": "\u22A2", "vDash": "\u22A8", "Vdash": "\u22A9", "VDash": "\u22AB", "Vdashl": "\u2AE6", "vee": "\u2228", "Vee": "\u22C1", "veebar": "\u22BB", "veeeq": "\u225A", "vellip": "\u22EE", "verbar": "|", "Verbar": "\u2016", "vert": "|", "Vert": "\u2016", "VerticalBar": "\u2223", "VerticalLine": "|", "VerticalSeparator": "\u2758", "VerticalTilde": "\u2240", "VeryThinSpace": "\u200A", "vfr": "\u{1D533}", "Vfr": "\u{1D519}", "vltri": "\u22B2", "vnsub": "\u2282\u20D2", "vnsup": "\u2283\u20D2", "vopf": "\u{1D567}", "Vopf": "\u{1D54D}", "vprop": "\u221D", "vrtri": "\u22B3", "vscr": "\u{1D4CB}", "Vscr": "\u{1D4B1}", "vsubne": "\u228A\uFE00", "vsubnE": "\u2ACB\uFE00", "vsupne": "\u228B\uFE00", "vsupnE": "\u2ACC\uFE00", "Vvdash": "\u22AA", "vzigzag": "\u299A", "wcirc": "\u0175", "Wcirc": "\u0174", "wedbar": "\u2A5F", "wedge": "\u2227", "Wedge": "\u22C0", "wedgeq": "\u2259", "weierp": "\u2118", "wfr": "\u{1D534}", "Wfr": "\u{1D51A}", "wopf": "\u{1D568}", "Wopf": "\u{1D54E}", "wp": "\u2118", "wr": "\u2240", "wreath": "\u2240", "wscr": "\u{1D4CC}", "Wscr": "\u{1D4B2}", "xcap": "\u22C2", "xcirc": "\u25EF", "xcup": "\u22C3", "xdtri": "\u25BD", "xfr": "\u{1D535}", "Xfr": "\u{1D51B}", "xharr": "\u27F7", "xhArr": "\u27FA", "xi": "\u03BE", "Xi": "\u039E", "xlarr": "\u27F5", "xlArr": "\u27F8", "xmap": "\u27FC", "xnis": "\u22FB", "xodot": "\u2A00", "xopf": "\u{1D569}", "Xopf": "\u{1D54F}", "xoplus": "\u2A01", "xotime": "\u2A02", "xrarr": "\u27F6", "xrArr": "\u27F9", "xscr": "\u{1D4CD}", "Xscr": "\u{1D4B3}", "xsqcup": "\u2A06", "xuplus": "\u2A04", "xutri": "\u25B3", "xvee": "\u22C1", "xwedge": "\u22C0", "yacute": "\xFD", "Yacute": "\xDD", "yacy": "\u044F", "YAcy": "\u042F", "ycirc": "\u0177", "Ycirc": "\u0176", "ycy": "\u044B", "Ycy": "\u042B", "yen": "\xA5", "yfr": "\u{1D536}", "Yfr": "\u{1D51C}", "yicy": "\u0457", "YIcy": "\u0407", "yopf": "\u{1D56A}", "Yopf": "\u{1D550}", "yscr": "\u{1D4CE}", "Yscr": "\u{1D4B4}", "yucy": "\u044E", "YUcy": "\u042E", "yuml": "\xFF", "Yuml": "\u0178", "zacute": "\u017A", "Zacute": "\u0179", "zcaron": "\u017E", "Zcaron": "\u017D", "zcy": "\u0437", "Zcy": "\u0417", "zdot": "\u017C", "Zdot": "\u017B", "zeetrf": "\u2128", "ZeroWidthSpace": "\u200B", "zeta": "\u03B6", "Zeta": "\u0396", "zfr": "\u{1D537}", "Zfr": "\u2128", "zhcy": "\u0436", "ZHcy": "\u0416", "zigrarr": "\u21DD", "zopf": "\u{1D56B}", "Zopf": "\u2124", "zscr": "\u{1D4CF}", "Zscr": "\u{1D4B5}", "zwj": "\u200D", "zwnj": "\u200C" };
        var decodeMapLegacy = { "aacute": "\xE1", "Aacute": "\xC1", "acirc": "\xE2", "Acirc": "\xC2", "acute": "\xB4", "aelig": "\xE6", "AElig": "\xC6", "agrave": "\xE0", "Agrave": "\xC0", "amp": "&", "AMP": "&", "aring": "\xE5", "Aring": "\xC5", "atilde": "\xE3", "Atilde": "\xC3", "auml": "\xE4", "Auml": "\xC4", "brvbar": "\xA6", "ccedil": "\xE7", "Ccedil": "\xC7", "cedil": "\xB8", "cent": "\xA2", "copy": "\xA9", "COPY": "\xA9", "curren": "\xA4", "deg": "\xB0", "divide": "\xF7", "eacute": "\xE9", "Eacute": "\xC9", "ecirc": "\xEA", "Ecirc": "\xCA", "egrave": "\xE8", "Egrave": "\xC8", "eth": "\xF0", "ETH": "\xD0", "euml": "\xEB", "Euml": "\xCB", "frac12": "\xBD", "frac14": "\xBC", "frac34": "\xBE", "gt": ">", "GT": ">", "iacute": "\xED", "Iacute": "\xCD", "icirc": "\xEE", "Icirc": "\xCE", "iexcl": "\xA1", "igrave": "\xEC", "Igrave": "\xCC", "iquest": "\xBF", "iuml": "\xEF", "Iuml": "\xCF", "laquo": "\xAB", "lt": "<", "LT": "<", "macr": "\xAF", "micro": "\xB5", "middot": "\xB7", "nbsp": "\xA0", "not": "\xAC", "ntilde": "\xF1", "Ntilde": "\xD1", "oacute": "\xF3", "Oacute": "\xD3", "ocirc": "\xF4", "Ocirc": "\xD4", "ograve": "\xF2", "Ograve": "\xD2", "ordf": "\xAA", "ordm": "\xBA", "oslash": "\xF8", "Oslash": "\xD8", "otilde": "\xF5", "Otilde": "\xD5", "ouml": "\xF6", "Ouml": "\xD6", "para": "\xB6", "plusmn": "\xB1", "pound": "\xA3", "quot": '"', "QUOT": '"', "raquo": "\xBB", "reg": "\xAE", "REG": "\xAE", "sect": "\xA7", "shy": "\xAD", "sup1": "\xB9", "sup2": "\xB2", "sup3": "\xB3", "szlig": "\xDF", "thorn": "\xFE", "THORN": "\xDE", "times": "\xD7", "uacute": "\xFA", "Uacute": "\xDA", "ucirc": "\xFB", "Ucirc": "\xDB", "ugrave": "\xF9", "Ugrave": "\xD9", "uml": "\xA8", "uuml": "\xFC", "Uuml": "\xDC", "yacute": "\xFD", "Yacute": "\xDD", "yen": "\xA5", "yuml": "\xFF" };
        var decodeMapNumeric = { "0": "\uFFFD", "128": "\u20AC", "130": "\u201A", "131": "\u0192", "132": "\u201E", "133": "\u2026", "134": "\u2020", "135": "\u2021", "136": "\u02C6", "137": "\u2030", "138": "\u0160", "139": "\u2039", "140": "\u0152", "142": "\u017D", "145": "\u2018", "146": "\u2019", "147": "\u201C", "148": "\u201D", "149": "\u2022", "150": "\u2013", "151": "\u2014", "152": "\u02DC", "153": "\u2122", "154": "\u0161", "155": "\u203A", "156": "\u0153", "158": "\u017E", "159": "\u0178" };
        var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65e3, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];
        var stringFromCharCode = String.fromCharCode;
        var object = {};
        var hasOwnProperty = object.hasOwnProperty;
        var has = function(object2, propertyName) {
          return hasOwnProperty.call(object2, propertyName);
        };
        var contains = function(array, value) {
          var index = -1;
          var length = array.length;
          while (++index < length) {
            if (array[index] == value) {
              return true;
            }
          }
          return false;
        };
        var merge = function(options2, defaults2) {
          if (!options2) {
            return defaults2;
          }
          var result = {};
          var key2;
          for (key2 in defaults2) {
            result[key2] = has(options2, key2) ? options2[key2] : defaults2[key2];
          }
          return result;
        };
        var codePointToSymbol = function(codePoint, strict) {
          var output = "";
          if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
            if (strict) {
              parseError("character reference outside the permissible Unicode range");
            }
            return "\uFFFD";
          }
          if (has(decodeMapNumeric, codePoint)) {
            if (strict) {
              parseError("disallowed character reference");
            }
            return decodeMapNumeric[codePoint];
          }
          if (strict && contains(invalidReferenceCodePoints, codePoint)) {
            parseError("disallowed character reference");
          }
          if (codePoint > 65535) {
            codePoint -= 65536;
            output += stringFromCharCode(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          output += stringFromCharCode(codePoint);
          return output;
        };
        var hexEscape = function(codePoint) {
          return "&#x" + codePoint.toString(16).toUpperCase() + ";";
        };
        var decEscape = function(codePoint) {
          return "&#" + codePoint + ";";
        };
        var parseError = function(message) {
          throw Error("Parse error: " + message);
        };
        var encode = function(string, options2) {
          options2 = merge(options2, encode.options);
          var strict = options2.strict;
          if (strict && regexInvalidRawCodePoint.test(string)) {
            parseError("forbidden code point");
          }
          var encodeEverything = options2.encodeEverything;
          var useNamedReferences = options2.useNamedReferences;
          var allowUnsafeSymbols = options2.allowUnsafeSymbols;
          var escapeCodePoint = options2.decimal ? decEscape : hexEscape;
          var escapeBmpSymbol = function(symbol) {
            return escapeCodePoint(symbol.charCodeAt(0));
          };
          if (encodeEverything) {
            string = string.replace(regexAsciiWhitelist, function(symbol) {
              if (useNamedReferences && has(encodeMap, symbol)) {
                return "&" + encodeMap[symbol] + ";";
              }
              return escapeBmpSymbol(symbol);
            });
            if (useNamedReferences) {
              string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;").replace(/&#x66;&#x6A;/g, "&fjlig;");
            }
            if (useNamedReferences) {
              string = string.replace(regexEncodeNonAscii, function(string2) {
                return "&" + encodeMap[string2] + ";";
              });
            }
          } else if (useNamedReferences) {
            if (!allowUnsafeSymbols) {
              string = string.replace(regexEscape, function(string2) {
                return "&" + encodeMap[string2] + ";";
              });
            }
            string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;");
            string = string.replace(regexEncodeNonAscii, function(string2) {
              return "&" + encodeMap[string2] + ";";
            });
          } else if (!allowUnsafeSymbols) {
            string = string.replace(regexEscape, escapeBmpSymbol);
          }
          return string.replace(regexAstralSymbols, function($0) {
            var high = $0.charCodeAt(0);
            var low = $0.charCodeAt(1);
            var codePoint = (high - 55296) * 1024 + low - 56320 + 65536;
            return escapeCodePoint(codePoint);
          }).replace(regexBmpWhitelist, escapeBmpSymbol);
        };
        encode.options = {
          "allowUnsafeSymbols": false,
          "encodeEverything": false,
          "strict": false,
          "useNamedReferences": false,
          "decimal": false
        };
        var decode = function(html2, options2) {
          options2 = merge(options2, decode.options);
          var strict = options2.strict;
          if (strict && regexInvalidEntity.test(html2)) {
            parseError("malformed character reference");
          }
          return html2.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
            var codePoint;
            var semicolon;
            var decDigits;
            var hexDigits;
            var reference;
            var next;
            if ($1) {
              reference = $1;
              return decodeMap2[reference];
            }
            if ($2) {
              reference = $2;
              next = $3;
              if (next && options2.isAttributeValue) {
                if (strict && next == "=") {
                  parseError("`&` did not start a character reference");
                }
                return $0;
              } else {
                if (strict) {
                  parseError(
                    "named character reference was not terminated by a semicolon"
                  );
                }
                return decodeMapLegacy[reference] + (next || "");
              }
            }
            if ($4) {
              decDigits = $4;
              semicolon = $5;
              if (strict && !semicolon) {
                parseError("character reference was not terminated by a semicolon");
              }
              codePoint = parseInt(decDigits, 10);
              return codePointToSymbol(codePoint, strict);
            }
            if ($6) {
              hexDigits = $6;
              semicolon = $7;
              if (strict && !semicolon) {
                parseError("character reference was not terminated by a semicolon");
              }
              codePoint = parseInt(hexDigits, 16);
              return codePointToSymbol(codePoint, strict);
            }
            if (strict) {
              parseError(
                "named character reference was not terminated by a semicolon"
              );
            }
            return $0;
          });
        };
        decode.options = {
          "isAttributeValue": false,
          "strict": false
        };
        var escape = function(string) {
          return string.replace(regexEscape, function($0) {
            return escapeMap[$0];
          });
        };
        var he = {
          "version": "1.2.0",
          "encode": encode,
          "decode": decode,
          "escape": escape,
          "unescape": decode
        };
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          define(function() {
            return he;
          });
        } else if (freeExports && !freeExports.nodeType) {
          if (freeModule) {
            freeModule.exports = he;
          } else {
            for (var key in he) {
              has(he, key) && (freeExports[key] = he[key]);
            }
          }
        } else {
          root.he = he;
        }
      })(exports);
    }
  });

  // node_modules/ajv/dist/compile/codegen/code.js
  var require_code = __commonJS({
    "node_modules/ajv/dist/compile/codegen/code.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
      var _CodeOrName = class {
      };
      exports._CodeOrName = _CodeOrName;
      exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
      var Name = class extends _CodeOrName {
        constructor(s) {
          super();
          if (!exports.IDENTIFIER.test(s))
            throw new Error("CodeGen: name must be a valid identifier");
          this.str = s;
        }
        toString() {
          return this.str;
        }
        emptyStr() {
          return false;
        }
        get names() {
          return { [this.str]: 1 };
        }
      };
      exports.Name = Name;
      var _Code = class extends _CodeOrName {
        constructor(code2) {
          super();
          this._items = typeof code2 === "string" ? [code2] : code2;
        }
        toString() {
          return this.str;
        }
        emptyStr() {
          if (this._items.length > 1)
            return false;
          const item = this._items[0];
          return item === "" || item === '""';
        }
        get str() {
          var _a3;
          return (_a3 = this._str) !== null && _a3 !== void 0 ? _a3 : this._str = this._items.reduce((s, c) => `${s}${c}`, "");
        }
        get names() {
          var _a3;
          return (_a3 = this._names) !== null && _a3 !== void 0 ? _a3 : this._names = this._items.reduce((names2, c) => {
            if (c instanceof Name)
              names2[c.str] = (names2[c.str] || 0) + 1;
            return names2;
          }, {});
        }
      };
      exports._Code = _Code;
      exports.nil = new _Code("");
      function _(strs, ...args) {
        const code2 = [strs[0]];
        let i = 0;
        while (i < args.length) {
          addCodeArg(code2, args[i]);
          code2.push(strs[++i]);
        }
        return new _Code(code2);
      }
      exports._ = _;
      var plus = new _Code("+");
      function str(strs, ...args) {
        const expr = [safeStringify(strs[0])];
        let i = 0;
        while (i < args.length) {
          expr.push(plus);
          addCodeArg(expr, args[i]);
          expr.push(plus, safeStringify(strs[++i]));
        }
        optimize(expr);
        return new _Code(expr);
      }
      exports.str = str;
      function addCodeArg(code2, arg) {
        if (arg instanceof _Code)
          code2.push(...arg._items);
        else if (arg instanceof Name)
          code2.push(arg);
        else
          code2.push(interpolate(arg));
      }
      exports.addCodeArg = addCodeArg;
      function optimize(expr) {
        let i = 1;
        while (i < expr.length - 1) {
          if (expr[i] === plus) {
            const res = mergeExprItems(expr[i - 1], expr[i + 1]);
            if (res !== void 0) {
              expr.splice(i - 1, 3, res);
              continue;
            }
            expr[i++] = "+";
          }
          i++;
        }
      }
      function mergeExprItems(a, b) {
        if (b === '""')
          return a;
        if (a === '""')
          return b;
        if (typeof a == "string") {
          if (b instanceof Name || a[a.length - 1] !== '"')
            return;
          if (typeof b != "string")
            return `${a.slice(0, -1)}${b}"`;
          if (b[0] === '"')
            return a.slice(0, -1) + b.slice(1);
          return;
        }
        if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
          return `"${a}${b.slice(1)}`;
        return;
      }
      function strConcat(c1, c2) {
        return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
      }
      exports.strConcat = strConcat;
      function interpolate(x) {
        return typeof x == "number" || typeof x == "boolean" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(",") : x);
      }
      function stringify(x) {
        return new _Code(safeStringify(x));
      }
      exports.stringify = stringify;
      function safeStringify(x) {
        return JSON.stringify(x).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }
      exports.safeStringify = safeStringify;
      function getProperty(key) {
        return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`;
      }
      exports.getProperty = getProperty;
      function getEsmExportName(key) {
        if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
          return new _Code(`${key}`);
        }
        throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
      }
      exports.getEsmExportName = getEsmExportName;
      function regexpCode(rx) {
        return new _Code(rx.toString());
      }
      exports.regexpCode = regexpCode;
    }
  });

  // node_modules/ajv/dist/compile/codegen/scope.js
  var require_scope = __commonJS({
    "node_modules/ajv/dist/compile/codegen/scope.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
      var code_1 = require_code();
      var ValueError = class extends Error {
        constructor(name) {
          super(`CodeGen: "code" for ${name} not defined`);
          this.value = name.value;
        }
      };
      var UsedValueState;
      (function(UsedValueState2) {
        UsedValueState2[UsedValueState2["Started"] = 0] = "Started";
        UsedValueState2[UsedValueState2["Completed"] = 1] = "Completed";
      })(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
      exports.varKinds = {
        const: new code_1.Name("const"),
        let: new code_1.Name("let"),
        var: new code_1.Name("var")
      };
      var Scope = class {
        constructor({ prefixes, parent } = {}) {
          this._names = {};
          this._prefixes = prefixes;
          this._parent = parent;
        }
        toName(nameOrPrefix) {
          return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
        }
        name(prefix) {
          return new code_1.Name(this._newName(prefix));
        }
        _newName(prefix) {
          const ng = this._names[prefix] || this._nameGroup(prefix);
          return `${prefix}${ng.index++}`;
        }
        _nameGroup(prefix) {
          var _a3, _b;
          if (((_b = (_a3 = this._parent) === null || _a3 === void 0 ? void 0 : _a3._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {
            throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
          }
          return this._names[prefix] = { prefix, index: 0 };
        }
      };
      exports.Scope = Scope;
      var ValueScopeName = class extends code_1.Name {
        constructor(prefix, nameStr) {
          super(nameStr);
          this.prefix = prefix;
        }
        setValue(value, { property, itemIndex }) {
          this.value = value;
          this.scopePath = (0, code_1._)`.${new code_1.Name(property)}[${itemIndex}]`;
        }
      };
      exports.ValueScopeName = ValueScopeName;
      var line = (0, code_1._)`\n`;
      var ValueScope = class extends Scope {
        constructor(opts) {
          super(opts);
          this._values = {};
          this._scope = opts.scope;
          this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
        }
        get() {
          return this._scope;
        }
        name(prefix) {
          return new ValueScopeName(prefix, this._newName(prefix));
        }
        value(nameOrPrefix, value) {
          var _a3;
          if (value.ref === void 0)
            throw new Error("CodeGen: ref must be passed in value");
          const name = this.toName(nameOrPrefix);
          const { prefix } = name;
          const valueKey = (_a3 = value.key) !== null && _a3 !== void 0 ? _a3 : value.ref;
          let vs = this._values[prefix];
          if (vs) {
            const _name = vs.get(valueKey);
            if (_name)
              return _name;
          } else {
            vs = this._values[prefix] = /* @__PURE__ */ new Map();
          }
          vs.set(valueKey, name);
          const s = this._scope[prefix] || (this._scope[prefix] = []);
          const itemIndex = s.length;
          s[itemIndex] = value.ref;
          name.setValue(value, { property: prefix, itemIndex });
          return name;
        }
        getValue(prefix, keyOrRef) {
          const vs = this._values[prefix];
          if (!vs)
            return;
          return vs.get(keyOrRef);
        }
        scopeRefs(scopeName, values = this._values) {
          return this._reduceValues(values, (name) => {
            if (name.scopePath === void 0)
              throw new Error(`CodeGen: name "${name}" has no value`);
            return (0, code_1._)`${scopeName}${name.scopePath}`;
          });
        }
        scopeCode(values = this._values, usedValues, getCode) {
          return this._reduceValues(values, (name) => {
            if (name.value === void 0)
              throw new Error(`CodeGen: name "${name}" has no value`);
            return name.value.code;
          }, usedValues, getCode);
        }
        _reduceValues(values, valueCode, usedValues = {}, getCode) {
          let code2 = code_1.nil;
          for (const prefix in values) {
            const vs = values[prefix];
            if (!vs)
              continue;
            const nameSet = usedValues[prefix] = usedValues[prefix] || /* @__PURE__ */ new Map();
            vs.forEach((name) => {
              if (nameSet.has(name))
                return;
              nameSet.set(name, UsedValueState.Started);
              let c = valueCode(name);
              if (c) {
                const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
                code2 = (0, code_1._)`${code2}${def} ${name} = ${c};${this.opts._n}`;
              } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {
                code2 = (0, code_1._)`${code2}${c}${this.opts._n}`;
              } else {
                throw new ValueError(name);
              }
              nameSet.set(name, UsedValueState.Completed);
            });
          }
          return code2;
        }
      };
      exports.ValueScope = ValueScope;
    }
  });

  // node_modules/ajv/dist/compile/codegen/index.js
  var require_codegen = __commonJS({
    "node_modules/ajv/dist/compile/codegen/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
      var code_1 = require_code();
      var scope_1 = require_scope();
      var code_2 = require_code();
      Object.defineProperty(exports, "_", { enumerable: true, get: function() {
        return code_2._;
      } });
      Object.defineProperty(exports, "str", { enumerable: true, get: function() {
        return code_2.str;
      } });
      Object.defineProperty(exports, "strConcat", { enumerable: true, get: function() {
        return code_2.strConcat;
      } });
      Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
        return code_2.nil;
      } });
      Object.defineProperty(exports, "getProperty", { enumerable: true, get: function() {
        return code_2.getProperty;
      } });
      Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
        return code_2.stringify;
      } });
      Object.defineProperty(exports, "regexpCode", { enumerable: true, get: function() {
        return code_2.regexpCode;
      } });
      Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
        return code_2.Name;
      } });
      var scope_2 = require_scope();
      Object.defineProperty(exports, "Scope", { enumerable: true, get: function() {
        return scope_2.Scope;
      } });
      Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function() {
        return scope_2.ValueScope;
      } });
      Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function() {
        return scope_2.ValueScopeName;
      } });
      Object.defineProperty(exports, "varKinds", { enumerable: true, get: function() {
        return scope_2.varKinds;
      } });
      exports.operators = {
        GT: new code_1._Code(">"),
        GTE: new code_1._Code(">="),
        LT: new code_1._Code("<"),
        LTE: new code_1._Code("<="),
        EQ: new code_1._Code("==="),
        NEQ: new code_1._Code("!=="),
        NOT: new code_1._Code("!"),
        OR: new code_1._Code("||"),
        AND: new code_1._Code("&&"),
        ADD: new code_1._Code("+")
      };
      var Node = class {
        optimizeNodes() {
          return this;
        }
        optimizeNames(_names, _constants) {
          return this;
        }
      };
      var Def = class extends Node {
        constructor(varKind, name, rhs) {
          super();
          this.varKind = varKind;
          this.name = name;
          this.rhs = rhs;
        }
        render({ es5, _n }) {
          const varKind = es5 ? scope_1.varKinds.var : this.varKind;
          const rhs = this.rhs === void 0 ? "" : ` = ${this.rhs}`;
          return `${varKind} ${this.name}${rhs};` + _n;
        }
        optimizeNames(names2, constants) {
          if (!names2[this.name.str])
            return;
          if (this.rhs)
            this.rhs = optimizeExpr(this.rhs, names2, constants);
          return this;
        }
        get names() {
          return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
        }
      };
      var Assign = class extends Node {
        constructor(lhs, rhs, sideEffects) {
          super();
          this.lhs = lhs;
          this.rhs = rhs;
          this.sideEffects = sideEffects;
        }
        render({ _n }) {
          return `${this.lhs} = ${this.rhs};` + _n;
        }
        optimizeNames(names2, constants) {
          if (this.lhs instanceof code_1.Name && !names2[this.lhs.str] && !this.sideEffects)
            return;
          this.rhs = optimizeExpr(this.rhs, names2, constants);
          return this;
        }
        get names() {
          const names2 = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
          return addExprNames(names2, this.rhs);
        }
      };
      var AssignOp = class extends Assign {
        constructor(lhs, op, rhs, sideEffects) {
          super(lhs, rhs, sideEffects);
          this.op = op;
        }
        render({ _n }) {
          return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
        }
      };
      var Label = class extends Node {
        constructor(label3) {
          super();
          this.label = label3;
          this.names = {};
        }
        render({ _n }) {
          return `${this.label}:` + _n;
        }
      };
      var Break = class extends Node {
        constructor(label3) {
          super();
          this.label = label3;
          this.names = {};
        }
        render({ _n }) {
          const label3 = this.label ? ` ${this.label}` : "";
          return `break${label3};` + _n;
        }
      };
      var Throw = class extends Node {
        constructor(error) {
          super();
          this.error = error;
        }
        render({ _n }) {
          return `throw ${this.error};` + _n;
        }
        get names() {
          return this.error.names;
        }
      };
      var AnyCode = class extends Node {
        constructor(code2) {
          super();
          this.code = code2;
        }
        render({ _n }) {
          return `${this.code};` + _n;
        }
        optimizeNodes() {
          return `${this.code}` ? this : void 0;
        }
        optimizeNames(names2, constants) {
          this.code = optimizeExpr(this.code, names2, constants);
          return this;
        }
        get names() {
          return this.code instanceof code_1._CodeOrName ? this.code.names : {};
        }
      };
      var ParentNode = class extends Node {
        constructor(nodes = []) {
          super();
          this.nodes = nodes;
        }
        render(opts) {
          return this.nodes.reduce((code2, n) => code2 + n.render(opts), "");
        }
        optimizeNodes() {
          const { nodes } = this;
          let i = nodes.length;
          while (i--) {
            const n = nodes[i].optimizeNodes();
            if (Array.isArray(n))
              nodes.splice(i, 1, ...n);
            else if (n)
              nodes[i] = n;
            else
              nodes.splice(i, 1);
          }
          return nodes.length > 0 ? this : void 0;
        }
        optimizeNames(names2, constants) {
          const { nodes } = this;
          let i = nodes.length;
          while (i--) {
            const n = nodes[i];
            if (n.optimizeNames(names2, constants))
              continue;
            subtractNames(names2, n.names);
            nodes.splice(i, 1);
          }
          return nodes.length > 0 ? this : void 0;
        }
        get names() {
          return this.nodes.reduce((names2, n) => addNames(names2, n.names), {});
        }
      };
      var BlockNode = class extends ParentNode {
        render(opts) {
          return "{" + opts._n + super.render(opts) + "}" + opts._n;
        }
      };
      var Root = class extends ParentNode {
      };
      var Else = class extends BlockNode {
      };
      Else.kind = "else";
      var If = class extends BlockNode {
        constructor(condition, nodes) {
          super(nodes);
          this.condition = condition;
        }
        render(opts) {
          let code2 = `if(${this.condition})` + super.render(opts);
          if (this.else)
            code2 += "else " + this.else.render(opts);
          return code2;
        }
        optimizeNodes() {
          super.optimizeNodes();
          const cond = this.condition;
          if (cond === true)
            return this.nodes;
          let e = this.else;
          if (e) {
            const ns = e.optimizeNodes();
            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
          }
          if (e) {
            if (cond === false)
              return e instanceof If ? e : e.nodes;
            if (this.nodes.length)
              return this;
            return new If(not2(cond), e instanceof If ? [e] : e.nodes);
          }
          if (cond === false || !this.nodes.length)
            return void 0;
          return this;
        }
        optimizeNames(names2, constants) {
          var _a3;
          this.else = (_a3 = this.else) === null || _a3 === void 0 ? void 0 : _a3.optimizeNames(names2, constants);
          if (!(super.optimizeNames(names2, constants) || this.else))
            return;
          this.condition = optimizeExpr(this.condition, names2, constants);
          return this;
        }
        get names() {
          const names2 = super.names;
          addExprNames(names2, this.condition);
          if (this.else)
            addNames(names2, this.else.names);
          return names2;
        }
      };
      If.kind = "if";
      var For = class extends BlockNode {
      };
      For.kind = "for";
      var ForLoop = class extends For {
        constructor(iteration) {
          super();
          this.iteration = iteration;
        }
        render(opts) {
          return `for(${this.iteration})` + super.render(opts);
        }
        optimizeNames(names2, constants) {
          if (!super.optimizeNames(names2, constants))
            return;
          this.iteration = optimizeExpr(this.iteration, names2, constants);
          return this;
        }
        get names() {
          return addNames(super.names, this.iteration.names);
        }
      };
      var ForRange = class extends For {
        constructor(varKind, name, from, to) {
          super();
          this.varKind = varKind;
          this.name = name;
          this.from = from;
          this.to = to;
        }
        render(opts) {
          const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
          const { name, from, to } = this;
          return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
        }
        get names() {
          const names2 = addExprNames(super.names, this.from);
          return addExprNames(names2, this.to);
        }
      };
      var ForIter = class extends For {
        constructor(loop, varKind, name, iterable) {
          super();
          this.loop = loop;
          this.varKind = varKind;
          this.name = name;
          this.iterable = iterable;
        }
        render(opts) {
          return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
        }
        optimizeNames(names2, constants) {
          if (!super.optimizeNames(names2, constants))
            return;
          this.iterable = optimizeExpr(this.iterable, names2, constants);
          return this;
        }
        get names() {
          return addNames(super.names, this.iterable.names);
        }
      };
      var Func = class extends BlockNode {
        constructor(name, args, async) {
          super();
          this.name = name;
          this.args = args;
          this.async = async;
        }
        render(opts) {
          const _async = this.async ? "async " : "";
          return `${_async}function ${this.name}(${this.args})` + super.render(opts);
        }
      };
      Func.kind = "func";
      var Return = class extends ParentNode {
        render(opts) {
          return "return " + super.render(opts);
        }
      };
      Return.kind = "return";
      var Try = class extends BlockNode {
        render(opts) {
          let code2 = "try" + super.render(opts);
          if (this.catch)
            code2 += this.catch.render(opts);
          if (this.finally)
            code2 += this.finally.render(opts);
          return code2;
        }
        optimizeNodes() {
          var _a3, _b;
          super.optimizeNodes();
          (_a3 = this.catch) === null || _a3 === void 0 ? void 0 : _a3.optimizeNodes();
          (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
          return this;
        }
        optimizeNames(names2, constants) {
          var _a3, _b;
          super.optimizeNames(names2, constants);
          (_a3 = this.catch) === null || _a3 === void 0 ? void 0 : _a3.optimizeNames(names2, constants);
          (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names2, constants);
          return this;
        }
        get names() {
          const names2 = super.names;
          if (this.catch)
            addNames(names2, this.catch.names);
          if (this.finally)
            addNames(names2, this.finally.names);
          return names2;
        }
      };
      var Catch = class extends BlockNode {
        constructor(error) {
          super();
          this.error = error;
        }
        render(opts) {
          return `catch(${this.error})` + super.render(opts);
        }
      };
      Catch.kind = "catch";
      var Finally = class extends BlockNode {
        render(opts) {
          return "finally" + super.render(opts);
        }
      };
      Finally.kind = "finally";
      var CodeGen = class {
        constructor(extScope, opts = {}) {
          this._values = {};
          this._blockStarts = [];
          this._constants = {};
          this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
          this._extScope = extScope;
          this._scope = new scope_1.Scope({ parent: extScope });
          this._nodes = [new Root()];
        }
        toString() {
          return this._root.render(this.opts);
        }
        name(prefix) {
          return this._scope.name(prefix);
        }
        scopeName(prefix) {
          return this._extScope.name(prefix);
        }
        scopeValue(prefixOrName, value) {
          const name = this._extScope.value(prefixOrName, value);
          const vs = this._values[name.prefix] || (this._values[name.prefix] = /* @__PURE__ */ new Set());
          vs.add(name);
          return name;
        }
        getScopeValue(prefix, keyOrRef) {
          return this._extScope.getValue(prefix, keyOrRef);
        }
        scopeRefs(scopeName) {
          return this._extScope.scopeRefs(scopeName, this._values);
        }
        scopeCode() {
          return this._extScope.scopeCode(this._values);
        }
        _def(varKind, nameOrPrefix, rhs, constant) {
          const name = this._scope.toName(nameOrPrefix);
          if (rhs !== void 0 && constant)
            this._constants[name.str] = rhs;
          this._leafNode(new Def(varKind, name, rhs));
          return name;
        }
        const(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
        }
        let(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
        }
        var(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
        }
        assign(lhs, rhs, sideEffects) {
          return this._leafNode(new Assign(lhs, rhs, sideEffects));
        }
        add(lhs, rhs) {
          return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
        }
        code(c) {
          if (typeof c == "function")
            c();
          else if (c !== code_1.nil)
            this._leafNode(new AnyCode(c));
          return this;
        }
        object(...keyValues) {
          const code2 = ["{"];
          for (const [key, value] of keyValues) {
            if (code2.length > 1)
              code2.push(",");
            code2.push(key);
            if (key !== value || this.opts.es5) {
              code2.push(":");
              (0, code_1.addCodeArg)(code2, value);
            }
          }
          code2.push("}");
          return new code_1._Code(code2);
        }
        if(condition, thenBody, elseBody) {
          this._blockNode(new If(condition));
          if (thenBody && elseBody) {
            this.code(thenBody).else().code(elseBody).endIf();
          } else if (thenBody) {
            this.code(thenBody).endIf();
          } else if (elseBody) {
            throw new Error('CodeGen: "else" body without "then" body');
          }
          return this;
        }
        elseIf(condition) {
          return this._elseNode(new If(condition));
        }
        else() {
          return this._elseNode(new Else());
        }
        endIf() {
          return this._endBlockNode(If, Else);
        }
        _for(node, forBody) {
          this._blockNode(node);
          if (forBody)
            this.code(forBody).endFor();
          return this;
        }
        for(iteration, forBody) {
          return this._for(new ForLoop(iteration), forBody);
        }
        forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
          const name = this._scope.toName(nameOrPrefix);
          return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
        }
        forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
          const name = this._scope.toName(nameOrPrefix);
          if (this.opts.es5) {
            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
            return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, (i) => {
              this.var(name, (0, code_1._)`${arr}[${i}]`);
              forBody(name);
            });
          }
          return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
        }
        forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
          if (this.opts.ownProperties) {
            return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
          }
          const name = this._scope.toName(nameOrPrefix);
          return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
        }
        endFor() {
          return this._endBlockNode(For);
        }
        label(label3) {
          return this._leafNode(new Label(label3));
        }
        break(label3) {
          return this._leafNode(new Break(label3));
        }
        return(value) {
          const node = new Return();
          this._blockNode(node);
          this.code(value);
          if (node.nodes.length !== 1)
            throw new Error('CodeGen: "return" should have one node');
          return this._endBlockNode(Return);
        }
        try(tryBody, catchCode, finallyCode) {
          if (!catchCode && !finallyCode)
            throw new Error('CodeGen: "try" without "catch" and "finally"');
          const node = new Try();
          this._blockNode(node);
          this.code(tryBody);
          if (catchCode) {
            const error = this.name("e");
            this._currNode = node.catch = new Catch(error);
            catchCode(error);
          }
          if (finallyCode) {
            this._currNode = node.finally = new Finally();
            this.code(finallyCode);
          }
          return this._endBlockNode(Catch, Finally);
        }
        throw(error) {
          return this._leafNode(new Throw(error));
        }
        block(body, nodeCount) {
          this._blockStarts.push(this._nodes.length);
          if (body)
            this.code(body).endBlock(nodeCount);
          return this;
        }
        endBlock(nodeCount) {
          const len = this._blockStarts.pop();
          if (len === void 0)
            throw new Error("CodeGen: not in self-balancing block");
          const toClose = this._nodes.length - len;
          if (toClose < 0 || nodeCount !== void 0 && toClose !== nodeCount) {
            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
          }
          this._nodes.length = len;
          return this;
        }
        func(name, args = code_1.nil, async, funcBody) {
          this._blockNode(new Func(name, args, async));
          if (funcBody)
            this.code(funcBody).endFunc();
          return this;
        }
        endFunc() {
          return this._endBlockNode(Func);
        }
        optimize(n = 1) {
          while (n-- > 0) {
            this._root.optimizeNodes();
            this._root.optimizeNames(this._root.names, this._constants);
          }
        }
        _leafNode(node) {
          this._currNode.nodes.push(node);
          return this;
        }
        _blockNode(node) {
          this._currNode.nodes.push(node);
          this._nodes.push(node);
        }
        _endBlockNode(N1, N2) {
          const n = this._currNode;
          if (n instanceof N1 || N2 && n instanceof N2) {
            this._nodes.pop();
            return this;
          }
          throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
        }
        _elseNode(node) {
          const n = this._currNode;
          if (!(n instanceof If)) {
            throw new Error('CodeGen: "else" without "if"');
          }
          this._currNode = n.else = node;
          return this;
        }
        get _root() {
          return this._nodes[0];
        }
        get _currNode() {
          const ns = this._nodes;
          return ns[ns.length - 1];
        }
        set _currNode(node) {
          const ns = this._nodes;
          ns[ns.length - 1] = node;
        }
      };
      exports.CodeGen = CodeGen;
      function addNames(names2, from) {
        for (const n in from)
          names2[n] = (names2[n] || 0) + (from[n] || 0);
        return names2;
      }
      function addExprNames(names2, from) {
        return from instanceof code_1._CodeOrName ? addNames(names2, from.names) : names2;
      }
      function optimizeExpr(expr, names2, constants) {
        if (expr instanceof code_1.Name)
          return replaceName(expr);
        if (!canOptimize(expr))
          return expr;
        return new code_1._Code(expr._items.reduce((items, c) => {
          if (c instanceof code_1.Name)
            c = replaceName(c);
          if (c instanceof code_1._Code)
            items.push(...c._items);
          else
            items.push(c);
          return items;
        }, []));
        function replaceName(n) {
          const c = constants[n.str];
          if (c === void 0 || names2[n.str] !== 1)
            return n;
          delete names2[n.str];
          return c;
        }
        function canOptimize(e) {
          return e instanceof code_1._Code && e._items.some((c) => c instanceof code_1.Name && names2[c.str] === 1 && constants[c.str] !== void 0);
        }
      }
      function subtractNames(names2, from) {
        for (const n in from)
          names2[n] = (names2[n] || 0) - (from[n] || 0);
      }
      function not2(x) {
        return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._)`!${par(x)}`;
      }
      exports.not = not2;
      var andCode = mappend(exports.operators.AND);
      function and(...args) {
        return args.reduce(andCode);
      }
      exports.and = and;
      var orCode = mappend(exports.operators.OR);
      function or(...args) {
        return args.reduce(orCode);
      }
      exports.or = or;
      function mappend(op) {
        return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;
      }
      function par(x) {
        return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;
      }
    }
  });

  // node_modules/ajv/dist/compile/util.js
  var require_util3 = __commonJS({
    "node_modules/ajv/dist/compile/util.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
      var codegen_1 = require_codegen();
      var code_1 = require_code();
      function toHash(arr) {
        const hash = {};
        for (const item of arr)
          hash[item] = true;
        return hash;
      }
      exports.toHash = toHash;
      function alwaysValidSchema(it, schema2) {
        if (typeof schema2 == "boolean")
          return schema2;
        if (Object.keys(schema2).length === 0)
          return true;
        checkUnknownRules(it, schema2);
        return !schemaHasRules(schema2, it.self.RULES.all);
      }
      exports.alwaysValidSchema = alwaysValidSchema;
      function checkUnknownRules(it, schema2 = it.schema) {
        const { opts, self: self2 } = it;
        if (!opts.strictSchema)
          return;
        if (typeof schema2 === "boolean")
          return;
        const rules = self2.RULES.keywords;
        for (const key in schema2) {
          if (!rules[key])
            checkStrictMode(it, `unknown keyword: "${key}"`);
        }
      }
      exports.checkUnknownRules = checkUnknownRules;
      function schemaHasRules(schema2, rules) {
        if (typeof schema2 == "boolean")
          return !schema2;
        for (const key in schema2)
          if (rules[key])
            return true;
        return false;
      }
      exports.schemaHasRules = schemaHasRules;
      function schemaHasRulesButRef(schema2, RULES) {
        if (typeof schema2 == "boolean")
          return !schema2;
        for (const key in schema2)
          if (key !== "$ref" && RULES.all[key])
            return true;
        return false;
      }
      exports.schemaHasRulesButRef = schemaHasRulesButRef;
      function schemaRefOrVal({ topSchemaRef, schemaPath }, schema2, keyword, $data) {
        if (!$data) {
          if (typeof schema2 == "number" || typeof schema2 == "boolean")
            return schema2;
          if (typeof schema2 == "string")
            return (0, codegen_1._)`${schema2}`;
        }
        return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
      }
      exports.schemaRefOrVal = schemaRefOrVal;
      function unescapeFragment(str) {
        return unescapeJsonPointer(decodeURIComponent(str));
      }
      exports.unescapeFragment = unescapeFragment;
      function escapeFragment(str) {
        return encodeURIComponent(escapeJsonPointer(str));
      }
      exports.escapeFragment = escapeFragment;
      function escapeJsonPointer(str) {
        if (typeof str == "number")
          return `${str}`;
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
      exports.escapeJsonPointer = escapeJsonPointer;
      function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~");
      }
      exports.unescapeJsonPointer = unescapeJsonPointer;
      function eachItem(xs, f) {
        if (Array.isArray(xs)) {
          for (const x of xs)
            f(x);
        } else {
          f(xs);
        }
      }
      exports.eachItem = eachItem;
      function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {
        return (gen, from, to, toName) => {
          const res = to === void 0 ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);
          return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
        };
      }
      exports.mergeEvaluated = {
        props: makeMergeEvaluated({
          mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => {
            gen.if((0, codegen_1._)`${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));
          }),
          mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => {
            if (from === true) {
              gen.assign(to, true);
            } else {
              gen.assign(to, (0, codegen_1._)`${to} || {}`);
              setEvaluated(gen, to, from);
            }
          }),
          mergeValues: (from, to) => from === true ? true : { ...from, ...to },
          resultToName: evaluatedPropsToName
        }),
        items: makeMergeEvaluated({
          mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
          mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),
          mergeValues: (from, to) => from === true ? true : Math.max(from, to),
          resultToName: (gen, items) => gen.var("items", items)
        })
      };
      function evaluatedPropsToName(gen, ps) {
        if (ps === true)
          return gen.var("props", true);
        const props = gen.var("props", (0, codegen_1._)`{}`);
        if (ps !== void 0)
          setEvaluated(gen, props, ps);
        return props;
      }
      exports.evaluatedPropsToName = evaluatedPropsToName;
      function setEvaluated(gen, props, ps) {
        Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));
      }
      exports.setEvaluated = setEvaluated;
      var snippets = {};
      function useFunc(gen, f) {
        return gen.scopeValue("func", {
          ref: f,
          code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))
        });
      }
      exports.useFunc = useFunc;
      var Type;
      (function(Type2) {
        Type2[Type2["Num"] = 0] = "Num";
        Type2[Type2["Str"] = 1] = "Str";
      })(Type = exports.Type || (exports.Type = {}));
      function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
        if (dataProp instanceof codegen_1.Name) {
          const isNumber = dataPropType === Type.Num;
          return jsPropertySyntax ? isNumber ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`;
        }
        return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
      }
      exports.getErrorPath = getErrorPath;
      function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
        if (!mode)
          return;
        msg = `strict mode: ${msg}`;
        if (mode === true)
          throw new Error(msg);
        it.self.logger.warn(msg);
      }
      exports.checkStrictMode = checkStrictMode;
    }
  });

  // node_modules/ajv/dist/compile/names.js
  var require_names = __commonJS({
    "node_modules/ajv/dist/compile/names.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var names2 = {
        data: new codegen_1.Name("data"),
        valCxt: new codegen_1.Name("valCxt"),
        instancePath: new codegen_1.Name("instancePath"),
        parentData: new codegen_1.Name("parentData"),
        parentDataProperty: new codegen_1.Name("parentDataProperty"),
        rootData: new codegen_1.Name("rootData"),
        dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
        vErrors: new codegen_1.Name("vErrors"),
        errors: new codegen_1.Name("errors"),
        this: new codegen_1.Name("this"),
        self: new codegen_1.Name("self"),
        scope: new codegen_1.Name("scope"),
        json: new codegen_1.Name("json"),
        jsonPos: new codegen_1.Name("jsonPos"),
        jsonLen: new codegen_1.Name("jsonLen"),
        jsonPart: new codegen_1.Name("jsonPart")
      };
      exports.default = names2;
    }
  });

  // node_modules/ajv/dist/compile/errors.js
  var require_errors = __commonJS({
    "node_modules/ajv/dist/compile/errors.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var names_1 = require_names();
      exports.keywordError = {
        message: ({ keyword }) => (0, codegen_1.str)`must pass "${keyword}" keyword validation`
      };
      exports.keyword$DataError = {
        message: ({ keyword, schemaType }) => schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
      };
      function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {
          addError(gen, errObj);
        } else {
          returnErrors(it, (0, codegen_1._)`[${errObj}]`);
        }
      }
      exports.reportError = reportError;
      function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        addError(gen, errObj);
        if (!(compositeRule || allErrors)) {
          returnErrors(it, names_1.default.vErrors);
        }
      }
      exports.reportExtraError = reportExtraError;
      function resetErrorsCount(gen, errsCount) {
        gen.assign(names_1.default.errors, errsCount);
        gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
      }
      exports.resetErrorsCount = resetErrorsCount;
      function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
        if (errsCount === void 0)
          throw new Error("ajv implementation error");
        const err = gen.name("err");
        gen.forRange("i", errsCount, names_1.default.errors, (i) => {
          gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);
          gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
          gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);
          if (it.opts.verbose) {
            gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
            gen.assign((0, codegen_1._)`${err}.data`, data);
          }
        });
      }
      exports.extendErrors = extendErrors;
      function addError(gen, errObj) {
        const err = gen.const("err", errObj);
        gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
        gen.code((0, codegen_1._)`${names_1.default.errors}++`);
      }
      function returnErrors(it, errs) {
        const { gen, validateName, schemaEnv } = it;
        if (schemaEnv.$async) {
          gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
          gen.return(false);
        }
      }
      var E = {
        keyword: new codegen_1.Name("keyword"),
        schemaPath: new codegen_1.Name("schemaPath"),
        params: new codegen_1.Name("params"),
        propertyName: new codegen_1.Name("propertyName"),
        message: new codegen_1.Name("message"),
        schema: new codegen_1.Name("schema"),
        parentSchema: new codegen_1.Name("parentSchema")
      };
      function errorObjectCode(cxt, error, errorPaths) {
        const { createErrors } = cxt.it;
        if (createErrors === false)
          return (0, codegen_1._)`{}`;
        return errorObject(cxt, error, errorPaths);
      }
      function errorObject(cxt, error, errorPaths = {}) {
        const { gen, it } = cxt;
        const keyValues = [
          errorInstancePath(it, errorPaths),
          errorSchemaPath(cxt, errorPaths)
        ];
        extraErrorProps(cxt, error, keyValues);
        return gen.object(...keyValues);
      }
      function errorInstancePath({ errorPath }, { instancePath }) {
        const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
        return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
      }
      function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
        let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
        if (schemaPath) {
          schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
        }
        return [E.schemaPath, schPath];
      }
      function extraErrorProps(cxt, { params, message }, keyValues) {
        const { keyword, data, schemaValue, it } = cxt;
        const { opts, propertyName, topSchemaRef, schemaPath } = it;
        keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`]);
        if (opts.messages) {
          keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
        }
        if (opts.verbose) {
          keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
        }
        if (propertyName)
          keyValues.push([E.propertyName, propertyName]);
      }
    }
  });

  // node_modules/ajv/dist/compile/validate/boolSchema.js
  var require_boolSchema = __commonJS({
    "node_modules/ajv/dist/compile/validate/boolSchema.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
      var errors_1 = require_errors();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var boolError = {
        message: "boolean schema is false"
      };
      function topBoolOrEmptySchema(it) {
        const { gen, schema: schema2, validateName } = it;
        if (schema2 === false) {
          falseSchemaError(it, false);
        } else if (typeof schema2 == "object" && schema2.$async === true) {
          gen.return(names_1.default.data);
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, null);
          gen.return(true);
        }
      }
      exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
      function boolOrEmptySchema(it, valid2) {
        const { gen, schema: schema2 } = it;
        if (schema2 === false) {
          gen.var(valid2, false);
          falseSchemaError(it);
        } else {
          gen.var(valid2, true);
        }
      }
      exports.boolOrEmptySchema = boolOrEmptySchema;
      function falseSchemaError(it, overrideAllErrors) {
        const { gen, data } = it;
        const cxt = {
          gen,
          keyword: "false schema",
          data,
          schema: false,
          schemaCode: false,
          schemaValue: false,
          params: {},
          it
        };
        (0, errors_1.reportError)(cxt, boolError, void 0, overrideAllErrors);
      }
    }
  });

  // node_modules/ajv/dist/compile/rules.js
  var require_rules = __commonJS({
    "node_modules/ajv/dist/compile/rules.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getRules = exports.isJSONType = void 0;
      var _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
      var jsonTypes = new Set(_jsonTypes);
      function isJSONType(x) {
        return typeof x == "string" && jsonTypes.has(x);
      }
      exports.isJSONType = isJSONType;
      function getRules() {
        const groups = {
          number: { type: "number", rules: [] },
          string: { type: "string", rules: [] },
          array: { type: "array", rules: [] },
          object: { type: "object", rules: [] }
        };
        return {
          types: { ...groups, integer: true, boolean: true, null: true },
          rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
          post: { rules: [] },
          all: {},
          keywords: {}
        };
      }
      exports.getRules = getRules;
    }
  });

  // node_modules/ajv/dist/compile/validate/applicability.js
  var require_applicability = __commonJS({
    "node_modules/ajv/dist/compile/validate/applicability.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;
      function schemaHasRulesForType({ schema: schema2, self: self2 }, type2) {
        const group = self2.RULES.types[type2];
        return group && group !== true && shouldUseGroup(schema2, group);
      }
      exports.schemaHasRulesForType = schemaHasRulesForType;
      function shouldUseGroup(schema2, group) {
        return group.rules.some((rule) => shouldUseRule(schema2, rule));
      }
      exports.shouldUseGroup = shouldUseGroup;
      function shouldUseRule(schema2, rule) {
        var _a3;
        return schema2[rule.keyword] !== void 0 || ((_a3 = rule.definition.implements) === null || _a3 === void 0 ? void 0 : _a3.some((kwd) => schema2[kwd] !== void 0));
      }
      exports.shouldUseRule = shouldUseRule;
    }
  });

  // node_modules/ajv/dist/compile/validate/dataType.js
  var require_dataType = __commonJS({
    "node_modules/ajv/dist/compile/validate/dataType.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
      var rules_1 = require_rules();
      var applicability_1 = require_applicability();
      var errors_1 = require_errors();
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var DataType;
      (function(DataType2) {
        DataType2[DataType2["Correct"] = 0] = "Correct";
        DataType2[DataType2["Wrong"] = 1] = "Wrong";
      })(DataType = exports.DataType || (exports.DataType = {}));
      function getSchemaTypes(schema2) {
        const types = getJSONTypes(schema2.type);
        const hasNull = types.includes("null");
        if (hasNull) {
          if (schema2.nullable === false)
            throw new Error("type: null contradicts nullable: false");
        } else {
          if (!types.length && schema2.nullable !== void 0) {
            throw new Error('"nullable" cannot be used without "type"');
          }
          if (schema2.nullable === true)
            types.push("null");
        }
        return types;
      }
      exports.getSchemaTypes = getSchemaTypes;
      function getJSONTypes(ts) {
        const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
        if (types.every(rules_1.isJSONType))
          return types;
        throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
      }
      exports.getJSONTypes = getJSONTypes;
      function coerceAndCheckDataType(it, types) {
        const { gen, data, opts } = it;
        const coerceTo = coerceToTypes(types, opts.coerceTypes);
        const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
        if (checkTypes) {
          const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
          gen.if(wrongType, () => {
            if (coerceTo.length)
              coerceData(it, types, coerceTo);
            else
              reportTypeError(it);
          });
        }
        return checkTypes;
      }
      exports.coerceAndCheckDataType = coerceAndCheckDataType;
      var COERCIBLE = /* @__PURE__ */ new Set(["string", "number", "integer", "boolean", "null"]);
      function coerceToTypes(types, coerceTypes) {
        return coerceTypes ? types.filter((t) => COERCIBLE.has(t) || coerceTypes === "array" && t === "array") : [];
      }
      function coerceData(it, types, coerceTo) {
        const { gen, data, opts } = it;
        const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
        const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);
        if (opts.coerceTypes === "array") {
          gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
        }
        gen.if((0, codegen_1._)`${coerced} !== undefined`);
        for (const t of coerceTo) {
          if (COERCIBLE.has(t) || t === "array" && opts.coerceTypes === "array") {
            coerceSpecificType(t);
          }
        }
        gen.else();
        reportTypeError(it);
        gen.endIf();
        gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {
          gen.assign(data, coerced);
          assignParentData(it, coerced);
        });
        function coerceSpecificType(t) {
          switch (t) {
            case "string":
              gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
              return;
            case "number":
              gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
              return;
            case "integer":
              gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
              return;
            case "boolean":
              gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
              return;
            case "null":
              gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
              gen.assign(coerced, null);
              return;
            case "array":
              gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
          }
        }
      }
      function assignParentData({ gen, parentData, parentDataProperty }, expr) {
        gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
      }
      function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
        const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
        let cond;
        switch (dataType) {
          case "null":
            return (0, codegen_1._)`${data} ${EQ} null`;
          case "array":
            cond = (0, codegen_1._)`Array.isArray(${data})`;
            break;
          case "object":
            cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
            break;
          case "integer":
            cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
            break;
          case "number":
            cond = numCond();
            break;
          default:
            return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
        }
        return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
        function numCond(_cond = codegen_1.nil) {
          return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
        }
      }
      exports.checkDataType = checkDataType;
      function checkDataTypes(dataTypes, data, strictNums, correct) {
        if (dataTypes.length === 1) {
          return checkDataType(dataTypes[0], data, strictNums, correct);
        }
        let cond;
        const types = (0, util_1.toHash)(dataTypes);
        if (types.array && types.object) {
          const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
          cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
          delete types.null;
          delete types.array;
          delete types.object;
        } else {
          cond = codegen_1.nil;
        }
        if (types.number)
          delete types.integer;
        for (const t in types)
          cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
        return cond;
      }
      exports.checkDataTypes = checkDataTypes;
      var typeError = {
        message: ({ schema: schema2 }) => `must be ${schema2}`,
        params: ({ schema: schema2, schemaValue }) => typeof schema2 == "string" ? (0, codegen_1._)`{type: ${schema2}}` : (0, codegen_1._)`{type: ${schemaValue}}`
      };
      function reportTypeError(it) {
        const cxt = getTypeErrorContext(it);
        (0, errors_1.reportError)(cxt, typeError);
      }
      exports.reportTypeError = reportTypeError;
      function getTypeErrorContext(it) {
        const { gen, data, schema: schema2 } = it;
        const schemaCode = (0, util_1.schemaRefOrVal)(it, schema2, "type");
        return {
          gen,
          keyword: "type",
          data,
          schema: schema2.type,
          schemaCode,
          schemaValue: schemaCode,
          parentSchema: schema2,
          params: {},
          it
        };
      }
    }
  });

  // node_modules/ajv/dist/compile/validate/defaults.js
  var require_defaults = __commonJS({
    "node_modules/ajv/dist/compile/validate/defaults.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.assignDefaults = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      function assignDefaults(it, ty) {
        const { properties, items } = it.schema;
        if (ty === "object" && properties) {
          for (const key in properties) {
            assignDefault(it, key, properties[key].default);
          }
        } else if (ty === "array" && Array.isArray(items)) {
          items.forEach((sch, i) => assignDefault(it, i, sch.default));
        }
      }
      exports.assignDefaults = assignDefaults;
      function assignDefault(it, prop, defaultValue) {
        const { gen, compositeRule, data, opts } = it;
        if (defaultValue === void 0)
          return;
        const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;
        if (compositeRule) {
          (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
          return;
        }
        let condition = (0, codegen_1._)`${childData} === undefined`;
        if (opts.useDefaults === "empty") {
          condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
        }
        gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
      }
    }
  });

  // node_modules/ajv/dist/vocabularies/code.js
  var require_code2 = __commonJS({
    "node_modules/ajv/dist/vocabularies/code.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var names_1 = require_names();
      var util_2 = require_util3();
      function checkReportMissingProp(cxt, prop) {
        const { gen, data, it } = cxt;
        gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
          cxt.setParams({ missingProperty: (0, codegen_1._)`${prop}` }, true);
          cxt.error();
        });
      }
      exports.checkReportMissingProp = checkReportMissingProp;
      function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
        return (0, codegen_1.or)(...properties.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
      }
      exports.checkMissingProp = checkMissingProp;
      function reportMissingProp(cxt, missing) {
        cxt.setParams({ missingProperty: missing }, true);
        cxt.error();
      }
      exports.reportMissingProp = reportMissingProp;
      function hasPropFunc(gen) {
        return gen.scopeValue("func", {
          ref: Object.prototype.hasOwnProperty,
          code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
        });
      }
      exports.hasPropFunc = hasPropFunc;
      function isOwnProperty(gen, data, property) {
        return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;
      }
      exports.isOwnProperty = isOwnProperty;
      function propertyInData(gen, data, property, ownProperties) {
        const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
        return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}` : cond;
      }
      exports.propertyInData = propertyInData;
      function noPropertyInData(gen, data, property, ownProperties) {
        const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} === undefined`;
        return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
      }
      exports.noPropertyInData = noPropertyInData;
      function allSchemaProperties(schemaMap) {
        return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
      }
      exports.allSchemaProperties = allSchemaProperties;
      function schemaProperties(it, schemaMap) {
        return allSchemaProperties(schemaMap).filter((p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
      }
      exports.schemaProperties = schemaProperties;
      function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
        const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
        const valCxt = [
          [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
          [names_1.default.parentData, it.parentData],
          [names_1.default.parentDataProperty, it.parentDataProperty],
          [names_1.default.rootData, names_1.default.rootData]
        ];
        if (it.opts.dynamicRef)
          valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
        const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
        return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
      }
      exports.callValidateCode = callValidateCode;
      var newRegExp = (0, codegen_1._)`new RegExp`;
      function usePattern({ gen, it: { opts } }, pattern) {
        const u = opts.unicodeRegExp ? "u" : "";
        const { regExp } = opts.code;
        const rx = regExp(pattern, u);
        return gen.scopeValue("pattern", {
          key: rx.toString(),
          ref: rx,
          code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`
        });
      }
      exports.usePattern = usePattern;
      function validateArray(cxt) {
        const { gen, data, keyword, it } = cxt;
        const valid2 = gen.name("valid");
        if (it.allErrors) {
          const validArr = gen.let("valid", true);
          validateItems(() => gen.assign(validArr, false));
          return validArr;
        }
        gen.var(valid2, true);
        validateItems(() => gen.break());
        return valid2;
        function validateItems(notValid) {
          const len = gen.const("len", (0, codegen_1._)`${data}.length`);
          gen.forRange("i", 0, len, (i) => {
            cxt.subschema({
              keyword,
              dataProp: i,
              dataPropType: util_1.Type.Num
            }, valid2);
            gen.if((0, codegen_1.not)(valid2), notValid);
          });
        }
      }
      exports.validateArray = validateArray;
      function validateUnion(cxt) {
        const { gen, schema: schema2, keyword, it } = cxt;
        if (!Array.isArray(schema2))
          throw new Error("ajv implementation error");
        const alwaysValid = schema2.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
        if (alwaysValid && !it.opts.unevaluated)
          return;
        const valid2 = gen.let("valid", false);
        const schValid = gen.name("_valid");
        gen.block(() => schema2.forEach((_sch, i) => {
          const schCxt = cxt.subschema({
            keyword,
            schemaProp: i,
            compositeRule: true
          }, schValid);
          gen.assign(valid2, (0, codegen_1._)`${valid2} || ${schValid}`);
          const merged = cxt.mergeValidEvaluated(schCxt, schValid);
          if (!merged)
            gen.if((0, codegen_1.not)(valid2));
        }));
        cxt.result(valid2, () => cxt.reset(), () => cxt.error(true));
      }
      exports.validateUnion = validateUnion;
    }
  });

  // node_modules/ajv/dist/compile/validate/keyword.js
  var require_keyword = __commonJS({
    "node_modules/ajv/dist/compile/validate/keyword.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var code_1 = require_code2();
      var errors_1 = require_errors();
      function macroKeywordCode(cxt, def) {
        const { gen, keyword, schema: schema2, parentSchema, it } = cxt;
        const macroSchema = def.macro.call(it.self, schema2, parentSchema, it);
        const schemaRef = useKeyword(gen, keyword, macroSchema);
        if (it.opts.validateSchema !== false)
          it.self.validateSchema(macroSchema, true);
        const valid2 = gen.name("valid");
        cxt.subschema({
          schema: macroSchema,
          schemaPath: codegen_1.nil,
          errSchemaPath: `${it.errSchemaPath}/${keyword}`,
          topSchemaRef: schemaRef,
          compositeRule: true
        }, valid2);
        cxt.pass(valid2, () => cxt.error(true));
      }
      exports.macroKeywordCode = macroKeywordCode;
      function funcKeywordCode(cxt, def) {
        var _a3;
        const { gen, keyword, schema: schema2, parentSchema, $data, it } = cxt;
        checkAsyncKeyword(it, def);
        const validate = !$data && def.compile ? def.compile.call(it.self, schema2, parentSchema, it) : def.validate;
        const validateRef = useKeyword(gen, keyword, validate);
        const valid2 = gen.let("valid");
        cxt.block$data(valid2, validateKeyword);
        cxt.ok((_a3 = def.valid) !== null && _a3 !== void 0 ? _a3 : valid2);
        function validateKeyword() {
          if (def.errors === false) {
            assignValid();
            if (def.modifying)
              modifyData(cxt);
            reportErrs(() => cxt.error());
          } else {
            const ruleErrs = def.async ? validateAsync() : validateSync();
            if (def.modifying)
              modifyData(cxt);
            reportErrs(() => addErrs(cxt, ruleErrs));
          }
        }
        function validateAsync() {
          const ruleErrs = gen.let("ruleErrs", null);
          gen.try(() => assignValid((0, codegen_1._)`await `), (e) => gen.assign(valid2, false).if((0, codegen_1._)`${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`), () => gen.throw(e)));
          return ruleErrs;
        }
        function validateSync() {
          const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
          gen.assign(validateErrs, null);
          assignValid(codegen_1.nil);
          return validateErrs;
        }
        function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
          const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
          const passSchema = !("compile" in def && !$data || def.schema === false);
          gen.assign(valid2, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
        }
        function reportErrs(errors) {
          var _a4;
          gen.if((0, codegen_1.not)((_a4 = def.valid) !== null && _a4 !== void 0 ? _a4 : valid2), errors);
        }
      }
      exports.funcKeywordCode = funcKeywordCode;
      function modifyData(cxt) {
        const { gen, data, it } = cxt;
        gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
      }
      function addErrs(cxt, errs) {
        const { gen } = cxt;
        gen.if((0, codegen_1._)`Array.isArray(${errs})`, () => {
          gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
          (0, errors_1.extendErrors)(cxt);
        }, () => cxt.error());
      }
      function checkAsyncKeyword({ schemaEnv }, def) {
        if (def.async && !schemaEnv.$async)
          throw new Error("async keyword in sync schema");
      }
      function useKeyword(gen, keyword, result) {
        if (result === void 0)
          throw new Error(`keyword "${keyword}" failed to compile`);
        return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
      }
      function validSchemaType(schema2, schemaType, allowUndefined = false) {
        return !schemaType.length || schemaType.some((st) => st === "array" ? Array.isArray(schema2) : st === "object" ? schema2 && typeof schema2 == "object" && !Array.isArray(schema2) : typeof schema2 == st || allowUndefined && typeof schema2 == "undefined");
      }
      exports.validSchemaType = validSchemaType;
      function validateKeywordUsage({ schema: schema2, opts, self: self2, errSchemaPath }, def, keyword) {
        if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
          throw new Error("ajv implementation error");
        }
        const deps = def.dependencies;
        if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema2, kwd))) {
          throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
        }
        if (def.validateSchema) {
          const valid2 = def.validateSchema(schema2[keyword]);
          if (!valid2) {
            const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self2.errorsText(def.validateSchema.errors);
            if (opts.validateSchema === "log")
              self2.logger.error(msg);
            else
              throw new Error(msg);
          }
        }
      }
      exports.validateKeywordUsage = validateKeywordUsage;
    }
  });

  // node_modules/ajv/dist/compile/validate/subschema.js
  var require_subschema = __commonJS({
    "node_modules/ajv/dist/compile/validate/subschema.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      function getSubschema(it, { keyword, schemaProp, schema: schema2, schemaPath, errSchemaPath, topSchemaRef }) {
        if (keyword !== void 0 && schema2 !== void 0) {
          throw new Error('both "keyword" and "schema" passed, only one allowed');
        }
        if (keyword !== void 0) {
          const sch = it.schema[keyword];
          return schemaProp === void 0 ? {
            schema: sch,
            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
            errSchemaPath: `${it.errSchemaPath}/${keyword}`
          } : {
            schema: sch[schemaProp],
            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
            errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
          };
        }
        if (schema2 !== void 0) {
          if (schemaPath === void 0 || errSchemaPath === void 0 || topSchemaRef === void 0) {
            throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
          }
          return {
            schema: schema2,
            schemaPath,
            topSchemaRef,
            errSchemaPath
          };
        }
        throw new Error('either "keyword" or "schema" must be passed');
      }
      exports.getSubschema = getSubschema;
      function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
        if (data !== void 0 && dataProp !== void 0) {
          throw new Error('both "data" and "dataProp" passed, only one allowed');
        }
        const { gen } = it;
        if (dataProp !== void 0) {
          const { errorPath, dataPathArr, opts } = it;
          const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
          dataContextProps(nextData);
          subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
          subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
          subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
        }
        if (data !== void 0) {
          const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true);
          dataContextProps(nextData);
          if (propertyName !== void 0)
            subschema.propertyName = propertyName;
        }
        if (dataTypes)
          subschema.dataTypes = dataTypes;
        function dataContextProps(_nextData) {
          subschema.data = _nextData;
          subschema.dataLevel = it.dataLevel + 1;
          subschema.dataTypes = [];
          it.definedProperties = /* @__PURE__ */ new Set();
          subschema.parentData = it.data;
          subschema.dataNames = [...it.dataNames, _nextData];
        }
      }
      exports.extendSubschemaData = extendSubschemaData;
      function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
        if (compositeRule !== void 0)
          subschema.compositeRule = compositeRule;
        if (createErrors !== void 0)
          subschema.createErrors = createErrors;
        if (allErrors !== void 0)
          subschema.allErrors = allErrors;
        subschema.jtdDiscriminator = jtdDiscriminator;
        subschema.jtdMetadata = jtdMetadata;
      }
      exports.extendSubschemaMode = extendSubschemaMode;
    }
  });

  // node_modules/fast-deep-equal/index.js
  var require_fast_deep_equal = __commonJS({
    "node_modules/fast-deep-equal/index.js"(exports, module) {
      init_globals();
      module.exports = function equal(a, b) {
        if (a === b)
          return true;
        if (a && b && typeof a == "object" && typeof b == "object") {
          if (a.constructor !== b.constructor)
            return false;
          var length, i, keys;
          if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length)
              return false;
            for (i = length; i-- !== 0; )
              if (!equal(a[i], b[i]))
                return false;
            return true;
          }
          if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
          if (a.valueOf !== Object.prototype.valueOf)
            return a.valueOf() === b.valueOf();
          if (a.toString !== Object.prototype.toString)
            return a.toString() === b.toString();
          keys = Object.keys(a);
          length = keys.length;
          if (length !== Object.keys(b).length)
            return false;
          for (i = length; i-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
              return false;
          for (i = length; i-- !== 0; ) {
            var key = keys[i];
            if (!equal(a[key], b[key]))
              return false;
          }
          return true;
        }
        return a !== a && b !== b;
      };
    }
  });

  // node_modules/json-schema-traverse/index.js
  var require_json_schema_traverse = __commonJS({
    "node_modules/json-schema-traverse/index.js"(exports, module) {
      init_globals();
      var traverse = module.exports = function(schema2, opts, cb) {
        if (typeof opts == "function") {
          cb = opts;
          opts = {};
        }
        cb = opts.cb || cb;
        var pre = typeof cb == "function" ? cb : cb.pre || function() {
        };
        var post = cb.post || function() {
        };
        _traverse(opts, pre, post, schema2, "", schema2);
      };
      traverse.keywords = {
        additionalItems: true,
        items: true,
        contains: true,
        additionalProperties: true,
        propertyNames: true,
        not: true,
        if: true,
        then: true,
        else: true
      };
      traverse.arrayKeywords = {
        items: true,
        allOf: true,
        anyOf: true,
        oneOf: true
      };
      traverse.propsKeywords = {
        $defs: true,
        definitions: true,
        properties: true,
        patternProperties: true,
        dependencies: true
      };
      traverse.skipKeywords = {
        default: true,
        enum: true,
        const: true,
        required: true,
        maximum: true,
        minimum: true,
        exclusiveMaximum: true,
        exclusiveMinimum: true,
        multipleOf: true,
        maxLength: true,
        minLength: true,
        pattern: true,
        format: true,
        maxItems: true,
        minItems: true,
        uniqueItems: true,
        maxProperties: true,
        minProperties: true
      };
      function _traverse(opts, pre, post, schema2, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
        if (schema2 && typeof schema2 == "object" && !Array.isArray(schema2)) {
          pre(schema2, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
          for (var key in schema2) {
            var sch = schema2[key];
            if (Array.isArray(sch)) {
              if (key in traverse.arrayKeywords) {
                for (var i = 0; i < sch.length; i++)
                  _traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema2, i);
              }
            } else if (key in traverse.propsKeywords) {
              if (sch && typeof sch == "object") {
                for (var prop in sch)
                  _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema2, prop);
              }
            } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
              _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema2);
            }
          }
          post(schema2, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        }
      }
      function escapeJsonPtr(str) {
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
    }
  });

  // node_modules/ajv/dist/compile/resolve.js
  var require_resolve = __commonJS({
    "node_modules/ajv/dist/compile/resolve.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;
      var util_1 = require_util3();
      var equal = require_fast_deep_equal();
      var traverse = require_json_schema_traverse();
      var SIMPLE_INLINED = /* @__PURE__ */ new Set([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum",
        "const"
      ]);
      function inlineRef(schema2, limit = true) {
        if (typeof schema2 == "boolean")
          return true;
        if (limit === true)
          return !hasRef(schema2);
        if (!limit)
          return false;
        return countKeys(schema2) <= limit;
      }
      exports.inlineRef = inlineRef;
      var REF_KEYWORDS = /* @__PURE__ */ new Set([
        "$ref",
        "$recursiveRef",
        "$recursiveAnchor",
        "$dynamicRef",
        "$dynamicAnchor"
      ]);
      function hasRef(schema2) {
        for (const key in schema2) {
          if (REF_KEYWORDS.has(key))
            return true;
          const sch = schema2[key];
          if (Array.isArray(sch) && sch.some(hasRef))
            return true;
          if (typeof sch == "object" && hasRef(sch))
            return true;
        }
        return false;
      }
      function countKeys(schema2) {
        let count = 0;
        for (const key in schema2) {
          if (key === "$ref")
            return Infinity;
          count++;
          if (SIMPLE_INLINED.has(key))
            continue;
          if (typeof schema2[key] == "object") {
            (0, util_1.eachItem)(schema2[key], (sch) => count += countKeys(sch));
          }
          if (count === Infinity)
            return Infinity;
        }
        return count;
      }
      function getFullPath(resolver, id = "", normalize) {
        if (normalize !== false)
          id = normalizeId(id);
        const p = resolver.parse(id);
        return _getFullPath(resolver, p);
      }
      exports.getFullPath = getFullPath;
      function _getFullPath(resolver, p) {
        const serialized = resolver.serialize(p);
        return serialized.split("#")[0] + "#";
      }
      exports._getFullPath = _getFullPath;
      var TRAILING_SLASH_HASH = /#\/?$/;
      function normalizeId(id) {
        return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
      }
      exports.normalizeId = normalizeId;
      function resolveUrl(resolver, baseId, id) {
        id = normalizeId(id);
        return resolver.resolve(baseId, id);
      }
      exports.resolveUrl = resolveUrl;
      var ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
      function getSchemaRefs(schema2, baseId) {
        if (typeof schema2 == "boolean")
          return {};
        const { schemaId, uriResolver } = this.opts;
        const schId = normalizeId(schema2[schemaId] || baseId);
        const baseIds = { "": schId };
        const pathPrefix = getFullPath(uriResolver, schId, false);
        const localRefs = {};
        const schemaRefs = /* @__PURE__ */ new Set();
        traverse(schema2, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
          if (parentJsonPtr === void 0)
            return;
          const fullPath = pathPrefix + jsonPtr;
          let baseId2 = baseIds[parentJsonPtr];
          if (typeof sch[schemaId] == "string")
            baseId2 = addRef.call(this, sch[schemaId]);
          addAnchor.call(this, sch.$anchor);
          addAnchor.call(this, sch.$dynamicAnchor);
          baseIds[jsonPtr] = baseId2;
          function addRef(ref) {
            const _resolve = this.opts.uriResolver.resolve;
            ref = normalizeId(baseId2 ? _resolve(baseId2, ref) : ref);
            if (schemaRefs.has(ref))
              throw ambiguos(ref);
            schemaRefs.add(ref);
            let schOrRef = this.refs[ref];
            if (typeof schOrRef == "string")
              schOrRef = this.refs[schOrRef];
            if (typeof schOrRef == "object") {
              checkAmbiguosRef(sch, schOrRef.schema, ref);
            } else if (ref !== normalizeId(fullPath)) {
              if (ref[0] === "#") {
                checkAmbiguosRef(sch, localRefs[ref], ref);
                localRefs[ref] = sch;
              } else {
                this.refs[ref] = fullPath;
              }
            }
            return ref;
          }
          function addAnchor(anchor) {
            if (typeof anchor == "string") {
              if (!ANCHOR.test(anchor))
                throw new Error(`invalid anchor "${anchor}"`);
              addRef.call(this, `#${anchor}`);
            }
          }
        });
        return localRefs;
        function checkAmbiguosRef(sch1, sch2, ref) {
          if (sch2 !== void 0 && !equal(sch1, sch2))
            throw ambiguos(ref);
        }
        function ambiguos(ref) {
          return new Error(`reference "${ref}" resolves to more than one schema`);
        }
      }
      exports.getSchemaRefs = getSchemaRefs;
    }
  });

  // node_modules/ajv/dist/compile/validate/index.js
  var require_validate = __commonJS({
    "node_modules/ajv/dist/compile/validate/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;
      var boolSchema_1 = require_boolSchema();
      var dataType_1 = require_dataType();
      var applicability_1 = require_applicability();
      var dataType_2 = require_dataType();
      var defaults_1 = require_defaults();
      var keyword_1 = require_keyword();
      var subschema_1 = require_subschema();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var resolve_1 = require_resolve();
      var util_1 = require_util3();
      var errors_1 = require_errors();
      function validateFunctionCode(it) {
        if (isSchemaObj(it)) {
          checkKeywords(it);
          if (schemaCxtHasRules(it)) {
            topSchemaObjCode(it);
            return;
          }
        }
        validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
      }
      exports.validateFunctionCode = validateFunctionCode;
      function validateFunction({ gen, validateName, schema: schema2, schemaEnv, opts }, body) {
        if (opts.code.es5) {
          gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
            gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema2, opts)}`);
            destructureValCxtES5(gen, opts);
            gen.code(body);
          });
        } else {
          gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema2, opts)).code(body));
        }
      }
      function destructureValCxt(opts) {
        return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
      }
      function destructureValCxtES5(gen, opts) {
        gen.if(names_1.default.valCxt, () => {
          gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
          gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
          gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
          gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
          if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
        }, () => {
          gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
          gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
          gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
          gen.var(names_1.default.rootData, names_1.default.data);
          if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
        });
      }
      function topSchemaObjCode(it) {
        const { schema: schema2, opts, gen } = it;
        validateFunction(it, () => {
          if (opts.$comment && schema2.$comment)
            commentKeyword(it);
          checkNoDefault(it);
          gen.let(names_1.default.vErrors, null);
          gen.let(names_1.default.errors, 0);
          if (opts.unevaluated)
            resetEvaluated(it);
          typeAndKeywords(it);
          returnResults(it);
        });
        return;
      }
      function resetEvaluated(it) {
        const { gen, validateName } = it;
        it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
        gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
        gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
      }
      function funcSourceUrl(schema2, opts) {
        const schId = typeof schema2 == "object" && schema2[opts.schemaId];
        return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
      }
      function subschemaCode(it, valid2) {
        if (isSchemaObj(it)) {
          checkKeywords(it);
          if (schemaCxtHasRules(it)) {
            subSchemaObjCode(it, valid2);
            return;
          }
        }
        (0, boolSchema_1.boolOrEmptySchema)(it, valid2);
      }
      function schemaCxtHasRules({ schema: schema2, self: self2 }) {
        if (typeof schema2 == "boolean")
          return !schema2;
        for (const key in schema2)
          if (self2.RULES.all[key])
            return true;
        return false;
      }
      function isSchemaObj(it) {
        return typeof it.schema != "boolean";
      }
      function subSchemaObjCode(it, valid2) {
        const { schema: schema2, gen, opts } = it;
        if (opts.$comment && schema2.$comment)
          commentKeyword(it);
        updateContext(it);
        checkAsyncSchema(it);
        const errsCount = gen.const("_errs", names_1.default.errors);
        typeAndKeywords(it, errsCount);
        gen.var(valid2, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
      }
      function checkKeywords(it) {
        (0, util_1.checkUnknownRules)(it);
        checkRefsAndKeywords(it);
      }
      function typeAndKeywords(it, errsCount) {
        if (it.opts.jtd)
          return schemaKeywords(it, [], false, errsCount);
        const types = (0, dataType_1.getSchemaTypes)(it.schema);
        const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
        schemaKeywords(it, types, !checkedTypes, errsCount);
      }
      function checkRefsAndKeywords(it) {
        const { schema: schema2, errSchemaPath, opts, self: self2 } = it;
        if (schema2.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema2, self2.RULES)) {
          self2.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
        }
      }
      function checkNoDefault(it) {
        const { schema: schema2, opts } = it;
        if (schema2.default !== void 0 && opts.useDefaults && opts.strictSchema) {
          (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
        }
      }
      function updateContext(it) {
        const schId = it.schema[it.opts.schemaId];
        if (schId)
          it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
      }
      function checkAsyncSchema(it) {
        if (it.schema.$async && !it.schemaEnv.$async)
          throw new Error("async schema in sync schema");
      }
      function commentKeyword({ gen, schemaEnv, schema: schema2, errSchemaPath, opts }) {
        const msg = schema2.$comment;
        if (opts.$comment === true) {
          gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
        } else if (typeof opts.$comment == "function") {
          const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
          const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
          gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
        }
      }
      function returnResults(it) {
        const { gen, schemaEnv, validateName, ValidationError, opts } = it;
        if (schemaEnv.$async) {
          gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
          if (opts.unevaluated)
            assignEvaluated(it);
          gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
        }
      }
      function assignEvaluated({ gen, evaluated, props, items }) {
        if (props instanceof codegen_1.Name)
          gen.assign((0, codegen_1._)`${evaluated}.props`, props);
        if (items instanceof codegen_1.Name)
          gen.assign((0, codegen_1._)`${evaluated}.items`, items);
      }
      function schemaKeywords(it, types, typeErrors, errsCount) {
        const { gen, schema: schema2, data, allErrors, opts, self: self2 } = it;
        const { RULES } = self2;
        if (schema2.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema2, RULES))) {
          gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition));
          return;
        }
        if (!opts.jtd)
          checkStrictTypes(it, types);
        gen.block(() => {
          for (const group of RULES.rules)
            groupKeywords(group);
          groupKeywords(RULES.post);
        });
        function groupKeywords(group) {
          if (!(0, applicability_1.shouldUseGroup)(schema2, group))
            return;
          if (group.type) {
            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
            iterateKeywords(it, group);
            if (types.length === 1 && types[0] === group.type && typeErrors) {
              gen.else();
              (0, dataType_2.reportTypeError)(it);
            }
            gen.endIf();
          } else {
            iterateKeywords(it, group);
          }
          if (!allErrors)
            gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
        }
      }
      function iterateKeywords(it, group) {
        const { gen, schema: schema2, opts: { useDefaults } } = it;
        if (useDefaults)
          (0, defaults_1.assignDefaults)(it, group.type);
        gen.block(() => {
          for (const rule of group.rules) {
            if ((0, applicability_1.shouldUseRule)(schema2, rule)) {
              keywordCode(it, rule.keyword, rule.definition, group.type);
            }
          }
        });
      }
      function checkStrictTypes(it, types) {
        if (it.schemaEnv.meta || !it.opts.strictTypes)
          return;
        checkContextTypes(it, types);
        if (!it.opts.allowUnionTypes)
          checkMultipleTypes(it, types);
        checkKeywordTypes(it, it.dataTypes);
      }
      function checkContextTypes(it, types) {
        if (!types.length)
          return;
        if (!it.dataTypes.length) {
          it.dataTypes = types;
          return;
        }
        types.forEach((t) => {
          if (!includesType(it.dataTypes, t)) {
            strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
          }
        });
        it.dataTypes = it.dataTypes.filter((t) => includesType(types, t));
      }
      function checkMultipleTypes(it, ts) {
        if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
          strictTypesError(it, "use allowUnionTypes to allow union type keyword");
        }
      }
      function checkKeywordTypes(it, ts) {
        const rules = it.self.RULES.all;
        for (const keyword in rules) {
          const rule = rules[keyword];
          if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
            const { type: type2 } = rule.definition;
            if (type2.length && !type2.some((t) => hasApplicableType(ts, t))) {
              strictTypesError(it, `missing type "${type2.join(",")}" for keyword "${keyword}"`);
            }
          }
        }
      }
      function hasApplicableType(schTs, kwdT) {
        return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
      }
      function includesType(ts, t) {
        return ts.includes(t) || t === "integer" && ts.includes("number");
      }
      function strictTypesError(it, msg) {
        const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
        msg += ` at "${schemaPath}" (strictTypes)`;
        (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
      }
      var KeywordCxt = class {
        constructor(it, def, keyword) {
          (0, keyword_1.validateKeywordUsage)(it, def, keyword);
          this.gen = it.gen;
          this.allErrors = it.allErrors;
          this.keyword = keyword;
          this.data = it.data;
          this.schema = it.schema[keyword];
          this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
          this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
          this.schemaType = def.schemaType;
          this.parentSchema = it.schema;
          this.params = {};
          this.it = it;
          this.def = def;
          if (this.$data) {
            this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
          } else {
            this.schemaCode = this.schemaValue;
            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
              throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
            }
          }
          if ("code" in def ? def.trackErrors : def.errors !== false) {
            this.errsCount = it.gen.const("_errs", names_1.default.errors);
          }
        }
        result(condition, successAction, failAction) {
          this.failResult((0, codegen_1.not)(condition), successAction, failAction);
        }
        failResult(condition, successAction, failAction) {
          this.gen.if(condition);
          if (failAction)
            failAction();
          else
            this.error();
          if (successAction) {
            this.gen.else();
            successAction();
            if (this.allErrors)
              this.gen.endIf();
          } else {
            if (this.allErrors)
              this.gen.endIf();
            else
              this.gen.else();
          }
        }
        pass(condition, failAction) {
          this.failResult((0, codegen_1.not)(condition), void 0, failAction);
        }
        fail(condition) {
          if (condition === void 0) {
            this.error();
            if (!this.allErrors)
              this.gen.if(false);
            return;
          }
          this.gen.if(condition);
          this.error();
          if (this.allErrors)
            this.gen.endIf();
          else
            this.gen.else();
        }
        fail$data(condition) {
          if (!this.$data)
            return this.fail(condition);
          const { schemaCode } = this;
          this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
        }
        error(append, errorParams, errorPaths) {
          if (errorParams) {
            this.setParams(errorParams);
            this._error(append, errorPaths);
            this.setParams({});
            return;
          }
          this._error(append, errorPaths);
        }
        _error(append, errorPaths) {
          ;
          (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
        }
        $dataError() {
          (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
        }
        reset() {
          if (this.errsCount === void 0)
            throw new Error('add "trackErrors" to keyword definition');
          (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
        }
        ok(cond) {
          if (!this.allErrors)
            this.gen.if(cond);
        }
        setParams(obj, assign) {
          if (assign)
            Object.assign(this.params, obj);
          else
            this.params = obj;
        }
        block$data(valid2, codeBlock, $dataValid = codegen_1.nil) {
          this.gen.block(() => {
            this.check$data(valid2, $dataValid);
            codeBlock();
          });
        }
        check$data(valid2 = codegen_1.nil, $dataValid = codegen_1.nil) {
          if (!this.$data)
            return;
          const { gen, schemaCode, schemaType, def } = this;
          gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
          if (valid2 !== codegen_1.nil)
            gen.assign(valid2, true);
          if (schemaType.length || def.validateSchema) {
            gen.elseIf(this.invalid$data());
            this.$dataError();
            if (valid2 !== codegen_1.nil)
              gen.assign(valid2, false);
          }
          gen.else();
        }
        invalid$data() {
          const { gen, schemaCode, schemaType, def, it } = this;
          return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
          function wrong$DataType() {
            if (schemaType.length) {
              if (!(schemaCode instanceof codegen_1.Name))
                throw new Error("ajv implementation error");
              const st = Array.isArray(schemaType) ? schemaType : [schemaType];
              return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
            }
            return codegen_1.nil;
          }
          function invalid$DataSchema() {
            if (def.validateSchema) {
              const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema });
              return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
            }
            return codegen_1.nil;
          }
        }
        subschema(appl, valid2) {
          const subschema = (0, subschema_1.getSubschema)(this.it, appl);
          (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
          (0, subschema_1.extendSubschemaMode)(subschema, appl);
          const nextContext = { ...this.it, ...subschema, items: void 0, props: void 0 };
          subschemaCode(nextContext, valid2);
          return nextContext;
        }
        mergeEvaluated(schemaCxt, toName) {
          const { it, gen } = this;
          if (!it.opts.unevaluated)
            return;
          if (it.props !== true && schemaCxt.props !== void 0) {
            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
          }
          if (it.items !== true && schemaCxt.items !== void 0) {
            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
          }
        }
        mergeValidEvaluated(schemaCxt, valid2) {
          const { it, gen } = this;
          if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
            gen.if(valid2, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
            return true;
          }
        }
      };
      exports.KeywordCxt = KeywordCxt;
      function keywordCode(it, keyword, def, ruleType) {
        const cxt = new KeywordCxt(it, def, keyword);
        if ("code" in def) {
          def.code(cxt, ruleType);
        } else if (cxt.$data && def.validate) {
          (0, keyword_1.funcKeywordCode)(cxt, def);
        } else if ("macro" in def) {
          (0, keyword_1.macroKeywordCode)(cxt, def);
        } else if (def.compile || def.validate) {
          (0, keyword_1.funcKeywordCode)(cxt, def);
        }
      }
      var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
      var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
      function getData($data, { dataLevel, dataNames, dataPathArr }) {
        let jsonPointer;
        let data;
        if ($data === "")
          return names_1.default.rootData;
        if ($data[0] === "/") {
          if (!JSON_POINTER.test($data))
            throw new Error(`Invalid JSON-pointer: ${$data}`);
          jsonPointer = $data;
          data = names_1.default.rootData;
        } else {
          const matches = RELATIVE_JSON_POINTER.exec($data);
          if (!matches)
            throw new Error(`Invalid JSON-pointer: ${$data}`);
          const up = +matches[1];
          jsonPointer = matches[2];
          if (jsonPointer === "#") {
            if (up >= dataLevel)
              throw new Error(errorMsg("property/index", up));
            return dataPathArr[dataLevel - up];
          }
          if (up > dataLevel)
            throw new Error(errorMsg("data", up));
          data = dataNames[dataLevel - up];
          if (!jsonPointer)
            return data;
        }
        let expr = data;
        const segments = jsonPointer.split("/");
        for (const segment of segments) {
          if (segment) {
            data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
            expr = (0, codegen_1._)`${expr} && ${data}`;
          }
        }
        return expr;
        function errorMsg(pointerType, up) {
          return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
        }
      }
      exports.getData = getData;
    }
  });

  // node_modules/ajv/dist/runtime/validation_error.js
  var require_validation_error = __commonJS({
    "node_modules/ajv/dist/runtime/validation_error.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var ValidationError = class extends Error {
        constructor(errors) {
          super("validation failed");
          this.errors = errors;
          this.ajv = this.validation = true;
        }
      };
      exports.default = ValidationError;
    }
  });

  // node_modules/ajv/dist/compile/ref_error.js
  var require_ref_error = __commonJS({
    "node_modules/ajv/dist/compile/ref_error.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var resolve_1 = require_resolve();
      var MissingRefError = class extends Error {
        constructor(resolver, baseId, ref, msg) {
          super(msg || `can't resolve reference ${ref} from id ${baseId}`);
          this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
          this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
        }
      };
      exports.default = MissingRefError;
    }
  });

  // node_modules/ajv/dist/compile/index.js
  var require_compile = __commonJS({
    "node_modules/ajv/dist/compile/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;
      var codegen_1 = require_codegen();
      var validation_error_1 = require_validation_error();
      var names_1 = require_names();
      var resolve_1 = require_resolve();
      var util_1 = require_util3();
      var validate_1 = require_validate();
      var SchemaEnv = class {
        constructor(env) {
          var _a3;
          this.refs = {};
          this.dynamicAnchors = {};
          let schema2;
          if (typeof env.schema == "object")
            schema2 = env.schema;
          this.schema = env.schema;
          this.schemaId = env.schemaId;
          this.root = env.root || this;
          this.baseId = (_a3 = env.baseId) !== null && _a3 !== void 0 ? _a3 : (0, resolve_1.normalizeId)(schema2 === null || schema2 === void 0 ? void 0 : schema2[env.schemaId || "$id"]);
          this.schemaPath = env.schemaPath;
          this.localRefs = env.localRefs;
          this.meta = env.meta;
          this.$async = schema2 === null || schema2 === void 0 ? void 0 : schema2.$async;
          this.refs = {};
        }
      };
      exports.SchemaEnv = SchemaEnv;
      function compileSchema(sch) {
        const _sch = getCompilingSchema.call(this, sch);
        if (_sch)
          return _sch;
        const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId);
        const { es5, lines } = this.opts.code;
        const { ownProperties } = this.opts;
        const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
        let _ValidationError;
        if (sch.$async) {
          _ValidationError = gen.scopeValue("Error", {
            ref: validation_error_1.default,
            code: (0, codegen_1._)`require("ajv/dist/runtime/validation_error").default`
          });
        }
        const validateName = gen.scopeName("validate");
        sch.validateName = validateName;
        const schemaCxt = {
          gen,
          allErrors: this.opts.allErrors,
          data: names_1.default.data,
          parentData: names_1.default.parentData,
          parentDataProperty: names_1.default.parentDataProperty,
          dataNames: [names_1.default.data],
          dataPathArr: [codegen_1.nil],
          dataLevel: 0,
          dataTypes: [],
          definedProperties: /* @__PURE__ */ new Set(),
          topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) } : { ref: sch.schema }),
          validateName,
          ValidationError: _ValidationError,
          schema: sch.schema,
          schemaEnv: sch,
          rootId,
          baseId: sch.baseId || rootId,
          schemaPath: codegen_1.nil,
          errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
          errorPath: (0, codegen_1._)`""`,
          opts: this.opts,
          self: this
        };
        let sourceCode;
        try {
          this._compilations.add(sch);
          (0, validate_1.validateFunctionCode)(schemaCxt);
          gen.optimize(this.opts.code.optimize);
          const validateCode = gen.toString();
          sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
          if (this.opts.code.process)
            sourceCode = this.opts.code.process(sourceCode, sch);
          const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
          const validate = makeValidate(this, this.scope.get());
          this.scope.value(validateName, { ref: validate });
          validate.errors = null;
          validate.schema = sch.schema;
          validate.schemaEnv = sch;
          if (sch.$async)
            validate.$async = true;
          if (this.opts.code.source === true) {
            validate.source = { validateName, validateCode, scopeValues: gen._values };
          }
          if (this.opts.unevaluated) {
            const { props, items } = schemaCxt;
            validate.evaluated = {
              props: props instanceof codegen_1.Name ? void 0 : props,
              items: items instanceof codegen_1.Name ? void 0 : items,
              dynamicProps: props instanceof codegen_1.Name,
              dynamicItems: items instanceof codegen_1.Name
            };
            if (validate.source)
              validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
          }
          sch.validate = validate;
          return sch;
        } catch (e) {
          delete sch.validate;
          delete sch.validateName;
          if (sourceCode)
            this.logger.error("Error compiling schema, function code:", sourceCode);
          throw e;
        } finally {
          this._compilations.delete(sch);
        }
      }
      exports.compileSchema = compileSchema;
      function resolveRef(root, baseId, ref) {
        var _a3;
        ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
        const schOrFunc = root.refs[ref];
        if (schOrFunc)
          return schOrFunc;
        let _sch = resolve.call(this, root, ref);
        if (_sch === void 0) {
          const schema2 = (_a3 = root.localRefs) === null || _a3 === void 0 ? void 0 : _a3[ref];
          const { schemaId } = this.opts;
          if (schema2)
            _sch = new SchemaEnv({ schema: schema2, schemaId, root, baseId });
        }
        if (_sch === void 0)
          return;
        return root.refs[ref] = inlineOrCompile.call(this, _sch);
      }
      exports.resolveRef = resolveRef;
      function inlineOrCompile(sch) {
        if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
          return sch.schema;
        return sch.validate ? sch : compileSchema.call(this, sch);
      }
      function getCompilingSchema(schEnv) {
        for (const sch of this._compilations) {
          if (sameSchemaEnv(sch, schEnv))
            return sch;
        }
      }
      exports.getCompilingSchema = getCompilingSchema;
      function sameSchemaEnv(s1, s2) {
        return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
      }
      function resolve(root, ref) {
        let sch;
        while (typeof (sch = this.refs[ref]) == "string")
          ref = sch;
        return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
      }
      function resolveSchema(root, ref) {
        const p = this.opts.uriResolver.parse(ref);
        const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
        let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, void 0);
        if (Object.keys(root.schema).length > 0 && refPath === baseId) {
          return getJsonPointer.call(this, p, root);
        }
        const id = (0, resolve_1.normalizeId)(refPath);
        const schOrRef = this.refs[id] || this.schemas[id];
        if (typeof schOrRef == "string") {
          const sch = resolveSchema.call(this, root, schOrRef);
          if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
            return;
          return getJsonPointer.call(this, p, sch);
        }
        if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
          return;
        if (!schOrRef.validate)
          compileSchema.call(this, schOrRef);
        if (id === (0, resolve_1.normalizeId)(ref)) {
          const { schema: schema2 } = schOrRef;
          const { schemaId } = this.opts;
          const schId = schema2[schemaId];
          if (schId)
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
          return new SchemaEnv({ schema: schema2, schemaId, root, baseId });
        }
        return getJsonPointer.call(this, p, schOrRef);
      }
      exports.resolveSchema = resolveSchema;
      var PREVENT_SCOPE_CHANGE = /* @__PURE__ */ new Set([
        "properties",
        "patternProperties",
        "enum",
        "dependencies",
        "definitions"
      ]);
      function getJsonPointer(parsedRef, { baseId, schema: schema2, root }) {
        var _a3;
        if (((_a3 = parsedRef.fragment) === null || _a3 === void 0 ? void 0 : _a3[0]) !== "/")
          return;
        for (const part of parsedRef.fragment.slice(1).split("/")) {
          if (typeof schema2 === "boolean")
            return;
          const partSchema = schema2[(0, util_1.unescapeFragment)(part)];
          if (partSchema === void 0)
            return;
          schema2 = partSchema;
          const schId = typeof schema2 === "object" && schema2[this.opts.schemaId];
          if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
          }
        }
        let env;
        if (typeof schema2 != "boolean" && schema2.$ref && !(0, util_1.schemaHasRulesButRef)(schema2, this.RULES)) {
          const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema2.$ref);
          env = resolveSchema.call(this, root, $ref);
        }
        const { schemaId } = this.opts;
        env = env || new SchemaEnv({ schema: schema2, schemaId, root, baseId });
        if (env.schema !== env.root.schema)
          return env;
        return void 0;
      }
    }
  });

  // node_modules/ajv/dist/refs/data.json
  var require_data = __commonJS({
    "node_modules/ajv/dist/refs/data.json"(exports, module) {
      module.exports = {
        $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
        description: "Meta-schema for $data reference (JSON AnySchema extension proposal)",
        type: "object",
        required: ["$data"],
        properties: {
          $data: {
            type: "string",
            anyOf: [{ format: "relative-json-pointer" }, { format: "json-pointer" }]
          }
        },
        additionalProperties: false
      };
    }
  });

  // node_modules/uri-js/dist/es5/uri.all.js
  var require_uri_all = __commonJS({
    "node_modules/uri-js/dist/es5/uri.all.js"(exports, module) {
      init_globals();
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.URI = global2.URI || {});
      })(exports, function(exports2) {
        "use strict";
        function merge() {
          for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
            sets[_key] = arguments[_key];
          }
          if (sets.length > 1) {
            sets[0] = sets[0].slice(0, -1);
            var xl = sets.length - 1;
            for (var x = 1; x < xl; ++x) {
              sets[x] = sets[x].slice(1, -1);
            }
            sets[xl] = sets[xl].slice(1);
            return sets.join("");
          } else {
            return sets[0];
          }
        }
        function subexp(str) {
          return "(?:" + str + ")";
        }
        function typeOf(o) {
          return o === void 0 ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
        }
        function toUpperCase(str) {
          return str.toUpperCase();
        }
        function toArray(obj) {
          return obj !== void 0 && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
        }
        function assign(target, source2) {
          var obj = target;
          if (source2) {
            for (var key in source2) {
              obj[key] = source2[key];
            }
          }
          return obj;
        }
        function buildExps(isIRI2) {
          var ALPHA$$ = "[A-Za-z]", CR$ = "[\\x0D]", DIGIT$$ = "[0-9]", DQUOTE$$ = "[\\x22]", HEXDIG$$2 = merge(DIGIT$$, "[A-Fa-f]"), LF$$ = "[\\x0A]", SP$$ = "[\\x20]", PCT_ENCODED$2 = subexp(subexp("%[EFef]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%" + HEXDIG$$2 + HEXDIG$$2)), GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI2 ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", IPRIVATE$$ = isIRI2 ? "[\\uE000-\\uF8FF]" : "[]", UNRESERVED$$2 = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$), SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"), USERINFO$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]")) + "*"), DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$), DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$2 + "{1,4}"), LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$), IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$), IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$), IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$), IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$), IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")), ZONEID$ = subexp(subexp(UNRESERVED$$2 + "|" + PCT_ENCODED$2) + "+"), IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$), IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + ZONEID$), IPVFUTURE$ = subexp("[vV]" + HEXDIG$$2 + "+\\." + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]") + "+"), IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"), REG_NAME$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$)) + "*"), HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")|" + REG_NAME$), PORT$ = subexp(DIGIT$$ + "*"), AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"), PCHAR$ = subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@]")), SEGMENT$ = subexp(PCHAR$ + "*"), SEGMENT_NZ$ = subexp(PCHAR$ + "+"), SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\@]")) + "+"), PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"), PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"), PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$), PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$), PATH_EMPTY$ = "(?!" + PCHAR$ + ")", PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"), FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"), HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$), RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$), ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"), GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$", SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
          return {
            NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
            NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
            NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
            ESCAPE: new RegExp(merge("[^]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            UNRESERVED: new RegExp(UNRESERVED$$2, "g"),
            OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$2, RESERVED$$), "g"),
            PCT_ENCODED: new RegExp(PCT_ENCODED$2, "g"),
            IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
            IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$")
          };
        }
        var URI_PROTOCOL = buildExps(false);
        var IRI_PROTOCOL = buildExps(true);
        var slicedToArray = function() {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var toConsumableArray = function(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
              arr2[i] = arr[i];
            return arr2;
          } else {
            return Array.from(arr);
          }
        };
        var maxInt = 2147483647;
        var base = 36;
        var tMin = 1;
        var tMax = 26;
        var skew = 38;
        var damp = 700;
        var initialBias = 72;
        var initialN = 128;
        var delimiter = "-";
        var regexPunycode = /^xn--/;
        var regexNonASCII = /[^\0-\x7E]/;
        var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
        var errors = {
          "overflow": "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        };
        var baseMinusTMin = base - tMin;
        var floor = Math.floor;
        var stringFromCharCode = String.fromCharCode;
        function error$1(type2) {
          throw new RangeError(errors[type2]);
        }
        function map(array, fn) {
          var result = [];
          var length = array.length;
          while (length--) {
            result[length] = fn(array[length]);
          }
          return result;
        }
        function mapDomain(string, fn) {
          var parts = string.split("@");
          var result = "";
          if (parts.length > 1) {
            result = parts[0] + "@";
            string = parts[1];
          }
          string = string.replace(regexSeparators, ".");
          var labels = string.split(".");
          var encoded = map(labels, fn).join(".");
          return result + encoded;
        }
        function ucs2decode(string) {
          var output = [];
          var counter = 0;
          var length = string.length;
          while (counter < length) {
            var value = string.charCodeAt(counter++);
            if (value >= 55296 && value <= 56319 && counter < length) {
              var extra = string.charCodeAt(counter++);
              if ((extra & 64512) == 56320) {
                output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
              } else {
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }
        var ucs2encode = function ucs2encode2(array) {
          return String.fromCodePoint.apply(String, toConsumableArray(array));
        };
        var basicToDigit = function basicToDigit2(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }
          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }
          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }
          return base;
        };
        var digitToBasic = function digitToBasic2(digit, flag) {
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        };
        var adapt = function adapt2(delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);
          for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }
          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        };
        var decode = function decode2(input) {
          var output = [];
          var inputLength = input.length;
          var i = 0;
          var n = initialN;
          var bias = initialBias;
          var basic = input.lastIndexOf(delimiter);
          if (basic < 0) {
            basic = 0;
          }
          for (var j = 0; j < basic; ++j) {
            if (input.charCodeAt(j) >= 128) {
              error$1("not-basic");
            }
            output.push(input.charCodeAt(j));
          }
          for (var index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
            var oldi = i;
            for (var w = 1, k = base; ; k += base) {
              if (index >= inputLength) {
                error$1("invalid-input");
              }
              var digit = basicToDigit(input.charCodeAt(index++));
              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error$1("overflow");
              }
              i += digit * w;
              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (digit < t) {
                break;
              }
              var baseMinusT = base - t;
              if (w > floor(maxInt / baseMinusT)) {
                error$1("overflow");
              }
              w *= baseMinusT;
            }
            var out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            if (floor(i / out) > maxInt - n) {
              error$1("overflow");
            }
            n += floor(i / out);
            i %= out;
            output.splice(i++, 0, n);
          }
          return String.fromCodePoint.apply(String, output);
        };
        var encode = function encode2(input) {
          var output = [];
          input = ucs2decode(input);
          var inputLength = input.length;
          var n = initialN;
          var delta = 0;
          var bias = initialBias;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _currentValue2 = _step.value;
              if (_currentValue2 < 128) {
                output.push(stringFromCharCode(_currentValue2));
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          var basicLength = output.length;
          var handledCPCount = basicLength;
          if (basicLength) {
            output.push(delimiter);
          }
          while (handledCPCount < inputLength) {
            var m = maxInt;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = void 0;
            try {
              for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var currentValue = _step2.value;
                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
            var handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error$1("overflow");
            }
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = void 0;
            try {
              for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _currentValue = _step3.value;
                if (_currentValue < n && ++delta > maxInt) {
                  error$1("overflow");
                }
                if (_currentValue == n) {
                  var q = delta;
                  for (var k = base; ; k += base) {
                    var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                    if (q < t) {
                      break;
                    }
                    var qMinusT = q - t;
                    var baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                    q = floor(qMinusT / baseMinusT);
                  }
                  output.push(stringFromCharCode(digitToBasic(q, 0)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
            ++delta;
            ++n;
          }
          return output.join("");
        };
        var toUnicode = function toUnicode2(input) {
          return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
          });
        };
        var toASCII = function toASCII2(input) {
          return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
          });
        };
        var punycode = {
          "version": "2.1.0",
          "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
          },
          "decode": decode,
          "encode": encode,
          "toASCII": toASCII,
          "toUnicode": toUnicode
        };
        var SCHEMES = {};
        function pctEncChar(chr) {
          var c = chr.charCodeAt(0);
          var e = void 0;
          if (c < 16)
            e = "%0" + c.toString(16).toUpperCase();
          else if (c < 128)
            e = "%" + c.toString(16).toUpperCase();
          else if (c < 2048)
            e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
          else
            e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
          return e;
        }
        function pctDecChars(str) {
          var newStr = "";
          var i = 0;
          var il = str.length;
          while (i < il) {
            var c = parseInt(str.substr(i + 1, 2), 16);
            if (c < 128) {
              newStr += String.fromCharCode(c);
              i += 3;
            } else if (c >= 194 && c < 224) {
              if (il - i >= 6) {
                var c2 = parseInt(str.substr(i + 4, 2), 16);
                newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
              } else {
                newStr += str.substr(i, 6);
              }
              i += 6;
            } else if (c >= 224) {
              if (il - i >= 9) {
                var _c = parseInt(str.substr(i + 4, 2), 16);
                var c3 = parseInt(str.substr(i + 7, 2), 16);
                newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
              } else {
                newStr += str.substr(i, 9);
              }
              i += 9;
            } else {
              newStr += str.substr(i, 3);
              i += 3;
            }
          }
          return newStr;
        }
        function _normalizeComponentEncoding(components, protocol) {
          function decodeUnreserved2(str) {
            var decStr = pctDecChars(str);
            return !decStr.match(protocol.UNRESERVED) ? str : decStr;
          }
          if (components.scheme)
            components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_SCHEME, "");
          if (components.userinfo !== void 0)
            components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.host !== void 0)
            components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.path !== void 0)
            components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.query !== void 0)
            components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.fragment !== void 0)
            components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          return components;
        }
        function _stripLeadingZeros(str) {
          return str.replace(/^0*(.*)/, "$1") || "0";
        }
        function _normalizeIPv4(host, protocol) {
          var matches = host.match(protocol.IPV4ADDRESS) || [];
          var _matches = slicedToArray(matches, 2), address = _matches[1];
          if (address) {
            return address.split(".").map(_stripLeadingZeros).join(".");
          } else {
            return host;
          }
        }
        function _normalizeIPv6(host, protocol) {
          var matches = host.match(protocol.IPV6ADDRESS) || [];
          var _matches2 = slicedToArray(matches, 3), address = _matches2[1], zone = _matches2[2];
          if (address) {
            var _address$toLowerCase$ = address.toLowerCase().split("::").reverse(), _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2), last = _address$toLowerCase$2[0], first = _address$toLowerCase$2[1];
            var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
            var lastFields = last.split(":").map(_stripLeadingZeros);
            var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
            var fieldCount = isLastFieldIPv4Address ? 7 : 8;
            var lastFieldsStart = lastFields.length - fieldCount;
            var fields = Array(fieldCount);
            for (var x = 0; x < fieldCount; ++x) {
              fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || "";
            }
            if (isLastFieldIPv4Address) {
              fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
            }
            var allZeroFields = fields.reduce(function(acc, field, index) {
              if (!field || field === "0") {
                var lastLongest = acc[acc.length - 1];
                if (lastLongest && lastLongest.index + lastLongest.length === index) {
                  lastLongest.length++;
                } else {
                  acc.push({ index, length: 1 });
                }
              }
              return acc;
            }, []);
            var longestZeroFields = allZeroFields.sort(function(a, b) {
              return b.length - a.length;
            })[0];
            var newHost = void 0;
            if (longestZeroFields && longestZeroFields.length > 1) {
              var newFirst = fields.slice(0, longestZeroFields.index);
              var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
              newHost = newFirst.join(":") + "::" + newLast.join(":");
            } else {
              newHost = fields.join(":");
            }
            if (zone) {
              newHost += "%" + zone;
            }
            return newHost;
          } else {
            return host;
          }
        }
        var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
        var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === void 0;
        function parse3(uriString) {
          var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var components = {};
          var protocol = options2.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
          if (options2.reference === "suffix")
            uriString = (options2.scheme ? options2.scheme + ":" : "") + "//" + uriString;
          var matches = uriString.match(URI_PARSE);
          if (matches) {
            if (NO_MATCH_IS_UNDEFINED) {
              components.scheme = matches[1];
              components.userinfo = matches[3];
              components.host = matches[4];
              components.port = parseInt(matches[5], 10);
              components.path = matches[6] || "";
              components.query = matches[7];
              components.fragment = matches[8];
              if (isNaN(components.port)) {
                components.port = matches[5];
              }
            } else {
              components.scheme = matches[1] || void 0;
              components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : void 0;
              components.host = uriString.indexOf("//") !== -1 ? matches[4] : void 0;
              components.port = parseInt(matches[5], 10);
              components.path = matches[6] || "";
              components.query = uriString.indexOf("?") !== -1 ? matches[7] : void 0;
              components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : void 0;
              if (isNaN(components.port)) {
                components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : void 0;
              }
            }
            if (components.host) {
              components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
            }
            if (components.scheme === void 0 && components.userinfo === void 0 && components.host === void 0 && components.port === void 0 && !components.path && components.query === void 0) {
              components.reference = "same-document";
            } else if (components.scheme === void 0) {
              components.reference = "relative";
            } else if (components.fragment === void 0) {
              components.reference = "absolute";
            } else {
              components.reference = "uri";
            }
            if (options2.reference && options2.reference !== "suffix" && options2.reference !== components.reference) {
              components.error = components.error || "URI is not a " + options2.reference + " reference.";
            }
            var schemeHandler = SCHEMES[(options2.scheme || components.scheme || "").toLowerCase()];
            if (!options2.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
              if (components.host && (options2.domainHost || schemeHandler && schemeHandler.domainHost)) {
                try {
                  components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                } catch (e) {
                  components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                }
              }
              _normalizeComponentEncoding(components, URI_PROTOCOL);
            } else {
              _normalizeComponentEncoding(components, protocol);
            }
            if (schemeHandler && schemeHandler.parse) {
              schemeHandler.parse(components, options2);
            }
          } else {
            components.error = components.error || "URI can not be parsed.";
          }
          return components;
        }
        function _recomposeAuthority(components, options2) {
          var protocol = options2.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
          var uriTokens = [];
          if (components.userinfo !== void 0) {
            uriTokens.push(components.userinfo);
            uriTokens.push("@");
          }
          if (components.host !== void 0) {
            uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function(_, $1, $2) {
              return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
            }));
          }
          if (typeof components.port === "number" || typeof components.port === "string") {
            uriTokens.push(":");
            uriTokens.push(String(components.port));
          }
          return uriTokens.length ? uriTokens.join("") : void 0;
        }
        var RDS1 = /^\.\.?\//;
        var RDS2 = /^\/\.(\/|$)/;
        var RDS3 = /^\/\.\.(\/|$)/;
        var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
        function removeDotSegments(input) {
          var output = [];
          while (input.length) {
            if (input.match(RDS1)) {
              input = input.replace(RDS1, "");
            } else if (input.match(RDS2)) {
              input = input.replace(RDS2, "/");
            } else if (input.match(RDS3)) {
              input = input.replace(RDS3, "/");
              output.pop();
            } else if (input === "." || input === "..") {
              input = "";
            } else {
              var im = input.match(RDS5);
              if (im) {
                var s = im[0];
                input = input.slice(s.length);
                output.push(s);
              } else {
                throw new Error("Unexpected dot segment condition");
              }
            }
          }
          return output.join("");
        }
        function serialize2(components) {
          var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var protocol = options2.iri ? IRI_PROTOCOL : URI_PROTOCOL;
          var uriTokens = [];
          var schemeHandler = SCHEMES[(options2.scheme || components.scheme || "").toLowerCase()];
          if (schemeHandler && schemeHandler.serialize)
            schemeHandler.serialize(components, options2);
          if (components.host) {
            if (protocol.IPV6ADDRESS.test(components.host)) {
            } else if (options2.domainHost || schemeHandler && schemeHandler.domainHost) {
              try {
                components.host = !options2.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
              } catch (e) {
                components.error = components.error || "Host's domain name can not be converted to " + (!options2.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
              }
            }
          }
          _normalizeComponentEncoding(components, protocol);
          if (options2.reference !== "suffix" && components.scheme) {
            uriTokens.push(components.scheme);
            uriTokens.push(":");
          }
          var authority2 = _recomposeAuthority(components, options2);
          if (authority2 !== void 0) {
            if (options2.reference !== "suffix") {
              uriTokens.push("//");
            }
            uriTokens.push(authority2);
            if (components.path && components.path.charAt(0) !== "/") {
              uriTokens.push("/");
            }
          }
          if (components.path !== void 0) {
            var s = components.path;
            if (!options2.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
              s = removeDotSegments(s);
            }
            if (authority2 === void 0) {
              s = s.replace(/^\/\//, "/%2F");
            }
            uriTokens.push(s);
          }
          if (components.query !== void 0) {
            uriTokens.push("?");
            uriTokens.push(components.query);
          }
          if (components.fragment !== void 0) {
            uriTokens.push("#");
            uriTokens.push(components.fragment);
          }
          return uriTokens.join("");
        }
        function resolveComponents(base2, relative) {
          var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var skipNormalization = arguments[3];
          var target = {};
          if (!skipNormalization) {
            base2 = parse3(serialize2(base2, options2), options2);
            relative = parse3(serialize2(relative, options2), options2);
          }
          options2 = options2 || {};
          if (!options2.tolerant && relative.scheme) {
            target.scheme = relative.scheme;
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
          } else {
            if (relative.userinfo !== void 0 || relative.host !== void 0 || relative.port !== void 0) {
              target.userinfo = relative.userinfo;
              target.host = relative.host;
              target.port = relative.port;
              target.path = removeDotSegments(relative.path || "");
              target.query = relative.query;
            } else {
              if (!relative.path) {
                target.path = base2.path;
                if (relative.query !== void 0) {
                  target.query = relative.query;
                } else {
                  target.query = base2.query;
                }
              } else {
                if (relative.path.charAt(0) === "/") {
                  target.path = removeDotSegments(relative.path);
                } else {
                  if ((base2.userinfo !== void 0 || base2.host !== void 0 || base2.port !== void 0) && !base2.path) {
                    target.path = "/" + relative.path;
                  } else if (!base2.path) {
                    target.path = relative.path;
                  } else {
                    target.path = base2.path.slice(0, base2.path.lastIndexOf("/") + 1) + relative.path;
                  }
                  target.path = removeDotSegments(target.path);
                }
                target.query = relative.query;
              }
              target.userinfo = base2.userinfo;
              target.host = base2.host;
              target.port = base2.port;
            }
            target.scheme = base2.scheme;
          }
          target.fragment = relative.fragment;
          return target;
        }
        function resolve(baseURI, relativeURI, options2) {
          var schemelessOptions = assign({ scheme: "null" }, options2);
          return serialize2(resolveComponents(parse3(baseURI, schemelessOptions), parse3(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
        }
        function normalize(uri, options2) {
          if (typeof uri === "string") {
            uri = serialize2(parse3(uri, options2), options2);
          } else if (typeOf(uri) === "object") {
            uri = parse3(serialize2(uri, options2), options2);
          }
          return uri;
        }
        function equal(uriA, uriB, options2) {
          if (typeof uriA === "string") {
            uriA = serialize2(parse3(uriA, options2), options2);
          } else if (typeOf(uriA) === "object") {
            uriA = serialize2(uriA, options2);
          }
          if (typeof uriB === "string") {
            uriB = serialize2(parse3(uriB, options2), options2);
          } else if (typeOf(uriB) === "object") {
            uriB = serialize2(uriB, options2);
          }
          return uriA === uriB;
        }
        function escapeComponent(str, options2) {
          return str && str.toString().replace(!options2 || !options2.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
        }
        function unescapeComponent(str, options2) {
          return str && str.toString().replace(!options2 || !options2.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
        }
        var handler = {
          scheme: "http",
          domainHost: true,
          parse: function parse4(components, options2) {
            if (!components.host) {
              components.error = components.error || "HTTP URIs must have a host.";
            }
            return components;
          },
          serialize: function serialize3(components, options2) {
            var secure = String(components.scheme).toLowerCase() === "https";
            if (components.port === (secure ? 443 : 80) || components.port === "") {
              components.port = void 0;
            }
            if (!components.path) {
              components.path = "/";
            }
            return components;
          }
        };
        var handler$1 = {
          scheme: "https",
          domainHost: handler.domainHost,
          parse: handler.parse,
          serialize: handler.serialize
        };
        function isSecure(wsComponents) {
          return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
        }
        var handler$2 = {
          scheme: "ws",
          domainHost: true,
          parse: function parse4(components, options2) {
            var wsComponents = components;
            wsComponents.secure = isSecure(wsComponents);
            wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
            wsComponents.path = void 0;
            wsComponents.query = void 0;
            return wsComponents;
          },
          serialize: function serialize3(wsComponents, options2) {
            if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
              wsComponents.port = void 0;
            }
            if (typeof wsComponents.secure === "boolean") {
              wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
              wsComponents.secure = void 0;
            }
            if (wsComponents.resourceName) {
              var _wsComponents$resourc = wsComponents.resourceName.split("?"), _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2), path = _wsComponents$resourc2[0], query = _wsComponents$resourc2[1];
              wsComponents.path = path && path !== "/" ? path : void 0;
              wsComponents.query = query;
              wsComponents.resourceName = void 0;
            }
            wsComponents.fragment = void 0;
            return wsComponents;
          }
        };
        var handler$3 = {
          scheme: "wss",
          domainHost: handler$2.domainHost,
          parse: handler$2.parse,
          serialize: handler$2.serialize
        };
        var O = {};
        var isIRI = true;
        var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
        var HEXDIG$$ = "[0-9A-Fa-f]";
        var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$));
        var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
        var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
        var VCHAR$$ = merge(QTEXT$$, '[\\"\\\\]');
        var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
        var UNRESERVED = new RegExp(UNRESERVED$$, "g");
        var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
        var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
        var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
        var NOT_HFVALUE = NOT_HFNAME;
        function decodeUnreserved(str) {
          var decStr = pctDecChars(str);
          return !decStr.match(UNRESERVED) ? str : decStr;
        }
        var handler$4 = {
          scheme: "mailto",
          parse: function parse$$1(components, options2) {
            var mailtoComponents = components;
            var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
            mailtoComponents.path = void 0;
            if (mailtoComponents.query) {
              var unknownHeaders = false;
              var headers = {};
              var hfields = mailtoComponents.query.split("&");
              for (var x = 0, xl = hfields.length; x < xl; ++x) {
                var hfield = hfields[x].split("=");
                switch (hfield[0]) {
                  case "to":
                    var toAddrs = hfield[1].split(",");
                    for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                      to.push(toAddrs[_x]);
                    }
                    break;
                  case "subject":
                    mailtoComponents.subject = unescapeComponent(hfield[1], options2);
                    break;
                  case "body":
                    mailtoComponents.body = unescapeComponent(hfield[1], options2);
                    break;
                  default:
                    unknownHeaders = true;
                    headers[unescapeComponent(hfield[0], options2)] = unescapeComponent(hfield[1], options2);
                    break;
                }
              }
              if (unknownHeaders)
                mailtoComponents.headers = headers;
            }
            mailtoComponents.query = void 0;
            for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
              var addr = to[_x2].split("@");
              addr[0] = unescapeComponent(addr[0]);
              if (!options2.unicodeSupport) {
                try {
                  addr[1] = punycode.toASCII(unescapeComponent(addr[1], options2).toLowerCase());
                } catch (e) {
                  mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                }
              } else {
                addr[1] = unescapeComponent(addr[1], options2).toLowerCase();
              }
              to[_x2] = addr.join("@");
            }
            return mailtoComponents;
          },
          serialize: function serialize$$1(mailtoComponents, options2) {
            var components = mailtoComponents;
            var to = toArray(mailtoComponents.to);
            if (to) {
              for (var x = 0, xl = to.length; x < xl; ++x) {
                var toAddr = String(to[x]);
                var atIdx = toAddr.lastIndexOf("@");
                var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                var domain = toAddr.slice(atIdx + 1);
                try {
                  domain = !options2.iri ? punycode.toASCII(unescapeComponent(domain, options2).toLowerCase()) : punycode.toUnicode(domain);
                } catch (e) {
                  components.error = components.error || "Email address's domain name can not be converted to " + (!options2.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                }
                to[x] = localPart + "@" + domain;
              }
              components.path = to.join(",");
            }
            var headers = mailtoComponents.headers = mailtoComponents.headers || {};
            if (mailtoComponents.subject)
              headers["subject"] = mailtoComponents.subject;
            if (mailtoComponents.body)
              headers["body"] = mailtoComponents.body;
            var fields = [];
            for (var name in headers) {
              if (headers[name] !== O[name]) {
                fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
              }
            }
            if (fields.length) {
              components.query = fields.join("&");
            }
            return components;
          }
        };
        var URN_PARSE = /^([^\:]+)\:(.*)/;
        var handler$5 = {
          scheme: "urn",
          parse: function parse$$1(components, options2) {
            var matches = components.path && components.path.match(URN_PARSE);
            var urnComponents = components;
            if (matches) {
              var scheme = options2.scheme || urnComponents.scheme || "urn";
              var nid = matches[1].toLowerCase();
              var nss = matches[2];
              var urnScheme = scheme + ":" + (options2.nid || nid);
              var schemeHandler = SCHEMES[urnScheme];
              urnComponents.nid = nid;
              urnComponents.nss = nss;
              urnComponents.path = void 0;
              if (schemeHandler) {
                urnComponents = schemeHandler.parse(urnComponents, options2);
              }
            } else {
              urnComponents.error = urnComponents.error || "URN can not be parsed.";
            }
            return urnComponents;
          },
          serialize: function serialize$$1(urnComponents, options2) {
            var scheme = options2.scheme || urnComponents.scheme || "urn";
            var nid = urnComponents.nid;
            var urnScheme = scheme + ":" + (options2.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            if (schemeHandler) {
              urnComponents = schemeHandler.serialize(urnComponents, options2);
            }
            var uriComponents = urnComponents;
            var nss = urnComponents.nss;
            uriComponents.path = (nid || options2.nid) + ":" + nss;
            return uriComponents;
          }
        };
        var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
        var handler$6 = {
          scheme: "urn:uuid",
          parse: function parse4(urnComponents, options2) {
            var uuidComponents = urnComponents;
            uuidComponents.uuid = uuidComponents.nss;
            uuidComponents.nss = void 0;
            if (!options2.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
              uuidComponents.error = uuidComponents.error || "UUID is not valid.";
            }
            return uuidComponents;
          },
          serialize: function serialize3(uuidComponents, options2) {
            var urnComponents = uuidComponents;
            urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
            return urnComponents;
          }
        };
        SCHEMES[handler.scheme] = handler;
        SCHEMES[handler$1.scheme] = handler$1;
        SCHEMES[handler$2.scheme] = handler$2;
        SCHEMES[handler$3.scheme] = handler$3;
        SCHEMES[handler$4.scheme] = handler$4;
        SCHEMES[handler$5.scheme] = handler$5;
        SCHEMES[handler$6.scheme] = handler$6;
        exports2.SCHEMES = SCHEMES;
        exports2.pctEncChar = pctEncChar;
        exports2.pctDecChars = pctDecChars;
        exports2.parse = parse3;
        exports2.removeDotSegments = removeDotSegments;
        exports2.serialize = serialize2;
        exports2.resolveComponents = resolveComponents;
        exports2.resolve = resolve;
        exports2.normalize = normalize;
        exports2.equal = equal;
        exports2.escapeComponent = escapeComponent;
        exports2.unescapeComponent = unescapeComponent;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/ajv/dist/runtime/uri.js
  var require_uri = __commonJS({
    "node_modules/ajv/dist/runtime/uri.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var uri = require_uri_all();
      uri.code = 'require("ajv/dist/runtime/uri").default';
      exports.default = uri;
    }
  });

  // node_modules/ajv/dist/core.js
  var require_core2 = __commonJS({
    "node_modules/ajv/dist/core.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
      var validate_1 = require_validate();
      Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
        return validate_1.KeywordCxt;
      } });
      var codegen_1 = require_codegen();
      Object.defineProperty(exports, "_", { enumerable: true, get: function() {
        return codegen_1._;
      } });
      Object.defineProperty(exports, "str", { enumerable: true, get: function() {
        return codegen_1.str;
      } });
      Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
        return codegen_1.stringify;
      } });
      Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
        return codegen_1.nil;
      } });
      Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
        return codegen_1.Name;
      } });
      Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
        return codegen_1.CodeGen;
      } });
      var validation_error_1 = require_validation_error();
      var ref_error_1 = require_ref_error();
      var rules_1 = require_rules();
      var compile_1 = require_compile();
      var codegen_2 = require_codegen();
      var resolve_1 = require_resolve();
      var dataType_1 = require_dataType();
      var util_1 = require_util3();
      var $dataRefSchema = require_data();
      var uri_1 = require_uri();
      var defaultRegExp = (str, flags) => new RegExp(str, flags);
      defaultRegExp.code = "new RegExp";
      var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
      var EXT_SCOPE_NAMES = /* @__PURE__ */ new Set([
        "validate",
        "serialize",
        "parse",
        "wrapper",
        "root",
        "schema",
        "keyword",
        "pattern",
        "formats",
        "validate$data",
        "func",
        "obj",
        "Error"
      ]);
      var removedOptions = {
        errorDataPath: "",
        format: "`validateFormats: false` can be used instead.",
        nullable: '"nullable" keyword is supported by default.',
        jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
        extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
        missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
        processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
        sourceCode: "Use option `code: {source: true}`",
        strictDefaults: "It is default now, see option `strict`.",
        strictKeywords: "It is default now, see option `strict`.",
        uniqueItems: '"uniqueItems" keyword is always validated.',
        unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
        cache: "Map is used as cache, schema object as key.",
        serialize: "Map is used as cache, schema object as key.",
        ajvErrors: "It is default now."
      };
      var deprecatedOptions = {
        ignoreKeywordsWithRef: "",
        jsPropertySyntax: "",
        unicode: '"minLength"/"maxLength" account for unicode characters by default.'
      };
      var MAX_EXPRESSION = 200;
      function requiredOptions(o) {
        var _a3, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
        const s = o.strict;
        const _optz = (_a3 = o.code) === null || _a3 === void 0 ? void 0 : _a3.optimize;
        const optimize = _optz === true || _optz === void 0 ? 1 : _optz || 0;
        const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
        const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
        return {
          strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
          strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
          strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
          strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
          strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
          code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
          loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
          loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
          meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
          messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
          inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
          schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
          addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
          validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
          validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
          unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
          int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
          uriResolver
        };
      }
      var Ajv = class {
        constructor(opts = {}) {
          this.schemas = {};
          this.refs = {};
          this.formats = {};
          this._compilations = /* @__PURE__ */ new Set();
          this._loading = {};
          this._cache = /* @__PURE__ */ new Map();
          opts = this.opts = { ...opts, ...requiredOptions(opts) };
          const { es5, lines } = this.opts.code;
          this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
          this.logger = getLogger(opts.logger);
          const formatOpt = opts.validateFormats;
          opts.validateFormats = false;
          this.RULES = (0, rules_1.getRules)();
          checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
          checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
          this._metaOpts = getMetaSchemaOptions.call(this);
          if (opts.formats)
            addInitialFormats.call(this);
          this._addVocabularies();
          this._addDefaultMetaSchema();
          if (opts.keywords)
            addInitialKeywords.call(this, opts.keywords);
          if (typeof opts.meta == "object")
            this.addMetaSchema(opts.meta);
          addInitialSchemas.call(this);
          opts.validateFormats = formatOpt;
        }
        _addVocabularies() {
          this.addKeyword("$async");
        }
        _addDefaultMetaSchema() {
          const { $data, meta, schemaId } = this.opts;
          let _dataRefSchema = $dataRefSchema;
          if (schemaId === "id") {
            _dataRefSchema = { ...$dataRefSchema };
            _dataRefSchema.id = _dataRefSchema.$id;
            delete _dataRefSchema.$id;
          }
          if (meta && $data)
            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
        }
        defaultMeta() {
          const { meta, schemaId } = this.opts;
          return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : void 0;
        }
        validate(schemaKeyRef, data) {
          let v;
          if (typeof schemaKeyRef == "string") {
            v = this.getSchema(schemaKeyRef);
            if (!v)
              throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
          } else {
            v = this.compile(schemaKeyRef);
          }
          const valid2 = v(data);
          if (!("$async" in v))
            this.errors = v.errors;
          return valid2;
        }
        compile(schema2, _meta) {
          const sch = this._addSchema(schema2, _meta);
          return sch.validate || this._compileSchemaEnv(sch);
        }
        compileAsync(schema2, meta) {
          if (typeof this.opts.loadSchema != "function") {
            throw new Error("options.loadSchema should be a function");
          }
          const { loadSchema } = this.opts;
          return runCompileAsync.call(this, schema2, meta);
          async function runCompileAsync(_schema, _meta) {
            await loadMetaSchema.call(this, _schema.$schema);
            const sch = this._addSchema(_schema, _meta);
            return sch.validate || _compileAsync.call(this, sch);
          }
          async function loadMetaSchema($ref) {
            if ($ref && !this.getSchema($ref)) {
              await runCompileAsync.call(this, { $ref }, true);
            }
          }
          async function _compileAsync(sch) {
            try {
              return this._compileSchemaEnv(sch);
            } catch (e) {
              if (!(e instanceof ref_error_1.default))
                throw e;
              checkLoaded.call(this, e);
              await loadMissingSchema.call(this, e.missingSchema);
              return _compileAsync.call(this, sch);
            }
          }
          function checkLoaded({ missingSchema: ref, missingRef }) {
            if (this.refs[ref]) {
              throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
            }
          }
          async function loadMissingSchema(ref) {
            const _schema = await _loadSchema.call(this, ref);
            if (!this.refs[ref])
              await loadMetaSchema.call(this, _schema.$schema);
            if (!this.refs[ref])
              this.addSchema(_schema, ref, meta);
          }
          async function _loadSchema(ref) {
            const p = this._loading[ref];
            if (p)
              return p;
            try {
              return await (this._loading[ref] = loadSchema(ref));
            } finally {
              delete this._loading[ref];
            }
          }
        }
        addSchema(schema2, key, _meta, _validateSchema = this.opts.validateSchema) {
          if (Array.isArray(schema2)) {
            for (const sch of schema2)
              this.addSchema(sch, void 0, _meta, _validateSchema);
            return this;
          }
          let id;
          if (typeof schema2 === "object") {
            const { schemaId } = this.opts;
            id = schema2[schemaId];
            if (id !== void 0 && typeof id != "string") {
              throw new Error(`schema ${schemaId} must be string`);
            }
          }
          key = (0, resolve_1.normalizeId)(key || id);
          this._checkUnique(key);
          this.schemas[key] = this._addSchema(schema2, _meta, key, _validateSchema, true);
          return this;
        }
        addMetaSchema(schema2, key, _validateSchema = this.opts.validateSchema) {
          this.addSchema(schema2, key, true, _validateSchema);
          return this;
        }
        validateSchema(schema2, throwOrLogError) {
          if (typeof schema2 == "boolean")
            return true;
          let $schema;
          $schema = schema2.$schema;
          if ($schema !== void 0 && typeof $schema != "string") {
            throw new Error("$schema must be a string");
          }
          $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
          if (!$schema) {
            this.logger.warn("meta-schema not available");
            this.errors = null;
            return true;
          }
          const valid2 = this.validate($schema, schema2);
          if (!valid2 && throwOrLogError) {
            const message = "schema is invalid: " + this.errorsText();
            if (this.opts.validateSchema === "log")
              this.logger.error(message);
            else
              throw new Error(message);
          }
          return valid2;
        }
        getSchema(keyRef) {
          let sch;
          while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
            keyRef = sch;
          if (sch === void 0) {
            const { schemaId } = this.opts;
            const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
            sch = compile_1.resolveSchema.call(this, root, keyRef);
            if (!sch)
              return;
            this.refs[keyRef] = sch;
          }
          return sch.validate || this._compileSchemaEnv(sch);
        }
        removeSchema(schemaKeyRef) {
          if (schemaKeyRef instanceof RegExp) {
            this._removeAllSchemas(this.schemas, schemaKeyRef);
            this._removeAllSchemas(this.refs, schemaKeyRef);
            return this;
          }
          switch (typeof schemaKeyRef) {
            case "undefined":
              this._removeAllSchemas(this.schemas);
              this._removeAllSchemas(this.refs);
              this._cache.clear();
              return this;
            case "string": {
              const sch = getSchEnv.call(this, schemaKeyRef);
              if (typeof sch == "object")
                this._cache.delete(sch.schema);
              delete this.schemas[schemaKeyRef];
              delete this.refs[schemaKeyRef];
              return this;
            }
            case "object": {
              const cacheKey = schemaKeyRef;
              this._cache.delete(cacheKey);
              let id = schemaKeyRef[this.opts.schemaId];
              if (id) {
                id = (0, resolve_1.normalizeId)(id);
                delete this.schemas[id];
                delete this.refs[id];
              }
              return this;
            }
            default:
              throw new Error("ajv.removeSchema: invalid parameter");
          }
        }
        addVocabulary(definitions) {
          for (const def of definitions)
            this.addKeyword(def);
          return this;
        }
        addKeyword(kwdOrDef, def) {
          let keyword;
          if (typeof kwdOrDef == "string") {
            keyword = kwdOrDef;
            if (typeof def == "object") {
              this.logger.warn("these parameters are deprecated, see docs for addKeyword");
              def.keyword = keyword;
            }
          } else if (typeof kwdOrDef == "object" && def === void 0) {
            def = kwdOrDef;
            keyword = def.keyword;
            if (Array.isArray(keyword) && !keyword.length) {
              throw new Error("addKeywords: keyword must be string or non-empty array");
            }
          } else {
            throw new Error("invalid addKeywords parameters");
          }
          checkKeyword.call(this, keyword, def);
          if (!def) {
            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
            return this;
          }
          keywordMetaschema.call(this, def);
          const definition = {
            ...def,
            type: (0, dataType_1.getJSONTypes)(def.type),
            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
          };
          (0, util_1.eachItem)(keyword, definition.type.length === 0 ? (k) => addRule.call(this, k, definition) : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
          return this;
        }
        getKeyword(keyword) {
          const rule = this.RULES.all[keyword];
          return typeof rule == "object" ? rule.definition : !!rule;
        }
        removeKeyword(keyword) {
          const { RULES } = this;
          delete RULES.keywords[keyword];
          delete RULES.all[keyword];
          for (const group of RULES.rules) {
            const i = group.rules.findIndex((rule) => rule.keyword === keyword);
            if (i >= 0)
              group.rules.splice(i, 1);
          }
          return this;
        }
        addFormat(name, format2) {
          if (typeof format2 == "string")
            format2 = new RegExp(format2);
          this.formats[name] = format2;
          return this;
        }
        errorsText(errors = this.errors, { separator = ", ", dataVar = "data" } = {}) {
          if (!errors || errors.length === 0)
            return "No errors";
          return errors.map((e) => `${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg) => text + separator + msg);
        }
        $dataMetaSchema(metaSchema, keywordsJsonPointers) {
          const rules = this.RULES.all;
          metaSchema = JSON.parse(JSON.stringify(metaSchema));
          for (const jsonPointer of keywordsJsonPointers) {
            const segments = jsonPointer.split("/").slice(1);
            let keywords2 = metaSchema;
            for (const seg of segments)
              keywords2 = keywords2[seg];
            for (const key in rules) {
              const rule = rules[key];
              if (typeof rule != "object")
                continue;
              const { $data } = rule.definition;
              const schema2 = keywords2[key];
              if ($data && schema2)
                keywords2[key] = schemaOrData(schema2);
            }
          }
          return metaSchema;
        }
        _removeAllSchemas(schemas, regex) {
          for (const keyRef in schemas) {
            const sch = schemas[keyRef];
            if (!regex || regex.test(keyRef)) {
              if (typeof sch == "string") {
                delete schemas[keyRef];
              } else if (sch && !sch.meta) {
                this._cache.delete(sch.schema);
                delete schemas[keyRef];
              }
            }
          }
        }
        _addSchema(schema2, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
          let id;
          const { schemaId } = this.opts;
          if (typeof schema2 == "object") {
            id = schema2[schemaId];
          } else {
            if (this.opts.jtd)
              throw new Error("schema must be object");
            else if (typeof schema2 != "boolean")
              throw new Error("schema must be object or boolean");
          }
          let sch = this._cache.get(schema2);
          if (sch !== void 0)
            return sch;
          baseId = (0, resolve_1.normalizeId)(id || baseId);
          const localRefs = resolve_1.getSchemaRefs.call(this, schema2, baseId);
          sch = new compile_1.SchemaEnv({ schema: schema2, schemaId, meta, baseId, localRefs });
          this._cache.set(sch.schema, sch);
          if (addSchema && !baseId.startsWith("#")) {
            if (baseId)
              this._checkUnique(baseId);
            this.refs[baseId] = sch;
          }
          if (validateSchema)
            this.validateSchema(schema2, true);
          return sch;
        }
        _checkUnique(id) {
          if (this.schemas[id] || this.refs[id]) {
            throw new Error(`schema with key or id "${id}" already exists`);
          }
        }
        _compileSchemaEnv(sch) {
          if (sch.meta)
            this._compileMetaSchema(sch);
          else
            compile_1.compileSchema.call(this, sch);
          if (!sch.validate)
            throw new Error("ajv implementation error");
          return sch.validate;
        }
        _compileMetaSchema(sch) {
          const currentOpts = this.opts;
          this.opts = this._metaOpts;
          try {
            compile_1.compileSchema.call(this, sch);
          } finally {
            this.opts = currentOpts;
          }
        }
      };
      exports.default = Ajv;
      Ajv.ValidationError = validation_error_1.default;
      Ajv.MissingRefError = ref_error_1.default;
      function checkOptions(checkOpts, options2, msg, log2 = "error") {
        for (const key in checkOpts) {
          const opt = key;
          if (opt in options2)
            this.logger[log2](`${msg}: option ${key}. ${checkOpts[opt]}`);
        }
      }
      function getSchEnv(keyRef) {
        keyRef = (0, resolve_1.normalizeId)(keyRef);
        return this.schemas[keyRef] || this.refs[keyRef];
      }
      function addInitialSchemas() {
        const optsSchemas = this.opts.schemas;
        if (!optsSchemas)
          return;
        if (Array.isArray(optsSchemas))
          this.addSchema(optsSchemas);
        else
          for (const key in optsSchemas)
            this.addSchema(optsSchemas[key], key);
      }
      function addInitialFormats() {
        for (const name in this.opts.formats) {
          const format2 = this.opts.formats[name];
          if (format2)
            this.addFormat(name, format2);
        }
      }
      function addInitialKeywords(defs) {
        if (Array.isArray(defs)) {
          this.addVocabulary(defs);
          return;
        }
        this.logger.warn("keywords option as map is deprecated, pass array");
        for (const keyword in defs) {
          const def = defs[keyword];
          if (!def.keyword)
            def.keyword = keyword;
          this.addKeyword(def);
        }
      }
      function getMetaSchemaOptions() {
        const metaOpts = { ...this.opts };
        for (const opt of META_IGNORE_OPTIONS)
          delete metaOpts[opt];
        return metaOpts;
      }
      var noLogs = { log() {
      }, warn() {
      }, error() {
      } };
      function getLogger(logger) {
        if (logger === false)
          return noLogs;
        if (logger === void 0)
          return console;
        if (logger.log && logger.warn && logger.error)
          return logger;
        throw new Error("logger must implement log, warn and error methods");
      }
      var KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
      function checkKeyword(keyword, def) {
        const { RULES } = this;
        (0, util_1.eachItem)(keyword, (kwd) => {
          if (RULES.keywords[kwd])
            throw new Error(`Keyword ${kwd} is already defined`);
          if (!KEYWORD_NAME.test(kwd))
            throw new Error(`Keyword ${kwd} has invalid name`);
        });
        if (!def)
          return;
        if (def.$data && !("code" in def || "validate" in def)) {
          throw new Error('$data keyword must have "code" or "validate" function');
        }
      }
      function addRule(keyword, definition, dataType) {
        var _a3;
        const post = definition === null || definition === void 0 ? void 0 : definition.post;
        if (dataType && post)
          throw new Error('keyword with "post" flag cannot have "type"');
        const { RULES } = this;
        let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
        if (!ruleGroup) {
          ruleGroup = { type: dataType, rules: [] };
          RULES.rules.push(ruleGroup);
        }
        RULES.keywords[keyword] = true;
        if (!definition)
          return;
        const rule = {
          keyword,
          definition: {
            ...definition,
            type: (0, dataType_1.getJSONTypes)(definition.type),
            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
          }
        };
        if (definition.before)
          addBeforeRule.call(this, ruleGroup, rule, definition.before);
        else
          ruleGroup.rules.push(rule);
        RULES.all[keyword] = rule;
        (_a3 = definition.implements) === null || _a3 === void 0 ? void 0 : _a3.forEach((kwd) => this.addKeyword(kwd));
      }
      function addBeforeRule(ruleGroup, rule, before) {
        const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
        if (i >= 0) {
          ruleGroup.rules.splice(i, 0, rule);
        } else {
          ruleGroup.rules.push(rule);
          this.logger.warn(`rule ${before} is not defined`);
        }
      }
      function keywordMetaschema(def) {
        let { metaSchema } = def;
        if (metaSchema === void 0)
          return;
        if (def.$data && this.opts.$data)
          metaSchema = schemaOrData(metaSchema);
        def.validateSchema = this.compile(metaSchema, true);
      }
      var $dataRef = {
        $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
      };
      function schemaOrData(schema2) {
        return { anyOf: [schema2, $dataRef] };
      }
    }
  });

  // node_modules/ajv/dist/vocabularies/core/id.js
  var require_id = __commonJS({
    "node_modules/ajv/dist/vocabularies/core/id.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var def = {
        keyword: "id",
        code() {
          throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/core/ref.js
  var require_ref = __commonJS({
    "node_modules/ajv/dist/vocabularies/core/ref.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.callRef = exports.getValidate = void 0;
      var ref_error_1 = require_ref_error();
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var compile_1 = require_compile();
      var util_1 = require_util3();
      var def = {
        keyword: "$ref",
        schemaType: "string",
        code(cxt) {
          const { gen, schema: $ref, it } = cxt;
          const { baseId, schemaEnv: env, validateName, opts, self: self2 } = it;
          const { root } = env;
          if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
            return callRootRef();
          const schOrEnv = compile_1.resolveRef.call(self2, root, baseId, $ref);
          if (schOrEnv === void 0)
            throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
          if (schOrEnv instanceof compile_1.SchemaEnv)
            return callValidate(schOrEnv);
          return inlineRefSchema(schOrEnv);
          function callRootRef() {
            if (env === root)
              return callRef(cxt, validateName, env, env.$async);
            const rootName = gen.scopeValue("root", { ref: root });
            return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);
          }
          function callValidate(sch) {
            const v = getValidate(cxt, sch);
            callRef(cxt, v, sch, sch.$async);
          }
          function inlineRefSchema(sch) {
            const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });
            const valid2 = gen.name("valid");
            const schCxt = cxt.subschema({
              schema: sch,
              dataTypes: [],
              schemaPath: codegen_1.nil,
              topSchemaRef: schName,
              errSchemaPath: $ref
            }, valid2);
            cxt.mergeEvaluated(schCxt);
            cxt.ok(valid2);
          }
        }
      };
      function getValidate(cxt, sch) {
        const { gen } = cxt;
        return sch.validate ? gen.scopeValue("validate", { ref: sch.validate }) : (0, codegen_1._)`${gen.scopeValue("wrapper", { ref: sch })}.validate`;
      }
      exports.getValidate = getValidate;
      function callRef(cxt, v, sch, $async) {
        const { gen, it } = cxt;
        const { allErrors, schemaEnv: env, opts } = it;
        const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
        if ($async)
          callAsyncRef();
        else
          callSyncRef();
        function callAsyncRef() {
          if (!env.$async)
            throw new Error("async schema referenced by sync schema");
          const valid2 = gen.let("valid");
          gen.try(() => {
            gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
            addEvaluatedFrom(v);
            if (!allErrors)
              gen.assign(valid2, true);
          }, (e) => {
            gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
            addErrorsFrom(e);
            if (!allErrors)
              gen.assign(valid2, false);
          });
          cxt.ok(valid2);
        }
        function callSyncRef() {
          cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
        }
        function addErrorsFrom(source2) {
          const errs = (0, codegen_1._)`${source2}.errors`;
          gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`);
          gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
        }
        function addEvaluatedFrom(source2) {
          var _a3;
          if (!it.opts.unevaluated)
            return;
          const schEvaluated = (_a3 = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a3 === void 0 ? void 0 : _a3.evaluated;
          if (it.props !== true) {
            if (schEvaluated && !schEvaluated.dynamicProps) {
              if (schEvaluated.props !== void 0) {
                it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
              }
            } else {
              const props = gen.var("props", (0, codegen_1._)`${source2}.evaluated.props`);
              it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
            }
          }
          if (it.items !== true) {
            if (schEvaluated && !schEvaluated.dynamicItems) {
              if (schEvaluated.items !== void 0) {
                it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
              }
            } else {
              const items = gen.var("items", (0, codegen_1._)`${source2}.evaluated.items`);
              it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
            }
          }
        }
      }
      exports.callRef = callRef;
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/core/index.js
  var require_core3 = __commonJS({
    "node_modules/ajv/dist/vocabularies/core/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var id_1 = require_id();
      var ref_1 = require_ref();
      var core = [
        "$schema",
        "$id",
        "$defs",
        "$vocabulary",
        { keyword: "$comment" },
        "definitions",
        id_1.default,
        ref_1.default
      ];
      exports.default = core;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/limitNumber.js
  var require_limitNumber = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/limitNumber.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var ops = codegen_1.operators;
      var KWDs = {
        maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
        minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
        exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
        exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
      };
      var error = {
        message: ({ keyword, schemaCode }) => (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
        params: ({ keyword, schemaCode }) => (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
      };
      var def = {
        keyword: Object.keys(KWDs),
        type: "number",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/multipleOf.js
  var require_multipleOf = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/multipleOf.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must be multiple of ${schemaCode}`,
        params: ({ schemaCode }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`
      };
      var def = {
        keyword: "multipleOf",
        type: "number",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, schemaCode, it } = cxt;
          const prec = it.opts.multipleOfPrecision;
          const res = gen.let("res");
          const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;
          cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/runtime/ucs2length.js
  var require_ucs2length = __commonJS({
    "node_modules/ajv/dist/runtime/ucs2length.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function ucs2length(str) {
        const len = str.length;
        let length = 0;
        let pos = 0;
        let value;
        while (pos < len) {
          length++;
          value = str.charCodeAt(pos++);
          if (value >= 55296 && value <= 56319 && pos < len) {
            value = str.charCodeAt(pos);
            if ((value & 64512) === 56320)
              pos++;
          }
        }
        return length;
      }
      exports.default = ucs2length;
      ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/limitLength.js
  var require_limitLength = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/limitLength.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var ucs2length_1 = require_ucs2length();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxLength" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxLength", "minLength"],
        type: "string",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode, it } = cxt;
          const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
          const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
          cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/pattern.js
  var require_pattern = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/pattern.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must match pattern "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1._)`{pattern: ${schemaCode}}`
      };
      var def = {
        keyword: "pattern",
        type: "string",
        schemaType: "string",
        $data: true,
        error,
        code(cxt) {
          const { data, $data, schema: schema2, schemaCode, it } = cxt;
          const u = it.opts.unicodeRegExp ? "u" : "";
          const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema2);
          cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/limitProperties.js
  var require_limitProperties = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/limitProperties.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxProperties" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxProperties", "minProperties"],
        type: "object",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
          cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/required.js
  var require_required = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/required.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var error = {
        message: ({ params: { missingProperty } }) => (0, codegen_1.str)`must have required property '${missingProperty}'`,
        params: ({ params: { missingProperty } }) => (0, codegen_1._)`{missingProperty: ${missingProperty}}`
      };
      var def = {
        keyword: "required",
        type: "object",
        schemaType: "array",
        $data: true,
        error,
        code(cxt) {
          const { gen, schema: schema2, schemaCode, data, $data, it } = cxt;
          const { opts } = it;
          if (!$data && schema2.length === 0)
            return;
          const useLoop = schema2.length >= opts.loopRequired;
          if (it.allErrors)
            allErrorsMode();
          else
            exitOnErrorMode();
          if (opts.strictRequired) {
            const props = cxt.parentSchema.properties;
            const { definedProperties } = cxt.it;
            for (const requiredKey of schema2) {
              if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === void 0 && !definedProperties.has(requiredKey)) {
                const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
              }
            }
          }
          function allErrorsMode() {
            if (useLoop || $data) {
              cxt.block$data(codegen_1.nil, loopAllRequired);
            } else {
              for (const prop of schema2) {
                (0, code_1.checkReportMissingProp)(cxt, prop);
              }
            }
          }
          function exitOnErrorMode() {
            const missing = gen.let("missing");
            if (useLoop || $data) {
              const valid2 = gen.let("valid", true);
              cxt.block$data(valid2, () => loopUntilMissing(missing, valid2));
              cxt.ok(valid2);
            } else {
              gen.if((0, code_1.checkMissingProp)(cxt, schema2, missing));
              (0, code_1.reportMissingProp)(cxt, missing);
              gen.else();
            }
          }
          function loopAllRequired() {
            gen.forOf("prop", schemaCode, (prop) => {
              cxt.setParams({ missingProperty: prop });
              gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
            });
          }
          function loopUntilMissing(missing, valid2) {
            cxt.setParams({ missingProperty: missing });
            gen.forOf(missing, schemaCode, () => {
              gen.assign(valid2, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
              gen.if((0, codegen_1.not)(valid2), () => {
                cxt.error();
                gen.break();
              });
            }, codegen_1.nil);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/limitItems.js
  var require_limitItems = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/limitItems.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxItems" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxItems", "minItems"],
        type: "array",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
          cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/runtime/equal.js
  var require_equal = __commonJS({
    "node_modules/ajv/dist/runtime/equal.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var equal = require_fast_deep_equal();
      equal.code = 'require("ajv/dist/runtime/equal").default';
      exports.default = equal;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/uniqueItems.js
  var require_uniqueItems = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/uniqueItems.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dataType_1 = require_dataType();
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var equal_1 = require_equal();
      var error = {
        message: ({ params: { i, j } }) => (0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
        params: ({ params: { i, j } }) => (0, codegen_1._)`{i: ${i}, j: ${j}}`
      };
      var def = {
        keyword: "uniqueItems",
        type: "array",
        schemaType: "boolean",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schema: schema2, parentSchema, schemaCode, it } = cxt;
          if (!$data && !schema2)
            return;
          const valid2 = gen.let("valid");
          const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
          cxt.block$data(valid2, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);
          cxt.ok(valid2);
          function validateUniqueItems() {
            const i = gen.let("i", (0, codegen_1._)`${data}.length`);
            const j = gen.let("j");
            cxt.setParams({ i, j });
            gen.assign(valid2, true);
            gen.if((0, codegen_1._)`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
          }
          function canOptimize() {
            return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
          }
          function loopN(i, j) {
            const item = gen.name("item");
            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
            const indices = gen.const("indices", (0, codegen_1._)`{}`);
            gen.for((0, codegen_1._)`;${i}--;`, () => {
              gen.let(item, (0, codegen_1._)`${data}[${i}]`);
              gen.if(wrongType, (0, codegen_1._)`continue`);
              if (itemTypes.length > 1)
                gen.if((0, codegen_1._)`typeof ${item} == "string"`, (0, codegen_1._)`${item} += "_"`);
              gen.if((0, codegen_1._)`typeof ${indices}[${item}] == "number"`, () => {
                gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);
                cxt.error();
                gen.assign(valid2, false).break();
              }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);
            });
          }
          function loopN2(i, j) {
            const eql = (0, util_1.useFunc)(gen, equal_1.default);
            const outer = gen.name("outer");
            gen.label(outer).for((0, codegen_1._)`;${i}--;`, () => gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, () => {
              cxt.error();
              gen.assign(valid2, false).break(outer);
            })));
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/const.js
  var require_const = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/const.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var equal_1 = require_equal();
      var error = {
        message: "must be equal to constant",
        params: ({ schemaCode }) => (0, codegen_1._)`{allowedValue: ${schemaCode}}`
      };
      var def = {
        keyword: "const",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schemaCode, schema: schema2 } = cxt;
          if ($data || schema2 && typeof schema2 == "object") {
            cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
          } else {
            cxt.fail((0, codegen_1._)`${schema2} !== ${data}`);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/enum.js
  var require_enum = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/enum.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var equal_1 = require_equal();
      var error = {
        message: "must be equal to one of the allowed values",
        params: ({ schemaCode }) => (0, codegen_1._)`{allowedValues: ${schemaCode}}`
      };
      var def = {
        keyword: "enum",
        schemaType: "array",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schema: schema2, schemaCode, it } = cxt;
          if (!$data && schema2.length === 0)
            throw new Error("enum must have non-empty array");
          const useLoop = schema2.length >= it.opts.loopEnum;
          let eql;
          const getEql = () => eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);
          let valid2;
          if (useLoop || $data) {
            valid2 = gen.let("valid");
            cxt.block$data(valid2, loopEnum);
          } else {
            if (!Array.isArray(schema2))
              throw new Error("ajv implementation error");
            const vSchema = gen.const("vSchema", schemaCode);
            valid2 = (0, codegen_1.or)(...schema2.map((_x, i) => equalCode(vSchema, i)));
          }
          cxt.pass(valid2);
          function loopEnum() {
            gen.assign(valid2, false);
            gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, () => gen.assign(valid2, true).break()));
          }
          function equalCode(vSchema, i) {
            const sch = schema2[i];
            return typeof sch === "object" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1._)`${data} === ${sch}`;
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/index.js
  var require_validation = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var limitNumber_1 = require_limitNumber();
      var multipleOf_1 = require_multipleOf();
      var limitLength_1 = require_limitLength();
      var pattern_1 = require_pattern();
      var limitProperties_1 = require_limitProperties();
      var required_1 = require_required();
      var limitItems_1 = require_limitItems();
      var uniqueItems_1 = require_uniqueItems();
      var const_1 = require_const();
      var enum_1 = require_enum();
      var validation = [
        limitNumber_1.default,
        multipleOf_1.default,
        limitLength_1.default,
        pattern_1.default,
        limitProperties_1.default,
        required_1.default,
        limitItems_1.default,
        uniqueItems_1.default,
        { keyword: "type", schemaType: ["string", "array"] },
        { keyword: "nullable", schemaType: "boolean" },
        const_1.default,
        enum_1.default
      ];
      exports.default = validation;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/additionalItems.js
  var require_additionalItems = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/additionalItems.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateAdditionalItems = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var error = {
        message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
      };
      var def = {
        keyword: "additionalItems",
        type: "array",
        schemaType: ["boolean", "object"],
        before: "uniqueItems",
        error,
        code(cxt) {
          const { parentSchema, it } = cxt;
          const { items } = parentSchema;
          if (!Array.isArray(items)) {
            (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
            return;
          }
          validateAdditionalItems(cxt, items);
        }
      };
      function validateAdditionalItems(cxt, items) {
        const { gen, schema: schema2, data, keyword, it } = cxt;
        it.items = true;
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        if (schema2 === false) {
          cxt.setParams({ len: items.length });
          cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
        } else if (typeof schema2 == "object" && !(0, util_1.alwaysValidSchema)(it, schema2)) {
          const valid2 = gen.var("valid", (0, codegen_1._)`${len} <= ${items.length}`);
          gen.if((0, codegen_1.not)(valid2), () => validateItems(valid2));
          cxt.ok(valid2);
        }
        function validateItems(valid2) {
          gen.forRange("i", items.length, len, (i) => {
            cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid2);
            if (!it.allErrors)
              gen.if((0, codegen_1.not)(valid2), () => gen.break());
          });
        }
      }
      exports.validateAdditionalItems = validateAdditionalItems;
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/items.js
  var require_items = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/items.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateTuple = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var code_1 = require_code2();
      var def = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "array", "boolean"],
        before: "uniqueItems",
        code(cxt) {
          const { schema: schema2, it } = cxt;
          if (Array.isArray(schema2))
            return validateTuple(cxt, "additionalItems", schema2);
          it.items = true;
          if ((0, util_1.alwaysValidSchema)(it, schema2))
            return;
          cxt.ok((0, code_1.validateArray)(cxt));
        }
      };
      function validateTuple(cxt, extraItems, schArr = cxt.schema) {
        const { gen, parentSchema, data, keyword, it } = cxt;
        checkStrictTuple(parentSchema);
        if (it.opts.unevaluated && schArr.length && it.items !== true) {
          it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
        }
        const valid2 = gen.name("valid");
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        schArr.forEach((sch, i) => {
          if ((0, util_1.alwaysValidSchema)(it, sch))
            return;
          gen.if((0, codegen_1._)`${len} > ${i}`, () => cxt.subschema({
            keyword,
            schemaProp: i,
            dataProp: i
          }, valid2));
          cxt.ok(valid2);
        });
        function checkStrictTuple(sch) {
          const { opts, errSchemaPath } = it;
          const l = schArr.length;
          const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
          if (opts.strictTuples && !fullTuple) {
            const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
          }
        }
      }
      exports.validateTuple = validateTuple;
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/prefixItems.js
  var require_prefixItems = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/prefixItems.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var items_1 = require_items();
      var def = {
        keyword: "prefixItems",
        type: "array",
        schemaType: ["array"],
        before: "uniqueItems",
        code: (cxt) => (0, items_1.validateTuple)(cxt, "items")
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/items2020.js
  var require_items2020 = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/items2020.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var code_1 = require_code2();
      var additionalItems_1 = require_additionalItems();
      var error = {
        message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
      };
      var def = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        error,
        code(cxt) {
          const { schema: schema2, parentSchema, it } = cxt;
          const { prefixItems } = parentSchema;
          it.items = true;
          if ((0, util_1.alwaysValidSchema)(it, schema2))
            return;
          if (prefixItems)
            (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
          else
            cxt.ok((0, code_1.validateArray)(cxt));
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/contains.js
  var require_contains = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/contains.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var error = {
        message: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
        params: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`
      };
      var def = {
        keyword: "contains",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema: schema2, parentSchema, data, it } = cxt;
          let min;
          let max;
          const { minContains, maxContains } = parentSchema;
          if (it.opts.next) {
            min = minContains === void 0 ? 1 : minContains;
            max = maxContains;
          } else {
            min = 1;
          }
          const len = gen.const("len", (0, codegen_1._)`${data}.length`);
          cxt.setParams({ min, max });
          if (max === void 0 && min === 0) {
            (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
            return;
          }
          if (max !== void 0 && min > max) {
            (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
            cxt.fail();
            return;
          }
          if ((0, util_1.alwaysValidSchema)(it, schema2)) {
            let cond = (0, codegen_1._)`${len} >= ${min}`;
            if (max !== void 0)
              cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
            cxt.pass(cond);
            return;
          }
          it.items = true;
          const valid2 = gen.name("valid");
          if (max === void 0 && min === 1) {
            validateItems(valid2, () => gen.if(valid2, () => gen.break()));
          } else if (min === 0) {
            gen.let(valid2, true);
            if (max !== void 0)
              gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);
          } else {
            gen.let(valid2, false);
            validateItemsWithCount();
          }
          cxt.result(valid2, () => cxt.reset());
          function validateItemsWithCount() {
            const schValid = gen.name("_valid");
            const count = gen.let("count", 0);
            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
          }
          function validateItems(_valid, block) {
            gen.forRange("i", 0, len, (i) => {
              cxt.subschema({
                keyword: "contains",
                dataProp: i,
                dataPropType: util_1.Type.Num,
                compositeRule: true
              }, _valid);
              block();
            });
          }
          function checkLimits(count) {
            gen.code((0, codegen_1._)`${count}++`);
            if (max === void 0) {
              gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid2, true).break());
            } else {
              gen.if((0, codegen_1._)`${count} > ${max}`, () => gen.assign(valid2, false).break());
              if (min === 1)
                gen.assign(valid2, true);
              else
                gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid2, true));
            }
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/dependencies.js
  var require_dependencies = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/dependencies.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var code_1 = require_code2();
      exports.error = {
        message: ({ params: { property, depsCount, deps } }) => {
          const property_ies = depsCount === 1 ? "property" : "properties";
          return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;
        },
        params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._)`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`
      };
      var def = {
        keyword: "dependencies",
        type: "object",
        schemaType: "object",
        error: exports.error,
        code(cxt) {
          const [propDeps, schDeps] = splitDependencies(cxt);
          validatePropertyDeps(cxt, propDeps);
          validateSchemaDeps(cxt, schDeps);
        }
      };
      function splitDependencies({ schema: schema2 }) {
        const propertyDeps = {};
        const schemaDeps = {};
        for (const key in schema2) {
          if (key === "__proto__")
            continue;
          const deps = Array.isArray(schema2[key]) ? propertyDeps : schemaDeps;
          deps[key] = schema2[key];
        }
        return [propertyDeps, schemaDeps];
      }
      function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
        const { gen, data, it } = cxt;
        if (Object.keys(propertyDeps).length === 0)
          return;
        const missing = gen.let("missing");
        for (const prop in propertyDeps) {
          const deps = propertyDeps[prop];
          if (deps.length === 0)
            continue;
          const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
          cxt.setParams({
            property: prop,
            depsCount: deps.length,
            deps: deps.join(", ")
          });
          if (it.allErrors) {
            gen.if(hasProperty, () => {
              for (const depProp of deps) {
                (0, code_1.checkReportMissingProp)(cxt, depProp);
              }
            });
          } else {
            gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
            (0, code_1.reportMissingProp)(cxt, missing);
            gen.else();
          }
        }
      }
      exports.validatePropertyDeps = validatePropertyDeps;
      function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
        const { gen, data, keyword, it } = cxt;
        const valid2 = gen.name("valid");
        for (const prop in schemaDeps) {
          if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
            continue;
          gen.if(
            (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties),
            () => {
              const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid2);
              cxt.mergeValidEvaluated(schCxt, valid2);
            },
            () => gen.var(valid2, true)
          );
          cxt.ok(valid2);
        }
      }
      exports.validateSchemaDeps = validateSchemaDeps;
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/propertyNames.js
  var require_propertyNames = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/propertyNames.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var error = {
        message: "property name must be valid",
        params: ({ params }) => (0, codegen_1._)`{propertyName: ${params.propertyName}}`
      };
      var def = {
        keyword: "propertyNames",
        type: "object",
        schemaType: ["object", "boolean"],
        error,
        code(cxt) {
          const { gen, schema: schema2, data, it } = cxt;
          if ((0, util_1.alwaysValidSchema)(it, schema2))
            return;
          const valid2 = gen.name("valid");
          gen.forIn("key", data, (key) => {
            cxt.setParams({ propertyName: key });
            cxt.subschema({
              keyword: "propertyNames",
              data: key,
              dataTypes: ["string"],
              propertyName: key,
              compositeRule: true
            }, valid2);
            gen.if((0, codegen_1.not)(valid2), () => {
              cxt.error(true);
              if (!it.allErrors)
                gen.break();
            });
          });
          cxt.ok(valid2);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js
  var require_additionalProperties = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var util_1 = require_util3();
      var error = {
        message: "must NOT have additional properties",
        params: ({ params }) => (0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`
      };
      var def = {
        keyword: "additionalProperties",
        type: ["object"],
        schemaType: ["boolean", "object"],
        allowUndefined: true,
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema: schema2, parentSchema, data, errsCount, it } = cxt;
          if (!errsCount)
            throw new Error("ajv implementation error");
          const { allErrors, opts } = it;
          it.props = true;
          if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema2))
            return;
          const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
          const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
          checkAdditionalProperties();
          cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
          function checkAdditionalProperties() {
            gen.forIn("key", data, (key) => {
              if (!props.length && !patProps.length)
                additionalPropertyCode(key);
              else
                gen.if(isAdditional(key), () => additionalPropertyCode(key));
            });
          }
          function isAdditional(key) {
            let definedProp;
            if (props.length > 8) {
              const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
              definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
            } else if (props.length) {
              definedProp = (0, codegen_1.or)(...props.map((p) => (0, codegen_1._)`${key} === ${p}`));
            } else {
              definedProp = codegen_1.nil;
            }
            if (patProps.length) {
              definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p) => (0, codegen_1._)`${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
            }
            return (0, codegen_1.not)(definedProp);
          }
          function deleteAdditional(key) {
            gen.code((0, codegen_1._)`delete ${data}[${key}]`);
          }
          function additionalPropertyCode(key) {
            if (opts.removeAdditional === "all" || opts.removeAdditional && schema2 === false) {
              deleteAdditional(key);
              return;
            }
            if (schema2 === false) {
              cxt.setParams({ additionalProperty: key });
              cxt.error();
              if (!allErrors)
                gen.break();
              return;
            }
            if (typeof schema2 == "object" && !(0, util_1.alwaysValidSchema)(it, schema2)) {
              const valid2 = gen.name("valid");
              if (opts.removeAdditional === "failing") {
                applyAdditionalSchema(key, valid2, false);
                gen.if((0, codegen_1.not)(valid2), () => {
                  cxt.reset();
                  deleteAdditional(key);
                });
              } else {
                applyAdditionalSchema(key, valid2);
                if (!allErrors)
                  gen.if((0, codegen_1.not)(valid2), () => gen.break());
              }
            }
          }
          function applyAdditionalSchema(key, valid2, errors) {
            const subschema = {
              keyword: "additionalProperties",
              dataProp: key,
              dataPropType: util_1.Type.Str
            };
            if (errors === false) {
              Object.assign(subschema, {
                compositeRule: true,
                createErrors: false,
                allErrors: false
              });
            }
            cxt.subschema(subschema, valid2);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/properties.js
  var require_properties2 = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/properties.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var validate_1 = require_validate();
      var code_1 = require_code2();
      var util_1 = require_util3();
      var additionalProperties_1 = require_additionalProperties();
      var def = {
        keyword: "properties",
        type: "object",
        schemaType: "object",
        code(cxt) {
          const { gen, schema: schema2, parentSchema, data, it } = cxt;
          if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === void 0) {
            additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
          }
          const allProps = (0, code_1.allSchemaProperties)(schema2);
          for (const prop of allProps) {
            it.definedProperties.add(prop);
          }
          if (it.opts.unevaluated && allProps.length && it.props !== true) {
            it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
          }
          const properties = allProps.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema2[p]));
          if (properties.length === 0)
            return;
          const valid2 = gen.name("valid");
          for (const prop of properties) {
            if (hasDefault(prop)) {
              applyPropertySchema(prop);
            } else {
              gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
              applyPropertySchema(prop);
              if (!it.allErrors)
                gen.else().var(valid2, true);
              gen.endIf();
            }
            cxt.it.definedProperties.add(prop);
            cxt.ok(valid2);
          }
          function hasDefault(prop) {
            return it.opts.useDefaults && !it.compositeRule && schema2[prop].default !== void 0;
          }
          function applyPropertySchema(prop) {
            cxt.subschema({
              keyword: "properties",
              schemaProp: prop,
              dataProp: prop
            }, valid2);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/patternProperties.js
  var require_patternProperties = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/patternProperties.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var util_2 = require_util3();
      var def = {
        keyword: "patternProperties",
        type: "object",
        schemaType: "object",
        code(cxt) {
          const { gen, schema: schema2, data, parentSchema, it } = cxt;
          const { opts } = it;
          const patterns = (0, code_1.allSchemaProperties)(schema2);
          const alwaysValidPatterns = patterns.filter((p) => (0, util_1.alwaysValidSchema)(it, schema2[p]));
          if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {
            return;
          }
          const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
          const valid2 = gen.name("valid");
          if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
            it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
          }
          const { props } = it;
          validatePatternProperties();
          function validatePatternProperties() {
            for (const pat of patterns) {
              if (checkProperties)
                checkMatchingProperties(pat);
              if (it.allErrors) {
                validateProperties(pat);
              } else {
                gen.var(valid2, true);
                validateProperties(pat);
                gen.if(valid2);
              }
            }
          }
          function checkMatchingProperties(pat) {
            for (const prop in checkProperties) {
              if (new RegExp(pat).test(prop)) {
                (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
              }
            }
          }
          function validateProperties(pat) {
            gen.forIn("key", data, (key) => {
              gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
                const alwaysValid = alwaysValidPatterns.includes(pat);
                if (!alwaysValid) {
                  cxt.subschema({
                    keyword: "patternProperties",
                    schemaProp: pat,
                    dataProp: key,
                    dataPropType: util_2.Type.Str
                  }, valid2);
                }
                if (it.opts.unevaluated && props !== true) {
                  gen.assign((0, codegen_1._)`${props}[${key}]`, true);
                } else if (!alwaysValid && !it.allErrors) {
                  gen.if((0, codegen_1.not)(valid2), () => gen.break());
                }
              });
            });
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/not.js
  var require_not = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/not.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var util_1 = require_util3();
      var def = {
        keyword: "not",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        code(cxt) {
          const { gen, schema: schema2, it } = cxt;
          if ((0, util_1.alwaysValidSchema)(it, schema2)) {
            cxt.fail();
            return;
          }
          const valid2 = gen.name("valid");
          cxt.subschema({
            keyword: "not",
            compositeRule: true,
            createErrors: false,
            allErrors: false
          }, valid2);
          cxt.failResult(valid2, () => cxt.reset(), () => cxt.error());
        },
        error: { message: "must NOT be valid" }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/anyOf.js
  var require_anyOf = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/anyOf.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var code_1 = require_code2();
      var def = {
        keyword: "anyOf",
        schemaType: "array",
        trackErrors: true,
        code: code_1.validateUnion,
        error: { message: "must match a schema in anyOf" }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/oneOf.js
  var require_oneOf = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/oneOf.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var error = {
        message: "must match exactly one schema in oneOf",
        params: ({ params }) => (0, codegen_1._)`{passingSchemas: ${params.passing}}`
      };
      var def = {
        keyword: "oneOf",
        schemaType: "array",
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema: schema2, parentSchema, it } = cxt;
          if (!Array.isArray(schema2))
            throw new Error("ajv implementation error");
          if (it.opts.discriminator && parentSchema.discriminator)
            return;
          const schArr = schema2;
          const valid2 = gen.let("valid", false);
          const passing = gen.let("passing", null);
          const schValid = gen.name("_valid");
          cxt.setParams({ passing });
          gen.block(validateOneOf);
          cxt.result(valid2, () => cxt.reset(), () => cxt.error(true));
          function validateOneOf() {
            schArr.forEach((sch, i) => {
              let schCxt;
              if ((0, util_1.alwaysValidSchema)(it, sch)) {
                gen.var(schValid, true);
              } else {
                schCxt = cxt.subschema({
                  keyword: "oneOf",
                  schemaProp: i,
                  compositeRule: true
                }, schValid);
              }
              if (i > 0) {
                gen.if((0, codegen_1._)`${schValid} && ${valid2}`).assign(valid2, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();
              }
              gen.if(schValid, () => {
                gen.assign(valid2, true);
                gen.assign(passing, i);
                if (schCxt)
                  cxt.mergeEvaluated(schCxt, codegen_1.Name);
              });
            });
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/allOf.js
  var require_allOf = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/allOf.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var util_1 = require_util3();
      var def = {
        keyword: "allOf",
        schemaType: "array",
        code(cxt) {
          const { gen, schema: schema2, it } = cxt;
          if (!Array.isArray(schema2))
            throw new Error("ajv implementation error");
          const valid2 = gen.name("valid");
          schema2.forEach((sch, i) => {
            if ((0, util_1.alwaysValidSchema)(it, sch))
              return;
            const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid2);
            cxt.ok(valid2);
            cxt.mergeEvaluated(schCxt);
          });
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/if.js
  var require_if = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/if.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var error = {
        message: ({ params }) => (0, codegen_1.str)`must match "${params.ifClause}" schema`,
        params: ({ params }) => (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`
      };
      var def = {
        keyword: "if",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, parentSchema, it } = cxt;
          if (parentSchema.then === void 0 && parentSchema.else === void 0) {
            (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
          }
          const hasThen = hasSchema(it, "then");
          const hasElse = hasSchema(it, "else");
          if (!hasThen && !hasElse)
            return;
          const valid2 = gen.let("valid", true);
          const schValid = gen.name("_valid");
          validateIf();
          cxt.reset();
          if (hasThen && hasElse) {
            const ifClause = gen.let("ifClause");
            cxt.setParams({ ifClause });
            gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
          } else if (hasThen) {
            gen.if(schValid, validateClause("then"));
          } else {
            gen.if((0, codegen_1.not)(schValid), validateClause("else"));
          }
          cxt.pass(valid2, () => cxt.error(true));
          function validateIf() {
            const schCxt = cxt.subschema({
              keyword: "if",
              compositeRule: true,
              createErrors: false,
              allErrors: false
            }, schValid);
            cxt.mergeEvaluated(schCxt);
          }
          function validateClause(keyword, ifClause) {
            return () => {
              const schCxt = cxt.subschema({ keyword }, schValid);
              gen.assign(valid2, schValid);
              cxt.mergeValidEvaluated(schCxt, valid2);
              if (ifClause)
                gen.assign(ifClause, (0, codegen_1._)`${keyword}`);
              else
                cxt.setParams({ ifClause: keyword });
            };
          }
        }
      };
      function hasSchema(it, keyword) {
        const schema2 = it.schema[keyword];
        return schema2 !== void 0 && !(0, util_1.alwaysValidSchema)(it, schema2);
      }
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/thenElse.js
  var require_thenElse = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/thenElse.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var util_1 = require_util3();
      var def = {
        keyword: ["then", "else"],
        schemaType: ["object", "boolean"],
        code({ keyword, parentSchema, it }) {
          if (parentSchema.if === void 0)
            (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/index.js
  var require_applicator = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var additionalItems_1 = require_additionalItems();
      var prefixItems_1 = require_prefixItems();
      var items_1 = require_items();
      var items2020_1 = require_items2020();
      var contains_1 = require_contains();
      var dependencies_1 = require_dependencies();
      var propertyNames_1 = require_propertyNames();
      var additionalProperties_1 = require_additionalProperties();
      var properties_1 = require_properties2();
      var patternProperties_1 = require_patternProperties();
      var not_1 = require_not();
      var anyOf_1 = require_anyOf();
      var oneOf_1 = require_oneOf();
      var allOf_1 = require_allOf();
      var if_1 = require_if();
      var thenElse_1 = require_thenElse();
      function getApplicator(draft2020 = false) {
        const applicator = [
          not_1.default,
          anyOf_1.default,
          oneOf_1.default,
          allOf_1.default,
          if_1.default,
          thenElse_1.default,
          propertyNames_1.default,
          additionalProperties_1.default,
          dependencies_1.default,
          properties_1.default,
          patternProperties_1.default
        ];
        if (draft2020)
          applicator.push(prefixItems_1.default, items2020_1.default);
        else
          applicator.push(additionalItems_1.default, items_1.default);
        applicator.push(contains_1.default);
        return applicator;
      }
      exports.default = getApplicator;
    }
  });

  // node_modules/ajv/dist/vocabularies/dynamic/dynamicAnchor.js
  var require_dynamicAnchor = __commonJS({
    "node_modules/ajv/dist/vocabularies/dynamic/dynamicAnchor.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.dynamicAnchor = void 0;
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var compile_1 = require_compile();
      var ref_1 = require_ref();
      var def = {
        keyword: "$dynamicAnchor",
        schemaType: "string",
        code: (cxt) => dynamicAnchor(cxt, cxt.schema)
      };
      function dynamicAnchor(cxt, anchor) {
        const { gen, it } = cxt;
        it.schemaEnv.root.dynamicAnchors[anchor] = true;
        const v = (0, codegen_1._)`${names_1.default.dynamicAnchors}${(0, codegen_1.getProperty)(anchor)}`;
        const validate = it.errSchemaPath === "#" ? it.validateName : _getValidate(cxt);
        gen.if((0, codegen_1._)`!${v}`, () => gen.assign(v, validate));
      }
      exports.dynamicAnchor = dynamicAnchor;
      function _getValidate(cxt) {
        const { schemaEnv, schema: schema2, self: self2 } = cxt.it;
        const { root, baseId, localRefs, meta } = schemaEnv.root;
        const { schemaId } = self2.opts;
        const sch = new compile_1.SchemaEnv({ schema: schema2, schemaId, root, baseId, localRefs, meta });
        compile_1.compileSchema.call(self2, sch);
        return (0, ref_1.getValidate)(cxt, sch);
      }
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/dynamic/dynamicRef.js
  var require_dynamicRef = __commonJS({
    "node_modules/ajv/dist/vocabularies/dynamic/dynamicRef.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.dynamicRef = void 0;
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var ref_1 = require_ref();
      var def = {
        keyword: "$dynamicRef",
        schemaType: "string",
        code: (cxt) => dynamicRef(cxt, cxt.schema)
      };
      function dynamicRef(cxt, ref) {
        const { gen, keyword, it } = cxt;
        if (ref[0] !== "#")
          throw new Error(`"${keyword}" only supports hash fragment reference`);
        const anchor = ref.slice(1);
        if (it.allErrors) {
          _dynamicRef();
        } else {
          const valid2 = gen.let("valid", false);
          _dynamicRef(valid2);
          cxt.ok(valid2);
        }
        function _dynamicRef(valid2) {
          if (it.schemaEnv.root.dynamicAnchors[anchor]) {
            const v = gen.let("_v", (0, codegen_1._)`${names_1.default.dynamicAnchors}${(0, codegen_1.getProperty)(anchor)}`);
            gen.if(v, _callRef(v, valid2), _callRef(it.validateName, valid2));
          } else {
            _callRef(it.validateName, valid2)();
          }
        }
        function _callRef(validate, valid2) {
          return valid2 ? () => gen.block(() => {
            (0, ref_1.callRef)(cxt, validate);
            gen.let(valid2, true);
          }) : () => (0, ref_1.callRef)(cxt, validate);
        }
      }
      exports.dynamicRef = dynamicRef;
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/dynamic/recursiveAnchor.js
  var require_recursiveAnchor = __commonJS({
    "node_modules/ajv/dist/vocabularies/dynamic/recursiveAnchor.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dynamicAnchor_1 = require_dynamicAnchor();
      var util_1 = require_util3();
      var def = {
        keyword: "$recursiveAnchor",
        schemaType: "boolean",
        code(cxt) {
          if (cxt.schema)
            (0, dynamicAnchor_1.dynamicAnchor)(cxt, "");
          else
            (0, util_1.checkStrictMode)(cxt.it, "$recursiveAnchor: false is ignored");
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/dynamic/recursiveRef.js
  var require_recursiveRef = __commonJS({
    "node_modules/ajv/dist/vocabularies/dynamic/recursiveRef.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dynamicRef_1 = require_dynamicRef();
      var def = {
        keyword: "$recursiveRef",
        schemaType: "string",
        code: (cxt) => (0, dynamicRef_1.dynamicRef)(cxt, cxt.schema)
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/dynamic/index.js
  var require_dynamic = __commonJS({
    "node_modules/ajv/dist/vocabularies/dynamic/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dynamicAnchor_1 = require_dynamicAnchor();
      var dynamicRef_1 = require_dynamicRef();
      var recursiveAnchor_1 = require_recursiveAnchor();
      var recursiveRef_1 = require_recursiveRef();
      var dynamic = [dynamicAnchor_1.default, dynamicRef_1.default, recursiveAnchor_1.default, recursiveRef_1.default];
      exports.default = dynamic;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/dependentRequired.js
  var require_dependentRequired = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/dependentRequired.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dependencies_1 = require_dependencies();
      var def = {
        keyword: "dependentRequired",
        type: "object",
        schemaType: "object",
        error: dependencies_1.error,
        code: (cxt) => (0, dependencies_1.validatePropertyDeps)(cxt)
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/dependentSchemas.js
  var require_dependentSchemas = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/dependentSchemas.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dependencies_1 = require_dependencies();
      var def = {
        keyword: "dependentSchemas",
        type: "object",
        schemaType: "object",
        code: (cxt) => (0, dependencies_1.validateSchemaDeps)(cxt)
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/limitContains.js
  var require_limitContains = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/limitContains.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var util_1 = require_util3();
      var def = {
        keyword: ["maxContains", "minContains"],
        type: "array",
        schemaType: "number",
        code({ keyword, parentSchema, it }) {
          if (parentSchema.contains === void 0) {
            (0, util_1.checkStrictMode)(it, `"${keyword}" without "contains" is ignored`);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/next.js
  var require_next = __commonJS({
    "node_modules/ajv/dist/vocabularies/next.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dependentRequired_1 = require_dependentRequired();
      var dependentSchemas_1 = require_dependentSchemas();
      var limitContains_1 = require_limitContains();
      var next = [dependentRequired_1.default, dependentSchemas_1.default, limitContains_1.default];
      exports.default = next;
    }
  });

  // node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedProperties.js
  var require_unevaluatedProperties = __commonJS({
    "node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedProperties.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var names_1 = require_names();
      var error = {
        message: "must NOT have unevaluated properties",
        params: ({ params }) => (0, codegen_1._)`{unevaluatedProperty: ${params.unevaluatedProperty}}`
      };
      var def = {
        keyword: "unevaluatedProperties",
        type: "object",
        schemaType: ["boolean", "object"],
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema: schema2, data, errsCount, it } = cxt;
          if (!errsCount)
            throw new Error("ajv implementation error");
          const { allErrors, props } = it;
          if (props instanceof codegen_1.Name) {
            gen.if((0, codegen_1._)`${props} !== true`, () => gen.forIn("key", data, (key) => gen.if(unevaluatedDynamic(props, key), () => unevaluatedPropCode(key))));
          } else if (props !== true) {
            gen.forIn("key", data, (key) => props === void 0 ? unevaluatedPropCode(key) : gen.if(unevaluatedStatic(props, key), () => unevaluatedPropCode(key)));
          }
          it.props = true;
          cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
          function unevaluatedPropCode(key) {
            if (schema2 === false) {
              cxt.setParams({ unevaluatedProperty: key });
              cxt.error();
              if (!allErrors)
                gen.break();
              return;
            }
            if (!(0, util_1.alwaysValidSchema)(it, schema2)) {
              const valid2 = gen.name("valid");
              cxt.subschema({
                keyword: "unevaluatedProperties",
                dataProp: key,
                dataPropType: util_1.Type.Str
              }, valid2);
              if (!allErrors)
                gen.if((0, codegen_1.not)(valid2), () => gen.break());
            }
          }
          function unevaluatedDynamic(evaluatedProps, key) {
            return (0, codegen_1._)`!${evaluatedProps} || !${evaluatedProps}[${key}]`;
          }
          function unevaluatedStatic(evaluatedProps, key) {
            const ps = [];
            for (const p in evaluatedProps) {
              if (evaluatedProps[p] === true)
                ps.push((0, codegen_1._)`${key} !== ${p}`);
            }
            return (0, codegen_1.and)(...ps);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedItems.js
  var require_unevaluatedItems = __commonJS({
    "node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedItems.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util3();
      var error = {
        message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
      };
      var def = {
        keyword: "unevaluatedItems",
        type: "array",
        schemaType: ["boolean", "object"],
        error,
        code(cxt) {
          const { gen, schema: schema2, data, it } = cxt;
          const items = it.items || 0;
          if (items === true)
            return;
          const len = gen.const("len", (0, codegen_1._)`${data}.length`);
          if (schema2 === false) {
            cxt.setParams({ len: items });
            cxt.fail((0, codegen_1._)`${len} > ${items}`);
          } else if (typeof schema2 == "object" && !(0, util_1.alwaysValidSchema)(it, schema2)) {
            const valid2 = gen.var("valid", (0, codegen_1._)`${len} <= ${items}`);
            gen.if((0, codegen_1.not)(valid2), () => validateItems(valid2, items));
            cxt.ok(valid2);
          }
          it.items = true;
          function validateItems(valid2, from) {
            gen.forRange("i", from, len, (i) => {
              cxt.subschema({ keyword: "unevaluatedItems", dataProp: i, dataPropType: util_1.Type.Num }, valid2);
              if (!it.allErrors)
                gen.if((0, codegen_1.not)(valid2), () => gen.break());
            });
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/unevaluated/index.js
  var require_unevaluated = __commonJS({
    "node_modules/ajv/dist/vocabularies/unevaluated/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var unevaluatedProperties_1 = require_unevaluatedProperties();
      var unevaluatedItems_1 = require_unevaluatedItems();
      var unevaluated = [unevaluatedProperties_1.default, unevaluatedItems_1.default];
      exports.default = unevaluated;
    }
  });

  // node_modules/ajv/dist/vocabularies/format/format.js
  var require_format = __commonJS({
    "node_modules/ajv/dist/vocabularies/format/format.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must match format "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1._)`{format: ${schemaCode}}`
      };
      var def = {
        keyword: "format",
        type: ["number", "string"],
        schemaType: "string",
        $data: true,
        error,
        code(cxt, ruleType) {
          const { gen, data, $data, schema: schema2, schemaCode, it } = cxt;
          const { opts, errSchemaPath, schemaEnv, self: self2 } = it;
          if (!opts.validateFormats)
            return;
          if ($data)
            validate$DataFormat();
          else
            validateFormat();
          function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
              ref: self2.formats,
              code: opts.code.formats
            });
            const fDef = gen.const("fDef", (0, codegen_1._)`${fmts}[${schemaCode}]`);
            const fType = gen.let("fType");
            const format2 = gen.let("format");
            gen.if((0, codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || "string"`).assign(format2, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`"string"`).assign(format2, fDef));
            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
            function unknownFmt() {
              if (opts.strictSchema === false)
                return codegen_1.nil;
              return (0, codegen_1._)`${schemaCode} && !${format2}`;
            }
            function invalidFmt() {
              const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format2}(${data}) : ${format2}(${data}))` : (0, codegen_1._)`${format2}(${data})`;
              const validData = (0, codegen_1._)`(typeof ${format2} == "function" ? ${callFormat} : ${format2}.test(${data}))`;
              return (0, codegen_1._)`${format2} && ${format2} !== true && ${fType} === ${ruleType} && !${validData}`;
            }
          }
          function validateFormat() {
            const formatDef = self2.formats[schema2];
            if (!formatDef) {
              unknownFormat();
              return;
            }
            if (formatDef === true)
              return;
            const [fmtType, format2, fmtRef] = getFormat(formatDef);
            if (fmtType === ruleType)
              cxt.pass(validCondition());
            function unknownFormat() {
              if (opts.strictSchema === false) {
                self2.logger.warn(unknownMsg());
                return;
              }
              throw new Error(unknownMsg());
              function unknownMsg() {
                return `unknown format "${schema2}" ignored in schema at path "${errSchemaPath}"`;
              }
            }
            function getFormat(fmtDef) {
              const code2 = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema2)}` : void 0;
              const fmt = gen.scopeValue("formats", { key: schema2, ref: fmtDef, code: code2 });
              if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];
              }
              return ["string", fmtDef, fmt];
            }
            function validCondition() {
              if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                if (!schemaEnv.$async)
                  throw new Error("async format in sync schema");
                return (0, codegen_1._)`await ${fmtRef}(${data})`;
              }
              return typeof format2 == "function" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;
            }
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/format/index.js
  var require_format2 = __commonJS({
    "node_modules/ajv/dist/vocabularies/format/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var format_1 = require_format();
      var format2 = [format_1.default];
      exports.default = format2;
    }
  });

  // node_modules/ajv/dist/vocabularies/metadata.js
  var require_metadata = __commonJS({
    "node_modules/ajv/dist/vocabularies/metadata.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.contentVocabulary = exports.metadataVocabulary = void 0;
      exports.metadataVocabulary = [
        "title",
        "description",
        "default",
        "deprecated",
        "readOnly",
        "writeOnly",
        "examples"
      ];
      exports.contentVocabulary = [
        "contentMediaType",
        "contentEncoding",
        "contentSchema"
      ];
    }
  });

  // node_modules/ajv/dist/vocabularies/draft2020.js
  var require_draft2020 = __commonJS({
    "node_modules/ajv/dist/vocabularies/draft2020.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var core_1 = require_core3();
      var validation_1 = require_validation();
      var applicator_1 = require_applicator();
      var dynamic_1 = require_dynamic();
      var next_1 = require_next();
      var unevaluated_1 = require_unevaluated();
      var format_1 = require_format2();
      var metadata_1 = require_metadata();
      var draft2020Vocabularies = [
        dynamic_1.default,
        core_1.default,
        validation_1.default,
        (0, applicator_1.default)(true),
        format_1.default,
        metadata_1.metadataVocabulary,
        metadata_1.contentVocabulary,
        next_1.default,
        unevaluated_1.default
      ];
      exports.default = draft2020Vocabularies;
    }
  });

  // node_modules/ajv/dist/vocabularies/discriminator/types.js
  var require_types2 = __commonJS({
    "node_modules/ajv/dist/vocabularies/discriminator/types.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscrError = void 0;
      var DiscrError;
      (function(DiscrError2) {
        DiscrError2["Tag"] = "tag";
        DiscrError2["Mapping"] = "mapping";
      })(DiscrError = exports.DiscrError || (exports.DiscrError = {}));
    }
  });

  // node_modules/ajv/dist/vocabularies/discriminator/index.js
  var require_discriminator = __commonJS({
    "node_modules/ajv/dist/vocabularies/discriminator/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var types_1 = require_types2();
      var compile_1 = require_compile();
      var util_1 = require_util3();
      var error = {
        message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag ? `tag "${tagName}" must be string` : `value of tag "${tagName}" must be in oneOf`,
        params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`
      };
      var def = {
        keyword: "discriminator",
        type: "object",
        schemaType: "object",
        error,
        code(cxt) {
          const { gen, data, schema: schema2, parentSchema, it } = cxt;
          const { oneOf } = parentSchema;
          if (!it.opts.discriminator) {
            throw new Error("discriminator: requires discriminator option");
          }
          const tagName = schema2.propertyName;
          if (typeof tagName != "string")
            throw new Error("discriminator: requires propertyName");
          if (schema2.mapping)
            throw new Error("discriminator: mapping is not supported");
          if (!oneOf)
            throw new Error("discriminator: requires oneOf keyword");
          const valid2 = gen.let("valid", false);
          const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);
          gen.if((0, codegen_1._)`typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));
          cxt.ok(valid2);
          function validateMapping() {
            const mapping = getMapping();
            gen.if(false);
            for (const tagValue in mapping) {
              gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
              gen.assign(valid2, applyTagSchema(mapping[tagValue]));
            }
            gen.else();
            cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });
            gen.endIf();
          }
          function applyTagSchema(schemaProp) {
            const _valid = gen.name("valid");
            const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
            cxt.mergeEvaluated(schCxt, codegen_1.Name);
            return _valid;
          }
          function getMapping() {
            var _a3;
            const oneOfMapping = {};
            const topRequired = hasRequired(parentSchema);
            let tagRequired = true;
            for (let i = 0; i < oneOf.length; i++) {
              let sch = oneOf[i];
              if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
                sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
                if (sch instanceof compile_1.SchemaEnv)
                  sch = sch.schema;
              }
              const propSch = (_a3 = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a3 === void 0 ? void 0 : _a3[tagName];
              if (typeof propSch != "object") {
                throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
              }
              tagRequired = tagRequired && (topRequired || hasRequired(sch));
              addMappings(propSch, i);
            }
            if (!tagRequired)
              throw new Error(`discriminator: "${tagName}" must be required`);
            return oneOfMapping;
            function hasRequired({ required }) {
              return Array.isArray(required) && required.includes(tagName);
            }
            function addMappings(sch, i) {
              if (sch.const) {
                addMapping(sch.const, i);
              } else if (sch.enum) {
                for (const tagValue of sch.enum) {
                  addMapping(tagValue, i);
                }
              } else {
                throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
              }
            }
            function addMapping(tagValue, i) {
              if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                throw new Error(`discriminator: "${tagName}" values must be unique strings`);
              }
              oneOfMapping[tagValue] = i;
            }
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/schema.json
  var require_schema = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/schema.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/schema",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/core": true,
          "https://json-schema.org/draft/2020-12/vocab/applicator": true,
          "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,
          "https://json-schema.org/draft/2020-12/vocab/validation": true,
          "https://json-schema.org/draft/2020-12/vocab/meta-data": true,
          "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,
          "https://json-schema.org/draft/2020-12/vocab/content": true
        },
        $dynamicAnchor: "meta",
        title: "Core and Validation specifications meta-schema",
        allOf: [
          { $ref: "meta/core" },
          { $ref: "meta/applicator" },
          { $ref: "meta/unevaluated" },
          { $ref: "meta/validation" },
          { $ref: "meta/meta-data" },
          { $ref: "meta/format-annotation" },
          { $ref: "meta/content" }
        ],
        type: ["object", "boolean"],
        $comment: "This meta-schema also defines keywords that have appeared in previous drafts in order to prevent incompatible extensions as they remain in common use.",
        properties: {
          definitions: {
            $comment: '"definitions" has been replaced by "$defs".',
            type: "object",
            additionalProperties: { $dynamicRef: "#meta" },
            deprecated: true,
            default: {}
          },
          dependencies: {
            $comment: '"dependencies" has been split and replaced by "dependentSchemas" and "dependentRequired" in order to serve their differing semantics.',
            type: "object",
            additionalProperties: {
              anyOf: [{ $dynamicRef: "#meta" }, { $ref: "meta/validation#/$defs/stringArray" }]
            },
            deprecated: true,
            default: {}
          },
          $recursiveAnchor: {
            $comment: '"$recursiveAnchor" has been replaced by "$dynamicAnchor".',
            $ref: "meta/core#/$defs/anchorString",
            deprecated: true
          },
          $recursiveRef: {
            $comment: '"$recursiveRef" has been replaced by "$dynamicRef".',
            $ref: "meta/core#/$defs/uriReferenceString",
            deprecated: true
          }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/applicator.json
  var require_applicator2 = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/applicator.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/applicator",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/applicator": true
        },
        $dynamicAnchor: "meta",
        title: "Applicator vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          prefixItems: { $ref: "#/$defs/schemaArray" },
          items: { $dynamicRef: "#meta" },
          contains: { $dynamicRef: "#meta" },
          additionalProperties: { $dynamicRef: "#meta" },
          properties: {
            type: "object",
            additionalProperties: { $dynamicRef: "#meta" },
            default: {}
          },
          patternProperties: {
            type: "object",
            additionalProperties: { $dynamicRef: "#meta" },
            propertyNames: { format: "regex" },
            default: {}
          },
          dependentSchemas: {
            type: "object",
            additionalProperties: { $dynamicRef: "#meta" },
            default: {}
          },
          propertyNames: { $dynamicRef: "#meta" },
          if: { $dynamicRef: "#meta" },
          then: { $dynamicRef: "#meta" },
          else: { $dynamicRef: "#meta" },
          allOf: { $ref: "#/$defs/schemaArray" },
          anyOf: { $ref: "#/$defs/schemaArray" },
          oneOf: { $ref: "#/$defs/schemaArray" },
          not: { $dynamicRef: "#meta" }
        },
        $defs: {
          schemaArray: {
            type: "array",
            minItems: 1,
            items: { $dynamicRef: "#meta" }
          }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/unevaluated.json
  var require_unevaluated2 = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/unevaluated.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/unevaluated",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/unevaluated": true
        },
        $dynamicAnchor: "meta",
        title: "Unevaluated applicator vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          unevaluatedItems: { $dynamicRef: "#meta" },
          unevaluatedProperties: { $dynamicRef: "#meta" }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/content.json
  var require_content = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/content.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/content",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/content": true
        },
        $dynamicAnchor: "meta",
        title: "Content vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          contentEncoding: { type: "string" },
          contentMediaType: { type: "string" },
          contentSchema: { $dynamicRef: "#meta" }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/core.json
  var require_core4 = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/core.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/core",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/core": true
        },
        $dynamicAnchor: "meta",
        title: "Core vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          $id: {
            $ref: "#/$defs/uriReferenceString",
            $comment: "Non-empty fragments not allowed.",
            pattern: "^[^#]*#?$"
          },
          $schema: { $ref: "#/$defs/uriString" },
          $ref: { $ref: "#/$defs/uriReferenceString" },
          $anchor: { $ref: "#/$defs/anchorString" },
          $dynamicRef: { $ref: "#/$defs/uriReferenceString" },
          $dynamicAnchor: { $ref: "#/$defs/anchorString" },
          $vocabulary: {
            type: "object",
            propertyNames: { $ref: "#/$defs/uriString" },
            additionalProperties: {
              type: "boolean"
            }
          },
          $comment: {
            type: "string"
          },
          $defs: {
            type: "object",
            additionalProperties: { $dynamicRef: "#meta" }
          }
        },
        $defs: {
          anchorString: {
            type: "string",
            pattern: "^[A-Za-z_][-A-Za-z0-9._]*$"
          },
          uriString: {
            type: "string",
            format: "uri"
          },
          uriReferenceString: {
            type: "string",
            format: "uri-reference"
          }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/format-annotation.json
  var require_format_annotation = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/format-annotation.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/format-annotation",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/format-annotation": true
        },
        $dynamicAnchor: "meta",
        title: "Format vocabulary meta-schema for annotation results",
        type: ["object", "boolean"],
        properties: {
          format: { type: "string" }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/meta-data.json
  var require_meta_data = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/meta-data.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/meta-data",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/meta-data": true
        },
        $dynamicAnchor: "meta",
        title: "Meta-data vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          title: {
            type: "string"
          },
          description: {
            type: "string"
          },
          default: true,
          deprecated: {
            type: "boolean",
            default: false
          },
          readOnly: {
            type: "boolean",
            default: false
          },
          writeOnly: {
            type: "boolean",
            default: false
          },
          examples: {
            type: "array",
            items: true
          }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/validation.json
  var require_validation2 = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/validation.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/validation",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/validation": true
        },
        $dynamicAnchor: "meta",
        title: "Validation vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          type: {
            anyOf: [
              { $ref: "#/$defs/simpleTypes" },
              {
                type: "array",
                items: { $ref: "#/$defs/simpleTypes" },
                minItems: 1,
                uniqueItems: true
              }
            ]
          },
          const: true,
          enum: {
            type: "array",
            items: true
          },
          multipleOf: {
            type: "number",
            exclusiveMinimum: 0
          },
          maximum: {
            type: "number"
          },
          exclusiveMaximum: {
            type: "number"
          },
          minimum: {
            type: "number"
          },
          exclusiveMinimum: {
            type: "number"
          },
          maxLength: { $ref: "#/$defs/nonNegativeInteger" },
          minLength: { $ref: "#/$defs/nonNegativeIntegerDefault0" },
          pattern: {
            type: "string",
            format: "regex"
          },
          maxItems: { $ref: "#/$defs/nonNegativeInteger" },
          minItems: { $ref: "#/$defs/nonNegativeIntegerDefault0" },
          uniqueItems: {
            type: "boolean",
            default: false
          },
          maxContains: { $ref: "#/$defs/nonNegativeInteger" },
          minContains: {
            $ref: "#/$defs/nonNegativeInteger",
            default: 1
          },
          maxProperties: { $ref: "#/$defs/nonNegativeInteger" },
          minProperties: { $ref: "#/$defs/nonNegativeIntegerDefault0" },
          required: { $ref: "#/$defs/stringArray" },
          dependentRequired: {
            type: "object",
            additionalProperties: {
              $ref: "#/$defs/stringArray"
            }
          }
        },
        $defs: {
          nonNegativeInteger: {
            type: "integer",
            minimum: 0
          },
          nonNegativeIntegerDefault0: {
            $ref: "#/$defs/nonNegativeInteger",
            default: 0
          },
          simpleTypes: {
            enum: ["array", "boolean", "integer", "null", "number", "object", "string"]
          },
          stringArray: {
            type: "array",
            items: { type: "string" },
            uniqueItems: true,
            default: []
          }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/index.js
  var require_json_schema_2020_12 = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var metaSchema = require_schema();
      var applicator = require_applicator2();
      var unevaluated = require_unevaluated2();
      var content = require_content();
      var core = require_core4();
      var format2 = require_format_annotation();
      var metadata = require_meta_data();
      var validation = require_validation2();
      var META_SUPPORT_DATA = ["/properties"];
      function addMetaSchema2020($data) {
        ;
        [
          metaSchema,
          applicator,
          unevaluated,
          content,
          core,
          with$data(this, format2),
          metadata,
          with$data(this, validation)
        ].forEach((sch) => this.addMetaSchema(sch, void 0, false));
        return this;
        function with$data(ajv, sch) {
          return $data ? ajv.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch;
        }
      }
      exports.default = addMetaSchema2020;
    }
  });

  // node_modules/ajv/dist/2020.js
  var require__ = __commonJS({
    "node_modules/ajv/dist/2020.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
      var core_1 = require_core2();
      var draft2020_1 = require_draft2020();
      var discriminator_1 = require_discriminator();
      var json_schema_2020_12_1 = require_json_schema_2020_12();
      var META_SCHEMA_ID = "https://json-schema.org/draft/2020-12/schema";
      var Ajv2020 = class extends core_1.default {
        constructor(opts = {}) {
          super({
            ...opts,
            dynamicRef: true,
            next: true,
            unevaluated: true
          });
        }
        _addVocabularies() {
          super._addVocabularies();
          draft2020_1.default.forEach((v) => this.addVocabulary(v));
          if (this.opts.discriminator)
            this.addKeyword(discriminator_1.default);
        }
        _addDefaultMetaSchema() {
          super._addDefaultMetaSchema();
          const { $data, meta } = this.opts;
          if (!meta)
            return;
          json_schema_2020_12_1.default.call(this, $data);
          this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
        }
        defaultMeta() {
          return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
        }
      };
      module.exports = exports = Ajv2020;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = Ajv2020;
      var validate_1 = require_validate();
      Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
        return validate_1.KeywordCxt;
      } });
      var codegen_1 = require_codegen();
      Object.defineProperty(exports, "_", { enumerable: true, get: function() {
        return codegen_1._;
      } });
      Object.defineProperty(exports, "str", { enumerable: true, get: function() {
        return codegen_1.str;
      } });
      Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
        return codegen_1.stringify;
      } });
      Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
        return codegen_1.nil;
      } });
      Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
        return codegen_1.Name;
      } });
      Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
        return codegen_1.CodeGen;
      } });
    }
  });

  // node_modules/sprintf-js/src/sprintf.js
  var require_sprintf = __commonJS({
    "node_modules/sprintf-js/src/sprintf.js"(exports) {
      init_globals();
      !function() {
        "use strict";
        var re4 = {
          not_string: /[^s]/,
          not_bool: /[^t]/,
          not_type: /[^T]/,
          not_primitive: /[^v]/,
          number: /[diefg]/,
          numeric_arg: /[bcdiefguxX]/,
          json: /[j]/,
          not_json: /[^j]/,
          text: /^[^\x25]+/,
          modulo: /^\x25{2}/,
          placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
          key: /^([a-z_][a-z_\d]*)/i,
          key_access: /^\.([a-z_][a-z_\d]*)/i,
          index_access: /^\[(\d+)\]/,
          sign: /^[+-]/
        };
        function sprintf2(key) {
          return sprintf_format(sprintf_parse(key), arguments);
        }
        function vsprintf(fmt, argv) {
          return sprintf2.apply(null, [fmt].concat(argv || []));
        }
        function sprintf_format(parse_tree, argv) {
          var cursor = 1, tree_length = parse_tree.length, arg, output = "", i, k, ph, pad2, pad_character, pad_length, is_positive, sign;
          for (i = 0; i < tree_length; i++) {
            if (typeof parse_tree[i] === "string") {
              output += parse_tree[i];
            } else if (typeof parse_tree[i] === "object") {
              ph = parse_tree[i];
              if (ph.keys) {
                arg = argv[cursor];
                for (k = 0; k < ph.keys.length; k++) {
                  if (arg == void 0) {
                    throw new Error(sprintf2('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k - 1]));
                  }
                  arg = arg[ph.keys[k]];
                }
              } else if (ph.param_no) {
                arg = argv[ph.param_no];
              } else {
                arg = argv[cursor++];
              }
              if (re4.not_type.test(ph.type) && re4.not_primitive.test(ph.type) && arg instanceof Function) {
                arg = arg();
              }
              if (re4.numeric_arg.test(ph.type) && (typeof arg !== "number" && isNaN(arg))) {
                throw new TypeError(sprintf2("[sprintf] expecting number but found %T", arg));
              }
              if (re4.number.test(ph.type)) {
                is_positive = arg >= 0;
              }
              switch (ph.type) {
                case "b":
                  arg = parseInt(arg, 10).toString(2);
                  break;
                case "c":
                  arg = String.fromCharCode(parseInt(arg, 10));
                  break;
                case "d":
                case "i":
                  arg = parseInt(arg, 10);
                  break;
                case "j":
                  arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
                  break;
                case "e":
                  arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
                  break;
                case "f":
                  arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
                  break;
                case "g":
                  arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
                  break;
                case "o":
                  arg = (parseInt(arg, 10) >>> 0).toString(8);
                  break;
                case "s":
                  arg = String(arg);
                  arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                  break;
                case "t":
                  arg = String(!!arg);
                  arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                  break;
                case "T":
                  arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
                  arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                  break;
                case "u":
                  arg = parseInt(arg, 10) >>> 0;
                  break;
                case "v":
                  arg = arg.valueOf();
                  arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                  break;
                case "x":
                  arg = (parseInt(arg, 10) >>> 0).toString(16);
                  break;
                case "X":
                  arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
                  break;
              }
              if (re4.json.test(ph.type)) {
                output += arg;
              } else {
                if (re4.number.test(ph.type) && (!is_positive || ph.sign)) {
                  sign = is_positive ? "+" : "-";
                  arg = arg.toString().replace(re4.sign, "");
                } else {
                  sign = "";
                }
                pad_character = ph.pad_char ? ph.pad_char === "0" ? "0" : ph.pad_char.charAt(1) : " ";
                pad_length = ph.width - (sign + arg).length;
                pad2 = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : "" : "";
                output += ph.align ? sign + arg + pad2 : pad_character === "0" ? sign + pad2 + arg : pad2 + sign + arg;
              }
            }
          }
          return output;
        }
        var sprintf_cache = /* @__PURE__ */ Object.create(null);
        function sprintf_parse(fmt) {
          if (sprintf_cache[fmt]) {
            return sprintf_cache[fmt];
          }
          var _fmt = fmt, match, parse_tree = [], arg_names = 0;
          while (_fmt) {
            if ((match = re4.text.exec(_fmt)) !== null) {
              parse_tree.push(match[0]);
            } else if ((match = re4.modulo.exec(_fmt)) !== null) {
              parse_tree.push("%");
            } else if ((match = re4.placeholder.exec(_fmt)) !== null) {
              if (match[2]) {
                arg_names |= 1;
                var field_list = [], replacement_field = match[2], field_match = [];
                if ((field_match = re4.key.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                  while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
                    if ((field_match = re4.key_access.exec(replacement_field)) !== null) {
                      field_list.push(field_match[1]);
                    } else if ((field_match = re4.index_access.exec(replacement_field)) !== null) {
                      field_list.push(field_match[1]);
                    } else {
                      throw new SyntaxError("[sprintf] failed to parse named argument key");
                    }
                  }
                } else {
                  throw new SyntaxError("[sprintf] failed to parse named argument key");
                }
                match[2] = field_list;
              } else {
                arg_names |= 2;
              }
              if (arg_names === 3) {
                throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
              }
              parse_tree.push(
                {
                  placeholder: match[0],
                  param_no: match[1],
                  keys: match[2],
                  sign: match[3],
                  pad_char: match[4],
                  align: match[5],
                  width: match[6],
                  precision: match[7],
                  type: match[8]
                }
              );
            } else {
              throw new SyntaxError("[sprintf] unexpected placeholder");
            }
            _fmt = _fmt.substring(match[0].length);
          }
          return sprintf_cache[fmt] = parse_tree;
        }
        if (typeof exports !== "undefined") {
          exports["sprintf"] = sprintf2;
          exports["vsprintf"] = vsprintf;
        }
        if (typeof window !== "undefined") {
          window["sprintf"] = sprintf2;
          window["vsprintf"] = vsprintf;
          if (typeof define === "function" && define["amd"]) {
            define(function() {
              return {
                "sprintf": sprintf2,
                "vsprintf": vsprintf
              };
            });
          }
        }
      }();
    }
  });

  // node_modules/ajv-keywords/dist/definitions/typeof.js
  var require_typeof2 = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/typeof.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var TYPES = ["undefined", "string", "number", "object", "function", "boolean", "symbol"];
      function getDef() {
        return {
          keyword: "typeof",
          schemaType: ["string", "array"],
          code(cxt) {
            const { data, schema: schema2, schemaValue } = cxt;
            cxt.fail(typeof schema2 == "string" ? (0, codegen_1._)`typeof ${data} != ${schema2}` : (0, codegen_1._)`${schemaValue}.indexOf(typeof ${data}) < 0`);
          },
          metaSchema: {
            anyOf: [
              { type: "string", enum: TYPES },
              { type: "array", items: { type: "string", enum: TYPES } }
            ]
          }
        };
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/typeof.js
  var require_typeof3 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/typeof.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeof_1 = __importDefault(require_typeof2());
      var typeofPlugin = (ajv) => ajv.addKeyword((0, typeof_1.default)());
      exports.default = typeofPlugin;
      module.exports = typeofPlugin;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/instanceof.js
  var require_instanceof = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/instanceof.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var CONSTRUCTORS = {
        Object,
        Array,
        Function,
        Number,
        String,
        Date,
        RegExp
      };
      if (typeof Buffer != "undefined")
        CONSTRUCTORS.Buffer = Buffer;
      if (typeof Promise != "undefined")
        CONSTRUCTORS.Promise = Promise;
      var getDef = Object.assign(_getDef, { CONSTRUCTORS });
      function _getDef() {
        return {
          keyword: "instanceof",
          schemaType: ["string", "array"],
          compile(schema2) {
            if (typeof schema2 == "string") {
              const C = getConstructor(schema2);
              return (data) => data instanceof C;
            }
            if (Array.isArray(schema2)) {
              const constructors = schema2.map(getConstructor);
              return (data) => {
                for (const C of constructors) {
                  if (data instanceof C)
                    return true;
                }
                return false;
              };
            }
            throw new Error("ajv implementation error");
          },
          metaSchema: {
            anyOf: [{ type: "string" }, { type: "array", items: { type: "string" } }]
          }
        };
      }
      function getConstructor(c) {
        const C = CONSTRUCTORS[c];
        if (C)
          return C;
        throw new Error(`invalid "instanceof" keyword value ${c}`);
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/instanceof.js
  var require_instanceof2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/instanceof.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var instanceof_1 = __importDefault(require_instanceof());
      var instanceofPlugin = (ajv) => ajv.addKeyword((0, instanceof_1.default)());
      exports.default = instanceofPlugin;
      module.exports = instanceofPlugin;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/_range.js
  var require_range = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/_range.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function getRangeDef(keyword) {
        return () => ({
          keyword,
          type: "number",
          schemaType: "array",
          macro: function([min, max]) {
            validateRangeSchema(min, max);
            return keyword === "range" ? { minimum: min, maximum: max } : { exclusiveMinimum: min, exclusiveMaximum: max };
          },
          metaSchema: {
            type: "array",
            minItems: 2,
            maxItems: 2,
            items: { type: "number" }
          }
        });
        function validateRangeSchema(min, max) {
          if (min > max || keyword === "exclusiveRange" && min === max) {
            throw new Error("There are no numbers in range");
          }
        }
      }
      exports.default = getRangeDef;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/range.js
  var require_range2 = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/range.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var _range_1 = __importDefault(require_range());
      var getDef = (0, _range_1.default)("range");
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/range.js
  var require_range3 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/range.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var range_1 = __importDefault(require_range2());
      var range = (ajv) => ajv.addKeyword((0, range_1.default)());
      exports.default = range;
      module.exports = range;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/exclusiveRange.js
  var require_exclusiveRange = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/exclusiveRange.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var _range_1 = __importDefault(require_range());
      var getDef = (0, _range_1.default)("exclusiveRange");
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/exclusiveRange.js
  var require_exclusiveRange2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/exclusiveRange.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var exclusiveRange_1 = __importDefault(require_exclusiveRange());
      var exclusiveRange = (ajv) => ajv.addKeyword((0, exclusiveRange_1.default)());
      exports.default = exclusiveRange;
      module.exports = exclusiveRange;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/_util.js
  var require_util4 = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/_util.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.usePattern = exports.metaSchemaRef = void 0;
      var codegen_1 = require_codegen();
      var META_SCHEMA_ID = "http://json-schema.org/schema";
      function metaSchemaRef({ defaultMeta } = {}) {
        return defaultMeta === false ? {} : { $ref: defaultMeta || META_SCHEMA_ID };
      }
      exports.metaSchemaRef = metaSchemaRef;
      function usePattern({ gen, it: { opts } }, pattern, flags = opts.unicodeRegExp ? "u" : "") {
        const rx = new RegExp(pattern, flags);
        return gen.scopeValue("pattern", {
          key: rx.toString(),
          ref: rx,
          code: (0, codegen_1._)`new RegExp(${pattern}, ${flags})`
        });
      }
      exports.usePattern = usePattern;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/regexp.js
  var require_regexp = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/regexp.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var _util_1 = require_util4();
      var regexpMetaSchema = {
        type: "object",
        properties: {
          pattern: { type: "string" },
          flags: { type: "string", nullable: true }
        },
        required: ["pattern"],
        additionalProperties: false
      };
      var metaRegexp = /^\/(.*)\/([gimuy]*)$/;
      function getDef() {
        return {
          keyword: "regexp",
          type: "string",
          schemaType: ["string", "object"],
          code(cxt) {
            const { data, schema: schema2 } = cxt;
            const regx = getRegExp(schema2);
            cxt.pass((0, codegen_1._)`${regx}.test(${data})`);
            function getRegExp(sch) {
              if (typeof sch == "object")
                return (0, _util_1.usePattern)(cxt, sch.pattern, sch.flags);
              const rx = metaRegexp.exec(sch);
              if (rx)
                return (0, _util_1.usePattern)(cxt, rx[1], rx[2]);
              throw new Error("cannot parse string into RegExp");
            }
          },
          metaSchema: {
            anyOf: [{ type: "string" }, regexpMetaSchema]
          }
        };
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/regexp.js
  var require_regexp2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/regexp.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var regexp_1 = __importDefault(require_regexp());
      var regexp = (ajv) => ajv.addKeyword((0, regexp_1.default)());
      exports.default = regexp;
      module.exports = regexp;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/transform.js
  var require_transform = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/transform.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var transform = {
        trimStart: (s) => s.trimStart(),
        trimEnd: (s) => s.trimEnd(),
        trimLeft: (s) => s.trimStart(),
        trimRight: (s) => s.trimEnd(),
        trim: (s) => s.trim(),
        toLowerCase: (s) => s.toLowerCase(),
        toUpperCase: (s) => s.toUpperCase(),
        toEnumCase: (s, cfg) => (cfg === null || cfg === void 0 ? void 0 : cfg.hash[configKey(s)]) || s
      };
      var getDef = Object.assign(_getDef, { transform });
      function _getDef() {
        return {
          keyword: "transform",
          schemaType: "array",
          before: "enum",
          code(cxt) {
            const { gen, data, schema: schema2, parentSchema, it } = cxt;
            const { parentData, parentDataProperty } = it;
            const tNames = schema2;
            if (!tNames.length)
              return;
            let cfg;
            if (tNames.includes("toEnumCase")) {
              const config = getEnumCaseCfg(parentSchema);
              cfg = gen.scopeValue("obj", { ref: config, code: (0, codegen_1.stringify)(config) });
            }
            gen.if((0, codegen_1._)`typeof ${data} == "string" && ${parentData} !== undefined`, () => {
              gen.assign(data, transformExpr(tNames.slice()));
              gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, data);
            });
            function transformExpr(ts) {
              if (!ts.length)
                return data;
              const t = ts.pop();
              if (!(t in transform))
                throw new Error(`transform: unknown transformation ${t}`);
              const func = gen.scopeValue("func", {
                ref: transform[t],
                code: (0, codegen_1._)`require("ajv-keywords/dist/definitions/transform").transform${(0, codegen_1.getProperty)(t)}`
              });
              const arg = transformExpr(ts);
              return cfg && t === "toEnumCase" ? (0, codegen_1._)`${func}(${arg}, ${cfg})` : (0, codegen_1._)`${func}(${arg})`;
            }
          },
          metaSchema: {
            type: "array",
            items: { type: "string", enum: Object.keys(transform) }
          }
        };
      }
      function getEnumCaseCfg(parentSchema) {
        const cfg = { hash: {} };
        if (!parentSchema.enum)
          throw new Error('transform: "toEnumCase" requires "enum"');
        for (const v of parentSchema.enum) {
          if (typeof v !== "string")
            continue;
          const k = configKey(v);
          if (cfg.hash[k]) {
            throw new Error('transform: "toEnumCase" requires all lowercased "enum" values to be unique');
          }
          cfg.hash[k] = v;
        }
        return cfg;
      }
      function configKey(s) {
        return s.toLowerCase();
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/transform.js
  var require_transform2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/transform.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var transform_1 = __importDefault(require_transform());
      var transform = (ajv) => ajv.addKeyword((0, transform_1.default)());
      exports.default = transform;
      module.exports = transform;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/uniqueItemProperties.js
  var require_uniqueItemProperties = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/uniqueItemProperties.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var equal = require_fast_deep_equal();
      var SCALAR_TYPES = ["number", "integer", "string", "boolean", "null"];
      function getDef() {
        return {
          keyword: "uniqueItemProperties",
          type: "array",
          schemaType: "array",
          compile(keys, parentSchema) {
            const scalar = getScalarKeys(keys, parentSchema);
            return (data) => {
              if (data.length <= 1)
                return true;
              for (let k = 0; k < keys.length; k++) {
                const key = keys[k];
                if (scalar[k]) {
                  const hash = {};
                  for (const x of data) {
                    if (!x || typeof x != "object")
                      continue;
                    let p = x[key];
                    if (p && typeof p == "object")
                      continue;
                    if (typeof p == "string")
                      p = '"' + p;
                    if (hash[p])
                      return false;
                    hash[p] = true;
                  }
                } else {
                  for (let i = data.length; i--; ) {
                    const x = data[i];
                    if (!x || typeof x != "object")
                      continue;
                    for (let j = i; j--; ) {
                      const y = data[j];
                      if (y && typeof y == "object" && equal(x[key], y[key]))
                        return false;
                    }
                  }
                }
              }
              return true;
            };
          },
          metaSchema: {
            type: "array",
            items: { type: "string" }
          }
        };
      }
      exports.default = getDef;
      function getScalarKeys(keys, schema2) {
        return keys.map((key) => {
          var _a3, _b, _c;
          const t = (_c = (_b = (_a3 = schema2.items) === null || _a3 === void 0 ? void 0 : _a3.properties) === null || _b === void 0 ? void 0 : _b[key]) === null || _c === void 0 ? void 0 : _c.type;
          return Array.isArray(t) ? !t.includes("object") && !t.includes("array") : SCALAR_TYPES.includes(t);
        });
      }
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/uniqueItemProperties.js
  var require_uniqueItemProperties2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/uniqueItemProperties.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var uniqueItemProperties_1 = __importDefault(require_uniqueItemProperties());
      var uniqueItemProperties = (ajv) => ajv.addKeyword((0, uniqueItemProperties_1.default)());
      exports.default = uniqueItemProperties;
      module.exports = uniqueItemProperties;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/allRequired.js
  var require_allRequired = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/allRequired.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function getDef() {
        return {
          keyword: "allRequired",
          type: "object",
          schemaType: "boolean",
          macro(schema2, parentSchema) {
            if (!schema2)
              return true;
            const required = Object.keys(parentSchema.properties);
            if (required.length === 0)
              return true;
            return { required };
          },
          dependencies: ["properties"]
        };
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/allRequired.js
  var require_allRequired2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/allRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var allRequired_1 = __importDefault(require_allRequired());
      var allRequired = (ajv) => ajv.addKeyword((0, allRequired_1.default)());
      exports.default = allRequired;
      module.exports = allRequired;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/_required.js
  var require_required2 = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/_required.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function getRequiredDef(keyword) {
        return () => ({
          keyword,
          type: "object",
          schemaType: "array",
          macro(schema2) {
            if (schema2.length === 0)
              return true;
            if (schema2.length === 1)
              return { required: schema2 };
            const comb = keyword === "anyRequired" ? "anyOf" : "oneOf";
            return { [comb]: schema2.map((p) => ({ required: [p] })) };
          },
          metaSchema: {
            type: "array",
            items: { type: "string" }
          }
        });
      }
      exports.default = getRequiredDef;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/anyRequired.js
  var require_anyRequired = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/anyRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var _required_1 = __importDefault(require_required2());
      var getDef = (0, _required_1.default)("anyRequired");
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/anyRequired.js
  var require_anyRequired2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/anyRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var anyRequired_1 = __importDefault(require_anyRequired());
      var anyRequired = (ajv) => ajv.addKeyword((0, anyRequired_1.default)());
      exports.default = anyRequired;
      module.exports = anyRequired;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/oneRequired.js
  var require_oneRequired = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/oneRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var _required_1 = __importDefault(require_required2());
      var getDef = (0, _required_1.default)("oneRequired");
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/oneRequired.js
  var require_oneRequired2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/oneRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var oneRequired_1 = __importDefault(require_oneRequired());
      var oneRequired = (ajv) => ajv.addKeyword((0, oneRequired_1.default)());
      exports.default = oneRequired;
      module.exports = oneRequired;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/patternRequired.js
  var require_patternRequired = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/patternRequired.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var _util_1 = require_util4();
      var error = {
        message: ({ params: { missingPattern } }) => (0, codegen_1.str)`should have property matching pattern '${missingPattern}'`,
        params: ({ params: { missingPattern } }) => (0, codegen_1._)`{missingPattern: ${missingPattern}}`
      };
      function getDef() {
        return {
          keyword: "patternRequired",
          type: "object",
          schemaType: "array",
          error,
          code(cxt) {
            const { gen, schema: schema2, data } = cxt;
            if (schema2.length === 0)
              return;
            const valid2 = gen.let("valid", true);
            for (const pat of schema2)
              validateProperties(pat);
            function validateProperties(pattern) {
              const matched = gen.let("matched", false);
              gen.forIn("key", data, (key) => {
                gen.assign(matched, (0, codegen_1._)`${(0, _util_1.usePattern)(cxt, pattern)}.test(${key})`);
                gen.if(matched, () => gen.break());
              });
              cxt.setParams({ missingPattern: pattern });
              gen.assign(valid2, (0, codegen_1.and)(valid2, matched));
              cxt.pass(valid2);
            }
          },
          metaSchema: {
            type: "array",
            items: { type: "string", format: "regex" },
            uniqueItems: true
          }
        };
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/patternRequired.js
  var require_patternRequired2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/patternRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var patternRequired_1 = __importDefault(require_patternRequired());
      var patternRequired = (ajv) => ajv.addKeyword((0, patternRequired_1.default)());
      exports.default = patternRequired;
      module.exports = patternRequired;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/prohibited.js
  var require_prohibited = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/prohibited.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function getDef() {
        return {
          keyword: "prohibited",
          type: "object",
          schemaType: "array",
          macro: function(schema2) {
            if (schema2.length === 0)
              return true;
            if (schema2.length === 1)
              return { not: { required: schema2 } };
            return { not: { anyOf: schema2.map((p) => ({ required: [p] })) } };
          },
          metaSchema: {
            type: "array",
            items: { type: "string" }
          }
        };
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/prohibited.js
  var require_prohibited2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/prohibited.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var prohibited_1 = __importDefault(require_prohibited());
      var prohibited = (ajv) => ajv.addKeyword((0, prohibited_1.default)());
      exports.default = prohibited;
      module.exports = prohibited;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/deepProperties.js
  var require_deepProperties = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/deepProperties.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var _util_1 = require_util4();
      function getDef(opts) {
        return {
          keyword: "deepProperties",
          type: "object",
          schemaType: "object",
          macro: function(schema2) {
            const allOf = [];
            for (const pointer2 in schema2)
              allOf.push(getSchema(pointer2, schema2[pointer2]));
            return { allOf };
          },
          metaSchema: {
            type: "object",
            propertyNames: { type: "string", format: "json-pointer" },
            additionalProperties: (0, _util_1.metaSchemaRef)(opts)
          }
        };
      }
      exports.default = getDef;
      function getSchema(jsonPointer, schema2) {
        const segments = jsonPointer.split("/");
        const rootSchema = {};
        let pointerSchema = rootSchema;
        for (let i = 1; i < segments.length; i++) {
          let segment = segments[i];
          const isLast = i === segments.length - 1;
          segment = unescapeJsonPointer(segment);
          const properties = pointerSchema.properties = {};
          let items;
          if (/[0-9]+/.test(segment)) {
            let count = +segment;
            items = pointerSchema.items = [];
            pointerSchema.type = ["object", "array"];
            while (count--)
              items.push({});
          } else {
            pointerSchema.type = "object";
          }
          pointerSchema = isLast ? schema2 : {};
          properties[segment] = pointerSchema;
          if (items)
            items.push(pointerSchema);
        }
        return rootSchema;
      }
      function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~");
      }
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/deepProperties.js
  var require_deepProperties2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/deepProperties.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var deepProperties_1 = __importDefault(require_deepProperties());
      var deepProperties = (ajv, opts) => ajv.addKeyword((0, deepProperties_1.default)(opts));
      exports.default = deepProperties;
      module.exports = deepProperties;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/deepRequired.js
  var require_deepRequired = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/deepRequired.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      function getDef() {
        return {
          keyword: "deepRequired",
          type: "object",
          schemaType: "array",
          code(ctx2) {
            const { schema: schema2, data } = ctx2;
            const props = schema2.map((jp) => (0, codegen_1._)`(${getData(jp)}) === undefined`);
            ctx2.fail((0, codegen_1.or)(...props));
            function getData(jsonPointer) {
              if (jsonPointer === "")
                throw new Error("empty JSON pointer not allowed");
              const segments = jsonPointer.split("/");
              let x = data;
              const xs = segments.map((s, i) => i ? x = (0, codegen_1._)`${x}${(0, codegen_1.getProperty)(unescapeJPSegment(s))}` : x);
              return (0, codegen_1.and)(...xs);
            }
          },
          metaSchema: {
            type: "array",
            items: { type: "string", format: "json-pointer" }
          }
        };
      }
      exports.default = getDef;
      function unescapeJPSegment(s) {
        return s.replace(/~1/g, "/").replace(/~0/g, "~");
      }
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/deepRequired.js
  var require_deepRequired2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/deepRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var deepRequired_1 = __importDefault(require_deepRequired());
      var deepRequired = (ajv) => ajv.addKeyword((0, deepRequired_1.default)());
      exports.default = deepRequired;
      module.exports = deepRequired;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/dynamicDefaults.js
  var require_dynamicDefaults = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/dynamicDefaults.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var sequences = {};
      var DEFAULTS = {
        timestamp: () => () => Date.now(),
        datetime: () => () => new Date().toISOString(),
        date: () => () => new Date().toISOString().slice(0, 10),
        time: () => () => new Date().toISOString().slice(11),
        random: () => () => Math.random(),
        randomint: (args) => {
          var _a3;
          const max = (_a3 = args === null || args === void 0 ? void 0 : args.max) !== null && _a3 !== void 0 ? _a3 : 2;
          return () => Math.floor(Math.random() * max);
        },
        seq: (args) => {
          var _a3;
          const name = (_a3 = args === null || args === void 0 ? void 0 : args.name) !== null && _a3 !== void 0 ? _a3 : "";
          sequences[name] || (sequences[name] = 0);
          return () => sequences[name]++;
        }
      };
      var getDef = Object.assign(_getDef, { DEFAULTS });
      function _getDef() {
        return {
          keyword: "dynamicDefaults",
          type: "object",
          schemaType: ["string", "object"],
          modifying: true,
          valid: true,
          compile(schema2, _parentSchema, it) {
            if (!it.opts.useDefaults || it.compositeRule)
              return () => true;
            const fs = {};
            for (const key in schema2)
              fs[key] = getDefault(schema2[key]);
            const empty = it.opts.useDefaults === "empty";
            return (data) => {
              for (const prop in schema2) {
                if (data[prop] === void 0 || empty && (data[prop] === null || data[prop] === "")) {
                  data[prop] = fs[prop]();
                }
              }
              return true;
            };
          },
          metaSchema: {
            type: "object",
            additionalProperties: {
              anyOf: [
                { type: "string" },
                {
                  type: "object",
                  additionalProperties: false,
                  required: ["func", "args"],
                  properties: {
                    func: { type: "string" },
                    args: { type: "object" }
                  }
                }
              ]
            }
          }
        };
      }
      function getDefault(d) {
        return typeof d == "object" ? getObjDefault(d) : getStrDefault(d);
      }
      function getObjDefault({ func, args }) {
        const def = DEFAULTS[func];
        assertDefined(func, def);
        return def(args);
      }
      function getStrDefault(d = "") {
        const def = DEFAULTS[d];
        assertDefined(d, def);
        return def();
      }
      function assertDefined(name, def) {
        if (!def)
          throw new Error(`invalid "dynamicDefaults" keyword property value: ${name}`);
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/dynamicDefaults.js
  var require_dynamicDefaults2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/dynamicDefaults.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var dynamicDefaults_1 = __importDefault(require_dynamicDefaults());
      var dynamicDefaults = (ajv) => ajv.addKeyword((0, dynamicDefaults_1.default)());
      exports.default = dynamicDefaults;
      module.exports = dynamicDefaults;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/select.js
  var require_select = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/select.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var _util_1 = require_util4();
      var error = {
        message: ({ params: { schemaProp } }) => schemaProp ? (0, codegen_1.str)`should match case "${schemaProp}" schema` : (0, codegen_1.str)`should match default case schema`,
        params: ({ params: { schemaProp } }) => schemaProp ? (0, codegen_1._)`{failingCase: ${schemaProp}}` : (0, codegen_1._)`{failingDefault: true}`
      };
      function getDef(opts) {
        const metaSchema = (0, _util_1.metaSchemaRef)(opts);
        return [
          {
            keyword: "select",
            schemaType: ["string", "number", "boolean", "null"],
            $data: true,
            error,
            dependencies: ["selectCases"],
            code(cxt) {
              const { gen, schemaCode, parentSchema } = cxt;
              cxt.block$data(codegen_1.nil, () => {
                const valid2 = gen.let("valid", true);
                const schValid = gen.name("_valid");
                const value = gen.const("value", (0, codegen_1._)`${schemaCode} === null ? "null" : ${schemaCode}`);
                gen.if(false);
                for (const schemaProp in parentSchema.selectCases) {
                  cxt.setParams({ schemaProp });
                  gen.elseIf((0, codegen_1._)`"" + ${value} == ${schemaProp}`);
                  const schCxt = cxt.subschema({ keyword: "selectCases", schemaProp }, schValid);
                  cxt.mergeEvaluated(schCxt, codegen_1.Name);
                  gen.assign(valid2, schValid);
                }
                gen.else();
                if (parentSchema.selectDefault !== void 0) {
                  cxt.setParams({ schemaProp: void 0 });
                  const schCxt = cxt.subschema({ keyword: "selectDefault" }, schValid);
                  cxt.mergeEvaluated(schCxt, codegen_1.Name);
                  gen.assign(valid2, schValid);
                }
                gen.endIf();
                cxt.pass(valid2);
              });
            }
          },
          {
            keyword: "selectCases",
            dependencies: ["select"],
            metaSchema: {
              type: "object",
              additionalProperties: metaSchema
            }
          },
          {
            keyword: "selectDefault",
            dependencies: ["select", "selectCases"],
            metaSchema
          }
        ];
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/select.js
  var require_select2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/select.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var select_1 = __importDefault(require_select());
      var select = (ajv, opts) => {
        (0, select_1.default)(opts).forEach((d) => ajv.addKeyword(d));
        return ajv;
      };
      exports.default = select;
      module.exports = select;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/index.js
  var require_keywords = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/index.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeof_1 = __importDefault(require_typeof3());
      var instanceof_1 = __importDefault(require_instanceof2());
      var range_1 = __importDefault(require_range3());
      var exclusiveRange_1 = __importDefault(require_exclusiveRange2());
      var regexp_1 = __importDefault(require_regexp2());
      var transform_1 = __importDefault(require_transform2());
      var uniqueItemProperties_1 = __importDefault(require_uniqueItemProperties2());
      var allRequired_1 = __importDefault(require_allRequired2());
      var anyRequired_1 = __importDefault(require_anyRequired2());
      var oneRequired_1 = __importDefault(require_oneRequired2());
      var patternRequired_1 = __importDefault(require_patternRequired2());
      var prohibited_1 = __importDefault(require_prohibited2());
      var deepProperties_1 = __importDefault(require_deepProperties2());
      var deepRequired_1 = __importDefault(require_deepRequired2());
      var dynamicDefaults_1 = __importDefault(require_dynamicDefaults2());
      var select_1 = __importDefault(require_select2());
      var ajvKeywords = {
        typeof: typeof_1.default,
        instanceof: instanceof_1.default,
        range: range_1.default,
        exclusiveRange: exclusiveRange_1.default,
        regexp: regexp_1.default,
        transform: transform_1.default,
        uniqueItemProperties: uniqueItemProperties_1.default,
        allRequired: allRequired_1.default,
        anyRequired: anyRequired_1.default,
        oneRequired: oneRequired_1.default,
        patternRequired: patternRequired_1.default,
        prohibited: prohibited_1.default,
        deepProperties: deepProperties_1.default,
        deepRequired: deepRequired_1.default,
        dynamicDefaults: dynamicDefaults_1.default,
        select: select_1.default
      };
      exports.default = ajvKeywords;
      module.exports = ajvKeywords;
    }
  });

  // node_modules/ajv-keywords/dist/index.js
  var require_dist3 = __commonJS({
    "node_modules/ajv-keywords/dist/index.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var keywords_1 = __importDefault(require_keywords());
      var ajvKeywords = (ajv, keyword) => {
        if (Array.isArray(keyword)) {
          for (const k of keyword)
            get2(k)(ajv);
          return ajv;
        }
        if (keyword) {
          get2(keyword)(ajv);
          return ajv;
        }
        for (keyword in keywords_1.default)
          get2(keyword)(ajv);
        return ajv;
      };
      ajvKeywords.get = get2;
      function get2(keyword) {
        const defFunc = keywords_1.default[keyword];
        if (!defFunc)
          throw new Error("Unknown keyword " + keyword);
        return defFunc;
      }
      exports.default = ajvKeywords;
      module.exports = ajvKeywords;
      module.exports.default = ajvKeywords;
    }
  });

  // node_modules/@humanwhocodes/momoa/api.js
  var require_api = __commonJS({
    "node_modules/@humanwhocodes/momoa/api.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var LBRACKET = "[";
      var RBRACKET = "]";
      var LBRACE = "{";
      var RBRACE = "}";
      var COLON = ":";
      var COMMA = ",";
      var TRUE = "true";
      var FALSE = "false";
      var NULL = "null";
      var QUOTE = '"';
      var expectedKeywords = /* @__PURE__ */ new Map([
        ["t", TRUE],
        ["f", FALSE],
        ["n", NULL]
      ]);
      var escapeToChar = /* @__PURE__ */ new Map([
        [QUOTE, QUOTE],
        ["\\", "\\"],
        ["/", "/"],
        ["b", "\b"],
        ["n", "\n"],
        ["f", "\f"],
        ["r", "\r"],
        ["t", "	"]
      ]);
      var knownTokenTypes = /* @__PURE__ */ new Map([
        [LBRACKET, "Punctuator"],
        [RBRACKET, "Punctuator"],
        [LBRACE, "Punctuator"],
        [RBRACE, "Punctuator"],
        [COLON, "Punctuator"],
        [COMMA, "Punctuator"],
        [TRUE, "Boolean"],
        [FALSE, "Boolean"],
        [NULL, "Null"]
      ]);
      var ErrorWithLocation = class extends Error {
        constructor(message, { line, column, index }) {
          super(`${message} (${line}:${column})`);
          this.line = line;
          this.column = column;
          this.index = index;
        }
      };
      var UnexpectedChar = class extends ErrorWithLocation {
        constructor(unexpected, loc) {
          super(`Unexpected character ${unexpected} found.`, loc);
        }
      };
      var UnexpectedToken = class extends ErrorWithLocation {
        constructor(token) {
          super(`Unexpected token ${token.type}(${token.value}) found.`, token.loc.start);
        }
      };
      var UnexpectedEOF = class extends ErrorWithLocation {
        constructor(loc) {
          super("Unexpected end of input found.", loc);
        }
      };
      var QUOTE$1 = '"';
      var SLASH = "/";
      var STAR = "*";
      var DEFAULT_OPTIONS = {
        comments: false,
        ranges: false
      };
      function isWhitespace2(c) {
        return /[\s\n]/.test(c);
      }
      function isDigit(c) {
        return c >= "0" && c <= "9";
      }
      function isHexDigit(c) {
        return isDigit(c) || /[a-f]/i.test(c);
      }
      function isPositiveDigit(c) {
        return c >= "1" && c <= "9";
      }
      function isKeywordStart(c) {
        return /[tfn]/.test(c);
      }
      function isNumberStart(c) {
        return isDigit(c) || c === "." || c === "-";
      }
      function tokenize(text, options2) {
        options2 = Object.freeze({
          ...DEFAULT_OPTIONS,
          ...options2
        });
        let offset = -1;
        let line = 1;
        let column = 0;
        let newLine = false;
        const tokens = [];
        function createToken(tokenType, value, startLoc, endLoc) {
          const endOffset = startLoc.offset + value.length;
          let range = options2.ranges ? {
            range: [startLoc.offset, endOffset]
          } : void 0;
          return {
            type: tokenType,
            value,
            loc: {
              start: startLoc,
              end: endLoc || {
                line: startLoc.line,
                column: startLoc.column + value.length,
                offset: endOffset
              }
            },
            ...range
          };
        }
        function next() {
          let c2 = text.charAt(++offset);
          if (newLine) {
            line++;
            column = 1;
            newLine = false;
          } else {
            column++;
          }
          if (c2 === "\r") {
            newLine = true;
            if (text.charAt(offset + 1) === "\n") {
              offset++;
            }
          } else if (c2 === "\n") {
            newLine = true;
          }
          return c2;
        }
        function locate() {
          return {
            line,
            column,
            offset
          };
        }
        function readKeyword(c2) {
          let value = expectedKeywords.get(c2);
          if (text.slice(offset, offset + value.length) === value) {
            offset += value.length - 1;
            column += value.length - 1;
            return { value, c: next() };
          }
          for (let j = 1; j < value.length; j++) {
            if (value[j] !== text.charAt(offset + j)) {
              unexpected(next());
            }
          }
        }
        function readString(c2) {
          let value = c2;
          c2 = next();
          while (c2 && c2 !== QUOTE$1) {
            if (c2 === "\\") {
              value += c2;
              c2 = next();
              if (escapeToChar.has(c2)) {
                value += c2;
              } else if (c2 === "u") {
                value += c2;
                for (let i = 0; i < 4; i++) {
                  c2 = next();
                  if (isHexDigit(c2)) {
                    value += c2;
                  } else {
                    unexpected(c2);
                  }
                }
              } else {
                unexpected(c2);
              }
            } else {
              value += c2;
            }
            c2 = next();
          }
          if (!c2) {
            unexpectedEOF();
          }
          value += c2;
          return { value, c: next() };
        }
        function readNumber(c2) {
          let value = "";
          if (c2 === "-") {
            value += c2;
            c2 = next();
            if (!isDigit(c2)) {
              unexpected(c2);
            }
          }
          if (c2 === "0") {
            value += c2;
            c2 = next();
            if (isDigit(c2)) {
              unexpected(c2);
            }
          } else {
            if (!isPositiveDigit(c2)) {
              unexpected(c2);
            }
            do {
              value += c2;
              c2 = next();
            } while (isDigit(c2));
          }
          if (c2 === ".") {
            do {
              value += c2;
              c2 = next();
            } while (isDigit(c2));
          }
          if (c2 === "e" || c2 === "E") {
            value += c2;
            c2 = next();
            if (c2 === "+" || c2 === "-") {
              value += c2;
              c2 = next();
            }
            if (!isDigit(c2)) {
              unexpected(c2);
            }
            while (isDigit(c2)) {
              value += c2;
              c2 = next();
            }
          }
          return { value, c: c2 };
        }
        function readComment(c2) {
          let value = c2;
          c2 = next();
          if (c2 === "/") {
            do {
              value += c2;
              c2 = next();
            } while (c2 && c2 !== "\r" && c2 !== "\n");
            return { value, c: c2 };
          }
          if (c2 === STAR) {
            while (c2) {
              value += c2;
              c2 = next();
              if (c2 === STAR) {
                value += c2;
                c2 = next();
                if (c2 === SLASH) {
                  value += c2;
                  c2 = next();
                  return { value, c: c2 };
                }
              }
            }
            unexpectedEOF();
          }
          unexpected(c2);
        }
        function unexpected(c2) {
          throw new UnexpectedChar(c2, locate());
        }
        function unexpectedEOF() {
          throw new UnexpectedEOF(locate());
        }
        let c = next();
        while (offset < text.length) {
          while (isWhitespace2(c)) {
            c = next();
          }
          if (!c) {
            break;
          }
          const start = locate();
          if (knownTokenTypes.has(c)) {
            tokens.push(createToken(knownTokenTypes.get(c), c, start));
            c = next();
          } else if (isKeywordStart(c)) {
            const result = readKeyword(c);
            let value = result.value;
            c = result.c;
            tokens.push(createToken(knownTokenTypes.get(value), value, start));
          } else if (isNumberStart(c)) {
            const result = readNumber(c);
            let value = result.value;
            c = result.c;
            tokens.push(createToken("Number", value, start));
          } else if (c === QUOTE$1) {
            const result = readString(c);
            let value = result.value;
            c = result.c;
            tokens.push(createToken("String", value, start));
          } else if (c === SLASH && options2.comments) {
            const result = readComment(c);
            let value = result.value;
            c = result.c;
            tokens.push(createToken(value.startsWith("//") ? "LineComment" : "BlockComment", value, start, locate()));
          } else {
            unexpected(c);
          }
        }
        return tokens;
      }
      var types = {
        document(body, parts = {}) {
          return {
            type: "Document",
            body,
            ...parts
          };
        },
        string(value, parts = {}) {
          return {
            type: "String",
            value,
            ...parts
          };
        },
        number(value, parts = {}) {
          return {
            type: "Number",
            value,
            ...parts
          };
        },
        boolean(value, parts = {}) {
          return {
            type: "Boolean",
            value,
            ...parts
          };
        },
        null(parts = {}) {
          return {
            type: "Null",
            value: "null",
            ...parts
          };
        },
        array(elements, parts = {}) {
          return {
            type: "Array",
            elements,
            ...parts
          };
        },
        object(members, parts = {}) {
          return {
            type: "Object",
            members,
            ...parts
          };
        },
        member(name, value, parts = {}) {
          return {
            type: "Member",
            name,
            value,
            ...parts
          };
        }
      };
      var DEFAULT_OPTIONS$1 = {
        tokens: false,
        comments: false,
        ranges: false
      };
      function getStringValue(token) {
        let value = token.value.slice(1, -1);
        let result = "";
        let escapeIndex = value.indexOf("\\");
        let lastIndex = 0;
        while (escapeIndex >= 0) {
          result += value.slice(lastIndex, escapeIndex);
          const escapeChar = value.charAt(escapeIndex + 1);
          if (escapeToChar.has(escapeChar)) {
            result += escapeToChar.get(escapeChar);
            lastIndex = escapeIndex + 2;
          } else if (escapeChar === "u") {
            const hexCode = value.slice(escapeIndex + 2, escapeIndex + 6);
            if (hexCode.length < 4 || /[^0-9a-f]/i.test(hexCode)) {
              throw new ErrorWithLocation(
                `Invalid unicode escape \\u${hexCode}.`,
                {
                  line: token.loc.start.line,
                  column: token.loc.start.column + escapeIndex,
                  offset: token.loc.start.offset + escapeIndex
                }
              );
            }
            result += String.fromCharCode(parseInt(hexCode, 16));
            lastIndex = escapeIndex + 6;
          } else {
            throw new ErrorWithLocation(
              `Invalid escape \\${escapeChar}.`,
              {
                line: token.loc.start.line,
                column: token.loc.start.column + escapeIndex,
                offset: token.loc.start.offset + escapeIndex
              }
            );
          }
          escapeIndex = value.indexOf("\\", lastIndex);
        }
        result += value.slice(lastIndex);
        return result;
      }
      function getLiteralValue(token) {
        switch (token.type) {
          case "Boolean":
            return token.value === "true";
          case "Number":
            return Number(token.value);
          case "Null":
            return null;
          case "String":
            return getStringValue(token);
        }
      }
      function parse3(text, options2) {
        options2 = Object.freeze({
          ...DEFAULT_OPTIONS$1,
          ...options2
        });
        const tokens = tokenize(text, {
          comments: !!options2.comments,
          ranges: !!options2.ranges
        });
        let tokenIndex = 0;
        function nextNoComments() {
          return tokens[tokenIndex++];
        }
        function nextSkipComments() {
          const nextToken = tokens[tokenIndex++];
          if (nextToken && nextToken.type.endsWith("Comment")) {
            return nextSkipComments();
          }
          return nextToken;
        }
        const next = options2.comments ? nextSkipComments : nextNoComments;
        function assertTokenValue(token, value) {
          if (!token || token.value !== value) {
            throw new UnexpectedToken(token);
          }
        }
        function assertTokenType(token, type2) {
          if (!token || token.type !== type2) {
            throw new UnexpectedToken(token);
          }
        }
        function createRange(start, end) {
          return options2.ranges ? {
            range: [start.offset, end.offset]
          } : void 0;
        }
        function createLiteralNode(token) {
          const range = createRange(token.loc.start, token.loc.end);
          return {
            type: token.type,
            value: getLiteralValue(token),
            loc: {
              start: {
                ...token.loc.start
              },
              end: {
                ...token.loc.end
              }
            },
            ...range
          };
        }
        function parseProperty(token) {
          assertTokenType(token, "String");
          const name = createLiteralNode(token);
          token = next();
          assertTokenValue(token, ":");
          const value = parseValue();
          const range = createRange(name.loc.start, value.loc.end);
          return types.member(name, value, {
            loc: {
              start: {
                ...name.loc.start
              },
              end: {
                ...value.loc.end
              }
            },
            ...range
          });
        }
        function parseObject(firstToken) {
          assertTokenValue(firstToken, "{");
          const members = [];
          let token = next();
          if (token && token.value !== "}") {
            do {
              members.push(parseProperty(token));
              token = next();
              if (token.value === ",") {
                token = next();
              } else {
                break;
              }
            } while (token);
          }
          assertTokenValue(token, "}");
          const range = createRange(firstToken.loc.start, token.loc.end);
          return types.object(members, {
            loc: {
              start: {
                ...firstToken.loc.start
              },
              end: {
                ...token.loc.end
              }
            },
            ...range
          });
        }
        function parseArray(firstToken) {
          assertTokenValue(firstToken, "[");
          const elements = [];
          let token = next();
          if (token && token.value !== "]") {
            do {
              elements.push(parseValue(token));
              token = next();
              if (token.value === ",") {
                token = next();
              } else {
                break;
              }
            } while (token);
          }
          assertTokenValue(token, "]");
          const range = createRange(firstToken.loc.start, token.loc.end);
          return types.array(elements, {
            type: "Array",
            elements,
            loc: {
              start: {
                ...firstToken.loc.start
              },
              end: {
                ...token.loc.end
              }
            },
            ...range
          });
        }
        function parseValue(token) {
          token = token || next();
          switch (token.type) {
            case "String":
            case "Boolean":
            case "Number":
            case "Null":
              return createLiteralNode(token);
            case "Punctuator":
              if (token.value === "{") {
                return parseObject(token);
              } else if (token.value === "[") {
                return parseArray(token);
              }
            default:
              throw new UnexpectedToken(token);
          }
        }
        const docBody = parseValue();
        const unexpectedToken = next();
        if (unexpectedToken) {
          throw new UnexpectedToken(unexpectedToken);
        }
        const docParts = {
          loc: {
            start: {
              line: 1,
              column: 1,
              offset: 0
            },
            end: {
              ...docBody.loc.end
            }
          }
        };
        if (options2.tokens) {
          docParts.tokens = tokens;
        }
        if (options2.ranges) {
          docParts.range = createRange(docParts.loc.start, docParts.loc.end);
        }
        return types.document(docBody, docParts);
      }
      var childKeys = /* @__PURE__ */ new Map([
        ["Document", ["body"]],
        ["Object", ["members"]],
        ["Member", ["name", "value"]],
        ["Array", ["elements"]],
        ["String", []],
        ["Number", []],
        ["Boolean", []],
        ["Null", []]
      ]);
      function isObject(value) {
        return value && typeof value === "object";
      }
      function isNode(value) {
        return isObject(value) && typeof value.type === "string";
      }
      function traverse(root, visitor) {
        function visitNode(node, parent) {
          if (typeof visitor.enter === "function") {
            visitor.enter(node, parent);
          }
          for (const key of childKeys.get(node.type)) {
            const value = node[key];
            if (isObject(value)) {
              if (Array.isArray(value)) {
                value.forEach((child) => visitNode(child, node));
              } else if (isNode(value)) {
                visitNode(value, node);
              }
            }
          }
          if (typeof visitor.exit === "function") {
            visitor.exit(node, parent);
          }
        }
        visitNode(root);
      }
      function iterator(root, filter = () => true) {
        const traversal = [];
        traverse(root, {
          enter(node, parent) {
            traversal.push({ node, parent, phase: "enter" });
          },
          exit(node, parent) {
            traversal.push({ node, parent, phase: "exit" });
          }
        });
        return traversal.filter(filter).values();
      }
      function evaluate(node) {
        switch (node.type) {
          case "String":
          case "Number":
          case "Boolean":
            return node.value;
          case "Null":
            return null;
          case "Array":
            return node.elements.map(evaluate);
          case "Object": {
            const object = {};
            node.members.forEach((member) => {
              object[evaluate(member.name)] = evaluate(member.value);
            });
            return object;
          }
          case "Document":
            return evaluate(node.body);
          case "Property":
            throw new Error("Cannot evaluate object property outside of an object.");
          default:
            throw new Error(`Unknown node type ${node.type}.`);
        }
      }
      function print2(node, { indent = 0 } = {}) {
        const value = evaluate(node);
        return JSON.stringify(value, null, indent);
      }
      exports.evaluate = evaluate;
      exports.iterator = iterator;
      exports.parse = parse3;
      exports.print = print2;
      exports.tokenize = tokenize;
      exports.traverse = traverse;
      exports.types = types;
    }
  });

  // node_modules/color-name/index.js
  var require_color_name = __commonJS({
    "node_modules/color-name/index.js"(exports, module) {
      init_globals();
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/color-convert/conversions.js
  var require_conversions = __commonJS({
    "node_modules/color-convert/conversions.js"(exports, module) {
      init_globals();
      var cssKeywords = require_color_name();
      var reverseKeywords = {};
      for (const key of Object.keys(cssKeywords)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
      var convert = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      module.exports = convert;
      for (const model of Object.keys(convert)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        const { channels, labels } = convert[model];
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
      convert.rgb.hsl = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const min = Math.min(r, g, b);
        const max = Math.max(r, g, b);
        const delta = max - min;
        let h;
        let s;
        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h = Math.min(h * 60, 360);
        if (h < 0) {
          h += 360;
        }
        const l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        let rdif;
        let gdif;
        let bdif;
        let h;
        let s;
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const v = Math.max(r, g, b);
        const diff = v - Math.min(r, g, b);
        const diffc = function(c) {
          return (v - c) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h = 0;
          s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h = bdif - gdif;
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
          }
          if (h < 0) {
            h += 1;
          } else if (h > 1) {
            h -= 1;
          }
        }
        return [
          h * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        const r = rgb[0];
        const g = rgb[1];
        let b = rgb[2];
        const h = convert.rgb.hsl(rgb)[0];
        const w = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const k = Math.min(1 - r, 1 - g, 1 - b);
        const c = (1 - r - k) / (1 - k) || 0;
        const m = (1 - g - k) / (1 - k) || 0;
        const y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
      }
      convert.rgb.keyword = function(rgb) {
        const reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        let currentClosestDistance = Infinity;
        let currentClosestKeyword;
        for (const keyword of Object.keys(cssKeywords)) {
          const value = cssKeywords[keyword];
          const distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        let r = rgb[0] / 255;
        let g = rgb[1] / 255;
        let b = rgb[2] / 255;
        r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
        g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
        b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
        const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        const xyz = convert.rgb.xyz(rgb);
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.hsl.rgb = function(hsl) {
        const h = hsl[0] / 360;
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        let t2;
        let t3;
        let val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }
        const t1 = 2 * l - t2;
        const rgb = [0, 0, 0];
        for (let i = 0; i < 3; i++) {
          t3 = h + 1 / 3 * -(i - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        const h = hsl[0];
        let s = hsl[1] / 100;
        let l = hsl[2] / 100;
        let smin = s;
        const lmin = Math.max(l, 0.01);
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        const v = (l + s) / 2;
        const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        const h = hsv[0] / 60;
        const s = hsv[1] / 100;
        let v = hsv[2] / 100;
        const hi = Math.floor(h) % 6;
        const f = h - Math.floor(h);
        const p = 255 * v * (1 - s);
        const q = 255 * v * (1 - s * f);
        const t = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t];
          case 3:
            return [p, q, v];
          case 4:
            return [t, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        const h = hsv[0];
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const vmin = Math.max(v, 0.01);
        let sl;
        let l;
        l = (2 - s) * v;
        const lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        const h = hwb[0] / 360;
        let wh = hwb[1] / 100;
        let bl = hwb[2] / 100;
        const ratio = wh + bl;
        let f;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        const i = Math.floor(6 * h);
        const v = 1 - bl;
        f = 6 * h - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        const n = wh + f * (v - wh);
        let r;
        let g;
        let b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        const c = cmyk[0] / 100;
        const m = cmyk[1] / 100;
        const y = cmyk[2] / 100;
        const k = cmyk[3] / 100;
        const r = 1 - Math.min(1, c * (1 - k) + k);
        const g = 1 - Math.min(1, m * (1 - k) + k);
        const b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        const x = xyz[0] / 100;
        const y = xyz[1] / 100;
        const z = xyz[2] / 100;
        let r;
        let g;
        let b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
        g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
        b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.lab.xyz = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let x;
        let y;
        let z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        const y2 = y ** 3;
        const x2 = x ** 3;
        const z2 = z ** 3;
        y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let h;
        const hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;
        if (h < 0) {
          h += 360;
        }
        const c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };
      convert.lch.lab = function(lch) {
        const l = lch[0];
        const c = lch[1];
        const h = lch[2];
        const hr = h / 360 * 2 * Math.PI;
        const a = c * Math.cos(hr);
        const b = c * Math.sin(hr);
        return [l, a, b];
      };
      convert.rgb.ansi16 = function(args, saturation = null) {
        const [r, g, b] = args;
        let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        const r = args[0];
        const g = args[1];
        const b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        let color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        const mult = (~~(args > 50) + 1) * 0.5;
        const r = (color & 1) * mult * 255;
        const g = (color >> 1 & 1) * mult * 255;
        const b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          const c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        let rem;
        const r = Math.floor(args / 36) / 5 * 255;
        const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        const b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        let colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map((char) => {
            return char + char;
          }).join("");
        }
        const integer = parseInt(colorString, 16);
        const r = integer >> 16 & 255;
        const g = integer >> 8 & 255;
        const b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const max = Math.max(Math.max(r, g), b);
        const min = Math.min(Math.min(r, g), b);
        const chroma = max - min;
        let grayscale;
        let hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
        let f = 0;
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const c = s * v;
        let f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        const h = hcg[0] / 360;
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        const pure = [0, 0, 0];
        const hi = h % 1 * 6;
        const v = hi % 1;
        const w = 1 - v;
        let mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        let f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const l = g * (1 - c) + 0.5 * c;
        let s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        const w = hwb[1] / 100;
        const b = hwb[2] / 100;
        const v = 1 - b;
        const c = v - w;
        let g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hsv = convert.gray.hsl;
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        const val = Math.round(gray[0] / 100 * 255) & 255;
        const integer = (val << 16) + (val << 8) + val;
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // node_modules/color-convert/route.js
  var require_route = __commonJS({
    "node_modules/color-convert/route.js"(exports, module) {
      init_globals();
      var conversions = require_conversions();
      function buildGraph() {
        const graph = {};
        const models = Object.keys(conversions);
        for (let len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        const graph = buildGraph();
        const queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          const current = queue.pop();
          const adjacents = Object.keys(conversions[current]);
          for (let len = adjacents.length, i = 0; i < len; i++) {
            const adjacent = adjacents[i];
            const node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        const path = [graph[toModel].parent, toModel];
        let fn = conversions[graph[toModel].parent][toModel];
        let cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      module.exports = function(fromModel) {
        const graph = deriveBFS(fromModel);
        const conversion = {};
        const models = Object.keys(graph);
        for (let len = models.length, i = 0; i < len; i++) {
          const toModel = models[i];
          const node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // node_modules/color-convert/index.js
  var require_color_convert = __commonJS({
    "node_modules/color-convert/index.js"(exports, module) {
      init_globals();
      var conversions = require_conversions();
      var route = require_route();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          const result = fn(args);
          if (typeof result === "object") {
            for (let len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach((fromModel) => {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        const routes = route(fromModel);
        const routeModels = Object.keys(routes);
        routeModels.forEach((toModel) => {
          const fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module.exports = convert;
    }
  });

  // node_modules/ansi-styles/index.js
  var require_ansi_styles = __commonJS({
    "node_modules/ansi-styles/index.js"(exports, module) {
      init_globals();
      var wrapAnsi16 = (fn, offset) => (...args) => {
        const code2 = fn(...args);
        return `\x1B[${code2 + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => (...args) => {
        const code2 = fn(...args);
        return `\x1B[${38 + offset};5;${code2}m`;
      };
      var wrapAnsi16m = (fn, offset) => (...args) => {
        const rgb = fn(...args);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      var ansi2ansi = (n) => n;
      var rgb2rgb = (r, g, b) => [r, g, b];
      var setLazyProperty = (object, property, get2) => {
        Object.defineProperty(object, property, {
          get: () => {
            const value = get2();
            Object.defineProperty(object, property, {
              value,
              enumerable: true,
              configurable: true
            });
            return value;
          },
          enumerable: true,
          configurable: true
        });
      };
      var colorConvert;
      var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
        if (colorConvert === void 0) {
          colorConvert = require_color_convert();
        }
        const offset = isBackground ? 10 : 0;
        const styles = {};
        for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
          const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
          if (sourceSpace === targetSpace) {
            styles[name] = wrap(identity, offset);
          } else if (typeof suite === "object") {
            styles[name] = wrap(suite[targetSpace], offset);
          }
        }
        return styles;
      };
      function assembleStyles() {
        const codes = /* @__PURE__ */ new Map();
        const styles = {
          modifier: {
            reset: [0, 0],
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            blackBright: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.gray = styles.color.blackBright;
        styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
        styles.color.grey = styles.color.blackBright;
        styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
        for (const [groupName, group] of Object.entries(styles)) {
          for (const [styleName, style] of Object.entries(group)) {
            styles[styleName] = {
              open: `\x1B[${style[0]}m`,
              close: `\x1B[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
          }
          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          });
        }
        Object.defineProperty(styles, "codes", {
          value: codes,
          enumerable: false
        });
        styles.color.close = "\x1B[39m";
        styles.bgColor.close = "\x1B[49m";
        setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
        setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
        return styles;
      }
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });

  // node_modules/supports-color/browser.js
  var require_browser2 = __commonJS({
    "node_modules/supports-color/browser.js"(exports, module) {
      init_globals();
      module.exports = {
        stdout: false,
        stderr: false
      };
    }
  });

  // node_modules/chalk/source/util.js
  var require_util5 = __commonJS({
    "node_modules/chalk/source/util.js"(exports, module) {
      init_globals();
      var stringReplaceAll = (string, substring, replacer) => {
        let index = string.indexOf(substring);
        if (index === -1) {
          return string;
        }
        const substringLength = substring.length;
        let endIndex = 0;
        let returnValue = "";
        do {
          returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
          endIndex = index + substringLength;
          index = string.indexOf(substring, endIndex);
        } while (index !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix2, index) => {
        let endIndex = 0;
        let returnValue = "";
        do {
          const gotCR = string[index - 1] === "\r";
          returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix2;
          endIndex = index + 1;
          index = string.indexOf("\n", endIndex);
        } while (index !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      module.exports = {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      };
    }
  });

  // node_modules/chalk/source/templates.js
  var require_templates = __commonJS({
    "node_modules/chalk/source/templates.js"(exports, module) {
      init_globals();
      var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = /* @__PURE__ */ new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "	"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\x1B"],
        ["a", "\x07"]
      ]);
      function unescape(c) {
        const u = c[0] === "u";
        const bracket = c[1] === "{";
        if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
          return String.fromCharCode(parseInt(c.slice(1), 16));
        }
        if (u && bracket) {
          return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
        }
        return ESCAPES.get(c) || c;
      }
      function parseArguments(name, arguments_) {
        const results = [];
        const chunks = arguments_.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          const number2 = Number(chunk);
          if (!Number.isNaN(number2)) {
            results.push(number2);
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1];
          if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([name].concat(args));
          } else {
            results.push([name]);
          }
        }
        return results;
      }
      function buildStyle(chalk5, styles) {
        const enabled = {};
        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk5;
        for (const [styleName, styles2] of Object.entries(enabled)) {
          if (!Array.isArray(styles2)) {
            continue;
          }
          if (!(styleName in current)) {
            throw new Error(`Unknown Chalk style: ${styleName}`);
          }
          current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
        }
        return current;
      }
      module.exports = (chalk5, temporary) => {
        const styles = [];
        const chunks = [];
        let chunk = [];
        temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
          if (escapeCharacter) {
            chunk.push(unescape(escapeCharacter));
          } else if (style) {
            const string = chunk.join("");
            chunk = [];
            chunks.push(styles.length === 0 ? string : buildStyle(chalk5, styles)(string));
            styles.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk5, styles)(chunk.join("")));
            chunk = [];
            styles.pop();
          } else {
            chunk.push(character);
          }
        });
        chunks.push(chunk.join(""));
        if (styles.length > 0) {
          const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMessage);
        }
        return chunks.join("");
      };
    }
  });

  // node_modules/chalk/source/index.js
  var require_source = __commonJS({
    "node_modules/chalk/source/index.js"(exports, module) {
      init_globals();
      var ansiStyles = require_ansi_styles();
      var { stdout: stdoutColor, stderr: stderrColor } = require_browser2();
      var {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      } = require_util5();
      var { isArray } = Array;
      var levelMapping = [
        "ansi",
        "ansi",
        "ansi256",
        "ansi16m"
      ];
      var styles = /* @__PURE__ */ Object.create(null);
      var applyOptions = (object, options2 = {}) => {
        if (options2.level && !(Number.isInteger(options2.level) && options2.level >= 0 && options2.level <= 3)) {
          throw new Error("The `level` option should be an integer from 0 to 3");
        }
        const colorLevel = stdoutColor ? stdoutColor.level : 0;
        object.level = options2.level === void 0 ? colorLevel : options2.level;
      };
      var ChalkClass = class {
        constructor(options2) {
          return chalkFactory(options2);
        }
      };
      var chalkFactory = (options2) => {
        const chalk6 = {};
        applyOptions(chalk6, options2);
        chalk6.template = (...arguments_) => chalkTag(chalk6.template, ...arguments_);
        Object.setPrototypeOf(chalk6, Chalk.prototype);
        Object.setPrototypeOf(chalk6.template, chalk6);
        chalk6.template.constructor = () => {
          throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
        };
        chalk6.template.Instance = ChalkClass;
        return chalk6.template;
      };
      function Chalk(options2) {
        return chalkFactory(options2);
      }
      for (const [styleName, style] of Object.entries(ansiStyles)) {
        styles[styleName] = {
          get() {
            const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
            Object.defineProperty(this, styleName, { value: builder });
            return builder;
          }
        };
      }
      styles.visible = {
        get() {
          const builder = createBuilder(this, this._styler, true);
          Object.defineProperty(this, "visible", { value: builder });
          return builder;
        }
      };
      var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
      for (const model of usedModels) {
        styles[model] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      for (const model of usedModels) {
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, {
        ...styles,
        level: {
          enumerable: true,
          get() {
            return this._generator.level;
          },
          set(level) {
            this._generator.level = level;
          }
        }
      });
      var createStyler = (open, close, parent) => {
        let openAll;
        let closeAll;
        if (parent === void 0) {
          openAll = open;
          closeAll = close;
        } else {
          openAll = parent.openAll + open;
          closeAll = close + parent.closeAll;
        }
        return {
          open,
          close,
          openAll,
          closeAll,
          parent
        };
      };
      var createBuilder = (self2, _styler, _isEmpty) => {
        const builder = (...arguments_) => {
          if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
            return applyStyle(builder, chalkTag(builder, ...arguments_));
          }
          return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
        };
        Object.setPrototypeOf(builder, proto);
        builder._generator = self2;
        builder._styler = _styler;
        builder._isEmpty = _isEmpty;
        return builder;
      };
      var applyStyle = (self2, string) => {
        if (self2.level <= 0 || !string) {
          return self2._isEmpty ? "" : string;
        }
        let styler = self2._styler;
        if (styler === void 0) {
          return string;
        }
        const { openAll, closeAll } = styler;
        if (string.indexOf("\x1B") !== -1) {
          while (styler !== void 0) {
            string = stringReplaceAll(string, styler.close, styler.open);
            styler = styler.parent;
          }
        }
        const lfIndex = string.indexOf("\n");
        if (lfIndex !== -1) {
          string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
        }
        return openAll + string + closeAll;
      };
      var template;
      var chalkTag = (chalk6, ...strings) => {
        const [firstString] = strings;
        if (!isArray(firstString) || !isArray(firstString.raw)) {
          return strings.join(" ");
        }
        const arguments_ = strings.slice(1);
        const parts = [firstString.raw[0]];
        for (let i = 1; i < firstString.length; i++) {
          parts.push(
            String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"),
            String(firstString.raw[i])
          );
        }
        if (template === void 0) {
          template = require_templates();
        }
        return template(chalk6, parts.join(""));
      };
      Object.defineProperties(Chalk.prototype, styles);
      var chalk5 = Chalk();
      chalk5.supportsColor = stdoutColor;
      chalk5.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
      chalk5.stderr.supportsColor = stderrColor;
      module.exports = chalk5;
    }
  });

  // node_modules/js-tokens/index.js
  var require_js_tokens = __commonJS({
    "node_modules/js-tokens/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
      exports.matchToToken = function(match) {
        var token = { type: "invalid", value: match[0], closed: void 0 };
        if (match[1])
          token.type = "string", token.closed = !!(match[3] || match[4]);
        else if (match[5])
          token.type = "comment";
        else if (match[6])
          token.type = "comment", token.closed = !!match[7];
        else if (match[8])
          token.type = "regex";
        else if (match[9])
          token.type = "number";
        else if (match[10])
          token.type = "name";
        else if (match[11])
          token.type = "punctuator";
        else if (match[12])
          token.type = "whitespace";
        return token;
      };
    }
  });

  // node_modules/@babel/helper-validator-identifier/lib/identifier.js
  var require_identifier = __commonJS({
    "node_modules/@babel/helper-validator-identifier/lib/identifier.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isIdentifierChar = isIdentifierChar;
      exports.isIdentifierName = isIdentifierName;
      exports.isIdentifierStart = isIdentifierStart;
      var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
      var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
      nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
      var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
      var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      function isInAstralSet(code2, set) {
        let pos = 65536;
        for (let i = 0, length = set.length; i < length; i += 2) {
          pos += set[i];
          if (pos > code2)
            return false;
          pos += set[i + 1];
          if (pos >= code2)
            return true;
        }
        return false;
      }
      function isIdentifierStart(code2) {
        if (code2 < 65)
          return code2 === 36;
        if (code2 <= 90)
          return true;
        if (code2 < 97)
          return code2 === 95;
        if (code2 <= 122)
          return true;
        if (code2 <= 65535) {
          return code2 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code2));
        }
        return isInAstralSet(code2, astralIdentifierStartCodes);
      }
      function isIdentifierChar(code2) {
        if (code2 < 48)
          return code2 === 36;
        if (code2 < 58)
          return true;
        if (code2 < 65)
          return false;
        if (code2 <= 90)
          return true;
        if (code2 < 97)
          return code2 === 95;
        if (code2 <= 122)
          return true;
        if (code2 <= 65535) {
          return code2 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code2));
        }
        return isInAstralSet(code2, astralIdentifierStartCodes) || isInAstralSet(code2, astralIdentifierCodes);
      }
      function isIdentifierName(name) {
        let isFirst = true;
        for (let i = 0; i < name.length; i++) {
          let cp = name.charCodeAt(i);
          if ((cp & 64512) === 55296 && i + 1 < name.length) {
            const trail = name.charCodeAt(++i);
            if ((trail & 64512) === 56320) {
              cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
            }
          }
          if (isFirst) {
            isFirst = false;
            if (!isIdentifierStart(cp)) {
              return false;
            }
          } else if (!isIdentifierChar(cp)) {
            return false;
          }
        }
        return !isFirst;
      }
    }
  });

  // node_modules/@babel/helper-validator-identifier/lib/keyword.js
  var require_keyword2 = __commonJS({
    "node_modules/@babel/helper-validator-identifier/lib/keyword.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isKeyword = isKeyword;
      exports.isReservedWord = isReservedWord;
      exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
      exports.isStrictBindReservedWord = isStrictBindReservedWord;
      exports.isStrictReservedWord = isStrictReservedWord;
      var reservedWords = {
        keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
        strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
        strictBind: ["eval", "arguments"]
      };
      var keywords2 = new Set(reservedWords.keyword);
      var reservedWordsStrictSet = new Set(reservedWords.strict);
      var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
      function isReservedWord(word, inModule) {
        return inModule && word === "await" || word === "enum";
      }
      function isStrictReservedWord(word, inModule) {
        return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
      }
      function isStrictBindOnlyReservedWord(word) {
        return reservedWordsStrictBindSet.has(word);
      }
      function isStrictBindReservedWord(word, inModule) {
        return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
      }
      function isKeyword(word) {
        return keywords2.has(word);
      }
    }
  });

  // node_modules/@babel/helper-validator-identifier/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/@babel/helper-validator-identifier/lib/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "isIdentifierChar", {
        enumerable: true,
        get: function() {
          return _identifier.isIdentifierChar;
        }
      });
      Object.defineProperty(exports, "isIdentifierName", {
        enumerable: true,
        get: function() {
          return _identifier.isIdentifierName;
        }
      });
      Object.defineProperty(exports, "isIdentifierStart", {
        enumerable: true,
        get: function() {
          return _identifier.isIdentifierStart;
        }
      });
      Object.defineProperty(exports, "isKeyword", {
        enumerable: true,
        get: function() {
          return _keyword.isKeyword;
        }
      });
      Object.defineProperty(exports, "isReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isReservedWord;
        }
      });
      Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isStrictBindOnlyReservedWord;
        }
      });
      Object.defineProperty(exports, "isStrictBindReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isStrictBindReservedWord;
        }
      });
      Object.defineProperty(exports, "isStrictReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isStrictReservedWord;
        }
      });
      var _identifier = require_identifier();
      var _keyword = require_keyword2();
    }
  });

  // node_modules/@babel/highlight/node_modules/escape-string-regexp/index.js
  var require_escape_string_regexp = __commonJS({
    "node_modules/@babel/highlight/node_modules/escape-string-regexp/index.js"(exports, module) {
      init_globals();
      var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
      module.exports = function(str) {
        if (typeof str !== "string") {
          throw new TypeError("Expected a string");
        }
        return str.replace(matchOperatorsRe, "\\$&");
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-name/index.js
  var require_color_name2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-name/index.js"(exports, module) {
      init_globals();
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-convert/conversions.js
  var require_conversions2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-convert/conversions.js"(exports, module) {
      init_globals();
      var cssKeywords = require_color_name2();
      var reverseKeywords = {};
      for (key in cssKeywords) {
        if (cssKeywords.hasOwnProperty(key)) {
          reverseKeywords[cssKeywords[key]] = key;
        }
      }
      var key;
      var convert = module.exports = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      for (model in convert) {
        if (convert.hasOwnProperty(model)) {
          if (!("channels" in convert[model])) {
            throw new Error("missing channels property: " + model);
          }
          if (!("labels" in convert[model])) {
            throw new Error("missing channel labels property: " + model);
          }
          if (convert[model].labels.length !== convert[model].channels) {
            throw new Error("channel and label counts mismatch: " + model);
          }
          channels = convert[model].channels;
          labels = convert[model].labels;
          delete convert[model].channels;
          delete convert[model].labels;
          Object.defineProperty(convert[model], "channels", { value: channels });
          Object.defineProperty(convert[model], "labels", { value: labels });
        }
      }
      var channels;
      var labels;
      var model;
      convert.rgb.hsl = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var h;
        var s;
        var l;
        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h = Math.min(h * 60, 360);
        if (h < 0) {
          h += 360;
        }
        l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        var rdif;
        var gdif;
        var bdif;
        var h;
        var s;
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var v = Math.max(r, g, b);
        var diff = v - Math.min(r, g, b);
        var diffc = function(c) {
          return (v - c) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h = s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h = bdif - gdif;
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
          }
          if (h < 0) {
            h += 1;
          } else if (h > 1) {
            h -= 1;
          }
        }
        return [
          h * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        var r = rgb[0];
        var g = rgb[1];
        var b = rgb[2];
        var h = convert.rgb.hsl(rgb)[0];
        var w = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var c;
        var m;
        var y;
        var k;
        k = Math.min(1 - r, 1 - g, 1 - b);
        c = (1 - r - k) / (1 - k) || 0;
        m = (1 - g - k) / (1 - k) || 0;
        y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
      }
      convert.rgb.keyword = function(rgb) {
        var reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        var currentClosestDistance = Infinity;
        var currentClosestKeyword;
        for (var keyword in cssKeywords) {
          if (cssKeywords.hasOwnProperty(keyword)) {
            var value = cssKeywords[keyword];
            var distance = comparativeDistance(rgb, value);
            if (distance < currentClosestDistance) {
              currentClosestDistance = distance;
              currentClosestKeyword = keyword;
            }
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
        g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
        b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
        var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        var xyz = convert.rgb.xyz(rgb);
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
        l = 116 * y - 16;
        a = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a, b];
      };
      convert.hsl.rgb = function(hsl) {
        var h = hsl[0] / 360;
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var t1;
        var t2;
        var t3;
        var rgb;
        var val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }
        t1 = 2 * l - t2;
        rgb = [0, 0, 0];
        for (var i = 0; i < 3; i++) {
          t3 = h + 1 / 3 * -(i - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        var h = hsl[0];
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var smin = s;
        var lmin = Math.max(l, 0.01);
        var sv;
        var v;
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        v = (l + s) / 2;
        sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        var h = hsv[0] / 60;
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var hi = Math.floor(h) % 6;
        var f = h - Math.floor(h);
        var p = 255 * v * (1 - s);
        var q = 255 * v * (1 - s * f);
        var t = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t];
          case 3:
            return [p, q, v];
          case 4:
            return [t, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        var h = hsv[0];
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var vmin = Math.max(v, 0.01);
        var lmin;
        var sl;
        var l;
        l = (2 - s) * v;
        lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        var h = hwb[0] / 360;
        var wh = hwb[1] / 100;
        var bl = hwb[2] / 100;
        var ratio = wh + bl;
        var i;
        var v;
        var f;
        var n;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        i = Math.floor(6 * h);
        v = 1 - bl;
        f = 6 * h - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        n = wh + f * (v - wh);
        var r;
        var g;
        var b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        var c = cmyk[0] / 100;
        var m = cmyk[1] / 100;
        var y = cmyk[2] / 100;
        var k = cmyk[3] / 100;
        var r;
        var g;
        var b;
        r = 1 - Math.min(1, c * (1 - k) + k);
        g = 1 - Math.min(1, m * (1 - k) + k);
        b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        var x = xyz[0] / 100;
        var y = xyz[1] / 100;
        var z = xyz[2] / 100;
        var r;
        var g;
        var b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
        g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
        b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
        l = 116 * y - 16;
        a = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a, b];
      };
      convert.lab.xyz = function(lab) {
        var l = lab[0];
        var a = lab[1];
        var b = lab[2];
        var x;
        var y;
        var z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        var y2 = Math.pow(y, 3);
        var x2 = Math.pow(x, 3);
        var z2 = Math.pow(z, 3);
        y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        var l = lab[0];
        var a = lab[1];
        var b = lab[2];
        var hr;
        var h;
        var c;
        hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;
        if (h < 0) {
          h += 360;
        }
        c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };
      convert.lch.lab = function(lch) {
        var l = lch[0];
        var c = lch[1];
        var h = lch[2];
        var a;
        var b;
        var hr;
        hr = h / 360 * 2 * Math.PI;
        a = c * Math.cos(hr);
        b = c * Math.sin(hr);
        return [l, a, b];
      };
      convert.rgb.ansi16 = function(args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        var color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        var mult = (~~(args > 50) + 1) * 0.5;
        var r = (color & 1) * mult * 255;
        var g = (color >> 1 & 1) * mult * 255;
        var b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          var c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        var rem;
        var r = Math.floor(args / 36) / 5 * 255;
        var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        var b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        var string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        var colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map(function(char) {
            return char + char;
          }).join("");
        }
        var integer = parseInt(colorString, 16);
        var r = integer >> 16 & 255;
        var g = integer >> 8 & 255;
        var b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var max = Math.max(Math.max(r, g), b);
        var min = Math.min(Math.min(r, g), b);
        var chroma = max - min;
        var grayscale;
        var hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma + 4;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var c = 1;
        var f = 0;
        if (l < 0.5) {
          c = 2 * s * l;
        } else {
          c = 2 * s * (1 - l);
        }
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var c = s * v;
        var f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        var h = hcg[0] / 360;
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        var pure = [0, 0, 0];
        var hi = h % 1 * 6;
        var v = hi % 1;
        var w = 1 - v;
        var mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1 - c);
        var f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var l = g * (1 - c) + 0.5 * c;
        var s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        var w = hwb[1] / 100;
        var b = hwb[2] / 100;
        var v = 1 - b;
        var c = v - w;
        var g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = convert.gray.hsv = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        var val = Math.round(gray[0] / 100 * 255) & 255;
        var integer = (val << 16) + (val << 8) + val;
        var string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-convert/route.js
  var require_route2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-convert/route.js"(exports, module) {
      init_globals();
      var conversions = require_conversions2();
      function buildGraph() {
        var graph = {};
        var models = Object.keys(conversions);
        for (var len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        var graph = buildGraph();
        var queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          var current = queue.pop();
          var adjacents = Object.keys(conversions[current]);
          for (var len = adjacents.length, i = 0; i < len; i++) {
            var adjacent = adjacents[i];
            var node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        var path = [graph[toModel].parent, toModel];
        var fn = conversions[graph[toModel].parent][toModel];
        var cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      module.exports = function(fromModel) {
        var graph = deriveBFS(fromModel);
        var conversion = {};
        var models = Object.keys(graph);
        for (var len = models.length, i = 0; i < len; i++) {
          var toModel = models[i];
          var node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-convert/index.js
  var require_color_convert2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-convert/index.js"(exports, module) {
      init_globals();
      var conversions = require_conversions2();
      var route = require_route2();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          var result = fn(args);
          if (typeof result === "object") {
            for (var len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach(function(fromModel) {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        var routes = route(fromModel);
        var routeModels = Object.keys(routes);
        routeModels.forEach(function(toModel) {
          var fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module.exports = convert;
    }
  });

  // node_modules/@babel/highlight/node_modules/ansi-styles/index.js
  var require_ansi_styles2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/ansi-styles/index.js"(exports, module) {
      init_globals();
      var colorConvert = require_color_convert2();
      var wrapAnsi16 = (fn, offset) => function() {
        const code2 = fn.apply(colorConvert, arguments);
        return `\x1B[${code2 + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => function() {
        const code2 = fn.apply(colorConvert, arguments);
        return `\x1B[${38 + offset};5;${code2}m`;
      };
      var wrapAnsi16m = (fn, offset) => function() {
        const rgb = fn.apply(colorConvert, arguments);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      function assembleStyles() {
        const codes = /* @__PURE__ */ new Map();
        const styles = {
          modifier: {
            reset: [0, 0],
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            gray: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.grey = styles.color.gray;
        for (const groupName of Object.keys(styles)) {
          const group = styles[groupName];
          for (const styleName of Object.keys(group)) {
            const style = group[styleName];
            styles[styleName] = {
              open: `\x1B[${style[0]}m`,
              close: `\x1B[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
          }
          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          });
          Object.defineProperty(styles, "codes", {
            value: codes,
            enumerable: false
          });
        }
        const ansi2ansi = (n) => n;
        const rgb2rgb = (r, g, b) => [r, g, b];
        styles.color.close = "\x1B[39m";
        styles.bgColor.close = "\x1B[49m";
        styles.color.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 0)
        };
        styles.color.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 0)
        };
        styles.color.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 0)
        };
        styles.bgColor.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 10)
        };
        styles.bgColor.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 10)
        };
        styles.bgColor.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 10)
        };
        for (let key of Object.keys(colorConvert)) {
          if (typeof colorConvert[key] !== "object") {
            continue;
          }
          const suite = colorConvert[key];
          if (key === "ansi16") {
            key = "ansi";
          }
          if ("ansi16" in suite) {
            styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
            styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
          }
          if ("ansi256" in suite) {
            styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
            styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
          }
          if ("rgb" in suite) {
            styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
            styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
          }
        }
        return styles;
      }
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });

  // node_modules/@babel/highlight/node_modules/supports-color/browser.js
  var require_browser3 = __commonJS({
    "node_modules/@babel/highlight/node_modules/supports-color/browser.js"(exports, module) {
      init_globals();
      module.exports = {
        stdout: false,
        stderr: false
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/chalk/templates.js
  var require_templates2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/chalk/templates.js"(exports, module) {
      init_globals();
      var TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = /* @__PURE__ */ new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "	"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\x1B"],
        ["a", "\x07"]
      ]);
      function unescape(c) {
        if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
          return String.fromCharCode(parseInt(c.slice(1), 16));
        }
        return ESCAPES.get(c) || c;
      }
      function parseArguments(name, args) {
        const results = [];
        const chunks = args.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          if (!isNaN(chunk)) {
            results.push(Number(chunk));
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1];
          if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([name].concat(args));
          } else {
            results.push([name]);
          }
        }
        return results;
      }
      function buildStyle(chalk5, styles) {
        const enabled = {};
        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk5;
        for (const styleName of Object.keys(enabled)) {
          if (Array.isArray(enabled[styleName])) {
            if (!(styleName in current)) {
              throw new Error(`Unknown Chalk style: ${styleName}`);
            }
            if (enabled[styleName].length > 0) {
              current = current[styleName].apply(current, enabled[styleName]);
            } else {
              current = current[styleName];
            }
          }
        }
        return current;
      }
      module.exports = (chalk5, tmp) => {
        const styles = [];
        const chunks = [];
        let chunk = [];
        tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
          if (escapeChar) {
            chunk.push(unescape(escapeChar));
          } else if (style) {
            const str = chunk.join("");
            chunk = [];
            chunks.push(styles.length === 0 ? str : buildStyle(chalk5, styles)(str));
            styles.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk5, styles)(chunk.join("")));
            chunk = [];
            styles.pop();
          } else {
            chunk.push(chr);
          }
        });
        chunks.push(chunk.join(""));
        if (styles.length > 0) {
          const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMsg);
        }
        return chunks.join("");
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/chalk/index.js
  var require_chalk = __commonJS({
    "node_modules/@babel/highlight/node_modules/chalk/index.js"(exports, module) {
      init_globals();
      var escapeStringRegexp = require_escape_string_regexp();
      var ansiStyles = require_ansi_styles2();
      var stdoutColor = require_browser3().stdout;
      var template = require_templates2();
      var isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
      var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
      var skipModels = /* @__PURE__ */ new Set(["gray"]);
      var styles = /* @__PURE__ */ Object.create(null);
      function applyOptions(obj, options2) {
        options2 = options2 || {};
        const scLevel = stdoutColor ? stdoutColor.level : 0;
        obj.level = options2.level === void 0 ? scLevel : options2.level;
        obj.enabled = "enabled" in options2 ? options2.enabled : obj.level > 0;
      }
      function Chalk(options2) {
        if (!this || !(this instanceof Chalk) || this.template) {
          const chalk5 = {};
          applyOptions(chalk5, options2);
          chalk5.template = function() {
            const args = [].slice.call(arguments);
            return chalkTag.apply(null, [chalk5.template].concat(args));
          };
          Object.setPrototypeOf(chalk5, Chalk.prototype);
          Object.setPrototypeOf(chalk5.template, chalk5);
          chalk5.template.constructor = Chalk;
          return chalk5.template;
        }
        applyOptions(this, options2);
      }
      if (isSimpleWindowsTerm) {
        ansiStyles.blue.open = "\x1B[94m";
      }
      for (const key of Object.keys(ansiStyles)) {
        ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
        styles[key] = {
          get() {
            const codes = ansiStyles[key];
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
          }
        };
      }
      styles.visible = {
        get() {
          return build.call(this, this._styles || [], true, "visible");
        }
      };
      ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");
      for (const model of Object.keys(ansiStyles.color.ansi)) {
        if (skipModels.has(model)) {
          continue;
        }
        styles[model] = {
          get() {
            const level = this.level;
            return function() {
              const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
              const codes = {
                open,
                close: ansiStyles.color.close,
                closeRe: ansiStyles.color.closeRe
              };
              return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
            };
          }
        };
      }
      ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");
      for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
        if (skipModels.has(model)) {
          continue;
        }
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
          get() {
            const level = this.level;
            return function() {
              const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
              const codes = {
                open,
                close: ansiStyles.bgColor.close,
                closeRe: ansiStyles.bgColor.closeRe
              };
              return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, styles);
      function build(_styles, _empty, key) {
        const builder = function() {
          return applyStyle.apply(builder, arguments);
        };
        builder._styles = _styles;
        builder._empty = _empty;
        const self2 = this;
        Object.defineProperty(builder, "level", {
          enumerable: true,
          get() {
            return self2.level;
          },
          set(level) {
            self2.level = level;
          }
        });
        Object.defineProperty(builder, "enabled", {
          enumerable: true,
          get() {
            return self2.enabled;
          },
          set(enabled) {
            self2.enabled = enabled;
          }
        });
        builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
        builder.__proto__ = proto;
        return builder;
      }
      function applyStyle() {
        const args = arguments;
        const argsLen = args.length;
        let str = String(arguments[0]);
        if (argsLen === 0) {
          return "";
        }
        if (argsLen > 1) {
          for (let a = 1; a < argsLen; a++) {
            str += " " + args[a];
          }
        }
        if (!this.enabled || this.level <= 0 || !str) {
          return this._empty ? "" : str;
        }
        const originalDim = ansiStyles.dim.open;
        if (isSimpleWindowsTerm && this.hasGrey) {
          ansiStyles.dim.open = "";
        }
        for (const code2 of this._styles.slice().reverse()) {
          str = code2.open + str.replace(code2.closeRe, code2.open) + code2.close;
          str = str.replace(/\r?\n/g, `${code2.close}$&${code2.open}`);
        }
        ansiStyles.dim.open = originalDim;
        return str;
      }
      function chalkTag(chalk5, strings) {
        if (!Array.isArray(strings)) {
          return [].slice.call(arguments, 1).join(" ");
        }
        const args = [].slice.call(arguments, 2);
        const parts = [strings.raw[0]];
        for (let i = 1; i < strings.length; i++) {
          parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
          parts.push(String(strings.raw[i]));
        }
        return template(chalk5, parts.join(""));
      }
      Object.defineProperties(Chalk.prototype, styles);
      module.exports = Chalk();
      module.exports.supportsColor = stdoutColor;
      module.exports.default = module.exports;
    }
  });

  // node_modules/@babel/highlight/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/@babel/highlight/lib/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = highlight;
      exports.getChalk = getChalk;
      exports.shouldHighlight = shouldHighlight;
      var _jsTokens = require_js_tokens();
      var _helperValidatorIdentifier = require_lib2();
      var _chalk = require_chalk();
      var sometimesKeywords = /* @__PURE__ */ new Set(["as", "async", "from", "get", "of", "set"]);
      function getDefs(chalk5) {
        return {
          keyword: chalk5.cyan,
          capitalized: chalk5.yellow,
          jsxIdentifier: chalk5.yellow,
          punctuator: chalk5.yellow,
          number: chalk5.magenta,
          string: chalk5.green,
          regex: chalk5.magenta,
          comment: chalk5.grey,
          invalid: chalk5.white.bgRed.bold
        };
      }
      var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
      var BRACKET = /^[()[\]{}]$/;
      var tokenize;
      {
        const JSX_TAG = /^[a-z][\w-]*$/i;
        const getTokenType = function(token, offset, text) {
          if (token.type === "name") {
            if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {
              return "keyword";
            }
            if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.slice(offset - 2, offset) == "</")) {
              return "jsxIdentifier";
            }
            if (token.value[0] !== token.value[0].toLowerCase()) {
              return "capitalized";
            }
          }
          if (token.type === "punctuator" && BRACKET.test(token.value)) {
            return "bracket";
          }
          if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
            return "punctuator";
          }
          return token.type;
        };
        tokenize = function* (text) {
          let match;
          while (match = _jsTokens.default.exec(text)) {
            const token = _jsTokens.matchToToken(match);
            yield {
              type: getTokenType(token, match.index, text),
              value: token.value
            };
          }
        };
      }
      function highlightTokens(defs, text) {
        let highlighted = "";
        for (const {
          type: type2,
          value
        } of tokenize(text)) {
          const colorize = defs[type2];
          if (colorize) {
            highlighted += value.split(NEWLINE).map((str) => colorize(str)).join("\n");
          } else {
            highlighted += value;
          }
        }
        return highlighted;
      }
      function shouldHighlight(options2) {
        return !!_chalk.supportsColor || options2.forceColor;
      }
      function getChalk(options2) {
        return options2.forceColor ? new _chalk.constructor({
          enabled: true,
          level: 1
        }) : _chalk;
      }
      function highlight(code2, options2 = {}) {
        if (code2 !== "" && shouldHighlight(options2)) {
          const chalk5 = getChalk(options2);
          const defs = getDefs(chalk5);
          return highlightTokens(defs, code2);
        } else {
          return code2;
        }
      }
    }
  });

  // node_modules/@babel/code-frame/lib/index.js
  var require_lib4 = __commonJS({
    "node_modules/@babel/code-frame/lib/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.codeFrameColumns = codeFrameColumns2;
      exports.default = _default;
      var _highlight = require_lib3();
      var deprecationWarningShown = false;
      function getDefs(chalk5) {
        return {
          gutter: chalk5.grey,
          marker: chalk5.red.bold,
          message: chalk5.red.bold
        };
      }
      var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
      function getMarkerLines(loc, source2, opts) {
        const startLoc = Object.assign({
          column: 0,
          line: -1
        }, loc.start);
        const endLoc = Object.assign({}, startLoc, loc.end);
        const {
          linesAbove = 2,
          linesBelow = 3
        } = opts || {};
        const startLine = startLoc.line;
        const startColumn = startLoc.column;
        const endLine = endLoc.line;
        const endColumn = endLoc.column;
        let start = Math.max(startLine - (linesAbove + 1), 0);
        let end = Math.min(source2.length, endLine + linesBelow);
        if (startLine === -1) {
          start = 0;
        }
        if (endLine === -1) {
          end = source2.length;
        }
        const lineDiff = endLine - startLine;
        const markerLines = {};
        if (lineDiff) {
          for (let i = 0; i <= lineDiff; i++) {
            const lineNumber = i + startLine;
            if (!startColumn) {
              markerLines[lineNumber] = true;
            } else if (i === 0) {
              const sourceLength = source2[lineNumber - 1].length;
              markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
            } else if (i === lineDiff) {
              markerLines[lineNumber] = [0, endColumn];
            } else {
              const sourceLength = source2[lineNumber - i].length;
              markerLines[lineNumber] = [0, sourceLength];
            }
          }
        } else {
          if (startColumn === endColumn) {
            if (startColumn) {
              markerLines[startLine] = [startColumn, 0];
            } else {
              markerLines[startLine] = true;
            }
          } else {
            markerLines[startLine] = [startColumn, endColumn - startColumn];
          }
        }
        return {
          start,
          end,
          markerLines
        };
      }
      function codeFrameColumns2(rawLines, loc, opts = {}) {
        const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
        const chalk5 = (0, _highlight.getChalk)(opts);
        const defs = getDefs(chalk5);
        const maybeHighlight = (chalkFn, string) => {
          return highlighted ? chalkFn(string) : string;
        };
        const lines = rawLines.split(NEWLINE);
        const {
          start,
          end,
          markerLines
        } = getMarkerLines(loc, lines, opts);
        const hasColumns = loc.start && typeof loc.start.column === "number";
        const numberMaxWidth = String(end).length;
        const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
        let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {
          const number2 = start + 1 + index;
          const paddedNumber = ` ${number2}`.slice(-numberMaxWidth);
          const gutter = ` ${paddedNumber} |`;
          const hasMarker = markerLines[number2];
          const lastMarkerLine = !markerLines[number2 + 1];
          if (hasMarker) {
            let markerLine = "";
            if (Array.isArray(hasMarker)) {
              const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
              const numberOfMarkers = hasMarker[1] || 1;
              markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");
              if (lastMarkerLine && opts.message) {
                markerLine += " " + maybeHighlight(defs.message, opts.message);
              }
            }
            return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");
          } else {
            return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`;
          }
        }).join("\n");
        if (opts.message && !hasColumns) {
          frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}
${frame}`;
        }
        if (highlighted) {
          return chalk5.reset(frame);
        } else {
          return frame;
        }
      }
      function _default(rawLines, lineNumber, colNumber, opts = {}) {
        if (!deprecationWarningShown) {
          deprecationWarningShown = true;
          const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
          if (process.emitWarning) {
            process.emitWarning(message, "DeprecationWarning");
          } else {
            const deprecationError = new Error(message);
            deprecationError.name = "DeprecationWarning";
            console.warn(new Error(message));
          }
        }
        colNumber = Math.max(colNumber, 0);
        const location = {
          start: {
            column: colNumber,
            line: lineNumber
          }
        };
        return codeFrameColumns2(rawLines, location, opts);
      }
    }
  });

  // node_modules/leven/index.js
  var require_leven = __commonJS({
    "node_modules/leven/index.js"(exports, module) {
      init_globals();
      var array = [];
      var charCodeCache = [];
      var leven2 = (left, right) => {
        if (left === right) {
          return 0;
        }
        const swap = left;
        if (left.length > right.length) {
          left = right;
          right = swap;
        }
        let leftLength = left.length;
        let rightLength = right.length;
        while (leftLength > 0 && left.charCodeAt(~-leftLength) === right.charCodeAt(~-rightLength)) {
          leftLength--;
          rightLength--;
        }
        let start = 0;
        while (start < leftLength && left.charCodeAt(start) === right.charCodeAt(start)) {
          start++;
        }
        leftLength -= start;
        rightLength -= start;
        if (leftLength === 0) {
          return rightLength;
        }
        let bCharCode;
        let result;
        let temp;
        let temp2;
        let i = 0;
        let j = 0;
        while (i < leftLength) {
          charCodeCache[i] = left.charCodeAt(start + i);
          array[i] = ++i;
        }
        while (j < rightLength) {
          bCharCode = right.charCodeAt(start + j);
          temp = j++;
          result = j;
          for (i = 0; i < leftLength; i++) {
            temp2 = bCharCode === charCodeCache[i] ? temp : temp + 1;
            temp = array[i];
            result = array[i] = temp > result ? temp2 > result ? result + 1 : temp2 : temp2 > temp ? temp + 1 : temp2;
          }
        }
        return result;
      };
      module.exports = leven2;
      module.exports.default = leven2;
    }
  });

  // node_modules/jsonpointer/jsonpointer.js
  var require_jsonpointer = __commonJS({
    "node_modules/jsonpointer/jsonpointer.js"(exports) {
      init_globals();
      var hasExcape = /~/;
      var escapeMatcher = /~[01]/g;
      function escapeReplacer(m) {
        switch (m) {
          case "~1":
            return "/";
          case "~0":
            return "~";
        }
        throw new Error("Invalid tilde escape: " + m);
      }
      function untilde(str) {
        if (!hasExcape.test(str))
          return str;
        return str.replace(escapeMatcher, escapeReplacer);
      }
      function setter(obj, pointer2, value) {
        var part;
        var hasNextPart;
        for (var p = 1, len = pointer2.length; p < len; ) {
          if (pointer2[p] === "constructor" || pointer2[p] === "prototype" || pointer2[p] === "__proto__")
            return obj;
          part = untilde(pointer2[p++]);
          hasNextPart = len > p;
          if (typeof obj[part] === "undefined") {
            if (Array.isArray(obj) && part === "-") {
              part = obj.length;
            }
            if (hasNextPart) {
              if (pointer2[p] !== "" && pointer2[p] < Infinity || pointer2[p] === "-")
                obj[part] = [];
              else
                obj[part] = {};
            }
          }
          if (!hasNextPart)
            break;
          obj = obj[part];
        }
        var oldValue = obj[part];
        if (value === void 0)
          delete obj[part];
        else
          obj[part] = value;
        return oldValue;
      }
      function compilePointer(pointer2) {
        if (typeof pointer2 === "string") {
          pointer2 = pointer2.split("/");
          if (pointer2[0] === "")
            return pointer2;
          throw new Error("Invalid JSON pointer.");
        } else if (Array.isArray(pointer2)) {
          for (const part of pointer2) {
            if (typeof part !== "string" && typeof part !== "number") {
              throw new Error("Invalid JSON pointer. Must be of type string or number.");
            }
          }
          return pointer2;
        }
        throw new Error("Invalid JSON pointer.");
      }
      function get2(obj, pointer2) {
        if (typeof obj !== "object")
          throw new Error("Invalid input object.");
        pointer2 = compilePointer(pointer2);
        var len = pointer2.length;
        if (len === 1)
          return obj;
        for (var p = 1; p < len; ) {
          obj = obj[untilde(pointer2[p++])];
          if (len === p)
            return obj;
          if (typeof obj !== "object")
            return void 0;
        }
      }
      function set(obj, pointer2, value) {
        if (typeof obj !== "object")
          throw new Error("Invalid input object.");
        pointer2 = compilePointer(pointer2);
        if (pointer2.length === 0)
          throw new Error("Invalid JSON pointer for set.");
        return setter(obj, pointer2, value);
      }
      function compile(pointer2) {
        var compiled = compilePointer(pointer2);
        return {
          get: function(object) {
            return get2(object, compiled);
          },
          set: function(object, value) {
            return set(object, compiled, value);
          }
        };
      }
      exports.get = get2;
      exports.set = set;
      exports.compile = compile;
    }
  });

  // gen/items/zotero.json
  var require_zotero = __commonJS({
    "gen/items/zotero.json"(exports, module) {
      module.exports = {
        type: "object",
        discriminator: {
          propertyName: "itemType"
        },
        required: [
          "itemType"
        ],
        oneOf: [
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "annotation"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "artwork"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              artworkMedium: {
                type: "string"
              },
              artworkSize: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "attachment"
              },
              accessDate: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "audioRecording"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioRecordingFormat: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              label: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "bill"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              billNumber: {
                type: "string"
              },
              code: {
                type: "string"
              },
              codePages: {
                type: "string"
              },
              codeVolume: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              legislativeBody: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "blogPost"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              blogTitle: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              websiteType: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "book"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              numberOfVolumes: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "bookSection"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              bookTitle: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "case"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              caseName: {
                type: "string"
              },
              court: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateDecided: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              docketNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              firstPage: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              reporter: {
                type: "string"
              },
              reporterVolume: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "classic"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "computerProgram"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              company: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              programmingLanguage: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              system: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "conferencePaper"
              },
              DOI: {
                type: "string"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              conferenceName: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              proceedingsTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "dictionaryEntry"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              dictionaryTitle: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "document"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "email"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              subject: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "encyclopediaArticle"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              encyclopediaTitle: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "film"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              distributor: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              genre: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "forumPost"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              forumTitle: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              postType: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "gazette"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "hearing"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              committee: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              documentNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              legislativeBody: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "instantMessage"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "interview"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              interviewMedium: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "journalArticle"
              },
              DOI: {
                type: "string"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              journalAbbreviation: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesText: {
                type: "string"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "legalCommentary"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "letter"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              letterType: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "magazineArticle"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "manuscript"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              manuscriptType: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "map"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              mapType: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              scale: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "newspaperArticle"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "note"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              note: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "patent"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              applicationNumber: {
                type: "string"
              },
              assignee: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              country: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              filingDate: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issueDate: {
                type: "string"
              },
              issuingAuthority: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              legalStatus: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              patentNumber: {
                type: "string"
              },
              place: {
                type: "string"
              },
              priorityNumbers: {
                type: "string"
              },
              references: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "podcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioFileType: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "preprint"
              },
              DOI: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveID: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              citationKey: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              genre: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              repository: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "presentation"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              meetingName: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              presentationType: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "radioBroadcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioRecordingFormat: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              network: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              place: {
                type: "string"
              },
              programTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "regulation"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "report"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              institution: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              reportNumber: {
                type: "string"
              },
              reportType: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "standard"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "statute"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              code: {
                type: "string"
              },
              codeNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateEnacted: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              nameOfAct: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              publicLawNumber: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "thesis"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              thesisType: {
                type: "string"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              university: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "treaty"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "tvBroadcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              network: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              place: {
                type: "string"
              },
              programTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "videoRecording"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              studio: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "webpage"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              websiteTitle: {
                type: "string"
              },
              websiteType: {
                type: "string"
              }
            }
          }
        ],
        $defs: {
          attachments: {
            type: "array",
            items: {
              type: "object",
              additionalProperties: false,
              properties: {
                path: {
                  type: "string"
                },
                accessDate: {
                  type: "string"
                },
                contentType: {
                  type: "string"
                },
                itemType: {
                  type: "string"
                },
                mimeType: {
                  type: "string"
                },
                key: {
                  type: "string"
                },
                linkMode: {
                  type: "string"
                },
                title: {
                  type: "string"
                },
                uri: {
                  type: "string"
                },
                url: {
                  type: "string"
                }
              }
            }
          },
          creators: {
            type: "array",
            items: {
              type: "object",
              additionalProperties: false,
              properties: {
                creatorType: {
                  type: "string"
                },
                firstName: {
                  type: "string"
                },
                lastName: {
                  type: "string"
                },
                fieldMode: {
                  type: "number"
                },
                multi: {
                  type: "object"
                }
              }
            }
          },
          notes: {
            type: "array",
            items: {
              type: "string"
            }
          },
          tags: {
            type: "array",
            items: {
              oneOf: [
                {
                  type: "object",
                  additionalProperties: false,
                  properties: {
                    tag: {
                      type: "string"
                    },
                    type: {
                      type: "number"
                    }
                  },
                  required: [
                    "tag"
                  ]
                },
                {
                  type: "string"
                }
              ]
            }
          },
          edition: {
            oneOf: [
              {
                type: "string"
              },
              {
                type: "number"
              }
            ]
          },
          multi: {
            type: "object"
          },
          seeAlso: {
            type: "array"
          }
        }
      };
    }
  });

  // gen/items/jurism.json
  var require_jurism = __commonJS({
    "gen/items/jurism.json"(exports, module) {
      module.exports = {
        type: "object",
        discriminator: {
          propertyName: "itemType"
        },
        required: [
          "itemType"
        ],
        oneOf: [
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "annotation"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "artwork"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              artworkMedium: {
                type: "string"
              },
              artworkSize: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              websiteTitle: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "attachment"
              },
              accessDate: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "audioRecording"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              album: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioRecordingFormat: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              label: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              opus: {
                type: "string"
              },
              originalDate: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              release: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "bill"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              assemblyNumber: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              billNumber: {
                type: "string"
              },
              code: {
                type: "string"
              },
              codePages: {
                type: "string"
              },
              codeVolume: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              legislativeBody: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              reporter: {
                type: "string"
              },
              resolutionLabel: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesNumber: {
                type: "string"
              },
              session: {
                type: "string"
              },
              sessionType: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "blogPost"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              blogTitle: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              websiteType: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "book"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              numberOfVolumes: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              },
              volumeTitle: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "bookSection"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              bookAbbreviation: {
                type: "string"
              },
              bookTitle: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              journalAbbreviation: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              },
              volumeTitle: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "case"
              },
              DOI: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              adminFlag: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              caseName: {
                type: "string"
              },
              court: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateDecided: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              division: {
                type: "string"
              },
              docketNumber: {
                type: "string"
              },
              documentName: {
                type: "string"
              },
              documentNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              filingDate: {
                type: "string"
              },
              firstPage: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationDate: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              reign: {
                type: "string"
              },
              reporter: {
                type: "string"
              },
              reporterVolume: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              supplementName: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              },
              yearAsVolume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "classic"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              manuscriptType: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "computerProgram"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              company: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              programmingLanguage: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              system: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "conferencePaper"
              },
              DOI: {
                type: "string"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              conferenceDate: {
                type: "string"
              },
              conferenceName: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              institution: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              proceedingsTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "dictionaryEntry"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              dictionaryTitle: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "document"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "email"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              subject: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "encyclopediaArticle"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              encyclopediaTitle: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "film"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              distributor: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              genre: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "forumPost"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              forumTitle: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              postType: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "gazette"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              code: {
                type: "string"
              },
              codeNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateEnacted: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              nameOfAct: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              publicLawNumber: {
                type: "string"
              },
              publicationDate: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              regnalYear: {
                type: "string"
              },
              reign: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "hearing"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              assemblyNumber: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              committee: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              documentNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              legislativeBody: {
                type: "string"
              },
              meetingName: {
                type: "string"
              },
              meetingNumber: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              reporter: {
                type: "string"
              },
              resolutionLabel: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesNumber: {
                type: "string"
              },
              session: {
                type: "string"
              },
              sessionType: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "instantMessage"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "interview"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              interviewMedium: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "journalArticle"
              },
              DOI: {
                type: "string"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              journalAbbreviation: {
                type: "string"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesText: {
                type: "string"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              status: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "legalCommentary"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              bookAbbreviation: {
                type: "string"
              },
              bookTitle: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              journalAbbreviation: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              },
              volume: {
                type: "string"
              },
              volumeTitle: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "letter"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              letterType: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "magazineArticle"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "manuscript"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              manuscriptType: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "map"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              mapType: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              scale: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "newspaperArticle"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              court: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              newsCaseDate: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "note"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              note: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "patent"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              applicationNumber: {
                type: "string"
              },
              assignee: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              country: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              filingDate: {
                type: "string"
              },
              genre: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issueDate: {
                type: "string"
              },
              issuingAuthority: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              legalStatus: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              patentNumber: {
                type: "string"
              },
              place: {
                type: "string"
              },
              priorityDate: {
                type: "string"
              },
              priorityNumbers: {
                type: "string"
              },
              publicationDate: {
                type: "string"
              },
              publicationNumber: {
                type: "string"
              },
              references: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "podcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioFileType: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "preprint"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "presentation"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveCollection: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              meetingName: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              presentationType: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "radioBroadcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioRecordingFormat: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              network: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              place: {
                type: "string"
              },
              programTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "regulation"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              code: {
                type: "string"
              },
              codeNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateEnacted: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              gazetteFlag: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              legislativeBody: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              nameOfAct: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              publicLawNumber: {
                type: "string"
              },
              publicationDate: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              regulationType: {
                type: "string"
              },
              regulatoryBody: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "report"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              assemblyNumber: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              bookTitle: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              committee: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              institution: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              reportNumber: {
                type: "string"
              },
              reportType: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesNumber: {
                type: "string"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              status: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "standard"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "statute"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              code: {
                type: "string"
              },
              codeNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateAmended: {
                type: "string"
              },
              dateEnacted: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              gazetteFlag: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              nameOfAct: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              originalDate: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              publicLawNumber: {
                type: "string"
              },
              publicationDate: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              regnalYear: {
                type: "string"
              },
              reign: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "thesis"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              thesisType: {
                type: "string"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              university: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "treaty"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              adoptionDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              openingDate: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              parentTreaty: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              reporter: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              signingDate: {
                type: "string"
              },
              supplementName: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              treatyNumber: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "tvBroadcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              network: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              place: {
                type: "string"
              },
              programTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "videoRecording"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              studio: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              },
              volume: {
                type: "string"
              },
              websiteTitle: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "webpage"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              websiteTitle: {
                type: "string"
              },
              websiteType: {
                type: "string"
              }
            }
          }
        ],
        $defs: {
          attachments: {
            type: "array",
            items: {
              type: "object",
              additionalProperties: false,
              properties: {
                path: {
                  type: "string"
                },
                accessDate: {
                  type: "string"
                },
                contentType: {
                  type: "string"
                },
                itemType: {
                  type: "string"
                },
                mimeType: {
                  type: "string"
                },
                key: {
                  type: "string"
                },
                linkMode: {
                  type: "string"
                },
                title: {
                  type: "string"
                },
                uri: {
                  type: "string"
                },
                url: {
                  type: "string"
                }
              }
            }
          },
          creators: {
            type: "array",
            items: {
              type: "object",
              additionalProperties: false,
              properties: {
                creatorType: {
                  type: "string"
                },
                firstName: {
                  type: "string"
                },
                lastName: {
                  type: "string"
                },
                fieldMode: {
                  type: "number"
                },
                multi: {
                  type: "object"
                }
              }
            }
          },
          notes: {
            type: "array",
            items: {
              type: "string"
            }
          },
          tags: {
            type: "array",
            items: {
              oneOf: [
                {
                  type: "object",
                  additionalProperties: false,
                  properties: {
                    tag: {
                      type: "string"
                    },
                    type: {
                      type: "number"
                    }
                  },
                  required: [
                    "tag"
                  ]
                },
                {
                  type: "string"
                }
              ]
            }
          },
          edition: {
            oneOf: [
              {
                type: "string"
              },
              {
                type: "number"
              }
            ]
          },
          multi: {
            type: "object"
          },
          seeAlso: {
            type: "array"
          }
        }
      };
    }
  });

  // node_modules/number-to-words/src/makeOrdinal.js
  var require_makeOrdinal = __commonJS({
    "node_modules/number-to-words/src/makeOrdinal.js"(exports, module) {
      init_globals();
      var ENDS_WITH_DOUBLE_ZERO_PATTERN = /(hundred|thousand|(m|b|tr|quadr)illion)$/;
      var ENDS_WITH_TEEN_PATTERN = /teen$/;
      var ENDS_WITH_Y_PATTERN = /y$/;
      var ENDS_WITH_ZERO_THROUGH_TWELVE_PATTERN = /(zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)$/;
      var ordinalLessThanThirteen = {
        zero: "zeroth",
        one: "first",
        two: "second",
        three: "third",
        four: "fourth",
        five: "fifth",
        six: "sixth",
        seven: "seventh",
        eight: "eighth",
        nine: "ninth",
        ten: "tenth",
        eleven: "eleventh",
        twelve: "twelfth"
      };
      function makeOrdinal(words) {
        if (ENDS_WITH_DOUBLE_ZERO_PATTERN.test(words) || ENDS_WITH_TEEN_PATTERN.test(words)) {
          return words + "th";
        } else if (ENDS_WITH_Y_PATTERN.test(words)) {
          return words.replace(ENDS_WITH_Y_PATTERN, "ieth");
        } else if (ENDS_WITH_ZERO_THROUGH_TWELVE_PATTERN.test(words)) {
          return words.replace(ENDS_WITH_ZERO_THROUGH_TWELVE_PATTERN, replaceWithOrdinalVariant);
        }
        return words;
      }
      function replaceWithOrdinalVariant(match, numberWord) {
        return ordinalLessThanThirteen[numberWord];
      }
      module.exports = makeOrdinal;
    }
  });

  // node_modules/number-to-words/src/isFinite.js
  var require_isFinite = __commonJS({
    "node_modules/number-to-words/src/isFinite.js"(exports, module) {
      init_globals();
      function isFinite2(value) {
        return !(typeof value !== "number" || value !== value || value === Infinity || value === -Infinity);
      }
      module.exports = isFinite2;
    }
  });

  // node_modules/number-to-words/src/maxSafeInteger.js
  var require_maxSafeInteger = __commonJS({
    "node_modules/number-to-words/src/maxSafeInteger.js"(exports, module) {
      init_globals();
      var MAX_SAFE_INTEGER = 9007199254740991;
      module.exports = MAX_SAFE_INTEGER;
    }
  });

  // node_modules/number-to-words/src/isSafeNumber.js
  var require_isSafeNumber = __commonJS({
    "node_modules/number-to-words/src/isSafeNumber.js"(exports, module) {
      init_globals();
      var MAX_SAFE_INTEGER = require_maxSafeInteger();
      function isSafeNumber(value) {
        return typeof value === "number" && Math.abs(value) <= MAX_SAFE_INTEGER;
      }
      module.exports = isSafeNumber;
    }
  });

  // node_modules/number-to-words/src/toWords.js
  var require_toWords = __commonJS({
    "node_modules/number-to-words/src/toWords.js"(exports, module) {
      init_globals();
      var makeOrdinal = require_makeOrdinal();
      var isFinite2 = require_isFinite();
      var isSafeNumber = require_isSafeNumber();
      var TEN = 10;
      var ONE_HUNDRED = 100;
      var ONE_THOUSAND = 1e3;
      var ONE_MILLION = 1e6;
      var ONE_BILLION = 1e9;
      var ONE_TRILLION = 1e12;
      var ONE_QUADRILLION = 1e15;
      var MAX = 9007199254740992;
      var LESS_THAN_TWENTY = [
        "zero",
        "one",
        "two",
        "three",
        "four",
        "five",
        "six",
        "seven",
        "eight",
        "nine",
        "ten",
        "eleven",
        "twelve",
        "thirteen",
        "fourteen",
        "fifteen",
        "sixteen",
        "seventeen",
        "eighteen",
        "nineteen"
      ];
      var TENTHS_LESS_THAN_HUNDRED = [
        "zero",
        "ten",
        "twenty",
        "thirty",
        "forty",
        "fifty",
        "sixty",
        "seventy",
        "eighty",
        "ninety"
      ];
      function toWords(number2, asOrdinal) {
        var words;
        var num = parseInt(number2, 10);
        if (!isFinite2(num)) {
          throw new TypeError(
            "Not a finite number: " + number2 + " (" + typeof number2 + ")"
          );
        }
        if (!isSafeNumber(num)) {
          throw new RangeError(
            "Input is not a safe number, it\u2019s either too large or too small."
          );
        }
        words = generateWords(num);
        return asOrdinal ? makeOrdinal(words) : words;
      }
      function generateWords(number2) {
        var remainder, word, words = arguments[1];
        if (number2 === 0) {
          return !words ? "zero" : words.join(" ").replace(/,$/, "");
        }
        if (!words) {
          words = [];
        }
        if (number2 < 0) {
          words.push("minus");
          number2 = Math.abs(number2);
        }
        if (number2 < 20) {
          remainder = 0;
          word = LESS_THAN_TWENTY[number2];
        } else if (number2 < ONE_HUNDRED) {
          remainder = number2 % TEN;
          word = TENTHS_LESS_THAN_HUNDRED[Math.floor(number2 / TEN)];
          if (remainder) {
            word += "-" + LESS_THAN_TWENTY[remainder];
            remainder = 0;
          }
        } else if (number2 < ONE_THOUSAND) {
          remainder = number2 % ONE_HUNDRED;
          word = generateWords(Math.floor(number2 / ONE_HUNDRED)) + " hundred";
        } else if (number2 < ONE_MILLION) {
          remainder = number2 % ONE_THOUSAND;
          word = generateWords(Math.floor(number2 / ONE_THOUSAND)) + " thousand,";
        } else if (number2 < ONE_BILLION) {
          remainder = number2 % ONE_MILLION;
          word = generateWords(Math.floor(number2 / ONE_MILLION)) + " million,";
        } else if (number2 < ONE_TRILLION) {
          remainder = number2 % ONE_BILLION;
          word = generateWords(Math.floor(number2 / ONE_BILLION)) + " billion,";
        } else if (number2 < ONE_QUADRILLION) {
          remainder = number2 % ONE_TRILLION;
          word = generateWords(Math.floor(number2 / ONE_TRILLION)) + " trillion,";
        } else if (number2 <= MAX) {
          remainder = number2 % ONE_QUADRILLION;
          word = generateWords(Math.floor(number2 / ONE_QUADRILLION)) + " quadrillion,";
        }
        words.push(word);
        return generateWords(remainder, words);
      }
      module.exports = toWords;
    }
  });

  // node_modules/number-to-words/src/toWordsOrdinal.js
  var require_toWordsOrdinal = __commonJS({
    "node_modules/number-to-words/src/toWordsOrdinal.js"(exports, module) {
      init_globals();
      var makeOrdinal = require_makeOrdinal();
      var toWords = require_toWords();
      function toWordsOrdinal2(number2) {
        var words = toWords(number2);
        return makeOrdinal(words);
      }
      module.exports = toWordsOrdinal2;
    }
  });

  // translators/Better BibTeX.ts
  var Better_BibTeX_exports = {};
  __export(Better_BibTeX_exports, {
    Translator: () => Translator,
    detectImport: () => detectImport,
    doExport: () => doExport,
    doImport: () => doImport
  });
  init_globals();

  // content/logger.ts
  init_globals();

  // content/stringify.ts
  init_globals();
  var import_fast_safe_stringify = __toESM(require_fast_safe_stringify());
  function asciify(str) {
    return str.replace(/[\u007F-\uFFFF]/g, (chr) => `\\u${`0000${chr.charCodeAt(0).toString(16)}`.substr(-4)}`);
  }

  // content/client.ts
  init_globals();
  var ctx = typeof self === "undefined" ? void 0 : self;
  var _a;
  var worker = !!((_a = ctx == null ? void 0 : ctx.location) == null ? void 0 : _a.search);
  function clientname() {
    var _a3;
    if (worker)
      return new URLSearchParams(ctx.location.search).get("clientName");
    if (Zotero.clientName)
      return Zotero.clientName;
    if ((_a3 = Zotero.BetterBibTeX) == null ? void 0 : _a3.clientName)
      return Zotero.BetterBibTeX.clientName;
    dump(`better-bibtex client detection: worker: ${worker}, assuming Zotero`);
    return "Zotero";
  }
  var clientName = clientname();
  var client = clientName.toLowerCase().replace("-", "");

  // content/logger.ts
  var import_loupe = __toESM(require_loupe());
  function print(msg) {
    dump(msg + "\n");
  }
  var Logger = class {
    constructor() {
      this.verbose = false;
    }
    format({ error = false, worker: worker2 = 0, translator: translator2 = "", issue: issue2 = 0 }, msg) {
      let workername = `${worker2}`;
      let diff = null;
      const now = Date.now();
      if (this.timestamp)
        diff = now - this.timestamp;
      this.timestamp = now;
      if (typeof msg !== "string") {
        let output = issue2 ? `issue ${issue2}: ` : "";
        for (const m of msg) {
          const type2 = typeof m;
          if (type2 === "string" || m instanceof String || type2 === "number" || type2 === "undefined" || type2 === "boolean" || m === null) {
            output += m;
          } else if (m instanceof Error || m instanceof ErrorEvent || m.toString() === "[object ErrorEvent]") {
            output += this.formatError(m);
          } else if (m && type2 === "object" && m.message) {
            output += this.formatError({ message: m.errorCode ? `${m.message} (${m.errorCode})` : m.message, filename: m.fileName, lineno: m.lineNumber, colno: m.column, stack: m.stack });
          } else {
            output += (0, import_loupe.inspect)(m);
          }
          output += " ";
        }
        msg = output;
      }
      if (worker) {
        if (!worker2 && typeof workerJob !== "undefined") {
          worker2 = workerJob.job;
          workername = `${workerJob.job}`;
        }
        translator2 = translator2 || workerJob.translator;
      } else {
        if (worker2)
          workername = `${worker2} (ceci n'est pas une ouvrier)`;
        if (!translator2 && typeof ZOTERO_TRANSLATOR_INFO !== "undefined")
          translator2 = ZOTERO_TRANSLATOR_INFO.label;
      }
      const prefix = ["better-bibtex", translator2, error && ":error:", worker2 && `(worker ${workername})`].filter((p) => p).join(" ");
      return `{${prefix}} +${diff} ${asciify(msg)}`;
    }
    formatError(e, indent = "") {
      let msg = [e.name, e.message].filter((s) => s).join(": ");
      if (e.filename || e.fileName)
        msg += ` in ${e.filename || e.fileName}`;
      if (e.lineno || e.lineNumber) {
        msg += ` line ${e.lineno}`;
        if (e.colno)
          msg += `, col ${e.colno}`;
      }
      if (e.stack)
        msg += `
${indent}${e.stack.replace(/\n/g, `${indent}
`)}`;
      if (e.error)
        msg += `
${indent}${this.formatError(e.error, "  ")}
`;
      return `${indent}<Error: ${msg}>`;
    }
    get enabled() {
      if (typeof ZOTERO_TRANSLATOR_INFO === "undefined")
        return Zotero.Debug.enabled;
      if (!Zotero.worker)
        return true;
      return !workerJob || workerJob.debugEnabled;
    }
    debug(...msg) {
      if (this.enabled)
        Zotero.debug(this.format({}, msg));
    }
    dump(...msg) {
      if (this.enabled)
        print(this.format({}, msg));
    }
    for(issue2, ...msg) {
      if (this.enabled)
        Zotero.debug(this.format({ issue: issue2 }, msg));
    }
    error(...msg) {
      Zotero.debug(this.format({ error: true }, msg));
    }
    status({ error = false, worker: worker2 = 0, translator: translator2 = "" }, ...msg) {
      if (error || this.enabled)
        Zotero.debug(this.format({ error, worker: worker2, translator: translator2 }, msg));
    }
  };
  var log = new Logger();

  // translators/Better BibTeX.ts
  var import_words_to_numbers = __toESM(require_words_to_numbers());

  // translators/lib/translator.ts
  init_globals();

  // gen/preferences/meta.ts
  init_globals();
  var names = [
    "ascii",
    "asciiBibLaTeX",
    "asciiBibTeX",
    "autoAbbrev",
    "autoAbbrevStyle",
    "autoExport",
    "autoExportDelay",
    "autoExportIdleWait",
    "autoExportPathReplaceDiacritics",
    "autoExportPathReplaceDirSep",
    "autoExportPathReplaceSpace",
    "automaticTags",
    "autoPinDelay",
    "auxImport",
    "baseAttachmentPath",
    "biblatexExtendedDateFormat",
    "biblatexExtendedNameFormat",
    "biblatexExtractEprint",
    "bibtexParticleNoOp",
    "bibtexURL",
    "cache",
    "cacheFlushInterval",
    "charmap",
    "citeCommand",
    "citekeyFold",
    "citekeyFormat",
    "citekeyFormatBackup",
    "citekeySearch",
    "csquotes",
    "DOIandURL",
    "exportBibTeXStrings",
    "exportBraceProtection",
    "exportTitleCase",
    "extraMergeCitekeys",
    "extraMergeCSL",
    "extraMergeTeX",
    "git",
    "import",
    "importBibTeXStrings",
    "importCaseProtection",
    "importCitationKey",
    "importExtra",
    "importJabRefAbbreviations",
    "importJabRefStrings",
    "importNoteToExtra",
    "importSentenceCase",
    "importUnknownTexCommand",
    "itemObserverDelay",
    "jabrefFormat",
    "jieba",
    "keyConflictPolicy",
    "keyScope",
    "kuroshiro",
    "language",
    "mapMath",
    "mapText",
    "mapUnicode",
    "parseParticles",
    "patchDates",
    "platform",
    "postscript",
    "postscriptOverride",
    "preferencesOverride",
    "qualityReport",
    "quickCopyEta",
    "quickCopyMode",
    "quickCopyOrgMode",
    "quickCopyPandocBrackets",
    "quickCopySelectLink",
    "rawImports",
    "rawLaTag",
    "relativeFilePaths",
    "retainCache",
    "scrubDatabase",
    "separatorList",
    "separatorNames",
    "skipFields",
    "skipWords",
    "startupProgress",
    "strings",
    "stringsOverride",
    "testing",
    "verbatimFields",
    "warnBulkModify",
    "warnTitleCased"
  ];
  var affects = {
    ascii: ["Better BibLaTeX", "Better BibTeX"],
    asciiBibLaTeX: ["Better BibLaTeX"],
    asciiBibTeX: ["Better BibTeX"],
    autoAbbrev: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    autoAbbrevStyle: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    automaticTags: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    baseAttachmentPath: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    biblatexExtendedDateFormat: ["Better BibLaTeX"],
    biblatexExtendedNameFormat: ["Better BibLaTeX"],
    biblatexExtractEprint: ["Better BibLaTeX", "Better BibTeX"],
    bibtexParticleNoOp: ["Better BibTeX"],
    bibtexURL: ["Better BibTeX"],
    cache: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    charmap: ["Better BibLaTeX", "Better BibTeX"],
    csquotes: ["Better BibLaTeX", "Better BibTeX"],
    DOIandURL: ["Better BibLaTeX", "Better BibTeX"],
    exportBibTeXStrings: ["Better BibLaTeX", "Better BibTeX"],
    exportBraceProtection: ["Better BibLaTeX", "Better BibTeX"],
    exportTitleCase: ["Better BibLaTeX", "Better BibTeX"],
    jabrefFormat: ["Better BibLaTeX", "Better BibTeX"],
    language: ["Better BibLaTeX", "Better BibTeX"],
    mapMath: ["Better BibLaTeX", "Better BibTeX"],
    mapText: ["Better BibLaTeX", "Better BibTeX"],
    mapUnicode: ["Better BibLaTeX", "Better BibTeX"],
    parseParticles: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    postscript: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    qualityReport: ["Better BibLaTeX", "Better BibTeX"],
    rawLaTag: ["Better BibLaTeX", "Better BibTeX"],
    relativeFilePaths: ["Better BibLaTeX", "Better BibTeX"],
    separatorList: ["Better BibLaTeX", "Better BibTeX"],
    separatorNames: ["Better BibLaTeX", "Better BibTeX"],
    skipFields: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    skipWords: ["Better BibLaTeX", "Better BibTeX"],
    strings: ["Better BibLaTeX", "Better BibTeX"]
  };
  var defaults = {
    ascii: "",
    asciiBibLaTeX: false,
    asciiBibTeX: true,
    autoAbbrev: false,
    autoAbbrevStyle: "",
    autoExport: "immediate",
    autoExportDelay: 5,
    autoExportIdleWait: 10,
    autoExportPathReplaceDiacritics: false,
    autoExportPathReplaceDirSep: "-",
    autoExportPathReplaceSpace: " ",
    automaticTags: true,
    autoPinDelay: 0,
    auxImport: false,
    baseAttachmentPath: "",
    biblatexExtendedDateFormat: true,
    biblatexExtendedNameFormat: false,
    biblatexExtractEprint: true,
    bibtexParticleNoOp: false,
    bibtexURL: "off",
    cache: true,
    cacheFlushInterval: 5,
    charmap: "",
    citeCommand: "cite",
    citekeyFold: true,
    citekeyFormat: "auth.lower + shorttitle(3,3) + year",
    citekeyFormatBackup: "",
    citekeySearch: true,
    csquotes: "",
    DOIandURL: "both",
    exportBibTeXStrings: "off",
    exportBraceProtection: true,
    exportTitleCase: true,
    extraMergeCitekeys: false,
    extraMergeCSL: false,
    extraMergeTeX: false,
    git: "config",
    import: true,
    importBibTeXStrings: true,
    importCaseProtection: "as-needed",
    importCitationKey: true,
    importExtra: true,
    importJabRefAbbreviations: true,
    importJabRefStrings: true,
    importNoteToExtra: "",
    importSentenceCase: "on+guess",
    importUnknownTexCommand: "ignore",
    itemObserverDelay: 5,
    jabrefFormat: 0,
    jieba: false,
    keyConflictPolicy: "keep",
    keyScope: "library",
    kuroshiro: false,
    language: "langid",
    mapMath: "",
    mapText: "",
    mapUnicode: "conservative",
    parseParticles: true,
    patchDates: "",
    platform: "",
    postscript: "",
    postscriptOverride: "",
    preferencesOverride: "",
    qualityReport: false,
    quickCopyEta: "",
    quickCopyMode: "latex",
    quickCopyOrgMode: "zotero",
    quickCopyPandocBrackets: false,
    quickCopySelectLink: "zotero",
    rawImports: false,
    rawLaTag: "#LaTeX",
    relativeFilePaths: false,
    retainCache: false,
    scrubDatabase: false,
    separatorList: "and",
    separatorNames: "and",
    skipFields: "",
    skipWords: "a,ab,aboard,about,above,across,after,against,al,along,amid,among,an,and,anti,around,as,at,before,behind,below,beneath,beside,besides,between,beyond,but,by,d,da,das,de,del,dell,dello,dei,degli,della,dell,delle,dem,den,der,des,despite,die,do,down,du,during,ein,eine,einem,einen,einer,eines,el,en,et,except,for,from,gli,i,il,in,inside,into,is,l,la,las,le,les,like,lo,los,near,nor,of,off,on,onto,or,over,past,per,plus,round,save,since,so,some,sur,than,the,through,to,toward,towards,un,una,unas,under,underneath,une,unlike,uno,unos,until,up,upon,versus,via,von,while,with,within,without,yet,zu,zum",
    startupProgress: "popup",
    strings: "",
    stringsOverride: "",
    testing: false,
    verbatimFields: "url,doi,file,ids,eprint,/^verb[a-z]$/,groups,/^citeulike-linkout-[0-9]+$/, /^bdsk-url-[0-9]+$/",
    warnBulkModify: 10,
    warnTitleCased: false
  };
  var schema = {
    autoExport: {
      preferences: ["asciiBibLaTeX", "asciiBibTeX", "biblatexExtendedNameFormat", "bibtexParticleNoOp", "bibtexURL", "DOIandURL"],
      displayOptions: ["exportNotes", "useJournalAbbreviation"]
    },
    translator: {
      "Better CSL JSON": {
        autoexport: {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "collection",
                "library"
              ]
            },
            "id": {
              "type": "integer"
            },
            "path": {
              "type": "string",
              "minLength": 1
            },
            "status": {
              "enum": [
                "scheduled",
                "running",
                "done",
                "error"
              ]
            },
            "translatorID": {
              "const": "f4b52ab0-f878-4556-85a0-c7aeedd09dfc"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "error": {
              "type": "string"
            },
            "recursive": {
              "type": "boolean"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "id",
            "path",
            "status",
            "translatorID"
          ]
        },
        cache: {
          "type": "object",
          "properties": {
            "itemID": {
              "type": "integer"
            },
            "entry": {
              "type": "string"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "metadata": {
              "type": "object"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "itemID",
            "exportNotes",
            "useJournalAbbreviation",
            "entry"
          ],
          "additionalProperties": false
        },
        preferences: [],
        displayOptions: []
      },
      "BetterBibTeX JSON": {
        autoexport: {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "collection",
                "library"
              ]
            },
            "id": {
              "type": "integer"
            },
            "path": {
              "type": "string",
              "minLength": 1
            },
            "status": {
              "enum": [
                "scheduled",
                "running",
                "done",
                "error"
              ]
            },
            "translatorID": {
              "const": "36a3b0b5-bad0-4a04-b79b-441c7cef77db"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "error": {
              "type": "string"
            },
            "recursive": {
              "type": "boolean"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "id",
            "path",
            "status",
            "translatorID",
            "exportNotes"
          ]
        },
        cache: false,
        preferences: [],
        displayOptions: ["exportNotes"]
      },
      "Better BibTeX": {
        autoexport: {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "collection",
                "library"
              ]
            },
            "id": {
              "type": "integer"
            },
            "path": {
              "type": "string",
              "minLength": 1
            },
            "status": {
              "enum": [
                "scheduled",
                "running",
                "done",
                "error"
              ]
            },
            "translatorID": {
              "const": "ca65189f-8815-4afe-8c8b-8c7c15f0edca"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "asciiBibTeX": {
              "type": "boolean"
            },
            "bibtexParticleNoOp": {
              "type": "boolean"
            },
            "bibtexURL": {
              "enum": [
                "off",
                "note",
                "note-url-ish",
                "url",
                "url-ish"
              ]
            },
            "DOIandURL": {
              "enum": [
                "both",
                "doi",
                "url"
              ]
            },
            "error": {
              "type": "string"
            },
            "recursive": {
              "type": "boolean"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "id",
            "path",
            "status",
            "translatorID",
            "exportNotes",
            "useJournalAbbreviation",
            "asciiBibTeX",
            "bibtexParticleNoOp",
            "bibtexURL",
            "DOIandURL"
          ]
        },
        cache: {
          "type": "object",
          "properties": {
            "itemID": {
              "type": "integer"
            },
            "entry": {
              "type": "string"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "asciiBibTeX": {
              "type": "boolean"
            },
            "bibtexParticleNoOp": {
              "type": "boolean"
            },
            "bibtexURL": {
              "enum": [
                "off",
                "note",
                "note-url-ish",
                "url",
                "url-ish"
              ]
            },
            "DOIandURL": {
              "enum": [
                "both",
                "doi",
                "url"
              ]
            },
            "metadata": {
              "type": "object"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "itemID",
            "exportNotes",
            "useJournalAbbreviation",
            "asciiBibTeX",
            "bibtexParticleNoOp",
            "bibtexURL",
            "DOIandURL",
            "entry"
          ],
          "additionalProperties": false
        },
        preferences: ["asciiBibTeX", "bibtexParticleNoOp", "bibtexURL", "DOIandURL"],
        displayOptions: ["exportNotes", "useJournalAbbreviation"]
      },
      "Better CSL YAML": {
        autoexport: {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "collection",
                "library"
              ]
            },
            "id": {
              "type": "integer"
            },
            "path": {
              "type": "string",
              "minLength": 1
            },
            "status": {
              "enum": [
                "scheduled",
                "running",
                "done",
                "error"
              ]
            },
            "translatorID": {
              "const": "0f238e69-043e-4882-93bf-342de007de19"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "error": {
              "type": "string"
            },
            "recursive": {
              "type": "boolean"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "id",
            "path",
            "status",
            "translatorID"
          ]
        },
        cache: {
          "type": "object",
          "properties": {
            "itemID": {
              "type": "integer"
            },
            "entry": {
              "type": "string"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "metadata": {
              "type": "object"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "itemID",
            "exportNotes",
            "useJournalAbbreviation",
            "entry"
          ],
          "additionalProperties": false
        },
        preferences: [],
        displayOptions: []
      },
      "Better BibLaTeX": {
        autoexport: {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "collection",
                "library"
              ]
            },
            "id": {
              "type": "integer"
            },
            "path": {
              "type": "string",
              "minLength": 1
            },
            "status": {
              "enum": [
                "scheduled",
                "running",
                "done",
                "error"
              ]
            },
            "translatorID": {
              "const": "f895aa0d-f28e-47fe-b247-2ea77c6ed583"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "asciiBibLaTeX": {
              "type": "boolean"
            },
            "biblatexExtendedNameFormat": {
              "type": "boolean"
            },
            "DOIandURL": {
              "enum": [
                "both",
                "doi",
                "url"
              ]
            },
            "error": {
              "type": "string"
            },
            "recursive": {
              "type": "boolean"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "id",
            "path",
            "status",
            "translatorID",
            "exportNotes",
            "useJournalAbbreviation",
            "asciiBibLaTeX",
            "biblatexExtendedNameFormat",
            "DOIandURL"
          ]
        },
        cache: {
          "type": "object",
          "properties": {
            "itemID": {
              "type": "integer"
            },
            "entry": {
              "type": "string"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "asciiBibLaTeX": {
              "type": "boolean"
            },
            "biblatexExtendedNameFormat": {
              "type": "boolean"
            },
            "DOIandURL": {
              "enum": [
                "both",
                "doi",
                "url"
              ]
            },
            "metadata": {
              "type": "object"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "itemID",
            "exportNotes",
            "useJournalAbbreviation",
            "asciiBibLaTeX",
            "biblatexExtendedNameFormat",
            "DOIandURL",
            "entry"
          ],
          "additionalProperties": false
        },
        preferences: ["asciiBibLaTeX", "biblatexExtendedNameFormat", "DOIandURL"],
        displayOptions: ["exportNotes", "useJournalAbbreviation"]
      }
    }
  };

  // content/ping.ts
  init_globals();
  var Pinger = class {
    constructor({ start = 0, total, step = 5, name = "", callback }) {
      this.incr = 100 / total;
      this.name = name;
      this.pct = start * this.incr;
      this.step = step;
      this.callback = callback;
      this.next = Math.floor(this.pct / step) * step;
      if (this.name)
        Zotero.debug(`ping: ${name} start ${JSON.stringify({ ...this, start, total })}`);
      this.emit();
    }
    update() {
      this.pct += this.incr;
      if (this.name)
        Zotero.debug(`ping: ${this.name} update to ${this.pct}`);
      if (Math.round(this.pct) >= this.next)
        this.emit();
    }
    emit() {
      if (this.callback) {
        if (this.name)
          Zotero.debug(`ping: ${this.name} emit ${Math.min(this.next, 100)}`);
        this.callback(Math.min(this.next, 100));
        if (this.next > 100)
          this.callback = null;
        this.next += this.step;
      }
    }
    done() {
      if (this.name)
        Zotero.debug(`ping: ${this.name} done`);
      if (this.callback && this.pct < this.next)
        this.callback(Math.min(this.next, 100));
    }
  };

  // translators/lib/translator.ts
  var cacheDisabler = new class {
    get(target, property) {
      if (property === "collections") {
        target.$cacheable = false;
      }
      return target[property];
    }
  }();
  var Items = class {
    constructor(cacheable) {
      this.list = [];
      this.map = {};
      let item;
      while (item = Zotero.nextItem()) {
        item.$cacheable = cacheable;
        item.journalAbbreviation = item.journalAbbreviation || item.autoJournalAbbreviation;
        this.list.push(this.map[item.itemID] = this.map[item.itemKey] = new Proxy(item, cacheDisabler));
      }
      this.list.sort((a, b) => {
        const ka = [a.citationKey || a.itemType, a.dateModified || a.dateAdded, a.itemID].join("	");
        const kb = [b.citationKey || b.itemType, b.dateModified || b.dateAdded, b.itemID].join("	");
        return ka.localeCompare(kb, void 0, { sensitivity: "base" });
      });
      this.ping = new Pinger({
        total: this.list.length,
        callback: (pct) => Zotero.worker ? Zotero.BetterBibTeX.setProgress(pct) : null
      });
    }
    *items() {
      for (const item of this.list) {
        yield this.current = item;
        this.ping.update();
      }
      this.ping.done();
    }
    *regularitems() {
      for (const item of this.list) {
        switch (item.itemType) {
          case "annotation":
          case "note":
          case "attachment":
            break;
          default:
            yield this.current = item;
        }
        this.ping.update();
      }
      this.ping.done();
    }
  };
  function escapeRegExp(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  var ITranslator = class {
    constructor() {
      this.export = {
        dir: void 0,
        path: void 0
      };
      this.cacheable = true;
      this.initialized = false;
      const collator = new Intl.Collator("en");
      this.stringCompare = collator.compare.bind(collator);
    }
    get exportDir() {
      this._items.current.$cacheable = false;
      return this.export.dir;
    }
    get exportPath() {
      this._items.current.$cacheable = false;
      return this.export.path;
    }
    typefield(field) {
      field = field.trim();
      if (field.startsWith("bibtex."))
        return this.BetterBibTeX ? field.replace(/^bibtex\./, "") : "";
      if (field.startsWith("biblatex."))
        return this.BetterBibLaTeX ? field.replace(/^biblatex\./, "") : "";
      return field;
    }
    init(mode) {
      var _a3, _b, _c, _d, _e;
      this[ZOTERO_TRANSLATOR_INFO.label.replace(/[^a-z]/ig, "")] = true;
      this.BetterTeX = this.BetterBibTeX || this.BetterBibLaTeX;
      this.BetterCSL = this.BetterCSLJSON || this.BetterCSLYAML;
      this.options = ZOTERO_TRANSLATOR_INFO.displayOptions || {};
      let start = `${ZOTERO_TRANSLATOR_INFO.label} ${mode} translator starting in ${Zotero.worker ? "background" : "foreground"}`;
      if (!!Zotero.worker !== (mode === "export" && !!this.options.worker))
        start += ", which was unexpected";
      dump(start);
      this.platform = Zotero.getHiddenPref("better-bibtex.platform");
      this.isJurisM = client === "jurism";
      this.isZotero = !this.isJurisM;
      this.paths = {
        caseSensitive: this.platform !== "mac" && this.platform !== "win",
        sep: this.platform === "win" ? "\\" : "/"
      };
      try {
        if (Zotero.getOption("cache") === false)
          this.cacheable = false;
      } catch (err) {
      }
      for (const key in this.options) {
        if (typeof this.options[key] === "boolean") {
          this.options[key] = Zotero.getOption(key);
        } else {
          this.options[key] = !!Zotero.getOption(key);
        }
      }
      if (mode === "export") {
        this.cache = {
          hits: 0,
          requests: 0
        };
        this.export = {
          dir: Zotero.getOption("exportDir"),
          path: Zotero.getOption("exportPath")
        };
        if ((_a3 = this.export.dir) == null ? void 0 : _a3.endsWith(this.paths.sep))
          this.export.dir = this.export.dir.slice(0, -1);
        this.options.cacheUse = Zotero.getOption("cacheUse");
      }
      this.preferences = Object.entries(defaults).reduce((acc, [pref, dflt]) => {
        var _a4, _b2;
        acc[pref] = (_b2 = (_a4 = this.getPreferenceOverride(pref)) != null ? _a4 : Zotero.getHiddenPref(`better-bibtex.${pref}`)) != null ? _b2 : dflt;
        return acc;
      }, {});
      this.importToExtra = {};
      this.preferences.importNoteToExtra.toLowerCase().split(/\s*,\s*/).filter((field) => field).forEach((field) => {
        this.importToExtra[field.replace(/\s*=.*/, "")] = field.match(/\s*=\s*force$/) ? "force" : "plain";
      });
      this.skipFields = this.preferences.skipFields.toLowerCase().split(",").map((field) => this.typefield(field)).filter((s) => s);
      this.skipField = this.skipFields.reduce((acc, field) => {
        acc[field] = true;
        return acc;
      }, {});
      let m;
      this.verbatimFields = this.preferences.verbatimFields.toLowerCase().split(",").map((field) => (m = field.trim().match(/^[/](.+)[/]$/)) ? new RegExp(m[1], "i") : this.typefield(field)).filter((s) => s);
      if (!this.verbatimFields.length)
        this.verbatimFields = null;
      this.csquotes = this.preferences.csquotes ? { open: this.preferences.csquotes[0], close: this.preferences.csquotes[1] } : null;
      this.preferences.testing = Zotero.getHiddenPref("better-bibtex.testing");
      if (mode === "export") {
        this.unicode = !this.preferences[`ascii${ZOTERO_TRANSLATOR_INFO.label.replace(/Better /, "")}`];
        if (this.preferences.baseAttachmentPath && (this.export.dir === this.preferences.baseAttachmentPath || ((_b = this.export.dir) == null ? void 0 : _b.startsWith(this.preferences.baseAttachmentPath + this.paths.sep)))) {
          this.preferences.relativeFilePaths = true;
        }
        this.cacheable = this.cacheable && this.preferences.cache && !(this.options.exportFileData || this.preferences.relativeFilePaths || this.preferences.baseAttachmentPath && ((_c = this.export.dir) == null ? void 0 : _c.startsWith(this.preferences.baseAttachmentPath)));
        if (this.BetterTeX) {
          this.preferences.separatorList = this.preferences.separatorList.trim();
          this.preferences.separatorNames = this.preferences.separatorNames.trim();
          this.and = {
            list: {
              re: new RegExp(escapeRegExp(this.preferences.separatorList), "g"),
              repl: ` {${this.preferences.separatorList}} `
            },
            names: {
              re: new RegExp(` ${escapeRegExp(this.preferences.separatorNames)} `, "g"),
              repl: ` {${this.preferences.separatorNames}} `
            }
          };
          this.preferences.separatorList = ` ${this.preferences.separatorList} `;
          this.preferences.separatorNames = ` ${this.preferences.separatorNames} `;
        }
      }
      this.collections = {};
      if (mode === "export" && ((_d = ZOTERO_TRANSLATOR_INFO.configOptions) == null ? void 0 : _d.getCollections) && Zotero.nextCollection) {
        let collection;
        while (collection = Zotero.nextCollection()) {
          this.registerCollection(collection, "");
        }
      }
      if (!this.initialized && mode === "export" && this.preferences.testing && typeof __estrace === "undefined" && ((_e = schema.translator[ZOTERO_TRANSLATOR_INFO.label]) == null ? void 0 : _e.cache)) {
        const ignored = ["testing"];
        this.preferences = new Proxy(this.preferences, {
          set: (object, property, _value) => {
            throw new TypeError(`Unexpected set of preference ${String(property)}`);
          },
          get: (object, property) => {
            var _a4;
            if (property === "toJSON")
              return object[property];
            if (!names.includes(property))
              throw new TypeError(`Unsupported preference ${property}`);
            if (!ignored.includes(property) && !((_a4 = affects[property]) == null ? void 0 : _a4.includes(ZOTERO_TRANSLATOR_INFO.label)))
              throw new TypeError(`Preference ${property} claims not to affect ${ZOTERO_TRANSLATOR_INFO.label}`);
            return object[property];
          }
        });
      }
      this.initialized = true;
    }
    getPreferenceOverride(pref) {
      try {
        const override = Zotero.getOption(`preference_${pref}`);
        if (typeof override !== "undefined")
          this.cacheable = false;
        return override;
      } catch (err) {
        return void 0;
      }
    }
    registerCollection(collection, parent) {
      const key = (collection.primary ? collection.primary : collection).key;
      if (this.collections[key])
        return;
      this.collections[key] = {
        key,
        parent,
        name: collection.name,
        collections: [],
        items: []
      };
      for (const child of collection.descendents || collection.children) {
        switch (child.type) {
          case "collection":
            this.collections[key].collections.push(child.key);
            this.registerCollection(child, key);
            break;
          case "item":
            this.collections[key].items.push(child.id);
            break;
        }
      }
    }
    get collectionTree() {
      return Object.values(this.collections).filter((coll) => !coll.parent).map((coll) => this.nestedCollection(coll));
    }
    nestedCollection(collection) {
      this._items = this._items || new Items(this.cacheable);
      const nested = {
        key: collection.key,
        name: collection.name,
        items: collection.items.map((itemID) => this._items.map[itemID]).filter((item) => item),
        collections: collection.collections.map((key) => this.nestedCollection(this.collections[key])).filter((coll) => coll)
      };
      for (const coll of nested.collections) {
        coll.parent = nested;
      }
      return nested;
    }
    get items() {
      this._items = this._items || new Items(this.cacheable);
      return this._items.items();
    }
    get regularitems() {
      this._items = this._items || new Items(this.cacheable);
      return this._items.regularitems();
    }
  };
  var Translator = new ITranslator();

  // translators/bibtex/entry.ts
  init_globals();

  // translators/lib/postscript.ts
  init_globals();
  function postscript(kind, main, guard) {
    let body = `
    // aliases for backwards compat
    const item = source;
    const zotero = source;

    const reference = target;
    const entry = target;
    const ${kind} = target;

    // referencetype is the legacy name of entrytype
    const entrytype = reference.referencetype = entry.entrytype

    const result = (() => { ${main}; })();

    // entry type change through legacy field
    if (entry.entrytype === entrytype && reference.referencetype !== entrytype) entry.entrytype = reference.referencetype
    delete entry.referencetype

    switch (typeof result) {
      case 'undefined': return { cache: true, write: true }
      case 'boolean': return { cache: result, write: true }
      case 'object': return { cache: true, write: true, ...result }
      default:
        Zotero.debug('Unexpected postscript result ' + JSON.stringify(result));
        return { cache: false, write: true }
    }
  `;
    if (guard)
      body = `${guard} = true; try { ${body} } finally { ${guard} = false; }`;
    log.debug("postscript=", body);
    return new Function("target", "source", "Translator", "Zotero", "extra", body);
  }
  var noop = function(_entry, _item, _translator, _extra) {
    return { cache: true, write: true };
  };

  // translators/bibtex/exporter.ts
  init_globals();

  // translators/bibtex/jabref.ts
  init_globals();
  var JabRef = class {
    constructor() {
      this.citekeys = /* @__PURE__ */ new Map();
    }
    exportGroups() {
      if (Object.keys(Translator.collections).length === 0 || !Translator.preferences.jabrefFormat)
        return;
      let meta;
      if (Translator.preferences.jabrefFormat === 3) {
        meta = "groupsversion:3";
      } else if (Translator.BetterBibLaTeX) {
        meta = "databaseType:biblatex";
      } else {
        meta = "databaseType:bibtex";
      }
      Zotero.write(`@comment{jabref-meta: ${meta};}
`);
      Zotero.write(`@comment{jabref-meta: ${Translator.preferences.jabrefFormat === 5 ? "grouping" : "groupstree"}:
`);
      this.groups = ["0 AllEntriesGroup:"];
      const collections = Object.values(Translator.collections).filter((coll) => !coll.parent);
      if (Translator.preferences.testing)
        collections.sort((a, b) => Translator.stringCompare(a.name, b.name));
      for (const collection of collections) {
        this.exportGroup(collection, 1);
      }
      Zotero.write(this.groups.map((group) => this.quote(group, true)).concat("").join(";\n"));
      Zotero.write("}\n");
    }
    exportGroup(collection, level) {
      let group = [`${level} ${Translator.preferences.jabrefFormat === 5 ? "Static" : "Explicit"}Group:${this.quote(collection.name)}`, "0"];
      if (Translator.preferences.jabrefFormat === 3) {
        const items = (collection.items || []).filter((id) => this.citekeys.has(id)).map((id) => this.quote(this.citekeys.get(id)));
        if (Translator.preferences.testing)
          items.sort();
        group = group.concat(items);
      }
      if (Translator.preferences.jabrefFormat === 5) {
        group = group.concat(["1", "0x8a8a8aff", "", ""]);
      } else {
        group.push("");
      }
      this.groups.push(group.join(";"));
      const children = (collection.collections || []).map((key) => Translator.collections[key]).filter((coll) => coll);
      if (Translator.preferences.testing)
        children.sort((a, b) => Translator.stringCompare(a.name, b.name));
      for (const child of children) {
        this.exportGroup(child, level + 1);
      }
    }
    quote(s, wrap = false) {
      s = s.replace(/([\\;])/g, "\\$1");
      if (wrap)
        s = s.match(/.{1,70}/g).join("\n");
      return s;
    }
  };

  // gen/items/simplify.ts
  init_globals();
  var zotero = client === "zotero";
  var jurism = !zotero;
  function unalias(item, { scrub = true } = {}) {
    delete item.inPublications;
    let v;
    if (v = item.dateDecided || item.issueDate || item.dateEnacted)
      item.date = v;
    if (scrub) {
      delete item.dateDecided;
      delete item.issueDate;
      delete item.dateEnacted;
    }
    if (v = item.artworkMedium || item.audioRecordingFormat || item.videoRecordingFormat || item.interviewMedium || item.audioFileType)
      item.medium = v;
    if (scrub) {
      delete item.artworkMedium;
      delete item.audioRecordingFormat;
      delete item.videoRecordingFormat;
      delete item.interviewMedium;
      delete item.audioFileType;
    }
    if (v = item.billNumber || item.docketNumber || item.patentNumber || item.episodeNumber || item.reportNumber || item.publicLawNumber)
      item.number = v;
    if (scrub) {
      delete item.billNumber;
      delete item.docketNumber;
      delete item.patentNumber;
      delete item.episodeNumber;
      delete item.reportNumber;
      delete item.publicLawNumber;
    }
    if (v = item.codePages || item.firstPage)
      item.pages = v;
    if (scrub) {
      delete item.codePages;
      delete item.firstPage;
    }
    if (v = item.blogTitle || item.bookTitle || item.proceedingsTitle || item.dictionaryTitle || item.encyclopediaTitle || item.forumTitle || item.programTitle || item.websiteTitle)
      item.publicationTitle = v;
    if (scrub) {
      delete item.blogTitle;
      delete item.bookTitle;
      delete item.proceedingsTitle;
      delete item.dictionaryTitle;
      delete item.encyclopediaTitle;
      delete item.forumTitle;
      delete item.programTitle;
      delete item.websiteTitle;
    }
    if (v = item.label || item.company || item.distributor || item.network || item.university || item.studio)
      item.publisher = v;
    if (scrub) {
      delete item.label;
      delete item.company;
      delete item.distributor;
      delete item.network;
      delete item.university;
      delete item.studio;
    }
    if (v = item.caseName || item.subject || item.nameOfAct)
      item.title = v;
    if (scrub) {
      delete item.caseName;
      delete item.subject;
      delete item.nameOfAct;
    }
    if (v = item.websiteType || item.genre || item.postType || item.letterType || item.manuscriptType || item.mapType || item.presentationType || item.reportType || item.thesisType)
      item.type = v;
    if (scrub) {
      delete item.websiteType;
      delete item.genre;
      delete item.postType;
      delete item.letterType;
      delete item.manuscriptType;
      delete item.mapType;
      delete item.presentationType;
      delete item.reportType;
      delete item.thesisType;
    }
    if (v = item.codeVolume || item.reporterVolume)
      item.volume = v;
    if (scrub) {
      delete item.codeVolume;
      delete item.reporterVolume;
    }
    if (zotero) {
      if (v = item.documentNumber || item.archiveID)
        item.number = v;
      if (scrub) {
        delete item.documentNumber;
        delete item.archiveID;
      }
      if (v = item.repository || item.institution)
        item.publisher = v;
      if (scrub) {
        delete item.repository;
        delete item.institution;
      }
    }
    if (jurism) {
      if (item.release)
        item.edition = item.release;
      if (scrub) {
        delete item.release;
      }
      if (item.bookAbbreviation)
        item.journalAbbreviation = item.bookAbbreviation;
      if (scrub) {
        delete item.bookAbbreviation;
      }
      if (item.regulatoryBody)
        item.legislativeBody = item.regulatoryBody;
      if (scrub) {
        delete item.regulatoryBody;
      }
      if (item.treatyNumber)
        item.number = item.treatyNumber;
      if (scrub) {
        delete item.treatyNumber;
      }
      if (v = item.album || item.reporter)
        item.publicationTitle = v;
      if (scrub) {
        delete item.album;
        delete item.reporter;
      }
      if (item.assemblyNumber)
        item.seriesNumber = item.assemblyNumber;
      if (scrub) {
        delete item.assemblyNumber;
      }
      if (v = item.sessionType || item.regulationType)
        item.type = v;
      if (scrub) {
        delete item.sessionType;
        delete item.regulationType;
      }
    }
  }
  function simplifyForExport(item, { dropAttachments = false, scrub = true } = {}) {
    unalias(item, { scrub });
    if (item.filingDate)
      item.filingDate = item.filingDate.replace(/^0000-00-00 /, "");
    if (item.creators) {
      for (const creator of item.creators) {
        if (creator.fieldMode) {
          creator.name = creator.name || creator.lastName;
          delete creator.lastName;
          delete creator.firstName;
          delete creator.fieldMode;
        }
      }
    }
    if (item.itemType === "attachment" || item.itemType === "note") {
      delete item.attachments;
      delete item.notes;
    } else {
      item.attachments = !dropAttachments && item.attachments || [];
    }
    return item;
  }

  // translators/bibtex/exporter.ts
  var bibtexParser = __toESM(require_bibtex_parser());

  // translators/bibtex/postfix.ts
  init_globals();
  var Postfix = class {
    constructor(qualityReport) {
      this.qr = qualityReport;
      this.packages = {};
      this.noopsort = false;
      this.declarePrefChars = "";
    }
    add(metadata) {
      if (!metadata)
        return;
      if (metadata.DeclarePrefChars)
        this.declarePrefChars += metadata.DeclarePrefChars;
      if (metadata.noopsort)
        this.noopsort = true;
      if (metadata.packages) {
        for (const pkg of metadata.packages) {
          this.packages[pkg] = true;
        }
      }
    }
    toString() {
      let postfix2 = "";
      let preamble = [];
      if (this.declarePrefChars)
        preamble.push("\\ifdefined\\DeclarePrefChars\\DeclarePrefChars{'\u2019-}\\else\\fi");
      if (this.noopsort)
        preamble.push("\\providecommand{\\noopsort}[1]{}");
      if (preamble.length > 0) {
        preamble = preamble.map((cmd) => `"${cmd} "`);
        postfix2 += `@preamble{ ${preamble.join(" \n # ")} }
`;
      }
      if (this.qr) {
        const packages = Object.keys(this.packages).sort();
        if (packages.length) {
          postfix2 += "\n% Required packages:\n";
          for (const pkg of packages) {
            postfix2 += `% * ${pkg}
`;
          }
        }
      }
      return postfix2;
    }
  };

  // content/extra.ts
  init_globals();

  // gen/items/extra-fields.json
  var extra_fields_exports = {};
  __export(extra_fields_exports, {
    DOI: () => DOI,
    ISBN: () => ISBN,
    ISSN: () => ISSN,
    PMCID: () => PMCID,
    PMID: () => PMID,
    URL: () => URL,
    "access date": () => access_date,
    accessDate: () => accessDate,
    accessed: () => accessed,
    "admin flag": () => admin_flag,
    "admin-flag": () => admin_flag2,
    adminFlag: () => adminFlag,
    "adoption date": () => adoption_date,
    adoptionDate: () => adoptionDate,
    album: () => album,
    "application number": () => application_number,
    applicationNumber: () => applicationNumber,
    archive: () => archive,
    "archive collection": () => archive_collection,
    "archive id": () => archive_id,
    "archive location": () => archive_location,
    "archive place": () => archive_place,
    "archive-place": () => archive_place2,
    archiveCollection: () => archiveCollection,
    archiveID: () => archiveID,
    archiveLocation: () => archiveLocation,
    archive_collection: () => archive_collection2,
    archive_location: () => archive_location2,
    artist: () => artist,
    "artwork medium": () => artwork_medium,
    "artwork size": () => artwork_size,
    artworkMedium: () => artworkMedium,
    artworkSize: () => artworkSize,
    "assembly number": () => assembly_number,
    assemblyNumber: () => assemblyNumber,
    assignee: () => assignee,
    "attorney agent": () => attorney_agent,
    attorneyAgent: () => attorneyAgent,
    "audio file type": () => audio_file_type,
    "audio recording format": () => audio_recording_format,
    audioFileType: () => audioFileType,
    audioRecordingFormat: () => audioRecordingFormat,
    author: () => author,
    authority: () => authority,
    "bill number": () => bill_number,
    billNumber: () => billNumber,
    "blog title": () => blog_title,
    blogTitle: () => blogTitle,
    "book abbreviation": () => book_abbreviation,
    "book author": () => book_author,
    "book title": () => book_title,
    bookAbbreviation: () => bookAbbreviation,
    bookAuthor: () => bookAuthor,
    bookTitle: () => bookTitle,
    "call number": () => call_number,
    "call-number": () => call_number2,
    callNumber: () => callNumber,
    cartographer: () => cartographer,
    "case name": () => case_name,
    caseName: () => caseName,
    "cast member": () => cast_member,
    castMember: () => castMember,
    "chapter number": () => chapter_number,
    "chapter-number": () => chapter_number2,
    "citation key": () => citation_key,
    citationKey: () => citationKey,
    code: () => code,
    "code number": () => code_number,
    "code pages": () => code_pages,
    "code volume": () => code_volume,
    codeNumber: () => codeNumber,
    codePages: () => codePages,
    codeVolume: () => codeVolume,
    "collection editor": () => collection_editor,
    "collection number": () => collection_number,
    "collection title": () => collection_title,
    "collection-editor": () => collection_editor2,
    "collection-number": () => collection_number2,
    "collection-title": () => collection_title2,
    commenter: () => commenter,
    committee: () => committee,
    company: () => company,
    composer: () => composer,
    "conference date": () => conference_date,
    "conference name": () => conference_name,
    conferenceDate: () => conferenceDate,
    conferenceName: () => conferenceName,
    "container author": () => container_author,
    "container title": () => container_title,
    "container title short": () => container_title_short,
    "container-author": () => container_author2,
    "container-title": () => container_title2,
    "container-title-short": () => container_title_short2,
    contributor: () => contributor,
    cosponsor: () => cosponsor,
    counsel: () => counsel,
    country: () => country,
    court: () => court,
    "csl type": () => csl_type,
    "csl-type": () => csl_type2,
    date: () => date,
    "date amended": () => date_amended,
    "date decided": () => date_decided,
    "date enacted": () => date_enacted,
    dateAmended: () => dateAmended,
    dateDecided: () => dateDecided,
    dateEnacted: () => dateEnacted,
    default: () => extra_fields_default,
    "dictionary title": () => dictionary_title,
    dictionaryTitle: () => dictionaryTitle,
    dimensions: () => dimensions,
    director: () => director,
    distributor: () => distributor,
    division: () => division,
    "docket number": () => docket_number,
    docketNumber: () => docketNumber,
    "document name": () => document_name,
    "document number": () => document_number,
    "document-name": () => document_name2,
    "document-number": () => document_number2,
    documentName: () => documentName,
    documentNumber: () => documentNumber,
    doi: () => doi,
    edition: () => edition,
    editor: () => editor,
    "editorial director": () => editorial_director,
    "editorial-director": () => editorial_director2,
    "encyclopedia title": () => encyclopedia_title,
    encyclopediaTitle: () => encyclopediaTitle,
    "episode number": () => episode_number,
    episodeNumber: () => episodeNumber,
    event: () => event,
    "event date": () => event_date,
    "event place": () => event_place,
    "event title": () => event_title,
    "event-date": () => event_date2,
    "event-place": () => event_place2,
    "event-title": () => event_title2,
    "filing date": () => filing_date,
    filingDate: () => filingDate,
    "first page": () => first_page,
    firstPage: () => firstPage,
    "forum title": () => forum_title,
    forumTitle: () => forumTitle,
    "gazette flag": () => gazette_flag,
    "gazette-flag": () => gazette_flag2,
    gazetteFlag: () => gazetteFlag,
    genre: () => genre,
    guest: () => guest,
    history: () => history,
    illustrator: () => illustrator,
    institution: () => institution,
    "interview medium": () => interview_medium,
    interviewMedium: () => interviewMedium,
    interviewee: () => interviewee,
    interviewer: () => interviewer,
    inventor: () => inventor,
    isbn: () => isbn,
    issn: () => issn,
    issue: () => issue,
    "issue date": () => issue_date,
    issueDate: () => issueDate,
    issued: () => issued,
    "issuing authority": () => issuing_authority,
    issuingAuthority: () => issuingAuthority,
    "journal abbreviation": () => journal_abbreviation,
    journalAbbreviation: () => journalAbbreviation,
    jurisdiction: () => jurisdiction,
    label: () => label,
    language: () => language,
    "legal status": () => legal_status,
    legalStatus: () => legalStatus,
    "legislative body": () => legislative_body,
    legislativeBody: () => legislativeBody,
    "letter type": () => letter_type,
    letterType: () => letterType,
    "library catalog": () => library_catalog,
    libraryCatalog: () => libraryCatalog,
    license: () => license,
    "manuscript type": () => manuscript_type,
    manuscriptType: () => manuscriptType,
    "map type": () => map_type,
    mapType: () => mapType,
    medium: () => medium,
    "meeting name": () => meeting_name,
    "meeting number": () => meeting_number,
    meetingName: () => meetingName,
    meetingNumber: () => meetingNumber,
    "name of act": () => name_of_act,
    nameOfAct: () => nameOfAct,
    network: () => network,
    "news case date": () => news_case_date,
    newsCaseDate: () => newsCaseDate,
    "num pages": () => num_pages,
    numPages: () => numPages,
    number: () => number,
    "number of pages": () => number_of_pages,
    "number of volumes": () => number_of_volumes,
    "number-of-pages": () => number_of_pages2,
    "number-of-volumes": () => number_of_volumes2,
    numberOfVolumes: () => numberOfVolumes,
    "opening date": () => opening_date,
    "opening-date": () => opening_date2,
    openingDate: () => openingDate,
    opus: () => opus,
    "original author": () => original_author,
    "original date": () => original_date,
    "original publisher": () => original_publisher,
    "original publisher place": () => original_publisher_place,
    "original title": () => original_title,
    "original-author": () => original_author2,
    "original-date": () => original_date2,
    "original-publisher": () => original_publisher2,
    "original-publisher-place": () => original_publisher_place2,
    "original-title": () => original_title2,
    originalDate: () => originalDate,
    page: () => page,
    pages: () => pages,
    "parent treaty": () => parent_treaty,
    parentTreaty: () => parentTreaty,
    "patent number": () => patent_number,
    patentNumber: () => patentNumber,
    performer: () => performer,
    place: () => place,
    pmcid: () => pmcid,
    pmid: () => pmid,
    podcaster: () => podcaster,
    "post type": () => post_type,
    postType: () => postType,
    "presentation type": () => presentation_type,
    presentationType: () => presentationType,
    presenter: () => presenter,
    "priority date": () => priority_date,
    "priority numbers": () => priority_numbers,
    priorityDate: () => priorityDate,
    priorityNumbers: () => priorityNumbers,
    "proceedings title": () => proceedings_title,
    proceedingsTitle: () => proceedingsTitle,
    producer: () => producer,
    "program title": () => program_title,
    programTitle: () => programTitle,
    programmer: () => programmer,
    "programming language": () => programming_language,
    programmingLanguage: () => programmingLanguage,
    "public law number": () => public_law_number,
    publicLawNumber: () => publicLawNumber,
    "publication date": () => publication_date,
    "publication number": () => publication_number,
    "publication title": () => publication_title,
    "publication-date": () => publication_date2,
    "publication-number": () => publication_number2,
    publicationDate: () => publicationDate,
    publicationNumber: () => publicationNumber,
    publicationTitle: () => publicationTitle,
    publisher: () => publisher,
    "publisher place": () => publisher_place,
    "publisher-place": () => publisher_place2,
    recipient: () => recipient,
    references: () => references,
    "regnal year": () => regnal_year,
    regnalYear: () => regnalYear,
    "regulation type": () => regulation_type,
    regulationType: () => regulationType,
    "regulatory body": () => regulatory_body,
    regulatoryBody: () => regulatoryBody,
    reign: () => reign,
    release: () => release,
    "report number": () => report_number,
    "report type": () => report_type,
    reportNumber: () => reportNumber,
    reportType: () => reportType,
    reporter: () => reporter,
    "reporter volume": () => reporter_volume,
    reporterVolume: () => reporterVolume,
    repository: () => repository,
    "resolution label": () => resolution_label,
    resolutionLabel: () => resolutionLabel,
    "reviewed author": () => reviewed_author,
    "reviewed title": () => reviewed_title,
    "reviewed-author": () => reviewed_author2,
    "reviewed-title": () => reviewed_title2,
    reviewedAuthor: () => reviewedAuthor,
    rights: () => rights,
    "running time": () => running_time,
    runningTime: () => runningTime,
    scale: () => scale,
    "script writer": () => script_writer,
    "script-writer": () => script_writer2,
    scriptwriter: () => scriptwriter,
    section: () => section,
    series: () => series,
    "series editor": () => series_editor,
    "series number": () => series_number,
    "series text": () => series_text,
    "series title": () => series_title,
    seriesEditor: () => seriesEditor,
    seriesNumber: () => seriesNumber,
    seriesText: () => seriesText,
    seriesTitle: () => seriesTitle,
    session: () => session,
    "session type": () => session_type,
    sessionType: () => sessionType,
    "short title": () => short_title,
    shortTitle: () => shortTitle,
    "signing date": () => signing_date,
    signingDate: () => signingDate,
    source: () => source,
    sponsor: () => sponsor,
    status: () => status,
    studio: () => studio,
    subject: () => subject,
    submitted: () => submitted,
    supplement: () => supplement,
    "supplement name": () => supplement_name,
    supplementName: () => supplementName,
    system: () => system,
    "testimony by": () => testimony_by,
    testimonyBy: () => testimonyBy,
    "thesis type": () => thesis_type,
    thesisType: () => thesisType,
    title: () => title,
    "title short": () => title_short,
    "title-short": () => title_short2,
    translator: () => translator,
    "treaty number": () => treaty_number,
    treatyNumber: () => treatyNumber,
    type: () => type,
    university: () => university,
    url: () => url,
    version: () => version,
    "version number": () => version_number,
    versionNumber: () => versionNumber,
    "video recording format": () => video_recording_format,
    videoRecordingFormat: () => videoRecordingFormat,
    volume: () => volume,
    "volume title": () => volume_title,
    "volume-title": () => volume_title2,
    volumeTitle: () => volumeTitle,
    "website title": () => website_title,
    "website type": () => website_type,
    websiteTitle: () => websiteTitle,
    websiteType: () => websiteType,
    "words by": () => words_by,
    wordsBy: () => wordsBy,
    "year as volume": () => year_as_volume,
    yearAsVolume: () => yearAsVolume
  });
  var DOI = {
    csl: [
      "DOI"
    ],
    type: "text",
    zotero: [
      "DOI"
    ]
  };
  var ISBN = {
    csl: [
      "ISBN"
    ],
    type: "text",
    zotero: [
      "ISBN"
    ]
  };
  var ISSN = {
    csl: [
      "ISSN"
    ],
    type: "text",
    zotero: [
      "ISSN"
    ]
  };
  var PMCID = {
    csl: [
      "PMCID"
    ],
    type: "text"
  };
  var PMID = {
    csl: [
      "PMID"
    ],
    type: "text"
  };
  var URL = {
    csl: [
      "URL"
    ],
    type: "text"
  };
  var access_date = {
    csl: [
      "accessed"
    ],
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var accessDate = {
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var accessed = {
    csl: [
      "accessed"
    ],
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var admin_flag = {
    csl: [
      "admin-flag"
    ],
    type: "text",
    zotero: [
      "adminFlag"
    ]
  };
  var admin_flag2 = {
    csl: [
      "admin-flag"
    ],
    type: "text"
  };
  var adminFlag = {
    type: "text",
    zotero: [
      "adminFlag"
    ]
  };
  var adoption_date = {
    type: "date",
    zotero: [
      "adoptionDate"
    ]
  };
  var adoptionDate = {
    type: "date",
    zotero: [
      "adoptionDate"
    ]
  };
  var album = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var application_number = {
    type: "text",
    zotero: [
      "applicationNumber"
    ]
  };
  var applicationNumber = {
    type: "text",
    zotero: [
      "applicationNumber"
    ]
  };
  var archive = {
    csl: [
      "archive"
    ],
    type: "text",
    zotero: [
      "archive"
    ]
  };
  var archive_collection = {
    csl: [
      "archive_collection"
    ],
    type: "text",
    zotero: [
      "archiveCollection"
    ]
  };
  var archive_id = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var archive_location = {
    csl: [
      "archive_location"
    ],
    type: "text",
    zotero: [
      "archiveLocation"
    ]
  };
  var archive_place = {
    csl: [
      "archive-place"
    ],
    type: "text"
  };
  var archive_place2 = {
    csl: [
      "archive-place"
    ],
    type: "text"
  };
  var archiveCollection = {
    type: "text",
    zotero: [
      "archiveCollection"
    ]
  };
  var archiveID = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var archiveLocation = {
    type: "text",
    zotero: [
      "archiveLocation"
    ]
  };
  var archive_collection2 = {
    csl: [
      "archive_collection"
    ],
    type: "text"
  };
  var archive_location2 = {
    csl: [
      "archive_location"
    ],
    type: "text"
  };
  var artist = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "artist"
    ]
  };
  var artwork_medium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var artwork_size = {
    type: "text",
    zotero: [
      "artworkSize"
    ]
  };
  var artworkMedium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var artworkSize = {
    type: "text",
    zotero: [
      "artworkSize"
    ]
  };
  var assembly_number = {
    type: "text",
    zotero: [
      "assemblyNumber",
      "seriesNumber"
    ]
  };
  var assemblyNumber = {
    type: "text",
    zotero: [
      "assemblyNumber",
      "seriesNumber"
    ]
  };
  var assignee = {
    type: "text",
    zotero: [
      "assignee"
    ]
  };
  var attorney_agent = {
    csl: [
      "attorneyAgent"
    ],
    type: "name",
    zotero: [
      "attorneyAgent"
    ]
  };
  var attorneyAgent = {
    csl: [
      "attorneyAgent"
    ],
    type: "name",
    zotero: [
      "attorneyAgent"
    ]
  };
  var audio_file_type = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audio_recording_format = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audioFileType = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audioRecordingFormat = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var author = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "author"
    ]
  };
  var authority = {
    csl: [
      "authority"
    ],
    type: "text",
    zotero: [
      "court",
      "legislativeBody",
      "issuingAuthority",
      "institution",
      "regulatoryBody"
    ]
  };
  var bill_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var billNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var blog_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var blogTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var book_abbreviation = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var book_author = {
    csl: [
      "container-author"
    ],
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var book_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var bookAbbreviation = {
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var bookAuthor = {
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var bookTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var call_number = {
    csl: [
      "call-number"
    ],
    type: "text",
    zotero: [
      "callNumber"
    ]
  };
  var call_number2 = {
    csl: [
      "call-number"
    ],
    type: "text"
  };
  var callNumber = {
    type: "text",
    zotero: [
      "callNumber"
    ]
  };
  var cartographer = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "cartographer"
    ]
  };
  var case_name = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var caseName = {
    type: "text",
    zotero: [
      "title"
    ]
  };
  var cast_member = {
    csl: [
      "castMember"
    ],
    type: "name",
    zotero: [
      "castMember"
    ]
  };
  var castMember = {
    csl: [
      "castMember"
    ],
    type: "name",
    zotero: [
      "castMember"
    ]
  };
  var chapter_number = {
    csl: [
      "chapter-number"
    ],
    type: "text",
    zotero: [
      "session"
    ]
  };
  var chapter_number2 = {
    csl: [
      "chapter-number"
    ],
    type: "text"
  };
  var citation_key = {
    type: "text",
    zotero: [
      "citationKey"
    ]
  };
  var citationKey = {
    type: "text",
    zotero: [
      "citationKey"
    ]
  };
  var code = {
    type: "text",
    zotero: [
      "code"
    ]
  };
  var code_number = {
    type: "text",
    zotero: [
      "codeNumber"
    ]
  };
  var code_pages = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var code_volume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var codeNumber = {
    type: "text",
    zotero: [
      "codeNumber"
    ]
  };
  var codePages = {
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var codeVolume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var collection_editor = {
    csl: [
      "collection-editor"
    ],
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var collection_number = {
    csl: [
      "collection-number"
    ],
    type: "text",
    zotero: [
      "seriesNumber",
      "assemblyNumber",
      "regnalYear",
      "yearAsVolume"
    ]
  };
  var collection_title = {
    csl: [
      "collection-title"
    ],
    type: "text",
    zotero: [
      "seriesTitle",
      "series",
      "parentTreaty"
    ]
  };
  var collection_editor2 = {
    csl: [
      "collection-editor"
    ],
    type: "name"
  };
  var collection_number2 = {
    csl: [
      "collection-number"
    ],
    type: "text"
  };
  var collection_title2 = {
    csl: [
      "collection-title"
    ],
    type: "text"
  };
  var commenter = {
    csl: [
      "commenter"
    ],
    type: "name",
    zotero: [
      "commenter"
    ]
  };
  var committee = {
    csl: [
      "committee"
    ],
    type: "text",
    zotero: [
      "committee"
    ]
  };
  var company = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var composer = {
    csl: [
      "composer"
    ],
    type: "name",
    zotero: [
      "composer"
    ]
  };
  var conference_date = {
    type: "date",
    zotero: [
      "conferenceDate"
    ]
  };
  var conference_name = {
    type: "text",
    zotero: [
      "conferenceName"
    ]
  };
  var conferenceDate = {
    type: "date",
    zotero: [
      "conferenceDate"
    ]
  };
  var conferenceName = {
    type: "text",
    zotero: [
      "conferenceName"
    ]
  };
  var container_author = {
    csl: [
      "container-author"
    ],
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var container_title = {
    csl: [
      "container-title"
    ],
    type: "text",
    zotero: [
      "publicationTitle",
      "reporter",
      "code"
    ]
  };
  var container_title_short = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var container_author2 = {
    csl: [
      "container-author"
    ],
    type: "name"
  };
  var container_title2 = {
    csl: [
      "container-title"
    ],
    type: "text"
  };
  var container_title_short2 = {
    csl: [
      "container-title-short"
    ],
    type: "text"
  };
  var contributor = {
    csl: [
      "contributor"
    ],
    type: "name",
    zotero: [
      "contributor"
    ]
  };
  var cosponsor = {
    csl: [
      "cosponsor"
    ],
    type: "name",
    zotero: [
      "cosponsor"
    ]
  };
  var counsel = {
    csl: [
      "counsel"
    ],
    type: "name",
    zotero: [
      "counsel"
    ]
  };
  var country = {
    type: "text",
    zotero: [
      "country"
    ]
  };
  var court = {
    type: "text",
    zotero: [
      "court"
    ]
  };
  var csl_type = {
    csl: [
      "csl-type"
    ],
    type: "text"
  };
  var csl_type2 = {
    csl: [
      "csl-type"
    ],
    type: "text"
  };
  var date = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var date_amended = {
    type: "date",
    zotero: [
      "dateAmended"
    ]
  };
  var date_decided = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var date_enacted = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dateAmended = {
    type: "date",
    zotero: [
      "dateAmended"
    ]
  };
  var dateDecided = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dateEnacted = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dictionary_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var dictionaryTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var dimensions = {
    csl: [
      "dimensions"
    ],
    type: "text",
    zotero: [
      "artworkSize",
      "runningTime"
    ]
  };
  var director = {
    csl: [
      "director"
    ],
    type: "name",
    zotero: [
      "director"
    ]
  };
  var distributor = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var division = {
    csl: [
      "division"
    ],
    type: "text",
    zotero: [
      "division"
    ]
  };
  var docket_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var docketNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var document_name = {
    csl: [
      "document-name"
    ],
    type: "text",
    zotero: [
      "documentName"
    ]
  };
  var document_number = {
    csl: [
      "document-number"
    ],
    type: "text",
    zotero: [
      "documentNumber",
      "number"
    ]
  };
  var document_name2 = {
    csl: [
      "document-name"
    ],
    type: "text"
  };
  var document_number2 = {
    csl: [
      "document-number"
    ],
    type: "text"
  };
  var documentName = {
    type: "text",
    zotero: [
      "documentName"
    ]
  };
  var documentNumber = {
    type: "text",
    zotero: [
      "documentNumber",
      "number"
    ]
  };
  var doi = {
    csl: [
      "DOI"
    ],
    type: "text",
    zotero: [
      "DOI"
    ]
  };
  var edition = {
    csl: [
      "edition"
    ],
    type: "text",
    zotero: [
      "edition"
    ]
  };
  var editor = {
    csl: [
      "editor"
    ],
    type: "name",
    zotero: [
      "editor"
    ]
  };
  var editorial_director = {
    csl: [
      "editorial-director"
    ],
    type: "name"
  };
  var editorial_director2 = {
    csl: [
      "editorial-director"
    ],
    type: "name"
  };
  var encyclopedia_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var encyclopediaTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var episode_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var episodeNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var event = {
    csl: [
      "event"
    ],
    type: "text",
    zotero: [
      "resolutionLabel"
    ]
  };
  var event_date = {
    csl: [
      "event-date"
    ],
    type: "date",
    zotero: [
      "dateAmended",
      "signingDate",
      "conferenceDate"
    ]
  };
  var event_place = {
    csl: [
      "event-place"
    ],
    type: "text"
  };
  var event_title = {
    csl: [
      "event-title"
    ],
    type: "text"
  };
  var event_date2 = {
    csl: [
      "event-date"
    ],
    type: "date"
  };
  var event_place2 = {
    csl: [
      "event-place"
    ],
    type: "text"
  };
  var event_title2 = {
    csl: [
      "event-title"
    ],
    type: "text"
  };
  var filing_date = {
    csl: [
      "submitted"
    ],
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var filingDate = {
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var first_page = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var firstPage = {
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var forum_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var forumTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var gazette_flag = {
    csl: [
      "gazette-flag"
    ],
    type: "text",
    zotero: [
      "gazetteFlag"
    ]
  };
  var gazette_flag2 = {
    csl: [
      "gazette-flag"
    ],
    type: "text"
  };
  var gazetteFlag = {
    type: "text",
    zotero: [
      "gazetteFlag"
    ]
  };
  var genre = {
    csl: [
      "genre"
    ],
    type: "text",
    zotero: [
      "genre",
      "type"
    ]
  };
  var guest = {
    csl: [
      "guest"
    ],
    type: "name",
    zotero: [
      "guest"
    ]
  };
  var history = {
    type: "text",
    zotero: [
      "history"
    ]
  };
  var illustrator = {
    csl: [
      "illustrator"
    ],
    type: "name"
  };
  var institution = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "institution",
      "publisher"
    ]
  };
  var interview_medium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var interviewMedium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var interviewee = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "interviewee"
    ]
  };
  var interviewer = {
    csl: [
      "interviewer"
    ],
    type: "name",
    zotero: [
      "interviewer"
    ]
  };
  var inventor = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "inventor"
    ]
  };
  var isbn = {
    csl: [
      "ISBN"
    ],
    type: "text",
    zotero: [
      "ISBN"
    ]
  };
  var issn = {
    csl: [
      "ISSN"
    ],
    type: "text",
    zotero: [
      "ISSN"
    ]
  };
  var issue = {
    csl: [
      "issue"
    ],
    type: "text",
    zotero: [
      "issue"
    ]
  };
  var issue_date = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issueDate = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issued = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issuing_authority = {
    type: "text",
    zotero: [
      "issuingAuthority"
    ]
  };
  var issuingAuthority = {
    type: "text",
    zotero: [
      "issuingAuthority"
    ]
  };
  var journal_abbreviation = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var journalAbbreviation = {
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var jurisdiction = {
    csl: [
      "jurisdiction"
    ],
    type: "text",
    zotero: [
      "jurisdiction"
    ]
  };
  var label = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var language = {
    csl: [
      "language"
    ],
    type: "text",
    zotero: [
      "language"
    ]
  };
  var legal_status = {
    type: "text",
    zotero: [
      "legalStatus"
    ]
  };
  var legalStatus = {
    type: "text",
    zotero: [
      "legalStatus"
    ]
  };
  var legislative_body = {
    type: "text",
    zotero: [
      "legislativeBody"
    ]
  };
  var legislativeBody = {
    type: "text",
    zotero: [
      "legislativeBody"
    ]
  };
  var letter_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var letterType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var library_catalog = {
    csl: [
      "source"
    ],
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var libraryCatalog = {
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var license = {
    csl: [
      "license"
    ],
    type: "text",
    zotero: [
      "rights"
    ]
  };
  var manuscript_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var manuscriptType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var map_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var mapType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var medium = {
    csl: [
      "medium"
    ],
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var meeting_name = {
    type: "text",
    zotero: [
      "meetingName"
    ]
  };
  var meeting_number = {
    type: "text",
    zotero: [
      "meetingNumber"
    ]
  };
  var meetingName = {
    type: "text",
    zotero: [
      "meetingName"
    ]
  };
  var meetingNumber = {
    type: "text",
    zotero: [
      "meetingNumber"
    ]
  };
  var name_of_act = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var nameOfAct = {
    type: "text",
    zotero: [
      "title"
    ]
  };
  var network = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var news_case_date = {
    type: "date",
    zotero: [
      "newsCaseDate"
    ]
  };
  var newsCaseDate = {
    type: "date",
    zotero: [
      "newsCaseDate"
    ]
  };
  var num_pages = {
    csl: [
      "number-of-pages"
    ],
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var numPages = {
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var number_of_pages = {
    csl: [
      "number-of-pages"
    ],
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var number_of_volumes = {
    csl: [
      "number-of-volumes"
    ],
    type: "text",
    zotero: [
      "numberOfVolumes"
    ]
  };
  var number_of_pages2 = {
    csl: [
      "number-of-pages"
    ],
    type: "text"
  };
  var number_of_volumes2 = {
    csl: [
      "number-of-volumes"
    ],
    type: "text"
  };
  var numberOfVolumes = {
    type: "text",
    zotero: [
      "numberOfVolumes"
    ]
  };
  var opening_date = {
    csl: [
      "opening-date"
    ],
    type: "date",
    zotero: [
      "openingDate"
    ]
  };
  var opening_date2 = {
    csl: [
      "opening-date"
    ],
    type: "date"
  };
  var openingDate = {
    type: "date",
    zotero: [
      "openingDate"
    ]
  };
  var opus = {
    type: "text",
    zotero: [
      "opus"
    ]
  };
  var original_author = {
    csl: [
      "original-author"
    ],
    type: "name"
  };
  var original_date = {
    csl: [
      "original-date"
    ],
    type: "date",
    zotero: [
      "originalDate"
    ]
  };
  var original_publisher = {
    csl: [
      "original-publisher"
    ],
    type: "text"
  };
  var original_publisher_place = {
    csl: [
      "original-publisher-place"
    ],
    type: "text"
  };
  var original_title = {
    csl: [
      "original-title"
    ],
    type: "text"
  };
  var original_author2 = {
    csl: [
      "original-author"
    ],
    type: "name"
  };
  var original_date2 = {
    csl: [
      "original-date"
    ],
    type: "date"
  };
  var original_publisher2 = {
    csl: [
      "original-publisher"
    ],
    type: "text"
  };
  var original_publisher_place2 = {
    csl: [
      "original-publisher-place"
    ],
    type: "text"
  };
  var original_title2 = {
    csl: [
      "original-title"
    ],
    type: "text"
  };
  var originalDate = {
    type: "date",
    zotero: [
      "originalDate"
    ]
  };
  var page = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var pages = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var parent_treaty = {
    type: "text",
    zotero: [
      "parentTreaty"
    ]
  };
  var parentTreaty = {
    type: "text",
    zotero: [
      "parentTreaty"
    ]
  };
  var patent_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var patentNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var performer = {
    csl: [
      "performer"
    ],
    type: "name",
    zotero: [
      "performer"
    ]
  };
  var place = {
    csl: [
      "event-place",
      "publisher-place"
    ],
    type: "text",
    zotero: [
      "place"
    ]
  };
  var pmcid = {
    csl: [
      "PMCID"
    ],
    type: "text"
  };
  var pmid = {
    csl: [
      "PMID"
    ],
    type: "text"
  };
  var podcaster = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "podcaster"
    ]
  };
  var post_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var postType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presentation_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presentationType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presenter = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "presenter"
    ]
  };
  var priority_date = {
    type: "date",
    zotero: [
      "priorityDate"
    ]
  };
  var priority_numbers = {
    type: "text",
    zotero: [
      "priorityNumbers"
    ]
  };
  var priorityDate = {
    type: "date",
    zotero: [
      "priorityDate"
    ]
  };
  var priorityNumbers = {
    type: "text",
    zotero: [
      "priorityNumbers"
    ]
  };
  var proceedings_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var proceedingsTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var producer = {
    csl: [
      "producer"
    ],
    type: "name",
    zotero: [
      "producer"
    ]
  };
  var program_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var programTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var programmer = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "programmer"
    ]
  };
  var programming_language = {
    type: "text",
    zotero: [
      "programmingLanguage"
    ]
  };
  var programmingLanguage = {
    type: "text",
    zotero: [
      "programmingLanguage"
    ]
  };
  var public_law_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var publicLawNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var publication_date = {
    csl: [
      "publication-date"
    ],
    type: "date",
    zotero: [
      "publicationDate"
    ]
  };
  var publication_number = {
    csl: [
      "publication-number"
    ],
    type: "text",
    zotero: [
      "publicationNumber"
    ]
  };
  var publication_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var publication_date2 = {
    csl: [
      "publication-date"
    ],
    type: "date"
  };
  var publication_number2 = {
    csl: [
      "publication-number"
    ],
    type: "text"
  };
  var publicationDate = {
    type: "date",
    zotero: [
      "publicationDate"
    ]
  };
  var publicationNumber = {
    type: "text",
    zotero: [
      "publicationNumber"
    ]
  };
  var publicationTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var publisher = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var publisher_place = {
    csl: [
      "publisher-place"
    ],
    type: "text"
  };
  var publisher_place2 = {
    csl: [
      "publisher-place"
    ],
    type: "text"
  };
  var recipient = {
    csl: [
      "recipient"
    ],
    type: "name",
    zotero: [
      "recipient"
    ]
  };
  var references = {
    csl: [
      "references"
    ],
    type: "text",
    zotero: [
      "references"
    ]
  };
  var regnal_year = {
    type: "text",
    zotero: [
      "regnalYear"
    ]
  };
  var regnalYear = {
    type: "text",
    zotero: [
      "regnalYear"
    ]
  };
  var regulation_type = {
    type: "text",
    zotero: [
      "regulationType",
      "type"
    ]
  };
  var regulationType = {
    type: "text",
    zotero: [
      "regulationType",
      "type"
    ]
  };
  var regulatory_body = {
    type: "text",
    zotero: [
      "regulatoryBody",
      "legislativeBody"
    ]
  };
  var regulatoryBody = {
    type: "text",
    zotero: [
      "regulatoryBody",
      "legislativeBody"
    ]
  };
  var reign = {
    type: "text",
    zotero: [
      "reign"
    ]
  };
  var release = {
    csl: [
      "edition"
    ],
    type: "text",
    zotero: [
      "edition"
    ]
  };
  var report_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var report_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var reportNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var reportType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var reporter = {
    type: "text",
    zotero: [
      "reporter",
      "publicationTitle"
    ]
  };
  var reporter_volume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var reporterVolume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var repository = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var resolution_label = {
    type: "text",
    zotero: [
      "resolutionLabel"
    ]
  };
  var resolutionLabel = {
    type: "text",
    zotero: [
      "resolutionLabel"
    ]
  };
  var reviewed_author = {
    csl: [
      "reviewed-author"
    ],
    type: "name",
    zotero: [
      "reviewedAuthor"
    ]
  };
  var reviewed_title = {
    csl: [
      "reviewed-title"
    ],
    type: "text"
  };
  var reviewed_author2 = {
    csl: [
      "reviewed-author"
    ],
    type: "name"
  };
  var reviewed_title2 = {
    csl: [
      "reviewed-title"
    ],
    type: "text"
  };
  var reviewedAuthor = {
    type: "name",
    zotero: [
      "reviewedAuthor"
    ]
  };
  var rights = {
    csl: [
      "rights"
    ],
    type: "text",
    zotero: [
      "rights"
    ]
  };
  var running_time = {
    type: "text",
    zotero: [
      "runningTime"
    ]
  };
  var runningTime = {
    type: "text",
    zotero: [
      "runningTime"
    ]
  };
  var scale = {
    csl: [
      "scale"
    ],
    type: "text",
    zotero: [
      "scale"
    ]
  };
  var script_writer = {
    csl: [
      "script-writer"
    ],
    type: "name",
    zotero: [
      "scriptwriter"
    ]
  };
  var script_writer2 = {
    csl: [
      "script-writer"
    ],
    type: "name"
  };
  var scriptwriter = {
    csl: [
      "scriptwriter"
    ],
    type: "name",
    zotero: [
      "scriptwriter"
    ]
  };
  var section = {
    csl: [
      "section"
    ],
    type: "text",
    zotero: [
      "section"
    ]
  };
  var series = {
    type: "text",
    zotero: [
      "series"
    ]
  };
  var series_editor = {
    csl: [
      "collection-editor"
    ],
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var series_number = {
    type: "text",
    zotero: [
      "seriesNumber"
    ]
  };
  var series_text = {
    type: "text",
    zotero: [
      "seriesText"
    ]
  };
  var series_title = {
    type: "text",
    zotero: [
      "seriesTitle"
    ]
  };
  var seriesEditor = {
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var seriesNumber = {
    type: "text",
    zotero: [
      "seriesNumber"
    ]
  };
  var seriesText = {
    type: "text",
    zotero: [
      "seriesText"
    ]
  };
  var seriesTitle = {
    type: "text",
    zotero: [
      "seriesTitle"
    ]
  };
  var session = {
    csl: [
      "chapter-number"
    ],
    type: "text",
    zotero: [
      "session"
    ]
  };
  var session_type = {
    type: "text",
    zotero: [
      "sessionType",
      "type"
    ]
  };
  var sessionType = {
    type: "text",
    zotero: [
      "sessionType",
      "type"
    ]
  };
  var short_title = {
    csl: [
      "title-short"
    ],
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var shortTitle = {
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var signing_date = {
    type: "date",
    zotero: [
      "signingDate"
    ]
  };
  var signingDate = {
    type: "date",
    zotero: [
      "signingDate"
    ]
  };
  var source = {
    csl: [
      "source"
    ],
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var sponsor = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "sponsor"
    ]
  };
  var status = {
    csl: [
      "status"
    ],
    type: "text",
    zotero: [
      "status"
    ]
  };
  var studio = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var subject = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var submitted = {
    csl: [
      "submitted"
    ],
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var supplement = {
    csl: [
      "supplement"
    ],
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var supplement_name = {
    csl: [
      "supplement"
    ],
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var supplementName = {
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var system = {
    type: "text",
    zotero: [
      "system"
    ]
  };
  var testimony_by = {
    csl: [
      "testimonyBy"
    ],
    type: "name",
    zotero: [
      "testimonyBy"
    ]
  };
  var testimonyBy = {
    csl: [
      "testimonyBy"
    ],
    type: "name",
    zotero: [
      "testimonyBy"
    ]
  };
  var thesis_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var thesisType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var title = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var title_short = {
    csl: [
      "title-short"
    ],
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var title_short2 = {
    csl: [
      "title-short"
    ],
    type: "text"
  };
  var translator = {
    csl: [
      "translator"
    ],
    type: "name",
    zotero: [
      "translator"
    ]
  };
  var treaty_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var treatyNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var university = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var url = {
    csl: [
      "URL"
    ],
    type: "text",
    zotero: [
      "url"
    ]
  };
  var version = {
    csl: [
      "version"
    ],
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var version_number = {
    csl: [
      "version"
    ],
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var versionNumber = {
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var video_recording_format = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var videoRecordingFormat = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var volume = {
    csl: [
      "volume"
    ],
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var volume_title = {
    csl: [
      "volume-title"
    ],
    type: "text",
    zotero: [
      "volumeTitle"
    ]
  };
  var volume_title2 = {
    csl: [
      "volume-title"
    ],
    type: "text"
  };
  var volumeTitle = {
    type: "text",
    zotero: [
      "volumeTitle"
    ]
  };
  var website_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var website_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var websiteTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var websiteType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var words_by = {
    csl: [
      "wordsBy"
    ],
    type: "name",
    zotero: [
      "wordsBy"
    ]
  };
  var wordsBy = {
    csl: [
      "wordsBy"
    ],
    type: "name",
    zotero: [
      "wordsBy"
    ]
  };
  var year_as_volume = {
    type: "text",
    zotero: [
      "yearAsVolume"
    ]
  };
  var yearAsVolume = {
    type: "text",
    zotero: [
      "yearAsVolume"
    ]
  };
  var extra_fields_default = {
    DOI,
    ISBN,
    ISSN,
    PMCID,
    PMID,
    URL,
    "access date": access_date,
    accessDate,
    accessed,
    "admin flag": admin_flag,
    "admin-flag": admin_flag2,
    adminFlag,
    "adoption date": adoption_date,
    adoptionDate,
    album,
    "application number": application_number,
    applicationNumber,
    archive,
    "archive collection": archive_collection,
    "archive id": archive_id,
    "archive location": archive_location,
    "archive place": archive_place,
    "archive-place": archive_place2,
    archiveCollection,
    archiveID,
    archiveLocation,
    archive_collection: archive_collection2,
    archive_location: archive_location2,
    artist,
    "artwork medium": artwork_medium,
    "artwork size": artwork_size,
    artworkMedium,
    artworkSize,
    "assembly number": assembly_number,
    assemblyNumber,
    assignee,
    "attorney agent": attorney_agent,
    attorneyAgent,
    "audio file type": audio_file_type,
    "audio recording format": audio_recording_format,
    audioFileType,
    audioRecordingFormat,
    author,
    authority,
    "bill number": bill_number,
    billNumber,
    "blog title": blog_title,
    blogTitle,
    "book abbreviation": book_abbreviation,
    "book author": book_author,
    "book title": book_title,
    bookAbbreviation,
    bookAuthor,
    bookTitle,
    "call number": call_number,
    "call-number": call_number2,
    callNumber,
    cartographer,
    "case name": case_name,
    caseName,
    "cast member": cast_member,
    castMember,
    "chapter number": chapter_number,
    "chapter-number": chapter_number2,
    "citation key": citation_key,
    citationKey,
    code,
    "code number": code_number,
    "code pages": code_pages,
    "code volume": code_volume,
    codeNumber,
    codePages,
    codeVolume,
    "collection editor": collection_editor,
    "collection number": collection_number,
    "collection title": collection_title,
    "collection-editor": collection_editor2,
    "collection-number": collection_number2,
    "collection-title": collection_title2,
    commenter,
    committee,
    company,
    composer,
    "conference date": conference_date,
    "conference name": conference_name,
    conferenceDate,
    conferenceName,
    "container author": container_author,
    "container title": container_title,
    "container title short": container_title_short,
    "container-author": container_author2,
    "container-title": container_title2,
    "container-title-short": container_title_short2,
    contributor,
    cosponsor,
    counsel,
    country,
    court,
    "csl type": csl_type,
    "csl-type": csl_type2,
    date,
    "date amended": date_amended,
    "date decided": date_decided,
    "date enacted": date_enacted,
    dateAmended,
    dateDecided,
    dateEnacted,
    "dictionary title": dictionary_title,
    dictionaryTitle,
    dimensions,
    director,
    distributor,
    division,
    "docket number": docket_number,
    docketNumber,
    "document name": document_name,
    "document number": document_number,
    "document-name": document_name2,
    "document-number": document_number2,
    documentName,
    documentNumber,
    doi,
    edition,
    editor,
    "editorial director": editorial_director,
    "editorial-director": editorial_director2,
    "encyclopedia title": encyclopedia_title,
    encyclopediaTitle,
    "episode number": episode_number,
    episodeNumber,
    event,
    "event date": event_date,
    "event place": event_place,
    "event title": event_title,
    "event-date": event_date2,
    "event-place": event_place2,
    "event-title": event_title2,
    "filing date": filing_date,
    filingDate,
    "first page": first_page,
    firstPage,
    "forum title": forum_title,
    forumTitle,
    "gazette flag": gazette_flag,
    "gazette-flag": gazette_flag2,
    gazetteFlag,
    genre,
    guest,
    history,
    illustrator,
    institution,
    "interview medium": interview_medium,
    interviewMedium,
    interviewee,
    interviewer,
    inventor,
    isbn,
    issn,
    issue,
    "issue date": issue_date,
    issueDate,
    issued,
    "issuing authority": issuing_authority,
    issuingAuthority,
    "journal abbreviation": journal_abbreviation,
    journalAbbreviation,
    jurisdiction,
    label,
    language,
    "legal status": legal_status,
    legalStatus,
    "legislative body": legislative_body,
    legislativeBody,
    "letter type": letter_type,
    letterType,
    "library catalog": library_catalog,
    libraryCatalog,
    license,
    "manuscript type": manuscript_type,
    manuscriptType,
    "map type": map_type,
    mapType,
    medium,
    "meeting name": meeting_name,
    "meeting number": meeting_number,
    meetingName,
    meetingNumber,
    "name of act": name_of_act,
    nameOfAct,
    network,
    "news case date": news_case_date,
    newsCaseDate,
    "num pages": num_pages,
    numPages,
    number,
    "number of pages": number_of_pages,
    "number of volumes": number_of_volumes,
    "number-of-pages": number_of_pages2,
    "number-of-volumes": number_of_volumes2,
    numberOfVolumes,
    "opening date": opening_date,
    "opening-date": opening_date2,
    openingDate,
    opus,
    "original author": original_author,
    "original date": original_date,
    "original publisher": original_publisher,
    "original publisher place": original_publisher_place,
    "original title": original_title,
    "original-author": original_author2,
    "original-date": original_date2,
    "original-publisher": original_publisher2,
    "original-publisher-place": original_publisher_place2,
    "original-title": original_title2,
    originalDate,
    page,
    pages,
    "parent treaty": parent_treaty,
    parentTreaty,
    "patent number": patent_number,
    patentNumber,
    performer,
    place,
    pmcid,
    pmid,
    podcaster,
    "post type": post_type,
    postType,
    "presentation type": presentation_type,
    presentationType,
    presenter,
    "priority date": priority_date,
    "priority numbers": priority_numbers,
    priorityDate,
    priorityNumbers,
    "proceedings title": proceedings_title,
    proceedingsTitle,
    producer,
    "program title": program_title,
    programTitle,
    programmer,
    "programming language": programming_language,
    programmingLanguage,
    "public law number": public_law_number,
    publicLawNumber,
    "publication date": publication_date,
    "publication number": publication_number,
    "publication title": publication_title,
    "publication-date": publication_date2,
    "publication-number": publication_number2,
    publicationDate,
    publicationNumber,
    publicationTitle,
    publisher,
    "publisher place": publisher_place,
    "publisher-place": publisher_place2,
    recipient,
    references,
    "regnal year": regnal_year,
    regnalYear,
    "regulation type": regulation_type,
    regulationType,
    "regulatory body": regulatory_body,
    regulatoryBody,
    reign,
    release,
    "report number": report_number,
    "report type": report_type,
    reportNumber,
    reportType,
    reporter,
    "reporter volume": reporter_volume,
    reporterVolume,
    repository,
    "resolution label": resolution_label,
    resolutionLabel,
    "reviewed author": reviewed_author,
    "reviewed title": reviewed_title,
    "reviewed-author": reviewed_author2,
    "reviewed-title": reviewed_title2,
    reviewedAuthor,
    rights,
    "running time": running_time,
    runningTime,
    scale,
    "script writer": script_writer,
    "script-writer": script_writer2,
    scriptwriter,
    section,
    series,
    "series editor": series_editor,
    "series number": series_number,
    "series text": series_text,
    "series title": series_title,
    seriesEditor,
    seriesNumber,
    seriesText,
    seriesTitle,
    session,
    "session type": session_type,
    sessionType,
    "short title": short_title,
    shortTitle,
    "signing date": signing_date,
    signingDate,
    source,
    sponsor,
    status,
    studio,
    subject,
    submitted,
    supplement,
    "supplement name": supplement_name,
    supplementName,
    system,
    "testimony by": testimony_by,
    testimonyBy,
    "thesis type": thesis_type,
    thesisType,
    title,
    "title short": title_short,
    "title-short": title_short2,
    translator,
    "treaty number": treaty_number,
    treatyNumber,
    type,
    university,
    url,
    version,
    "version number": version_number,
    versionNumber,
    "video recording format": video_recording_format,
    videoRecordingFormat,
    volume,
    "volume title": volume_title,
    "volume-title": volume_title2,
    volumeTitle,
    "website title": website_title,
    "website type": website_type,
    websiteTitle,
    websiteType,
    "words by": words_by,
    wordsBy,
    "year as volume": year_as_volume,
    yearAsVolume
  };

  // content/extra.ts
  function zoteroCreator(value, creatorType) {
    const creator = value.split(/\s*\|\|\s*/);
    if (creator.length === 2) {
      return { lastName: creator[0] || "", firstName: creator[1] || "", creatorType };
    } else {
      return { name: value, creatorType };
    }
  }
  var re = {
    old: /^{:((?:bib(?:la)?)?tex\.)?([^:]+)(:)\s*([^}]+)}$/i,
    new: /^((?:bib(?:la)?)?tex\.)?([^:=]+)\s*([:=])\s*([\S\s]*)/i
  };
  var otherFields = ["lccn", "mr", "zbl", "arxiv", "jstor", "hdl", "googlebooksid"];
  function get(extra, mode, options2) {
    let defaults2 = false;
    if (!options2) {
      options2 = { citationKey: true, aliases: true, kv: true, tex: true };
      defaults2 = true;
    }
    const other = { zotero: "csl", csl: "zotero" }[mode];
    extra = extra || "";
    const extraFields = {
      kv: options2.kv || defaults2 ? {} : void 0,
      creator: {},
      creators: [],
      tex: options2.tex || defaults2 ? {} : void 0,
      citationKey: "",
      aliases: options2.aliases || defaults2 ? [] : void 0
    };
    let ef;
    extra = extra.split("\n").filter((line, i) => {
      const m = line.match(re.old) || line.match(re.new);
      if (!m)
        return true;
      let [, tex, key, assign, value] = m;
      const texmode = assign === "=" ? "raw" : tex && (tex.includes("T") || tex.match(/^[A-Z]/)) ? "cased" : void 0;
      tex = tex && tex.toLowerCase();
      if (!tex && texmode)
        return true;
      if (tex) {
        key = key.trim().toLowerCase();
      } else {
        key = key.trim().replace(/[-_]/g, " ").replace(/([a-z])([A-Z])/g, "$1 $2").toLowerCase();
      }
      value = value.trim();
      if (options2.citationKey && !tex && ["citation key", "bibtex"].includes(key)) {
        extraFields.citationKey = value;
        return false;
      }
      if (options2.aliases && !tex && key === "citation key alias") {
        extraFields.aliases = [...extraFields.aliases, ...value.split(/s*,\s*/).filter((alias) => alias)];
        return false;
      }
      if (options2.aliases && tex && options2.aliases && key === "ids") {
        extraFields.aliases = [...extraFields.aliases, ...value.split(/s*,\s*/).filter((alias) => alias)];
        return false;
      }
      if (options2.kv && key !== "citation key" && (ef = extra_fields_exports[key]) && !tex) {
        for (const field of ef[mode] || ef[other]) {
          switch (ef.type) {
            case "name":
              extraFields.creator[field] = extraFields.creator[field] || [];
              extraFields.creator[field].push(value);
              extraFields.creators.push({ name: value, type: field });
              break;
            case "text":
            case "date":
              extraFields.kv[field] = value;
              break;
            default:
              throw new Error(`Unexpected extra field type ${ef.type}`);
          }
        }
        return false;
      }
      if (options2.tex && tex && !key.includes(" ")) {
        extraFields.tex[tex + key] = { value, mode: texmode, line: i };
        return false;
      }
      if (options2.tex && !tex && otherFields.includes(key.replace(/[- ]/g, ""))) {
        extraFields.tex[`tex.${key.replace(/[- ]/g, "")}`] = { value, line: i };
        return false;
      }
      return true;
    }).join("\n").trim();
    extraFields.aliases = Array.from(new Set(extraFields.aliases)).filter((key) => key !== extraFields.citationKey);
    return { extra, extraFields };
  }

  // translators/bibtex/exporter.ts
  var Exporter = new class {
    constructor() {
      this.strings = {};
      this.strings_reverse = {};
      this.citekeys = {};
      this.jabref = new JabRef();
    }
    prepare_strings() {
      if (!Translator.BetterTeX || !Translator.preferences.strings)
        return;
      if (Translator.BetterTeX && Translator.preferences.exportBibTeXStrings.startsWith("match")) {
        this.strings = bibtexParser.parse(Translator.preferences.strings, { markup: Translator.csquotes ? { enquote: Translator.csquotes } : {} }).strings;
        for (const [k, v] of Object.entries(this.strings)) {
          this.strings_reverse[v.toUpperCase()] = k.toUpperCase();
        }
      }
    }
    unique_chars(str) {
      let uniq = "";
      for (const c of str) {
        if (uniq.indexOf(c) < 0)
          uniq += c;
      }
      return uniq;
    }
    get items() {
      return this.itemsGenerator();
    }
    *itemsGenerator() {
      var _a3;
      if (!this.postfix && Translator.BetterTeX)
        this.postfix = new Postfix(Translator.preferences.qualityReport);
      for (const item of Translator.regularitems) {
        Object.assign(item, get(item.extra, "zotero"));
        if (typeof item.itemID !== "number") {
          item.citationKey = item.extraFields.citationKey;
          item.$cacheable = false;
        }
        if (!item.citationKey)
          throw new Error(`No citation key in ${JSON.stringify(item)}`);
        this.citekeys[item.citationKey] = (this.citekeys[item.citationKey] || 0) + 1;
        this.jabref.citekeys.set(item.itemID, item.citationKey);
        let cached = null;
        if (item.$cacheable && Translator.BetterTeX) {
          Translator.cache.requests++;
          if (cached = Zotero.BetterBibTeX.cacheFetch(item.itemID, Translator.options, Translator.preferences)) {
            Translator.cache.hits += 100;
            Zotero.write(cached.entry);
            (_a3 = this.postfix) == null ? void 0 : _a3.add(cached.metadata);
            continue;
          }
        }
        simplifyForExport(item);
        const prefix = Translator.BetterBibLaTeX ? "biblatex." : "bibtex.";
        for (const [name, field] of Object.entries(item.extraFields.tex).sort((a, b) => b[0].localeCompare(a[0]))) {
          for (const type2 of [prefix, "tex."]) {
            if (name.startsWith(type2)) {
              item.extraFields.tex[name.substr(type2.length)] = field;
              break;
            }
          }
          delete item.extraFields.tex[name];
        }
        item.raw = Translator.BetterTeX && Translator.preferences.rawLaTag === "*";
        item.tags = item.tags.filter((tag) => {
          if (Translator.BetterTeX && tag.tag === Translator.preferences.rawLaTag) {
            item.raw = true;
            return false;
          }
          return true;
        });
        yield item;
      }
    }
    complete() {
      this.jabref.exportGroups();
      if (this.postfix)
        Zotero.write(this.postfix.toString());
      if (Translator.BetterTeX && Translator.preferences.qualityReport) {
        let sep = "\n% == Citekey duplicates in this file:\n";
        for (const [citekey, n] of Object.entries(this.citekeys).sort((a, b) => a[0].localeCompare(b[0]))) {
          if (n > 1) {
            Zotero.write(`${sep}% ${citekey} duplicates: ${n}
`);
            sep = "% ";
          }
        }
      }
      if (Translator.BetterTeX && Translator.options.cacheUse) {
        if (Translator.cache.requests) {
          Zotero.write(`
% cache use: ${Math.round(Translator.cache.hits / Translator.cache.requests)}%`);
        } else {
          Zotero.write("\n% cache use: no");
        }
      }
    }
  }();

  // translators/bibtex/unicode_translator.ts
  init_globals();
  var unicode2latex = __toESM(require_unicode2latex());
  var HE = require_he();
  var combining_diacritics = /^[^\u0300-\u036F][\u0300-\u036F]+/;
  var switchMode = {
    math: "text",
    text: "math"
  };
  function replace_command_spacers(latex) {
    return latex.replace(/\0(\s)/g, "{}$1").replace(/\0([^;.,!?${}_^\\/])/g, " $1").replace(/\0/g, "");
  }
  var htmlConverter = new class HTMLConverter {
    constructor() {
      this.latex = "";
      this.mapping = {};
      this.stack = [];
      this.options = {};
      this.packages = {};
    }
    charmap() {
      if (!Translator.preferences.charmap)
        return {};
      try {
        const charmap = JSON.parse(Translator.preferences.charmap);
        for (const [u, l] of Object.entries(charmap)) {
          if (typeof l === "string")
            charmap[u] = { text: l };
          if (!charmap[u].text && !charmap[u].math)
            delete charmap[u];
        }
        return charmap;
      } catch (err) {
        log.debug("invalid charmap", Translator.preferences.charmap);
        return {};
      }
    }
    convert(html2, options2) {
      this.embraced = false;
      this.options = options2;
      this.latex = "";
      this.packages = {};
      if (Translator.unicode) {
        this.mapping = unicode2latex.unicode;
      } else if (options2.creator && Translator.BetterBibTeX) {
        this.mapping = unicode2latex.ascii_bibtex_creator;
      } else {
        this.mapping = unicode2latex.ascii;
      }
      this.mapping = {
        ...this.mapping,
        ...this.charmap()
      };
      if (!this.mapping.initialized) {
        for (const c of Translator.preferences.ascii) {
          this.mapping[c] = unicode2latex.ascii[c];
        }
        if (Translator.preferences.mapUnicode === "conservative") {
          for (const keep of Object.keys(switchMode).sort()) {
            const remove = switchMode[keep];
            const unicode2 = Translator.preferences[`map${keep[0].toUpperCase()}${keep.slice(1)}`];
            for (const c of unicode2) {
              if (this.mapping[c] && this.mapping[c].text && this.mapping[c].math) {
                delete this.mapping[c][remove];
              }
            }
          }
        } else if (Translator.preferences.mapUnicode === "minimal-packages") {
          for (const tex of Object.values(this.mapping)) {
            if (tex.text && tex.math) {
              if (tex.textpackages && !tex.mathpackages) {
                delete tex.text;
                delete tex.textpackages;
              } else if (!tex.textpackages && tex.mathpackages) {
                delete tex.math;
                delete tex.mathpackages;
              }
            }
          }
        } else {
          const remove = switchMode[Translator.preferences.mapUnicode];
          if (remove) {
            for (const tex of Object.values(this.mapping)) {
              if (tex.text && tex.math)
                delete tex[remove];
            }
          }
        }
        this.mapping.initialized = true;
      }
      this.stack = [];
      const ast = Zotero.BetterBibTeX.parseHTML(html2, this.options);
      this.walk(ast);
      if (!options2.commandspacers)
        this.latex = replace_command_spacers(this.latex);
      this.latex = this.latex.replace(/(\\\\)+\n\n/g, "\n\n").replace(/\n\n\n+/g, "\n\n").replace(/(\\par[\n\s~]+)+/g, "\\par\n").replace(/\n*\\par\n*$/, "").replace(/^\n*\\par\n*/, "");
      return { latex: this.latex, raw: ast.nodeName === "pre", packages: Object.keys(this.packages) };
    }
    walk(tag, nocased = false) {
      if (!tag)
        return;
      switch (tag.nodeName) {
        case "#text":
          this.chars(tag.value, nocased);
          return;
        case "pre":
        case "script":
          this.latex += tag.value;
          return;
      }
      this.stack.unshift(tag);
      let latex = "...";
      switch (tag.nodeName) {
        case "i":
        case "em":
        case "italic":
        case "emphasis":
          latex = "\\emph{...}";
          break;
        case "b":
        case "strong":
          latex = "\\textbf{...}";
          break;
        case "tt":
        case "code":
          latex = "\\texttt{...}";
          break;
        case "a":
          if (tag.attr.href && tag.attr.href.length)
            latex = `\\href{${tag.attr.href}}{...}`;
          break;
        case "sup":
          latex = "\\textsuperscript{...}";
          break;
        case "sub":
          latex = "\\textsubscript{...}";
          break;
        case "br":
          latex = "";
          if (this.latex !== "" && this.latex[this.latex.length - 1] !== "\n")
            latex = "\\\\";
          latex += "\n...";
          break;
        case "p":
        case "div":
        case "table":
        case "tr":
          latex = "\n\\par\n...\n\\par\n";
          break;
        case "h1":
        case "h2":
        case "h3":
        case "h4":
          latex = `

\\${"sub".repeat(parseInt(tag.nodeName[1]) - 1)}section{...}

`;
          break;
        case "ol":
          latex = "\n\n\\begin{enumerate}\n...\n\n\\end{enumerate}\n";
          break;
        case "ul":
          latex = "\n\n\\begin{itemize}\n...\n\n\\end{itemize}\n";
          break;
        case "li":
          latex = "\n\\item ...";
          break;
        case "span":
        case "sc":
        case "nc":
          break;
        case "header":
        case "section":
          break;
        case "td":
        case "th":
          latex = " ... ";
          break;
        case "#comment":
        case "#document":
        case "#document-fragment":
        case "tbody":
        case "html":
        case "head":
        case "body":
          break;
        case "blockquote":
          latex = "\n\n\\begin{quotation}\n...\n\n\\end{quotation}\n";
          break;
        case "img":
          break;
        default:
          log.error(`unexpected tag '${tag.nodeName}' (${Object.keys(tag)})`);
          break;
      }
      if (latex !== "...")
        latex = this.embrace(latex, /^\\[a-z]+{\.\.\.}$/.test(latex));
      if (tag.smallcaps)
        latex = this.embrace(`\\textsc{${latex}}`, true);
      if (tag.nocase)
        latex = `{{${latex}}}`;
      if (tag.relax)
        latex = `{\\relax ${latex}}`;
      if (tag.enquote) {
        if (Translator.BetterBibTeX) {
          latex = `\\enquote{${latex}}`;
        } else {
          latex = `\\mkbibquote{${latex}}`;
        }
      }
      const [prefix, postfix2] = latex.split("...");
      this.latex += prefix;
      for (const child of tag.childNodes) {
        this.walk(child, nocased || tag.nocase);
      }
      this.latex += postfix2;
      this.stack.shift();
    }
    embrace(latex, condition) {
      if (!this.embraced)
        this.embraced = this.options.caseConversion && ((this.latex || latex)[0] !== "\\" || Translator.BetterBibTeX);
      if (!this.embraced || !condition)
        return latex;
      return `{${latex}}`;
    }
    chars(text, nocased) {
      if (this.options.html)
        text = HE.decode(text, { isAttributeValue: true });
      let latex = "";
      let mode = "text";
      let braced = 0;
      const switchTo = {
        math: nocased ? "$" : "{$",
        text: nocased ? "$" : "$}"
      };
      text = text.normalize("NFD");
      let mapped;
      let switched;
      let m;
      let i;
      let diacritic;
      const l = text.length;
      for (i = 0; i < l; i++) {
        mapped = null;
        if (text[i + 1] === "\uFE20" && text[i + 3] === "\uFE21") {
          mapped = this.mapping[text.substr(i, 4)] || { text: `${text[i]}${text[i + 2]}` };
          i += 3;
        }
        if (!mapped && !Translator.unicode) {
          if (m = combining_diacritics.exec(text.substring(i))) {
            mapped = this.mapping[m[0].normalize("NFC")];
            if (!mapped && (diacritic = unicode2latex.diacritics.tolatex[m[0].substr(1, 2)])) {
              const char = (this.mapping[text[i]] || { text: text[i], math: text[i] })[diacritic.mode];
              if (char) {
                const cmd = diacritic.command.match(/[a-z]/);
                if (Translator.BetterBibTeX && diacritic.mode === "text") {
                  mapped = { [diacritic.mode]: `{\\${diacritic.command}${cmd ? " " : ""}${char}}` };
                } else if (cmd && char.length === 1) {
                  mapped = { [diacritic.mode]: `\\${diacritic.command} ${char}` };
                } else if (cmd) {
                  mapped = { [diacritic.mode]: `\\${diacritic.command}{${char}}` };
                } else {
                  mapped = { [diacritic.mode]: `\\${diacritic.command}${char}` };
                }
                if (m[0].length > 3)
                  log.error("discarding diacritics > 2 from", m[0]);
              }
            }
            if (mapped)
              i += m[0].length - 1;
          }
        }
        if (!mapped && text[i + 1] && (mapped = this.mapping[text.substr(i, 2)])) {
          i += 1;
        }
        if (!mapped)
          mapped = this.mapping[text[i]] || { text: text[i] };
        if (!mapped[mode]) {
          mode = switchMode[mode];
          latex += switchTo[mode];
          switched = true;
        } else {
          switched = false;
        }
        switch (mapped[mode]) {
          case "\\{":
            braced += 1;
            break;
          case "\\}":
            braced -= 1;
            break;
        }
        if (braced < 0) {
          latex += "\\vphantom\\{";
          braced = 0;
        }
        if (switched && mode === "text" && (m = latex.match(/([\^_])\{(.)\}(\$\}?)$/))) {
          latex = latex.slice(0, latex.length - m[0].length) + m[1] + m[2] + m[3];
        }
        latex += mapped[mode];
        if (mapped.commandspacer)
          latex += "\0";
        if (!switched && mode === "math" && (m = latex.match(/(([\^_])\{[^{}]+)\}\2{(.\})$/))) {
          latex = latex.slice(0, latex.length - m[0].length) + m[1] + m[3];
        }
        const pkgs = mapped[`${mode}packages`];
        if (pkgs) {
          for (const pkg of pkgs) {
            this.packages[pkg] = true;
          }
        }
      }
      switch (braced) {
        case 0:
          break;
        case 1:
          latex += "\\vphantom\\}";
          break;
        default:
          latex += `\\vphantom{${"\\}".repeat(braced)}}`;
          break;
      }
      if (mode === "math")
        latex += switchTo.text;
      this.latex += latex.normalize("NFC");
    }
  }();
  function html2latex(html2, options2) {
    if (typeof options2.html === "undefined")
      options2.html = true;
    return htmlConverter.convert(html2, options2);
  }
  function text2latex(text, options2 = {}) {
    if (typeof options2.html === "undefined")
      options2.html = false;
    return html2latex(text, options2);
  }

  // translators/bibtex/datefield.ts
  init_globals();
  function pad(v, padding) {
    if (v.length >= padding.length)
      return v;
    return (padding + v).slice(-padding.length);
  }
  function year(y) {
    if (Math.abs(y) > 999) {
      return `${y}`;
    } else {
      return (y < 0 ? "-" : "") + `000${Math.abs(y)}`.slice(-4);
    }
  }
  function format(date2) {
    let formatted;
    if (typeof date2.year === "number" && date2.month && date2.day) {
      formatted = `${year(date2.year)}-${pad(date2.month, "00")}-${pad(date2.day, "00")}`;
    } else if (typeof date2.year === "number" && (date2.month || date2.season)) {
      formatted = `${year(date2.year)}-${pad(date2.month || date2.season + 20, "00")}`;
    } else if (typeof date2.year === "number") {
      formatted = year(date2.year);
    } else {
      formatted = "";
    }
    if (formatted && Translator.BetterBibLaTeX && Translator.preferences.biblatexExtendedDateFormat) {
      if (date2.uncertain)
        formatted += "?";
      if (date2.approximate)
        formatted += "~";
    }
    return formatted;
  }
  function datefield(date2, field) {
    field = JSON.parse(JSON.stringify({ ...field, value: "", enc: "latex" }));
    if (!date2)
      return field;
    if (date2 && !date2.type && date2.orig)
      return field;
    if (!date2.type)
      throw new Error(`Failed to parse ${JSON.stringify(date2)}`);
    if (date2.type === "verbatim") {
      field.name = field.verbatim || field.name;
      if (date2.verbatim === "n.d.") {
        field.value = "<pre>\\bibstring{nodate}</pre>";
      } else {
        field.value = date2.verbatim;
      }
    } else if (date2.type === "date" || date2.type === "season") {
      field.value = format(date2);
    } else if (date2.type === "interval") {
      field.value = `${format(date2.from)}/${format(date2.to)}`;
    } else if (date2.year) {
      field.value = format(date2);
    }
    if (!field.value || !field.name)
      return field;
    if (date2.type !== "verbatim" && typeof field.value == "string")
      field.value = field.value.replace(/~/g, "\xA0");
    return field;
  }

  // gen/items/items.ts
  init_globals();

  // content/ajv.ts
  init_globals();
  var import__ = __toESM(require__());
  var import_sprintf_js = __toESM(require_sprintf());
  var import_ajv_keywords = __toESM(require_dist3());

  // node_modules/better-ajv-errors/lib/esm/index.mjs
  init_globals();
  var import_momoa = __toESM(require_api(), 1);

  // node_modules/better-ajv-errors/lib/esm/helpers.mjs
  init_globals();

  // node_modules/better-ajv-errors/lib/esm/utils.mjs
  init_globals();
  var __defProp2 = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp2.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var eq = (x) => (y) => x === y;
  var not = (fn) => (x) => !fn(x);
  var getValues = (o) => Object.values(o);
  var notUndefined = (x) => x !== void 0;
  var isXError = (x) => (error) => error.keyword === x;
  var isRequiredError = isXError("required");
  var isAnyOfError = isXError("anyOf");
  var isEnumError = isXError("enum");
  var getErrors = (node) => node && node.errors ? node.errors.map((e) => e.keyword === "errorMessage" ? __spreadProps(__spreadValues({}, e.params.errors[0]), { message: e.message }) : e) : [];
  var getChildren = (node) => node && getValues(node.children) || [];
  var getSiblings = (parent) => (node) => getChildren(parent).filter(not(eq(node)));
  var concatAll = (xs) => (ys) => ys.reduce((zs, z) => zs.concat(z), xs);

  // node_modules/better-ajv-errors/lib/esm/validation-errors/index.mjs
  init_globals();

  // node_modules/better-ajv-errors/lib/esm/validation-errors/required.mjs
  init_globals();
  var import_chalk = __toESM(require_source(), 1);

  // node_modules/better-ajv-errors/lib/esm/validation-errors/base.mjs
  init_globals();
  var import_code_frame = __toESM(require_lib4(), 1);

  // node_modules/better-ajv-errors/lib/esm/json/index.mjs
  init_globals();

  // node_modules/better-ajv-errors/lib/esm/json/get-meta-from-path.mjs
  init_globals();

  // node_modules/better-ajv-errors/lib/esm/json/utils.mjs
  init_globals();
  var getPointers = (dataPath) => {
    return dataPath.split("/").slice(1).map((pointer2) => pointer2.split("~1").join("/").split("~0").join("~"));
  };

  // node_modules/better-ajv-errors/lib/esm/json/get-meta-from-path.mjs
  function getMetaFromPath(jsonAst, dataPath, includeIdentifierLocation) {
    const pointers = getPointers(dataPath);
    const lastPointerIndex = pointers.length - 1;
    return pointers.reduce((obj, pointer2, idx) => {
      switch (obj.type) {
        case "Object": {
          const filtered = obj.members.filter((child) => child.name.value === pointer2);
          if (filtered.length !== 1) {
            throw new Error(`Couldn't find property ${pointer2} of ${dataPath}`);
          }
          const { name, value } = filtered[0];
          return includeIdentifierLocation && idx === lastPointerIndex ? name : value;
        }
        case "Array":
          return obj.elements[pointer2];
        default:
          console.log(obj);
      }
    }, jsonAst.body);
  }

  // node_modules/better-ajv-errors/lib/esm/json/get-decorated-data-path.mjs
  init_globals();
  function getDecoratedDataPath(jsonAst, dataPath) {
    let decoratedPath = "";
    getPointers(dataPath).reduce((obj, pointer2) => {
      switch (obj.type) {
        case "Object": {
          decoratedPath += `/${pointer2}`;
          const filtered = obj.members.filter((child) => child.name.value === pointer2);
          if (filtered.length !== 1) {
            throw new Error(`Couldn't find property ${pointer2} of ${dataPath}`);
          }
          return filtered[0].value;
        }
        case "Array": {
          decoratedPath += `/${pointer2}${getTypeName(obj.elements[pointer2])}`;
          return obj.elements[pointer2];
        }
        default:
          console.log(obj);
      }
    }, jsonAst.body);
    return decoratedPath;
  }
  function getTypeName(obj) {
    if (!obj || !obj.elements) {
      return "";
    }
    const type2 = obj.elements.filter((child) => child && child.name && child.name.value === "type");
    if (!type2.length) {
      return "";
    }
    return type2[0].value && `:${type2[0].value.value}` || "";
  }

  // node_modules/better-ajv-errors/lib/esm/validation-errors/base.mjs
  var BaseValidationError = class {
    constructor(options2 = { isIdentifierLocation: false }, { data, schema: schema2, jsonAst, jsonRaw }) {
      this.options = options2;
      this.data = data;
      this.schema = schema2;
      this.jsonAst = jsonAst;
      this.jsonRaw = jsonRaw;
    }
    getLocation(dataPath = this.instancePath) {
      const { isIdentifierLocation, isSkipEndLocation } = this.options;
      const { loc } = getMetaFromPath(this.jsonAst, dataPath, isIdentifierLocation);
      return {
        start: loc.start,
        end: isSkipEndLocation ? void 0 : loc.end
      };
    }
    getDecoratedPath(dataPath = this.instancePath) {
      const decoratedPath = getDecoratedDataPath(this.jsonAst, dataPath);
      return decoratedPath;
    }
    getCodeFrame(message, dataPath = this.instancePath) {
      return (0, import_code_frame.codeFrameColumns)(this.jsonRaw, this.getLocation(dataPath), {
        highlightCode: true,
        message
      });
    }
    get instancePath() {
      return typeof this.options.instancePath !== "undefined" ? this.options.instancePath : this.options.dataPath;
    }
    print() {
      throw new Error(`Implement the 'print' method inside ${this.constructor.name}!`);
    }
    getError() {
      throw new Error(`Implement the 'getError' method inside ${this.constructor.name}!`);
    }
  };

  // node_modules/better-ajv-errors/lib/esm/validation-errors/required.mjs
  var __defProp3 = Object.defineProperty;
  var __defProps2 = Object.defineProperties;
  var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
  var __hasOwnProp3 = Object.prototype.hasOwnProperty;
  var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues2 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp3.call(b, prop))
        __defNormalProp2(a, prop, b[prop]);
    if (__getOwnPropSymbols2)
      for (var prop of __getOwnPropSymbols2(b)) {
        if (__propIsEnum2.call(b, prop))
          __defNormalProp2(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps2 = (a, b) => __defProps2(a, __getOwnPropDescs2(b));
  var RequiredValidationError = class extends BaseValidationError {
    getLocation(dataPath = this.instancePath) {
      const { start } = super.getLocation(dataPath);
      return { start };
    }
    print() {
      const { message, params } = this.options;
      const output = [import_chalk.default`{red {bold REQUIRED} ${message}}\n`];
      return output.concat(this.getCodeFrame(import_chalk.default`☹️  {magentaBright ${params.missingProperty}} is missing here!`));
    }
    getError() {
      const { message } = this.options;
      return __spreadProps2(__spreadValues2({}, this.getLocation()), {
        error: `${this.getDecoratedPath()} ${message}`,
        path: this.instancePath
      });
    }
  };

  // node_modules/better-ajv-errors/lib/esm/validation-errors/additional-prop.mjs
  init_globals();
  var import_chalk2 = __toESM(require_source(), 1);
  var __defProp4 = Object.defineProperty;
  var __defProps3 = Object.defineProperties;
  var __getOwnPropDescs3 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols3 = Object.getOwnPropertySymbols;
  var __hasOwnProp4 = Object.prototype.hasOwnProperty;
  var __propIsEnum3 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp3 = (obj, key, value) => key in obj ? __defProp4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues3 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp4.call(b, prop))
        __defNormalProp3(a, prop, b[prop]);
    if (__getOwnPropSymbols3)
      for (var prop of __getOwnPropSymbols3(b)) {
        if (__propIsEnum3.call(b, prop))
          __defNormalProp3(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps3 = (a, b) => __defProps3(a, __getOwnPropDescs3(b));
  var AdditionalPropValidationError = class extends BaseValidationError {
    constructor(...args) {
      super(...args);
      this.options.isIdentifierLocation = true;
    }
    print() {
      const { message, params } = this.options;
      const output = [import_chalk2.default`{red {bold ADDTIONAL PROPERTY} ${message}}\n`];
      return output.concat(this.getCodeFrame(import_chalk2.default`😲  {magentaBright ${params.additionalProperty}} is not expected to be here!`, `${this.instancePath}/${params.additionalProperty}`));
    }
    getError() {
      const { params } = this.options;
      return __spreadProps3(__spreadValues3({}, this.getLocation(`${this.instancePath}/${params.additionalProperty}`)), {
        error: `${this.getDecoratedPath()} Property ${params.additionalProperty} is not expected to be here`,
        path: this.instancePath
      });
    }
  };

  // node_modules/better-ajv-errors/lib/esm/validation-errors/enum.mjs
  init_globals();
  var import_chalk3 = __toESM(require_source(), 1);
  var import_leven = __toESM(require_leven(), 1);
  var import_jsonpointer = __toESM(require_jsonpointer(), 1);
  var __defProp5 = Object.defineProperty;
  var __defProps4 = Object.defineProperties;
  var __getOwnPropDescs4 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols4 = Object.getOwnPropertySymbols;
  var __hasOwnProp5 = Object.prototype.hasOwnProperty;
  var __propIsEnum4 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp4 = (obj, key, value) => key in obj ? __defProp5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues4 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp5.call(b, prop))
        __defNormalProp4(a, prop, b[prop]);
    if (__getOwnPropSymbols4)
      for (var prop of __getOwnPropSymbols4(b)) {
        if (__propIsEnum4.call(b, prop))
          __defNormalProp4(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps4 = (a, b) => __defProps4(a, __getOwnPropDescs4(b));
  var EnumValidationError = class extends BaseValidationError {
    print() {
      const {
        message,
        params: { allowedValues }
      } = this.options;
      const bestMatch = this.findBestMatch();
      const output = [
        import_chalk3.default`{red {bold ENUM} ${message}}`,
        import_chalk3.default`{red (${allowedValues.join(", ")})}\n`
      ];
      return output.concat(this.getCodeFrame(bestMatch !== null ? import_chalk3.default`👈🏽  Did you mean {magentaBright ${bestMatch}} here?` : import_chalk3.default`👈🏽  Unexpected value, should be equal to one of the allowed values`));
    }
    getError() {
      const { message, params } = this.options;
      const bestMatch = this.findBestMatch();
      const allowedValues = params.allowedValues.join(", ");
      const output = __spreadProps4(__spreadValues4({}, this.getLocation()), {
        error: `${this.getDecoratedPath()} ${message}: ${allowedValues}`,
        path: this.instancePath
      });
      if (bestMatch !== null) {
        output.suggestion = `Did you mean ${bestMatch}?`;
      }
      return output;
    }
    findBestMatch() {
      const {
        params: { allowedValues }
      } = this.options;
      const currentValue = this.instancePath === "" ? this.data : import_jsonpointer.default.get(this.data, this.instancePath);
      if (!currentValue) {
        return null;
      }
      const bestMatch = allowedValues.map((value) => ({
        value,
        weight: (0, import_leven.default)(value, currentValue.toString())
      })).sort((x, y) => x.weight > y.weight ? 1 : x.weight < y.weight ? -1 : 0)[0];
      return allowedValues.length === 1 || bestMatch.weight < bestMatch.value.length ? bestMatch.value : null;
    }
  };

  // node_modules/better-ajv-errors/lib/esm/validation-errors/default.mjs
  init_globals();
  var import_chalk4 = __toESM(require_source(), 1);
  var __defProp6 = Object.defineProperty;
  var __defProps5 = Object.defineProperties;
  var __getOwnPropDescs5 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols5 = Object.getOwnPropertySymbols;
  var __hasOwnProp6 = Object.prototype.hasOwnProperty;
  var __propIsEnum5 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp5 = (obj, key, value) => key in obj ? __defProp6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues5 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp6.call(b, prop))
        __defNormalProp5(a, prop, b[prop]);
    if (__getOwnPropSymbols5)
      for (var prop of __getOwnPropSymbols5(b)) {
        if (__propIsEnum5.call(b, prop))
          __defNormalProp5(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps5 = (a, b) => __defProps5(a, __getOwnPropDescs5(b));
  var DefaultValidationError = class extends BaseValidationError {
    print() {
      const { keyword, message } = this.options;
      const output = [import_chalk4.default`{red {bold ${keyword.toUpperCase()}} ${message}}\n`];
      return output.concat(this.getCodeFrame(import_chalk4.default`👈🏽  {magentaBright ${keyword}} ${message}`));
    }
    getError() {
      const { keyword, message } = this.options;
      return __spreadProps5(__spreadValues5({}, this.getLocation()), {
        error: `${this.getDecoratedPath()}: ${keyword} ${message}`,
        path: this.instancePath
      });
    }
  };

  // node_modules/better-ajv-errors/lib/esm/helpers.mjs
  var __defProp7 = Object.defineProperty;
  var __defProps6 = Object.defineProperties;
  var __getOwnPropDescs6 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols6 = Object.getOwnPropertySymbols;
  var __hasOwnProp7 = Object.prototype.hasOwnProperty;
  var __propIsEnum6 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp6 = (obj, key, value) => key in obj ? __defProp7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues6 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp7.call(b, prop))
        __defNormalProp6(a, prop, b[prop]);
    if (__getOwnPropSymbols6)
      for (var prop of __getOwnPropSymbols6(b)) {
        if (__propIsEnum6.call(b, prop))
          __defNormalProp6(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps6 = (a, b) => __defProps6(a, __getOwnPropDescs6(b));
  var JSON_POINTERS_REGEX = /\/[\w_-]+(\/\d+)?/g;
  function makeTree(ajvErrors = []) {
    const root = { children: {} };
    ajvErrors.forEach((ajvError) => {
      const instancePath = typeof ajvError.instancePath !== "undefined" ? ajvError.instancePath : ajvError.dataPath;
      const paths = instancePath === "" ? [""] : instancePath.match(JSON_POINTERS_REGEX);
      paths && paths.reduce((obj, path, i) => {
        obj.children[path] = obj.children[path] || { children: {}, errors: [] };
        if (i === paths.length - 1) {
          obj.children[path].errors.push(ajvError);
        }
        return obj.children[path];
      }, root);
    });
    return root;
  }
  function filterRedundantErrors(root, parent, key) {
    getErrors(root).forEach((error) => {
      if (isRequiredError(error)) {
        root.errors = [error];
        root.children = {};
      }
    });
    if (getErrors(root).some(isAnyOfError)) {
      if (Object.keys(root.children).length > 0) {
        delete root.errors;
      }
    }
    if (root.errors && root.errors.length && getErrors(root).every(isEnumError)) {
      if (getSiblings(parent)(root).filter(notUndefined).some(getErrors)) {
        delete parent.children[key];
      }
    }
    Object.entries(root.children).forEach(([key2, child]) => filterRedundantErrors(child, root, key2));
  }
  function createErrorInstances(root, options2) {
    const errors = getErrors(root);
    if (errors.length && errors.every(isEnumError)) {
      const uniqueValues = new Set(concatAll([])(errors.map((e) => e.params.allowedValues)));
      const allowedValues = [...uniqueValues];
      const error = errors[0];
      return [
        new EnumValidationError(__spreadProps6(__spreadValues6({}, error), {
          params: { allowedValues }
        }), options2)
      ];
    } else {
      return concatAll(errors.reduce((ret, error) => {
        switch (error.keyword) {
          case "additionalProperties":
            return ret.concat(new AdditionalPropValidationError(error, options2));
          case "required":
            return ret.concat(new RequiredValidationError(error, options2));
          default:
            return ret.concat(new DefaultValidationError(error, options2));
        }
      }, []))(getChildren(root).map((child) => createErrorInstances(child, options2)));
    }
  }
  var helpers_default = (ajvErrors, options2) => {
    const tree = makeTree(ajvErrors || []);
    filterRedundantErrors(tree);
    return createErrorInstances(tree, options2);
  };

  // node_modules/better-ajv-errors/lib/esm/index.mjs
  var src_default = (schema2, data, errors, options2 = {}) => {
    const { format: format2 = "cli", indent = null, json = null } = options2;
    const jsonRaw = json || JSON.stringify(data, null, indent);
    const jsonAst = (0, import_momoa.parse)(jsonRaw);
    const customErrorToText = (error) => error.print().join("\n");
    const customErrorToStructure = (error) => error.getError();
    const customErrors = helpers_default(errors, {
      data,
      schema: schema2,
      jsonAst,
      jsonRaw
    });
    if (format2 === "cli") {
      return customErrors.map(customErrorToText).join("\n\n");
    } else {
      return customErrors.map(customErrorToStructure);
    }
  };

  // content/ajv.ts
  var creatorname = (_schema, format2) => {
    creatorname.errors = [];
    let error = "";
    try {
      const expected = `${Date.now()}`;
      const vars = { f: expected, g: expected, i: expected, I: expected };
      const found = (0, import_sprintf_js.sprintf)(format2, vars);
      if (found.includes(expected))
        return true;
      error = `${format2} does not contain ${Object.keys(vars).map((v) => `%(${v})s`).join("/")}`;
    } catch (err) {
      error = err.message;
    }
    creatorname.errors.push({
      keyword: "creatorname",
      message: error,
      params: { keyword: "creatorname" }
    });
    return false;
  };
  var postfix = (_schema, format2) => {
    postfix.errors = [];
    let error = "";
    try {
      const expected = `${Date.now()}`;
      const vars = { a: expected, A: expected, n: expected };
      const found = (0, import_sprintf_js.sprintf)(format2, vars);
      if (!found.includes(expected)) {
        error = `${format2} does not contain ${Object.keys(vars).map((v) => `%(${v})s`).join("/")}`;
      } else if (found.split(expected).length > 2) {
        error = `${format2} contains multiple instances of ${Object.keys(vars).map((v) => `%(${v})s`).join("/")}`;
      } else {
        return true;
      }
    } catch (err) {
      error = err.message;
    }
    postfix.errors.push({
      keyword: "postfix",
      message: error,
      params: { keyword: "postfix" }
    });
    return false;
  };
  var options = {
    strict: false,
    discriminator: true,
    useDefaults: true
  };
  var noncoercing = new import__.default(options);
  var coercing = new import__.default({ ...options, coerceTypes: true });
  for (const ajv of [coercing, noncoercing]) {
    (0, import_ajv_keywords.default)(ajv);
    ajv.addKeyword({ keyword: "postfix", validate: postfix });
    ajv.addKeyword({ keyword: "creatorname", validate: creatorname });
  }
  function validator(schema2, ajv) {
    const ok = ajv.compile(schema2);
    return function(data) {
      if (ok(data))
        return "";
      return src_default(schema2, data, ok.errors, { format: "js" }).map((err) => err.error + (err.suggestion ? ", " : "") + (err.suggestion || "")).join("\n");
    };
  }

  // gen/items/items.ts
  var jurism2 = client === "jurism";
  var zotero2 = !jurism2;
  var zoterovalidator = validator(require_zotero(), noncoercing);
  var jurismvalidator = validator(require_jurism(), noncoercing);
  var broken = {
    me: zotero2 ? zoterovalidator : jurismvalidator,
    other: jurism2 ? zoterovalidator : jurismvalidator
  };
  var valid = {
    type: {
      annotation: zotero2,
      artwork: true,
      attachment: true,
      audioRecording: true,
      bill: true,
      blogPost: true,
      book: true,
      bookSection: true,
      case: true,
      classic: jurism2,
      computerProgram: true,
      conferencePaper: true,
      dictionaryEntry: true,
      document: true,
      email: true,
      encyclopediaArticle: true,
      film: true,
      forumPost: true,
      gazette: jurism2,
      hearing: true,
      instantMessage: true,
      interview: true,
      journalArticle: true,
      legalCommentary: jurism2,
      letter: true,
      magazineArticle: true,
      manuscript: true,
      map: true,
      newspaperArticle: true,
      note: true,
      patent: true,
      podcast: true,
      preprint: zotero2,
      presentation: true,
      radioBroadcast: true,
      regulation: jurism2,
      report: true,
      standard: jurism2,
      statute: true,
      thesis: true,
      treaty: jurism2,
      tvBroadcast: true,
      videoRecording: true,
      webpage: true
    },
    field: {
      annotation: {
        attachments: true,
        creators: true,
        dateAdded: true,
        dateModified: true,
        id: true,
        itemID: true,
        itemType: true,
        multi: true,
        notes: true,
        seeAlso: true,
        tags: true
      },
      artwork: {
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        artworkMedium: true,
        artworkSize: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        medium: true,
        multi: true,
        notes: true,
        publicationTitle: jurism2,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true,
        websiteTitle: jurism2
      },
      attachment: {
        accessDate: true,
        dateAdded: true,
        dateModified: true,
        id: true,
        itemID: true,
        itemType: true,
        tags: true,
        title: true,
        url: true
      },
      audioRecording: {
        ISBN: true,
        abstractNote: true,
        accessDate: true,
        album: jurism2,
        archive: true,
        archiveLocation: true,
        attachments: true,
        audioRecordingFormat: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        edition: jurism2,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        label: true,
        language: true,
        libraryCatalog: true,
        medium: true,
        multi: true,
        notes: true,
        numberOfVolumes: true,
        opus: jurism2,
        originalDate: jurism2,
        place: true,
        publicationTitle: jurism2,
        publisher: true,
        release: jurism2,
        rights: true,
        runningTime: true,
        seeAlso: true,
        seriesTitle: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true,
        volume: true
      },
      bill: {
        abstractNote: true,
        accessDate: true,
        archiveLocation: jurism2,
        assemblyNumber: jurism2,
        attachments: true,
        billNumber: true,
        code: true,
        codePages: true,
        codeVolume: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        history: true,
        id: true,
        itemID: true,
        itemType: true,
        jurisdiction: jurism2,
        language: true,
        legislativeBody: true,
        multi: true,
        notes: true,
        number: true,
        pages: true,
        publicationTitle: jurism2,
        reporter: jurism2,
        resolutionLabel: jurism2,
        rights: true,
        section: true,
        seeAlso: true,
        seriesNumber: jurism2,
        session: true,
        sessionType: jurism2,
        shortTitle: true,
        tags: true,
        title: true,
        type: jurism2,
        url: true,
        volume: true
      },
      blogPost: {
        abstractNote: true,
        accessDate: true,
        attachments: true,
        blogTitle: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        multi: true,
        notes: true,
        publicationTitle: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        type: true,
        url: true,
        websiteType: true
      },
      book: {
        ISBN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        edition: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        medium: jurism2,
        multi: true,
        notes: true,
        numPages: true,
        numberOfVolumes: true,
        place: true,
        publisher: true,
        rights: true,
        seeAlso: true,
        series: true,
        seriesNumber: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true,
        volume: true,
        volumeTitle: jurism2
      },
      bookSection: {
        ISBN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        bookAbbreviation: jurism2,
        bookTitle: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        edition: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        journalAbbreviation: jurism2,
        language: true,
        libraryCatalog: true,
        multi: true,
        notes: true,
        numberOfVolumes: true,
        pages: true,
        place: true,
        publicationTitle: true,
        publisher: true,
        rights: true,
        seeAlso: true,
        series: true,
        seriesNumber: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true,
        volume: true,
        volumeTitle: jurism2
      },
      case: {
        DOI: jurism2,
        abstractNote: true,
        accessDate: true,
        adminFlag: jurism2,
        archive: jurism2,
        archiveLocation: jurism2,
        attachments: true,
        callNumber: jurism2,
        caseName: true,
        court: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateDecided: true,
        dateModified: true,
        division: jurism2,
        docketNumber: true,
        documentName: jurism2,
        documentNumber: jurism2,
        extra: true,
        filingDate: jurism2,
        firstPage: true,
        history: true,
        id: true,
        issue: jurism2,
        itemID: true,
        itemType: true,
        jurisdiction: jurism2,
        language: true,
        multi: true,
        notes: true,
        number: true,
        pages: true,
        place: jurism2,
        publicationDate: jurism2,
        publicationTitle: jurism2,
        publisher: jurism2,
        reign: jurism2,
        reporter: true,
        reporterVolume: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        supplementName: jurism2,
        tags: true,
        title: true,
        url: true,
        volume: true,
        yearAsVolume: jurism2
      },
      classic: {
        abstractNote: jurism2,
        accessDate: jurism2,
        archive: jurism2,
        archiveLocation: jurism2,
        attachments: true,
        callNumber: jurism2,
        creators: true,
        date: jurism2,
        dateAdded: true,
        dateModified: true,
        extra: jurism2,
        id: true,
        itemID: true,
        itemType: true,
        language: jurism2,
        libraryCatalog: jurism2,
        manuscriptType: jurism2,
        multi: true,
        notes: true,
        numPages: jurism2,
        place: jurism2,
        rights: jurism2,
        seeAlso: true,
        shortTitle: jurism2,
        tags: true,
        title: jurism2,
        type: jurism2,
        url: jurism2,
        volume: jurism2
      },
      computerProgram: {
        ISBN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        company: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        libraryCatalog: true,
        multi: true,
        notes: true,
        place: true,
        programmingLanguage: true,
        publisher: true,
        rights: true,
        seeAlso: true,
        seriesTitle: true,
        shortTitle: true,
        system: true,
        tags: true,
        title: true,
        url: true,
        versionNumber: true
      },
      conferencePaper: {
        DOI: true,
        ISBN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        conferenceDate: jurism2,
        conferenceName: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        institution: jurism2,
        issue: jurism2,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        multi: true,
        notes: true,
        pages: true,
        place: true,
        proceedingsTitle: true,
        publicationTitle: true,
        publisher: true,
        rights: true,
        seeAlso: true,
        series: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true,
        volume: true
      },
      dictionaryEntry: {
        ISBN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        dictionaryTitle: true,
        edition: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        multi: true,
        notes: true,
        numberOfVolumes: true,
        pages: true,
        place: true,
        publicationTitle: true,
        publisher: true,
        rights: true,
        seeAlso: true,
        series: true,
        seriesNumber: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true,
        volume: true
      },
      document: {
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        multi: true,
        notes: true,
        publisher: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true,
        versionNumber: jurism2
      },
      email: {
        abstractNote: true,
        accessDate: true,
        attachments: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        multi: true,
        notes: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        subject: true,
        tags: true,
        title: true,
        url: true
      },
      encyclopediaArticle: {
        ISBN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        edition: true,
        encyclopediaTitle: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        multi: true,
        notes: true,
        numberOfVolumes: true,
        pages: true,
        place: true,
        publicationTitle: true,
        publisher: true,
        rights: true,
        seeAlso: true,
        series: true,
        seriesNumber: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true,
        volume: true
      },
      film: {
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        distributor: true,
        extra: true,
        genre: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        medium: true,
        multi: true,
        notes: true,
        publisher: true,
        rights: true,
        runningTime: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        type: true,
        url: true,
        videoRecordingFormat: true
      },
      forumPost: {
        abstractNote: true,
        accessDate: true,
        attachments: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        forumTitle: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        multi: true,
        notes: true,
        postType: true,
        publicationTitle: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        type: true,
        url: true
      },
      gazette: {
        abstractNote: jurism2,
        accessDate: jurism2,
        attachments: true,
        code: jurism2,
        codeNumber: jurism2,
        creators: true,
        date: jurism2,
        dateAdded: true,
        dateEnacted: jurism2,
        dateModified: true,
        extra: jurism2,
        history: jurism2,
        id: true,
        itemID: true,
        itemType: true,
        jurisdiction: jurism2,
        language: jurism2,
        multi: true,
        nameOfAct: jurism2,
        notes: true,
        number: jurism2,
        pages: jurism2,
        publicLawNumber: jurism2,
        publicationDate: jurism2,
        publisher: jurism2,
        regnalYear: jurism2,
        reign: jurism2,
        rights: jurism2,
        section: jurism2,
        seeAlso: true,
        session: jurism2,
        shortTitle: jurism2,
        tags: true,
        title: jurism2,
        url: jurism2
      },
      hearing: {
        abstractNote: true,
        accessDate: true,
        archiveLocation: jurism2,
        assemblyNumber: jurism2,
        attachments: true,
        committee: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        documentNumber: true,
        extra: true,
        history: true,
        id: true,
        itemID: true,
        itemType: true,
        jurisdiction: jurism2,
        language: true,
        legislativeBody: true,
        meetingName: jurism2,
        meetingNumber: jurism2,
        multi: true,
        notes: true,
        number: zotero2,
        numberOfVolumes: true,
        pages: true,
        place: true,
        publicationTitle: jurism2,
        publisher: true,
        reporter: jurism2,
        resolutionLabel: jurism2,
        rights: true,
        seeAlso: true,
        seriesNumber: jurism2,
        session: true,
        sessionType: jurism2,
        shortTitle: true,
        tags: true,
        title: true,
        type: jurism2,
        url: true,
        volume: jurism2
      },
      instantMessage: {
        abstractNote: true,
        accessDate: true,
        attachments: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        multi: true,
        notes: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true
      },
      interview: {
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        interviewMedium: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        medium: true,
        multi: true,
        notes: true,
        place: jurism2,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true
      },
      journalArticle: {
        DOI: true,
        ISSN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        issue: true,
        itemID: true,
        itemType: true,
        journalAbbreviation: true,
        jurisdiction: jurism2,
        language: true,
        libraryCatalog: true,
        multi: true,
        notes: true,
        pages: true,
        place: jurism2,
        publicationTitle: true,
        publisher: jurism2,
        rights: true,
        seeAlso: true,
        series: true,
        seriesText: true,
        seriesTitle: true,
        shortTitle: true,
        status: jurism2,
        tags: true,
        title: true,
        url: true,
        volume: true
      },
      legalCommentary: {
        ISBN: jurism2,
        abstractNote: jurism2,
        accessDate: jurism2,
        archive: jurism2,
        archiveLocation: jurism2,
        attachments: true,
        bookAbbreviation: jurism2,
        bookTitle: jurism2,
        callNumber: jurism2,
        creators: true,
        date: jurism2,
        dateAdded: true,
        dateModified: true,
        edition: jurism2,
        extra: jurism2,
        id: true,
        itemID: true,
        itemType: true,
        journalAbbreviation: jurism2,
        language: jurism2,
        libraryCatalog: jurism2,
        multi: true,
        notes: true,
        numberOfVolumes: jurism2,
        pages: jurism2,
        place: jurism2,
        publicationTitle: jurism2,
        publisher: jurism2,
        rights: jurism2,
        seeAlso: true,
        series: jurism2,
        seriesNumber: jurism2,
        shortTitle: jurism2,
        tags: true,
        title: jurism2,
        url: jurism2,
        versionNumber: jurism2,
        volume: jurism2,
        volumeTitle: jurism2
      },
      letter: {
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        letterType: true,
        libraryCatalog: true,
        multi: true,
        notes: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        type: true,
        url: true
      },
      magazineArticle: {
        ISSN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        issue: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        multi: true,
        notes: true,
        pages: true,
        place: jurism2,
        publicationTitle: true,
        publisher: jurism2,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true,
        volume: true
      },
      manuscript: {
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        manuscriptType: true,
        multi: true,
        notes: true,
        numPages: true,
        place: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        type: true,
        url: true
      },
      map: {
        ISBN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        edition: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        mapType: true,
        multi: true,
        notes: true,
        place: true,
        publisher: true,
        rights: true,
        scale: true,
        seeAlso: true,
        seriesTitle: true,
        shortTitle: true,
        tags: true,
        title: true,
        type: true,
        url: true
      },
      newspaperArticle: {
        ISSN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        court: jurism2,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        edition: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        jurisdiction: jurism2,
        language: true,
        libraryCatalog: true,
        multi: true,
        newsCaseDate: jurism2,
        notes: true,
        pages: true,
        place: true,
        publicationTitle: true,
        rights: true,
        section: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true
      },
      note: {
        dateAdded: true,
        dateModified: true,
        id: true,
        itemID: true,
        itemType: true,
        note: true,
        tags: true
      },
      patent: {
        abstractNote: true,
        accessDate: true,
        applicationNumber: true,
        assignee: true,
        attachments: true,
        country: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        filingDate: true,
        genre: jurism2,
        id: true,
        issueDate: true,
        issuingAuthority: true,
        itemID: true,
        itemType: true,
        jurisdiction: jurism2,
        language: true,
        legalStatus: true,
        multi: true,
        notes: true,
        number: true,
        pages: true,
        patentNumber: true,
        place: true,
        priorityDate: jurism2,
        priorityNumbers: true,
        publicationDate: jurism2,
        publicationNumber: jurism2,
        references: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        type: jurism2,
        url: true
      },
      podcast: {
        abstractNote: true,
        accessDate: true,
        attachments: true,
        audioFileType: true,
        creators: true,
        date: jurism2,
        dateAdded: true,
        dateModified: true,
        episodeNumber: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        medium: true,
        multi: true,
        notes: true,
        number: true,
        publisher: jurism2,
        rights: true,
        runningTime: true,
        seeAlso: true,
        seriesTitle: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true
      },
      preprint: {
        DOI: zotero2,
        abstractNote: zotero2,
        accessDate: zotero2,
        archive: zotero2,
        archiveID: zotero2,
        archiveLocation: zotero2,
        attachments: true,
        callNumber: zotero2,
        citationKey: zotero2,
        creators: true,
        date: zotero2,
        dateAdded: true,
        dateModified: true,
        extra: zotero2,
        genre: zotero2,
        id: true,
        itemID: true,
        itemType: true,
        language: zotero2,
        libraryCatalog: zotero2,
        multi: true,
        notes: true,
        number: zotero2,
        place: zotero2,
        publisher: zotero2,
        repository: zotero2,
        rights: zotero2,
        seeAlso: true,
        series: zotero2,
        seriesNumber: zotero2,
        shortTitle: zotero2,
        tags: true,
        title: zotero2,
        type: zotero2,
        url: zotero2
      },
      presentation: {
        abstractNote: true,
        accessDate: true,
        archive: jurism2,
        archiveCollection: jurism2,
        archiveLocation: jurism2,
        attachments: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        meetingName: true,
        multi: true,
        notes: true,
        place: true,
        presentationType: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        type: true,
        url: true
      },
      radioBroadcast: {
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        audioRecordingFormat: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        episodeNumber: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        medium: true,
        multi: true,
        network: true,
        notes: true,
        number: true,
        place: true,
        programTitle: true,
        publicationTitle: true,
        publisher: true,
        rights: true,
        runningTime: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true
      },
      regulation: {
        abstractNote: jurism2,
        accessDate: jurism2,
        attachments: true,
        code: jurism2,
        codeNumber: jurism2,
        creators: true,
        date: jurism2,
        dateAdded: true,
        dateEnacted: jurism2,
        dateModified: true,
        extra: jurism2,
        gazetteFlag: jurism2,
        history: jurism2,
        id: true,
        itemID: true,
        itemType: true,
        jurisdiction: jurism2,
        language: jurism2,
        legislativeBody: jurism2,
        multi: true,
        nameOfAct: jurism2,
        notes: true,
        number: jurism2,
        pages: jurism2,
        publicLawNumber: jurism2,
        publicationDate: jurism2,
        publisher: jurism2,
        regulationType: jurism2,
        regulatoryBody: jurism2,
        rights: jurism2,
        section: jurism2,
        seeAlso: true,
        session: jurism2,
        shortTitle: jurism2,
        tags: true,
        title: jurism2,
        type: jurism2,
        url: jurism2
      },
      report: {
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        assemblyNumber: jurism2,
        attachments: true,
        bookTitle: jurism2,
        callNumber: true,
        committee: jurism2,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        institution: true,
        itemID: true,
        itemType: true,
        jurisdiction: jurism2,
        language: true,
        libraryCatalog: true,
        medium: jurism2,
        multi: true,
        notes: true,
        number: true,
        pages: true,
        place: true,
        publicationTitle: jurism2,
        publisher: true,
        reportNumber: true,
        reportType: true,
        rights: true,
        seeAlso: true,
        seriesNumber: jurism2,
        seriesTitle: true,
        shortTitle: true,
        status: jurism2,
        tags: true,
        title: true,
        type: true,
        url: true
      },
      standard: {
        abstractNote: jurism2,
        accessDate: jurism2,
        archive: jurism2,
        archiveLocation: jurism2,
        attachments: true,
        callNumber: jurism2,
        creators: true,
        date: jurism2,
        dateAdded: true,
        dateModified: true,
        extra: jurism2,
        id: true,
        itemID: true,
        itemType: true,
        jurisdiction: jurism2,
        language: jurism2,
        libraryCatalog: jurism2,
        multi: true,
        notes: true,
        number: jurism2,
        publisher: jurism2,
        rights: jurism2,
        seeAlso: true,
        shortTitle: jurism2,
        tags: true,
        title: jurism2,
        url: jurism2,
        versionNumber: jurism2
      },
      statute: {
        abstractNote: true,
        accessDate: true,
        attachments: true,
        code: true,
        codeNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateAmended: jurism2,
        dateEnacted: true,
        dateModified: true,
        extra: true,
        gazetteFlag: jurism2,
        history: true,
        id: true,
        itemID: true,
        itemType: true,
        jurisdiction: jurism2,
        language: true,
        multi: true,
        nameOfAct: true,
        notes: true,
        number: true,
        originalDate: jurism2,
        pages: true,
        publicLawNumber: true,
        publicationDate: jurism2,
        publisher: jurism2,
        regnalYear: jurism2,
        reign: jurism2,
        rights: true,
        section: true,
        seeAlso: true,
        session: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true
      },
      thesis: {
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        multi: true,
        notes: true,
        numPages: true,
        place: true,
        publisher: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        thesisType: true,
        title: true,
        type: true,
        university: true,
        url: true
      },
      treaty: {
        abstractNote: jurism2,
        accessDate: jurism2,
        adoptionDate: jurism2,
        archive: jurism2,
        archiveLocation: jurism2,
        attachments: true,
        callNumber: jurism2,
        creators: true,
        date: jurism2,
        dateAdded: true,
        dateModified: true,
        extra: jurism2,
        id: true,
        itemID: true,
        itemType: true,
        language: jurism2,
        libraryCatalog: jurism2,
        multi: true,
        notes: true,
        number: jurism2,
        openingDate: jurism2,
        pages: jurism2,
        parentTreaty: jurism2,
        publicationTitle: jurism2,
        publisher: jurism2,
        reporter: jurism2,
        rights: jurism2,
        section: jurism2,
        seeAlso: true,
        shortTitle: jurism2,
        signingDate: jurism2,
        supplementName: jurism2,
        tags: true,
        title: jurism2,
        treatyNumber: jurism2,
        url: jurism2,
        versionNumber: jurism2,
        volume: jurism2
      },
      tvBroadcast: {
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        episodeNumber: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        medium: true,
        multi: true,
        network: true,
        notes: true,
        number: true,
        place: true,
        programTitle: true,
        publicationTitle: true,
        publisher: true,
        rights: true,
        runningTime: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        url: true,
        videoRecordingFormat: true
      },
      videoRecording: {
        ISBN: true,
        abstractNote: true,
        accessDate: true,
        archive: true,
        archiveLocation: true,
        attachments: true,
        callNumber: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        libraryCatalog: true,
        medium: true,
        multi: true,
        notes: true,
        numberOfVolumes: true,
        place: true,
        publicationTitle: jurism2,
        publisher: true,
        rights: true,
        runningTime: true,
        seeAlso: true,
        seriesTitle: true,
        shortTitle: true,
        studio: true,
        tags: true,
        title: true,
        url: true,
        videoRecordingFormat: true,
        volume: true,
        websiteTitle: jurism2
      },
      webpage: {
        abstractNote: true,
        accessDate: true,
        attachments: true,
        creators: true,
        date: true,
        dateAdded: true,
        dateModified: true,
        extra: true,
        id: true,
        itemID: true,
        itemType: true,
        language: true,
        multi: true,
        notes: true,
        publicationTitle: true,
        rights: true,
        seeAlso: true,
        shortTitle: true,
        tags: true,
        title: true,
        type: true,
        url: true,
        websiteTitle: true,
        websiteType: true
      }
    },
    test: (obj, strict) => {
      const errors = broken.me(obj);
      if (!errors)
        return "";
      if (!strict && !broken.other(obj)) {
        if (typeof Zotero !== "undefined")
          Zotero.debug("Better BibTeX soft error: " + errors);
        return "";
      }
      return errors;
    }
  };
  var label2 = {
    abstractnote: "Abstract note",
    accessdate: "Access date",
    adminflag: jurism2 && "Admin flag",
    adoptiondate: jurism2 && "Adoption date",
    album: jurism2 && "Publication title",
    applicationnumber: "Application number",
    archive: "Archive",
    archivecollection: jurism2 && "Archive collection",
    archiveid: zotero2 && "Number",
    archivelocation: "Archive location",
    artwork: "Artwork",
    artworkmedium: "Medium",
    artworksize: "Artwork size",
    assemblynumber: jurism2 && "Series number",
    assignee: "Assignee",
    attachment: "Attachment",
    audiofiletype: "Medium",
    audiorecording: "Audio recording",
    audiorecordingformat: "Medium",
    bill: "Bill",
    billnumber: "Number",
    blogpost: "Blog post",
    blogtitle: "Publication title",
    book: "Book",
    bookabbreviation: jurism2 && "Journal abbreviation",
    booksection: "Book section",
    booktitle: "Publication title",
    callnumber: "Call number",
    case: "Case",
    casename: "Title",
    citationkey: zotero2 && "Citation key",
    classic: jurism2 && "Classic",
    code: "Code",
    codenumber: "Code number",
    codepages: "Pages",
    codevolume: "Volume",
    committee: "Committee",
    company: "Publisher",
    computerprogram: "Computer program",
    conferencedate: jurism2 && "Conference date",
    conferencename: "Conference name",
    conferencepaper: "Conference paper",
    country: "Country",
    court: "Court",
    date: "Date",
    dateamended: jurism2 && "Date amended",
    datedecided: "Date",
    dateenacted: "Date",
    dictionaryentry: "Dictionary entry",
    dictionarytitle: "Publication title",
    distributor: "Publisher",
    division: jurism2 && "Division",
    docketnumber: "Number",
    document: "Document",
    documentname: jurism2 && "Document name",
    documentnumber: zotero2 ? "Number" : "Document number",
    doi: "DOI",
    edition: "Edition",
    email: "Email",
    encyclopediaarticle: "Encyclopedia article",
    encyclopediatitle: "Publication title",
    episodenumber: "Number",
    extra: "Extra",
    filingdate: "Filing date",
    film: "Film",
    firstpage: "Pages",
    forumpost: "Forum post",
    forumtitle: "Publication title",
    gazette: jurism2 && "Gazette",
    gazetteflag: jurism2 && "Gazette flag",
    genre: "Type",
    hearing: "Hearing",
    history: "History",
    instantmessage: "Instant message",
    institution: zotero2 ? "Publisher" : "Institution",
    interview: "Interview",
    interviewmedium: "Medium",
    isbn: "ISBN",
    issn: "ISSN",
    issue: "Issue",
    issuedate: "Date",
    issuingauthority: "Issuing authority",
    journalabbreviation: "Journal abbreviation",
    journalarticle: "Journal article",
    jurisdiction: jurism2 && "Jurisdiction",
    label: "Publisher",
    language: "Language",
    legalcommentary: jurism2 && "Legal commentary",
    legalstatus: "Legal status",
    legislativebody: "Legislative body",
    letter: "Letter",
    lettertype: "Type",
    librarycatalog: "Library catalog",
    magazinearticle: "Magazine article",
    manuscript: "Manuscript",
    manuscripttype: "Type",
    map: "Map",
    maptype: "Type",
    medium: "Medium",
    meetingname: "Meeting name",
    meetingnumber: jurism2 && "Meeting number",
    nameofact: "Title",
    network: "Publisher",
    newscasedate: jurism2 && "News case date",
    newspaperarticle: "Newspaper article",
    number: "Number",
    numberofvolumes: "Number of volumes",
    numpages: "Number of pages",
    openingdate: jurism2 && "Opening date",
    opus: jurism2 && "Opus",
    originaldate: jurism2 && "Original date",
    pages: "Pages",
    parenttreaty: jurism2 && "Parent treaty",
    patent: "Patent",
    patentnumber: "Number",
    place: "Place",
    podcast: "Podcast",
    posttype: "Type",
    preprint: zotero2 && "Preprint",
    presentation: "Presentation",
    presentationtype: "Type",
    prioritydate: jurism2 && "Priority date",
    prioritynumbers: "Priority numbers",
    proceedingstitle: "Publication title",
    programminglanguage: "Programming language",
    programtitle: "Publication title",
    publicationdate: jurism2 && "Publication date",
    publicationnumber: jurism2 && "Publication number",
    publicationtitle: "Publication title",
    publiclawnumber: "Number",
    publisher: "Publisher",
    radiobroadcast: "Radio broadcast",
    references: "References",
    regnalyear: jurism2 && "Regnal year",
    regulation: jurism2 && "Regulation",
    regulationtype: jurism2 && "Type",
    regulatorybody: jurism2 && "Legislative body",
    reign: jurism2 && "Reign",
    release: jurism2 && "Edition",
    report: "Report",
    reporter: zotero2 ? "Reporter" : "Publication title",
    reportervolume: "Volume",
    reportnumber: "Number",
    reporttype: "Type",
    repository: zotero2 && "Publisher",
    resolutionlabel: jurism2 && "Resolution label",
    rights: "Rights",
    runningtime: "Running time",
    scale: "Scale",
    section: "Section",
    series: "Series",
    seriesnumber: "Series number",
    seriestext: "Series text",
    seriestitle: "Series title",
    session: "Session",
    sessiontype: jurism2 && "Type",
    shorttitle: "Short title",
    signingdate: jurism2 && "Signing date",
    standard: jurism2 && "Standard",
    status: jurism2 && "Status",
    statute: "Statute",
    studio: "Publisher",
    subject: "Title",
    supplementname: jurism2 && "Supplement name",
    system: "System",
    thesis: "Thesis",
    thesistype: "Type",
    title: "Title",
    treaty: jurism2 && "Treaty",
    treatynumber: jurism2 && "Number",
    tvbroadcast: "Tv broadcast",
    type: "Type",
    university: "Publisher",
    url: "Url",
    versionnumber: "Version number",
    videorecording: "Video recording",
    videorecordingformat: "Medium",
    volume: "Volume",
    volumetitle: jurism2 && "Volume title",
    webpage: "Webpage",
    websitetitle: "Publication title",
    websitetype: "Type",
    yearasvolume: jurism2 && "Year as volume"
  };
  var schema_csl_mappings = {
    zotero: {
      CSL_TYPE_MAPPINGS: {
        artwork: "graphic",
        attachment: "document",
        audioRecording: "song",
        bill: "bill",
        blogPost: "post-weblog",
        book: "book",
        bookSection: "chapter",
        case: "legal_case",
        computerProgram: "software",
        conferencePaper: "paper-conference",
        dictionaryEntry: "entry-dictionary",
        document: "document",
        email: "personal_communication",
        encyclopediaArticle: "entry-encyclopedia",
        film: "motion_picture",
        forumPost: "post",
        hearing: "hearing",
        instantMessage: "personal_communication",
        interview: "interview",
        journalArticle: "article-journal",
        letter: "personal_communication",
        magazineArticle: "article-magazine",
        manuscript: "manuscript",
        map: "map",
        newspaperArticle: "article-newspaper",
        note: "document",
        patent: "patent",
        podcast: "broadcast",
        preprint: "article",
        presentation: "speech",
        radioBroadcast: "broadcast",
        report: "report",
        statute: "legislation",
        thesis: "thesis",
        tvBroadcast: "broadcast",
        videoRecording: "motion_picture",
        webpage: "webpage"
      },
      CSL_TYPE_MAPPINGS_REVERSE: {
        article: ["preprint"],
        "article-journal": ["journalArticle"],
        "article-magazine": ["magazineArticle"],
        "article-newspaper": ["newspaperArticle"],
        bill: ["bill"],
        book: ["book"],
        broadcast: ["podcast", "tvBroadcast", "radioBroadcast"],
        chapter: ["bookSection"],
        document: ["document", "attachment", "note"],
        "entry-dictionary": ["dictionaryEntry"],
        "entry-encyclopedia": ["encyclopediaArticle"],
        graphic: ["artwork"],
        hearing: ["hearing"],
        interview: ["interview"],
        legal_case: ["case"],
        legislation: ["statute"],
        manuscript: ["manuscript"],
        map: ["map"],
        motion_picture: ["film", "videoRecording"],
        "paper-conference": ["conferencePaper"],
        patent: ["patent"],
        personal_communication: ["letter", "email", "instantMessage"],
        post: ["forumPost"],
        "post-weblog": ["blogPost"],
        report: ["report"],
        software: ["computerProgram"],
        song: ["audioRecording"],
        speech: ["presentation"],
        thesis: ["thesis"],
        webpage: ["webpage"]
      },
      CSL_TEXT_MAPPINGS: {
        DOI: ["DOI"],
        ISBN: ["ISBN"],
        ISSN: ["ISSN"],
        URL: ["url"],
        abstract: ["abstractNote"],
        archive: ["archive"],
        archive_location: ["archiveLocation"],
        authority: ["court", "legislativeBody", "issuingAuthority"],
        "call-number": ["callNumber", "applicationNumber"],
        "chapter-number": ["session"],
        "collection-number": ["seriesNumber"],
        "collection-title": ["seriesTitle", "series"],
        "container-title": ["publicationTitle", "reporter", "code"],
        "container-title-short": ["journalAbbreviation"],
        dimensions: ["artworkSize", "runningTime"],
        edition: ["edition"],
        "event-place": ["place"],
        "event-title": ["meetingName", "conferenceName"],
        genre: ["type", "programmingLanguage"],
        issue: ["issue", "priorityNumbers"],
        language: ["language"],
        license: ["rights"],
        medium: ["medium", "system"],
        note: ["extra"],
        number: ["number"],
        "number-of-pages": ["numPages"],
        "number-of-volumes": ["numberOfVolumes"],
        page: ["pages"],
        publisher: ["publisher"],
        "publisher-place": ["place"],
        references: ["history", "references"],
        scale: ["scale"],
        section: ["section", "committee"],
        source: ["libraryCatalog"],
        status: ["status"],
        title: ["title"],
        "title-short": ["shortTitle"],
        version: ["versionNumber"],
        volume: ["volume", "codeNumber"]
      },
      CSL_DATE_MAPPINGS: {
        accessed: "accessDate",
        issued: "date",
        submitted: "filingDate"
      },
      CSL_NAME_MAPPINGS: {
        author: "author",
        bookAuthor: "container-author",
        castMember: "performer",
        composer: "composer",
        contributor: "contributor",
        director: "director",
        editor: "editor",
        guest: "guest",
        interviewer: "interviewer",
        producer: "producer",
        recipient: "recipient",
        reviewedAuthor: "reviewed-author",
        scriptwriter: "script-writer",
        seriesEditor: "collection-editor",
        translator: "translator"
      },
      CSL_FIELD_MAPPINGS_REVERSE: {
        DOI: "DOI",
        ISBN: "ISBN",
        ISSN: "ISSN",
        abstractNote: "abstract",
        accessDate: "accessed",
        applicationNumber: "call-number",
        archive: "archive",
        archiveLocation: "archive_location",
        artworkSize: "dimensions",
        callNumber: "call-number",
        code: "container-title",
        codeNumber: "volume",
        committee: "section",
        conferenceName: "event-title",
        court: "authority",
        date: "issued",
        edition: "edition",
        extra: "note",
        filingDate: "submitted",
        history: "references",
        issue: "issue",
        issuingAuthority: "authority",
        journalAbbreviation: "container-title-short",
        language: "language",
        legislativeBody: "authority",
        libraryCatalog: "source",
        medium: "medium",
        meetingName: "event-title",
        numPages: "number-of-pages",
        number: "number",
        numberOfVolumes: "number-of-volumes",
        pages: "page",
        place: "publisher-place",
        priorityNumbers: "issue",
        programmingLanguage: "genre",
        publicationTitle: "container-title",
        publisher: "publisher",
        references: "references",
        reporter: "container-title",
        rights: "license",
        runningTime: "dimensions",
        scale: "scale",
        section: "section",
        series: "collection-title",
        seriesNumber: "collection-number",
        seriesTitle: "collection-title",
        session: "chapter-number",
        shortTitle: "title-short",
        status: "status",
        system: "medium",
        title: "title",
        type: "genre",
        url: "URL",
        versionNumber: "version",
        volume: "volume"
      }
    },
    jurism: {
      CSL_TYPE_MAPPINGS: {
        artwork: "graphic",
        attachment: "article",
        audioRecording: "song",
        bill: "bill",
        blogPost: "post-weblog",
        book: "book",
        bookSection: "chapter",
        case: "legal_case",
        classic: "classic",
        computerProgram: "book",
        conferencePaper: "paper-conference",
        dictionaryEntry: "entry-dictionary",
        document: "article",
        email: "personal_communication",
        encyclopediaArticle: "entry-encyclopedia",
        film: "motion_picture",
        forumPost: "post",
        gazette: "gazette",
        hearing: "hearing",
        instantMessage: "personal_communication",
        interview: "interview",
        journalArticle: "article-journal",
        legalCommentary: "legal_commentary",
        letter: "personal_communication",
        magazineArticle: "article-magazine",
        manuscript: "manuscript",
        map: "map",
        newspaperArticle: "article-newspaper",
        note: "article",
        patent: "patent",
        podcast: "broadcast",
        presentation: "speech",
        radioBroadcast: "broadcast",
        regulation: "regulation",
        report: "report",
        standard: "standard",
        statute: "legislation",
        thesis: "thesis",
        treaty: "treaty",
        tvBroadcast: "broadcast",
        videoRecording: "video",
        webpage: "webpage"
      },
      CSL_TYPE_MAPPINGS_REVERSE: {
        article: ["document", "attachment", "note"],
        "article-journal": ["journalArticle"],
        "article-magazine": ["magazineArticle"],
        "article-newspaper": ["newspaperArticle"],
        bill: ["bill"],
        book: ["book", "computerProgram"],
        broadcast: ["podcast", "tvBroadcast", "radioBroadcast"],
        chapter: ["bookSection"],
        classic: ["classic"],
        "entry-dictionary": ["dictionaryEntry"],
        "entry-encyclopedia": ["encyclopediaArticle"],
        gazette: ["gazette"],
        graphic: ["artwork"],
        hearing: ["hearing"],
        interview: ["interview"],
        legal_case: ["case"],
        legal_commentary: ["legalCommentary"],
        legislation: ["statute"],
        manuscript: ["manuscript"],
        map: ["map"],
        motion_picture: ["film"],
        "paper-conference": ["conferencePaper"],
        patent: ["patent"],
        personal_communication: ["letter", "email", "instantMessage"],
        post: ["forumPost"],
        "post-weblog": ["blogPost"],
        regulation: ["regulation"],
        report: ["report"],
        song: ["audioRecording"],
        speech: ["presentation"],
        standard: ["standard"],
        thesis: ["thesis"],
        treaty: ["treaty"],
        video: ["videoRecording"],
        webpage: ["webpage"]
      },
      CSL_TEXT_MAPPINGS: {
        DOI: ["DOI"],
        ISBN: ["ISBN"],
        ISSN: ["ISSN"],
        URL: ["url"],
        abstract: ["abstractNote"],
        "admin-flag": ["adminFlag"],
        archive: ["archive"],
        archive_collection: ["archiveCollection"],
        archive_location: ["archiveLocation"],
        authority: ["court", "legislativeBody", "issuingAuthority", "institution", "regulatoryBody"],
        "call-number": ["callNumber", "applicationNumber"],
        "chapter-number": ["session"],
        "collection-number": ["seriesNumber", "assemblyNumber", "regnalYear", "yearAsVolume"],
        "collection-title": ["seriesTitle", "series", "parentTreaty"],
        committee: ["committee"],
        "container-title": ["publicationTitle", "reporter", "code"],
        "container-title-short": ["journalAbbreviation"],
        dimensions: ["artworkSize", "runningTime"],
        division: ["division"],
        "document-name": ["documentName"],
        "document-number": ["documentNumber"],
        edition: ["edition"],
        event: ["meetingName", "conferenceName", "resolutionLabel"],
        "event-place": ["place"],
        "gazette-flag": ["gazetteFlag"],
        genre: ["type", "programmingLanguage", "genre", "reign", "sessionType", "regulationType"],
        issue: ["issue", "priorityNumbers", "meetingNumber"],
        jurisdiction: ["jurisdiction"],
        language: ["language"],
        medium: ["medium", "system"],
        note: ["extra"],
        number: ["number"],
        "number-of-pages": ["numPages"],
        "number-of-volumes": ["numberOfVolumes"],
        page: ["pages"],
        "publication-number": ["publicationNumber"],
        publisher: ["publisher"],
        "publisher-place": ["place"],
        references: ["history", "references"],
        scale: ["scale"],
        section: ["section"],
        source: ["libraryCatalog"],
        status: ["status"],
        supplement: ["supplementName"],
        title: ["title"],
        "title-short": ["shortTitle"],
        version: ["versionNumber"],
        volume: ["volume", "codeNumber"],
        "volume-title": ["volumeTitle"]
      },
      CSL_DATE_MAPPINGS: {
        accessed: ["accessDate"],
        "event-date": ["dateAmended", "signingDate", "conferenceDate"],
        issued: ["date"],
        "opening-date": ["openingDate"],
        "original-date": ["adoptionDate", "newsCaseDate", "originalDate", "priorityDate"],
        "publication-date": ["publicationDate"],
        submitted: ["filingDate"]
      },
      CSL_NAME_MAPPINGS: {
        author: "author",
        bookAuthor: "container-author",
        commenter: "commenter",
        composer: "composer",
        contributor: "contributor",
        director: "director",
        editor: "editor",
        interviewer: "interviewer",
        recipient: "recipient",
        reviewedAuthor: "reviewed-author",
        seriesEditor: "collection-editor",
        testimonyBy: "testimonyBy",
        translator: "translator"
      },
      CSL_FIELD_MAPPINGS_REVERSE: {
        DOI: "DOI",
        ISBN: "ISBN",
        ISSN: "ISSN",
        abstractNote: "abstract",
        accessDate: "accessed",
        adminFlag: "admin-flag",
        adoptionDate: "original-date",
        applicationNumber: "call-number",
        archive: "archive",
        archiveCollection: "archive_collection",
        archiveLocation: "archive_location",
        artworkSize: "dimensions",
        assemblyNumber: "collection-number",
        callNumber: "call-number",
        code: "container-title",
        codeNumber: "volume",
        committee: "committee",
        conferenceDate: "event-date",
        conferenceName: "event",
        court: "authority",
        date: "issued",
        dateAmended: "event-date",
        division: "division",
        documentName: "document-name",
        documentNumber: "document-number",
        edition: "edition",
        extra: "note",
        filingDate: "submitted",
        gazetteFlag: "gazette-flag",
        genre: "genre",
        history: "references",
        institution: "authority",
        issue: "issue",
        issuingAuthority: "authority",
        journalAbbreviation: "container-title-short",
        jurisdiction: "jurisdiction",
        language: "language",
        legislativeBody: "authority",
        libraryCatalog: "source",
        medium: "medium",
        meetingName: "event",
        meetingNumber: "issue",
        newsCaseDate: "original-date",
        numPages: "number-of-pages",
        number: "number",
        numberOfVolumes: "number-of-volumes",
        openingDate: "opening-date",
        originalDate: "original-date",
        pages: "page",
        parentTreaty: "collection-title",
        place: "publisher-place",
        priorityDate: "original-date",
        priorityNumbers: "issue",
        programmingLanguage: "genre",
        publicationDate: "publication-date",
        publicationNumber: "publication-number",
        publicationTitle: "container-title",
        publisher: "publisher",
        references: "references",
        regnalYear: "collection-number",
        regulationType: "genre",
        regulatoryBody: "authority",
        reign: "genre",
        reporter: "container-title",
        resolutionLabel: "event",
        runningTime: "dimensions",
        scale: "scale",
        section: "section",
        series: "collection-title",
        seriesNumber: "collection-number",
        seriesTitle: "collection-title",
        session: "chapter-number",
        sessionType: "genre",
        shortTitle: "title-short",
        signingDate: "event-date",
        status: "status",
        supplementName: "supplement",
        system: "medium",
        title: "title",
        type: "genre",
        url: "URL",
        versionNumber: "version",
        volume: "volume",
        volumeTitle: "volume-title",
        yearAsVolume: "collection-number"
      }
    }
  };
  var CSL_MAPPINGS = schema_csl_mappings[client];

  // content/text.ts
  init_globals();
  var import_bibtex_parser = __toESM(require_bibtex_parser());

  // content/csl-titlecase.ts
  init_globals();
  function makeRegExp(lst) {
    lst = lst.slice();
    const ret = new RegExp("(?:(?:[?!:]*\\s+|-|^)(?:" + lst.join("|") + ")(?=[!?:]*\\s+|-|$))", "g");
    return ret;
  }
  var State = class {
    constructor() {
      this.opt = { lang: "en" };
      this.locale = {};
      this.locale[this.opt.lang] = { opts: {} };
      this.locale[this.opt.lang].opts["skip-words"] = Zotero.BetterBibTeX.CSL().SKIP_WORDS;
      this.locale[this.opt.lang].opts["skip-words-regexp"] = makeRegExp(this.locale[this.opt.lang].opts["skip-words"]);
      this.tmp = {};
    }
  };
  function titleCased(text) {
    return Zotero.BetterBibTeX.CSL().Output.Formatters.title(new State(), text);
  }

  // node_modules/parse5/dist/index.js
  init_globals();

  // node_modules/parse5/dist/parser/index.js
  init_globals();

  // node_modules/parse5/dist/tokenizer/index.js
  init_globals();

  // node_modules/parse5/dist/tokenizer/preprocessor.js
  init_globals();

  // node_modules/parse5/dist/common/unicode.js
  init_globals();
  var UNDEFINED_CODE_POINTS = /* @__PURE__ */ new Set([
    65534,
    65535,
    131070,
    131071,
    196606,
    196607,
    262142,
    262143,
    327678,
    327679,
    393214,
    393215,
    458750,
    458751,
    524286,
    524287,
    589822,
    589823,
    655358,
    655359,
    720894,
    720895,
    786430,
    786431,
    851966,
    851967,
    917502,
    917503,
    983038,
    983039,
    1048574,
    1048575,
    1114110,
    1114111
  ]);
  var REPLACEMENT_CHARACTER = "\uFFFD";
  var CODE_POINTS;
  (function(CODE_POINTS2) {
    CODE_POINTS2[CODE_POINTS2["EOF"] = -1] = "EOF";
    CODE_POINTS2[CODE_POINTS2["NULL"] = 0] = "NULL";
    CODE_POINTS2[CODE_POINTS2["TABULATION"] = 9] = "TABULATION";
    CODE_POINTS2[CODE_POINTS2["CARRIAGE_RETURN"] = 13] = "CARRIAGE_RETURN";
    CODE_POINTS2[CODE_POINTS2["LINE_FEED"] = 10] = "LINE_FEED";
    CODE_POINTS2[CODE_POINTS2["FORM_FEED"] = 12] = "FORM_FEED";
    CODE_POINTS2[CODE_POINTS2["SPACE"] = 32] = "SPACE";
    CODE_POINTS2[CODE_POINTS2["EXCLAMATION_MARK"] = 33] = "EXCLAMATION_MARK";
    CODE_POINTS2[CODE_POINTS2["QUOTATION_MARK"] = 34] = "QUOTATION_MARK";
    CODE_POINTS2[CODE_POINTS2["NUMBER_SIGN"] = 35] = "NUMBER_SIGN";
    CODE_POINTS2[CODE_POINTS2["AMPERSAND"] = 38] = "AMPERSAND";
    CODE_POINTS2[CODE_POINTS2["APOSTROPHE"] = 39] = "APOSTROPHE";
    CODE_POINTS2[CODE_POINTS2["HYPHEN_MINUS"] = 45] = "HYPHEN_MINUS";
    CODE_POINTS2[CODE_POINTS2["SOLIDUS"] = 47] = "SOLIDUS";
    CODE_POINTS2[CODE_POINTS2["DIGIT_0"] = 48] = "DIGIT_0";
    CODE_POINTS2[CODE_POINTS2["DIGIT_9"] = 57] = "DIGIT_9";
    CODE_POINTS2[CODE_POINTS2["SEMICOLON"] = 59] = "SEMICOLON";
    CODE_POINTS2[CODE_POINTS2["LESS_THAN_SIGN"] = 60] = "LESS_THAN_SIGN";
    CODE_POINTS2[CODE_POINTS2["EQUALS_SIGN"] = 61] = "EQUALS_SIGN";
    CODE_POINTS2[CODE_POINTS2["GREATER_THAN_SIGN"] = 62] = "GREATER_THAN_SIGN";
    CODE_POINTS2[CODE_POINTS2["QUESTION_MARK"] = 63] = "QUESTION_MARK";
    CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_A"] = 65] = "LATIN_CAPITAL_A";
    CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_F"] = 70] = "LATIN_CAPITAL_F";
    CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_X"] = 88] = "LATIN_CAPITAL_X";
    CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_Z"] = 90] = "LATIN_CAPITAL_Z";
    CODE_POINTS2[CODE_POINTS2["RIGHT_SQUARE_BRACKET"] = 93] = "RIGHT_SQUARE_BRACKET";
    CODE_POINTS2[CODE_POINTS2["GRAVE_ACCENT"] = 96] = "GRAVE_ACCENT";
    CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_A"] = 97] = "LATIN_SMALL_A";
    CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_F"] = 102] = "LATIN_SMALL_F";
    CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_X"] = 120] = "LATIN_SMALL_X";
    CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_Z"] = 122] = "LATIN_SMALL_Z";
    CODE_POINTS2[CODE_POINTS2["REPLACEMENT_CHARACTER"] = 65533] = "REPLACEMENT_CHARACTER";
  })(CODE_POINTS = CODE_POINTS || (CODE_POINTS = {}));
  var SEQUENCES = {
    DASH_DASH: "--",
    CDATA_START: "[CDATA[",
    DOCTYPE: "doctype",
    SCRIPT: "script",
    PUBLIC: "public",
    SYSTEM: "system"
  };
  function isSurrogate(cp) {
    return cp >= 55296 && cp <= 57343;
  }
  function isSurrogatePair(cp) {
    return cp >= 56320 && cp <= 57343;
  }
  function getSurrogatePairCodePoint(cp1, cp2) {
    return (cp1 - 55296) * 1024 + 9216 + cp2;
  }
  function isControlCodePoint(cp) {
    return cp !== 32 && cp !== 10 && cp !== 13 && cp !== 9 && cp !== 12 && cp >= 1 && cp <= 31 || cp >= 127 && cp <= 159;
  }
  function isUndefinedCodePoint(cp) {
    return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.has(cp);
  }

  // node_modules/parse5/dist/common/error-codes.js
  init_globals();
  var ERR;
  (function(ERR2) {
    ERR2["controlCharacterInInputStream"] = "control-character-in-input-stream";
    ERR2["noncharacterInInputStream"] = "noncharacter-in-input-stream";
    ERR2["surrogateInInputStream"] = "surrogate-in-input-stream";
    ERR2["nonVoidHtmlElementStartTagWithTrailingSolidus"] = "non-void-html-element-start-tag-with-trailing-solidus";
    ERR2["endTagWithAttributes"] = "end-tag-with-attributes";
    ERR2["endTagWithTrailingSolidus"] = "end-tag-with-trailing-solidus";
    ERR2["unexpectedSolidusInTag"] = "unexpected-solidus-in-tag";
    ERR2["unexpectedNullCharacter"] = "unexpected-null-character";
    ERR2["unexpectedQuestionMarkInsteadOfTagName"] = "unexpected-question-mark-instead-of-tag-name";
    ERR2["invalidFirstCharacterOfTagName"] = "invalid-first-character-of-tag-name";
    ERR2["unexpectedEqualsSignBeforeAttributeName"] = "unexpected-equals-sign-before-attribute-name";
    ERR2["missingEndTagName"] = "missing-end-tag-name";
    ERR2["unexpectedCharacterInAttributeName"] = "unexpected-character-in-attribute-name";
    ERR2["unknownNamedCharacterReference"] = "unknown-named-character-reference";
    ERR2["missingSemicolonAfterCharacterReference"] = "missing-semicolon-after-character-reference";
    ERR2["unexpectedCharacterAfterDoctypeSystemIdentifier"] = "unexpected-character-after-doctype-system-identifier";
    ERR2["unexpectedCharacterInUnquotedAttributeValue"] = "unexpected-character-in-unquoted-attribute-value";
    ERR2["eofBeforeTagName"] = "eof-before-tag-name";
    ERR2["eofInTag"] = "eof-in-tag";
    ERR2["missingAttributeValue"] = "missing-attribute-value";
    ERR2["missingWhitespaceBetweenAttributes"] = "missing-whitespace-between-attributes";
    ERR2["missingWhitespaceAfterDoctypePublicKeyword"] = "missing-whitespace-after-doctype-public-keyword";
    ERR2["missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers"] = "missing-whitespace-between-doctype-public-and-system-identifiers";
    ERR2["missingWhitespaceAfterDoctypeSystemKeyword"] = "missing-whitespace-after-doctype-system-keyword";
    ERR2["missingQuoteBeforeDoctypePublicIdentifier"] = "missing-quote-before-doctype-public-identifier";
    ERR2["missingQuoteBeforeDoctypeSystemIdentifier"] = "missing-quote-before-doctype-system-identifier";
    ERR2["missingDoctypePublicIdentifier"] = "missing-doctype-public-identifier";
    ERR2["missingDoctypeSystemIdentifier"] = "missing-doctype-system-identifier";
    ERR2["abruptDoctypePublicIdentifier"] = "abrupt-doctype-public-identifier";
    ERR2["abruptDoctypeSystemIdentifier"] = "abrupt-doctype-system-identifier";
    ERR2["cdataInHtmlContent"] = "cdata-in-html-content";
    ERR2["incorrectlyOpenedComment"] = "incorrectly-opened-comment";
    ERR2["eofInScriptHtmlCommentLikeText"] = "eof-in-script-html-comment-like-text";
    ERR2["eofInDoctype"] = "eof-in-doctype";
    ERR2["nestedComment"] = "nested-comment";
    ERR2["abruptClosingOfEmptyComment"] = "abrupt-closing-of-empty-comment";
    ERR2["eofInComment"] = "eof-in-comment";
    ERR2["incorrectlyClosedComment"] = "incorrectly-closed-comment";
    ERR2["eofInCdata"] = "eof-in-cdata";
    ERR2["absenceOfDigitsInNumericCharacterReference"] = "absence-of-digits-in-numeric-character-reference";
    ERR2["nullCharacterReference"] = "null-character-reference";
    ERR2["surrogateCharacterReference"] = "surrogate-character-reference";
    ERR2["characterReferenceOutsideUnicodeRange"] = "character-reference-outside-unicode-range";
    ERR2["controlCharacterReference"] = "control-character-reference";
    ERR2["noncharacterCharacterReference"] = "noncharacter-character-reference";
    ERR2["missingWhitespaceBeforeDoctypeName"] = "missing-whitespace-before-doctype-name";
    ERR2["missingDoctypeName"] = "missing-doctype-name";
    ERR2["invalidCharacterSequenceAfterDoctypeName"] = "invalid-character-sequence-after-doctype-name";
    ERR2["duplicateAttribute"] = "duplicate-attribute";
    ERR2["nonConformingDoctype"] = "non-conforming-doctype";
    ERR2["missingDoctype"] = "missing-doctype";
    ERR2["misplacedDoctype"] = "misplaced-doctype";
    ERR2["endTagWithoutMatchingOpenElement"] = "end-tag-without-matching-open-element";
    ERR2["closingOfElementWithOpenChildElements"] = "closing-of-element-with-open-child-elements";
    ERR2["disallowedContentInNoscriptInHead"] = "disallowed-content-in-noscript-in-head";
    ERR2["openElementsLeftAfterEof"] = "open-elements-left-after-eof";
    ERR2["abandonedHeadElementChild"] = "abandoned-head-element-child";
    ERR2["misplacedStartTagForHeadElement"] = "misplaced-start-tag-for-head-element";
    ERR2["nestedNoscriptInHead"] = "nested-noscript-in-head";
    ERR2["eofInElementThatCanContainOnlyText"] = "eof-in-element-that-can-contain-only-text";
  })(ERR = ERR || (ERR = {}));

  // node_modules/parse5/dist/tokenizer/preprocessor.js
  var DEFAULT_BUFFER_WATERLINE = 1 << 16;
  var Preprocessor = class {
    constructor(handler) {
      this.handler = handler;
      this.html = "";
      this.pos = -1;
      this.lastGapPos = -2;
      this.gapStack = [];
      this.skipNextNewLine = false;
      this.lastChunkWritten = false;
      this.endOfChunkHit = false;
      this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
      this.isEol = false;
      this.lineStartPos = 0;
      this.droppedBufferSize = 0;
      this.line = 1;
      this.lastErrOffset = -1;
    }
    get col() {
      return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);
    }
    get offset() {
      return this.droppedBufferSize + this.pos;
    }
    getError(code2) {
      const { line, col, offset } = this;
      return {
        code: code2,
        startLine: line,
        endLine: line,
        startCol: col,
        endCol: col,
        startOffset: offset,
        endOffset: offset
      };
    }
    _err(code2) {
      if (this.handler.onParseError && this.lastErrOffset !== this.offset) {
        this.lastErrOffset = this.offset;
        this.handler.onParseError(this.getError(code2));
      }
    }
    _addGap() {
      this.gapStack.push(this.lastGapPos);
      this.lastGapPos = this.pos;
    }
    _processSurrogate(cp) {
      if (this.pos !== this.html.length - 1) {
        const nextCp = this.html.charCodeAt(this.pos + 1);
        if (isSurrogatePair(nextCp)) {
          this.pos++;
          this._addGap();
          return getSurrogatePairCodePoint(cp, nextCp);
        }
      } else if (!this.lastChunkWritten) {
        this.endOfChunkHit = true;
        return CODE_POINTS.EOF;
      }
      this._err(ERR.surrogateInInputStream);
      return cp;
    }
    willDropParsedChunk() {
      return this.pos > this.bufferWaterline;
    }
    dropParsedChunk() {
      if (this.willDropParsedChunk()) {
        this.html = this.html.substring(this.pos);
        this.lineStartPos -= this.pos;
        this.droppedBufferSize += this.pos;
        this.pos = 0;
        this.lastGapPos = -2;
        this.gapStack.length = 0;
      }
    }
    write(chunk, isLastChunk) {
      if (this.html.length > 0) {
        this.html += chunk;
      } else {
        this.html = chunk;
      }
      this.endOfChunkHit = false;
      this.lastChunkWritten = isLastChunk;
    }
    insertHtmlAtCurrentPos(chunk) {
      this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);
      this.endOfChunkHit = false;
    }
    startsWith(pattern, caseSensitive) {
      if (this.pos + pattern.length > this.html.length) {
        this.endOfChunkHit = !this.lastChunkWritten;
        return false;
      }
      if (caseSensitive) {
        return this.html.startsWith(pattern, this.pos);
      }
      for (let i = 0; i < pattern.length; i++) {
        const cp = this.html.charCodeAt(this.pos + i) | 32;
        if (cp !== pattern.charCodeAt(i)) {
          return false;
        }
      }
      return true;
    }
    peek(offset) {
      const pos = this.pos + offset;
      if (pos >= this.html.length) {
        this.endOfChunkHit = !this.lastChunkWritten;
        return CODE_POINTS.EOF;
      }
      return this.html.charCodeAt(pos);
    }
    advance() {
      this.pos++;
      if (this.isEol) {
        this.isEol = false;
        this.line++;
        this.lineStartPos = this.pos;
      }
      if (this.pos >= this.html.length) {
        this.endOfChunkHit = !this.lastChunkWritten;
        return CODE_POINTS.EOF;
      }
      let cp = this.html.charCodeAt(this.pos);
      if (cp === CODE_POINTS.CARRIAGE_RETURN) {
        this.isEol = true;
        this.skipNextNewLine = true;
        return CODE_POINTS.LINE_FEED;
      }
      if (cp === CODE_POINTS.LINE_FEED) {
        this.isEol = true;
        if (this.skipNextNewLine) {
          this.line--;
          this.skipNextNewLine = false;
          this._addGap();
          return this.advance();
        }
      }
      this.skipNextNewLine = false;
      if (isSurrogate(cp)) {
        cp = this._processSurrogate(cp);
      }
      const isCommonValidRange = this.handler.onParseError === null || cp > 31 && cp < 127 || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.CARRIAGE_RETURN || cp > 159 && cp < 64976;
      if (!isCommonValidRange) {
        this._checkForProblematicCharacters(cp);
      }
      return cp;
    }
    _checkForProblematicCharacters(cp) {
      if (isControlCodePoint(cp)) {
        this._err(ERR.controlCharacterInInputStream);
      } else if (isUndefinedCodePoint(cp)) {
        this._err(ERR.noncharacterInInputStream);
      }
    }
    retreat(count) {
      this.pos -= count;
      while (this.pos < this.lastGapPos) {
        this.lastGapPos = this.gapStack.pop();
        this.pos--;
      }
      this.isEol = false;
    }
  };

  // node_modules/parse5/dist/common/token.js
  var token_exports = {};
  __export(token_exports, {
    TokenType: () => TokenType,
    getTokenAttr: () => getTokenAttr
  });
  init_globals();
  var TokenType;
  (function(TokenType2) {
    TokenType2[TokenType2["CHARACTER"] = 0] = "CHARACTER";
    TokenType2[TokenType2["NULL_CHARACTER"] = 1] = "NULL_CHARACTER";
    TokenType2[TokenType2["WHITESPACE_CHARACTER"] = 2] = "WHITESPACE_CHARACTER";
    TokenType2[TokenType2["START_TAG"] = 3] = "START_TAG";
    TokenType2[TokenType2["END_TAG"] = 4] = "END_TAG";
    TokenType2[TokenType2["COMMENT"] = 5] = "COMMENT";
    TokenType2[TokenType2["DOCTYPE"] = 6] = "DOCTYPE";
    TokenType2[TokenType2["EOF"] = 7] = "EOF";
    TokenType2[TokenType2["HIBERNATION"] = 8] = "HIBERNATION";
  })(TokenType = TokenType || (TokenType = {}));
  function getTokenAttr(token, attrName) {
    for (let i = token.attrs.length - 1; i >= 0; i--) {
      if (token.attrs[i].name === attrName) {
        return token.attrs[i].value;
      }
    }
    return null;
  }

  // node_modules/entities/lib/esm/decode.js
  init_globals();

  // node_modules/entities/lib/esm/generated/decode-data-html.js
  init_globals();
  var decode_data_html_default = new Uint16Array(
    '\u1D41<\xD5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7F\x84\x8B\x90\x95\x98\xA6\xB3\xB9\xC8\xCFlig\u803B\xC6\u40C6P\u803B&\u4026cute\u803B\xC1\u40C1reve;\u4102\u0100iyx}rc\u803B\xC2\u40C2;\u4410r;\uC000\u{1D504}rave\u803B\xC0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9D\xA1on;\u4104f;\uC000\u{1D538}plyFunction;\u6061ing\u803B\xC5\u40C5\u0100cs\xBE\xC3r;\uC000\u{1D49C}ign;\u6254ilde\u803B\xC3\u40C3ml\u803B\xC4\u40C4\u0400aceforsu\xE5\xFB\xFE\u0117\u011C\u0122\u0127\u012A\u0100cr\xEA\xF2kslash;\u6216\u0176\xF6\xF8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\u{1D505}pf;\uC000\u{1D539}eve;\u42D8c\xF2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xA9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xC7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xF2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\u{1D49E}p\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\u{1D507}\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\u{1D53B}\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xEC\u0239o\u0274\u0379\0\0\u037B\xBB\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xE5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\u{1D49F}rok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xD0\u40D0cute\u803B\xC9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xCA\u40CA;\u442Dot;\u4116r;\uC000\u{1D508}rave\u803B\xC8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\u{1D53C}silon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xCB\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\u{1D509}lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\u{1D53D}All;\u6200riertrf;\u6131c\xF2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\u{1D50A};\u62D9pf;\uC000\u{1D53E}eater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\u{1D4A2};\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xF2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xF0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xCD\u40CD\u0100iy\u0713\u0718rc\u803B\xCE\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xCC\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xF3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\u{1D540}a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xCF\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\u{1D50D}pf;\uC000\u{1D541}\u01E3\u07C7\0\u07CCr;\uC000\u{1D4A5}rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\u{1D50E}pf;\uC000\u{1D542}cr;\uC000\u{1D4A6}\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xE1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\u{1D50F}\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xE1\u03BFight\xE1\u03CAf;\uC000\u{1D543}er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xF2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\u{1D510}nusPlus;\u6213pf;\uC000\u{1D544}c\xF2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xEB\u0AD9eryThi\xEE\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xF2\u0673essLes\xF3\u0A48Line;\u400Ar;\uC000\u{1D511}\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\u{1D4A9}ilde\u803B\xD1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xD3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xD4\u40D4;\u441Eblac;\u4150r;\uC000\u{1D512}rave\u803B\xD2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\u{1D546}enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\u{1D4AA}ash\u803B\xD8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xD5\u40D5es;\u6A37ml\u803B\xD6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\u{1D513}i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xE5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\u{1D4AB};\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\u{1D514}pf;\u611Acr;\uC000\u{1D4AC}\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xAE\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xBB\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\u{1D516}ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xBB\u041EeftArrow\xBB\u089AightArrow\xBB\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\u{1D54A}\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\u{1D4AE}ar;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xE1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xBB\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xDE\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\u{1D517}\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\u{1D54B}ipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\u{1D4AF}rok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xDA\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xDB\u40DB;\u4423blac;\u4170r;\uC000\u{1D518}rave\u803B\xD9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\u{1D54C}\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xE1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\u{1D4B0}ilde;\u4168ml\u803B\xDC\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\u{1D519}pf;\uC000\u{1D54D}cr;\uC000\u{1D4B1}dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\u{1D51A}pf;\uC000\u{1D54E}cr;\uC000\u{1D4B2}\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\u{1D51B};\u439Epf;\uC000\u{1D54F}cr;\uC000\u{1D4B3}\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xDD\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\u{1D51C}pf;\uC000\u{1D550}cr;\uC000\u{1D4B4}ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xE8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\u{1D4B5}\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xE1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xE2\u40E2te\u80BB\xB4\u0306;\u4430lig\u803B\xE6\u40E6\u0100;r\xB2\u15BA;\uC000\u{1D51E}rave\u803B\xE0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xE8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xBB\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xBB\xB9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\u{1D552}\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xF1\u1683ing\u803B\xE5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\u{1D4B6};\u402Amp\u0100;e\u12C1\u16AF\xF1\u0288ilde\u803B\xE3\u40E3ml\u803B\xE4\u40E4\u0100ci\u16C2\u16C8onin\xF4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xBB\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xE9\u170Cno\xF5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\u{1D51F}g\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xF0\u0760rc;\u65EFp\xBB\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xE5\u1444\xE5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\u{1D553}\u0100;t\u13CB\u1863om\xBB\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xA6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\u{1D4B7}mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xBB\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xEE\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xE7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xB8\u01ADptyv;\u69B2t\u8100\xA2;e\u1A2D\u1A2E\u40A2r\xE4\u01B2r;\uC000\u{1D520}\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xBB\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xBB\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xBB\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xC7\xC6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xEE\u1160e\u0100mx\u1AF1\u1AF6ent\xBB\u1AE9e\xF3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xF4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\u{1D554}o\xE4\u0254\u8100\xA9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\u{1D4B8}\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xE3\u1B73u\xE3\u1B75ee;\u62CEedge;\u62CFen\u803B\xA4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xBB\u1B80ight\xBB\u1BBDe\xE4\u1BDD\u0100ci\u1C01\u1C07onin\xF4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xF2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xF2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xBB\u090A\u016B\u1C61\u1C67arow;\u690Fa\xE3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xB0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\u{1D521}ar\u0100lr\u1CB3\u1CB5\xBB\u08DC\xBB\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xF7;o\u1CE7\u1CF0ntimes;\u62C7n\xF8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\u{1D555}\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xE5\xFAn\u0180adh\u112E\u1D5D\u1D67ownarrow\xF3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xF4\u1CB4igh\xF4\u1CB6\u0162\u1D7F\u1D85karo\xF7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\u{1D4B9};\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xF2\u0429a\xF2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xF4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xE9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xEA\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\u{1D522}\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xE8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xBB\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\u{1D556}\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xBB\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xBB\u1E2E\u0269\u1EF9\0\0\u1EFB\xED\u0548ant\u0100gl\u1F02\u1F06tr\xBB\u1E5Dess\xBB\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xF4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xF0\u40F0\u0100mr\u1F53\u1F57l\u803B\xEB\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xF4\u056E\u0100eo\u1F6C\u1F74ctatio\xEE\u0559nential\xE5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xF1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\u{1D523}lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\u{1D557}\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xBD\u40BD;\u6153\u803B\xBC\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xBE\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\u{1D4BB}\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xF4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\u{1D524}\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xBB\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\u{1D558}\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xF8\u209Er;\u6978q\u0100lq\u063F\u2196les\xF3\u2088i\xED\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xC5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xF2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xF0\u1484f\xBB\u2024il\xF4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xBB\u220Alip;\u6026con;\u62B9r;\uC000\u{1D525}s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\u{1D559}bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\u{1D4BD}as\xE8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xBB\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xED\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xEE\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xA1\u40A1\u0100fr\u039F\u22C9;\uC000\u{1D526}rave\u803B\xEC\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xE5\u078Ear\xF4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xF4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xF3\u1563\xE3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\u{1D55A}a;\u43B9uest\u803B\xBF\u40BF\u0100ci\u238A\u238Fr;\uC000\u{1D4BE}n\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xEF\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\u{1D527}ath;\u4237pf;\uC000\u{1D55B}\u01E3\u23EC\0\u23F1r;\uC000\u{1D4BF}rcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\u{1D528}reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\u{1D55C}cr;\uC000\u{1D4C0}\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xF2\u09C6\xF2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xEE\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xE5\u088E;\u6A85uo\u803B\xAB\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xEB\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xEC\u08B0\xE2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xE9\u24F6arpoon\u0100du\u25AF\u25B4own\xBB\u045Ap\xBB\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xF3\u0F98quigarro\xF7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xF4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xF8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xF4\u0989gt\xF2\u248C\xF4\u099Bi\xED\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\u{1D529}\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xF2\u25C1orne\xF2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xBB\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xBB\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xEB\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xE1\u09F2apsto;\u67FCight\xE1\u09FDparrow\u0100lr\u2725\u2729ef\xF4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\u{1D55D}us;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xE1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xBB\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xF2\u08A8orne\xF2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\u{1D4C1}m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xE5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xC5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xAF\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xBB\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xEE\u048Cef\xF4\u090F\xF0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xBB\u1626r;\uC000\u{1D52A}o;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xB5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xF4\u16A7ir;\u6AF0ot\u80BB\xB7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xF2\u2212\xF0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\u{1D55E}\u0100ct\u28F8\u28FDr;\uC000\u{1D4C2}pos\xBB\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xBB\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xF8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xA0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xF6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xED\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\u{1D52B}\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xF4\u0BE2i\xED\u0BEA\u0100;r\u0BB6\u2A81\xBB\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xF2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xF2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xF7\u2AC1ightarro\xF7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xF4\u0C55\u0100;s\u0C55\u2AF4\xBB\u0C36i\xED\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xE4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\u{1D55F}\u8180\xAC;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xEC\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xE5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xF1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xF2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xBB\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xE5\u0D45;\uC000\u{1D4C3}ort\u026D\u2B05\0\0\u2BD6ar\xE1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xE5\u0CF8\xE5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xF1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xEC\u0BD7lde\u803B\xF1\u40F1\xE7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xF1\u0C26ight\u0100;e\u0CCB\u2C65\xF1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xF3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xF4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\u{1D52C}\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xF2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xF2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xE5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\u{1D560}\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xF2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xBB\u2DFF\u803B\xAA\u40AA\u803B\xBA\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xF2\u2E01ash\u803B\xF8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xF5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xF6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xB6;l\u2E6D\u2E6E\u40B6le\xEC\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\u{1D52D}\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xF4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xBB\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xF6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xB1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\u{1D561}nd\u803B\xA3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xE5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xF8\u2F43urlye\xF1\u0ED9\xF1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xED\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xF0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xEF\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\u{1D4C5};\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\u{1D52E}pf;\uC000\u{1D562}rime;\u6057cr;\uC000\u{1D4C6}\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xF3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xF1\u1F19\xF4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xF2\u10B3\xF2\u03DDail;\u691Car\xF2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xE3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xE5\u0FD1uo\u803B\xBB\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xEB\u225D\xF0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xF3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xF2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xEC\u0FF2\xE2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xE5\u10BBar\xF4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\u{1D52F}\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xBB\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xE9\u30C8arpoon\u0100du\u31BB\u31BFow\xEE\u317Ep\xBB\u1092eft\u0100ah\u31CA\u31D0rrow\xF3\u0FEAarpoon\xF3\u0551ightarrows;\u61C9quigarro\xF7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xF1\u1F32\u0180ahm\u320D\u3210\u3213r\xF2\u0FEAa\xF2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xBB\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xEB\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\u{1D563}us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xF2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\u{1D4C7}\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xE5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xEF\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xE5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xED\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xEB\u2228\u0100;o\u0A36\u0A34t\u803B\xA7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xF0nu\xF3\xF1t;\u6736r\u0100;o\u3376\u2055\uC000\u{1D530}\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xE4\u1464ara\xEC\u2E6F\u803B\xAD\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xF2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xE9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\u{1D564}a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xBB\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xF1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xF1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xBB\u117Car\xF2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\u{1D4C8}tm\xEE\xF1i\xEC\u3415ar\xE6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xEE\u1EE0h\xE9\u2EAFs\xBB\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xF8\u32FAurlye\xF1\u11FE\xF1\u11F3\u0180aes\u3582\u3588\u331Bppro\xF8\u331Aq\xF1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xB9\u40B9\u803B\xB2\u40B2\u803B\xB3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xEB\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xDF\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xEB\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\u{1D531}\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xF8\u12C1im\xBB\u12ACs\xF0\u129E\u0100as\u36BA\u36AE\xF0\u12C1rn\u803B\xFE\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xD7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xE1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\u{1D565}rk;\u6ADA\xE1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xE5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xBB\u1DBBeft\u0100;e\u2800\u373E\xF1\u092E;\u625Cight\u0100;e\u32AA\u374B\xF1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\u{1D4C9};\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xF4\u1777head\u0100lr\u3797\u37A0eftarro\xF7\u084Fightarrow\xBB\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xF2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xFA\u40FA\xF2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xFB\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xF2\u13ADlac;\u4171a\xF2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\u{1D532}rave\u803B\xF9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xBB\u0957\xBB\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xBB\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xA8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\u{1D566}\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xE1\u13B3arpoon\u0100lr\u3888\u388Cef\xF4\u382Digh\xF4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xBB\u13FAon\xBB\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xBB\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\u{1D4CA}\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xBB\u1813\u0100am\u38EF\u38F2r\xF2\u38A8l\u803B\xFC\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xF2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xE8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xE1\u2415othin\xE7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xF4\u2FB5\u0100;h\u13B7\u3962\xEF\u318D\u0100iu\u3969\u396Dgm\xE1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xE1\u369Ciangle\u0100lr\u39AA\u39AFeft\xBB\u0925ight\xBB\u1051y;\u4432ash\xBB\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xF2\u1469r;\uC000\u{1D533}tr\xE9\u39AEsu\u0100bp\u39EF\u39F1\xBB\u0D1C\xBB\u0D59pf;\uC000\u{1D567}ro\xF0\u0EFBtr\xE9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\u{1D4CB}\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xBB\u397En\u0100Ee\u3992\u3A1E\xBB\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\u{1D534}pf;\uC000\u{1D568}\u0100;e\u1479\u3A66at\xE8\u1479cr;\uC000\u{1D4CC}\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xE9\u17D1r;\uC000\u{1D535}\u0100Aa\u3A94\u3A97r\xF2\u03C3r\xF2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xF2\u03B8r\xF2\u09EBa\xF0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\u{1D569}im\xE5\u17B2\u0100Aa\u3AC7\u3ACAr\xF2\u03CEr\xF2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\u{1D4CD}\u0100pt\u17D6\u3ADCr\xE9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xFD\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xA5\u40A5r;\uC000\u{1D536}cy;\u4457pf;\uC000\u{1D56A}cr;\uC000\u{1D4CE}\u0100cm\u3B26\u3B29y;\u444El\u803B\xFF\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xE6\u155Fa;\u43B6r;\uC000\u{1D537}cy;\u4436grarr;\u61DDpf;\uC000\u{1D56B}cr;\uC000\u{1D4CF}\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map((c) => c.charCodeAt(0))
  );

  // node_modules/entities/lib/esm/generated/decode-data-xml.js
  init_globals();
  var decode_data_xml_default = new Uint16Array(
    "\u0200aglq	\x1B\u026D\0\0p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map((c) => c.charCodeAt(0))
  );

  // node_modules/entities/lib/esm/decode_codepoint.js
  init_globals();
  var _a2;
  var decodeMap = /* @__PURE__ */ new Map([
    [0, 65533],
    [128, 8364],
    [130, 8218],
    [131, 402],
    [132, 8222],
    [133, 8230],
    [134, 8224],
    [135, 8225],
    [136, 710],
    [137, 8240],
    [138, 352],
    [139, 8249],
    [140, 338],
    [142, 381],
    [145, 8216],
    [146, 8217],
    [147, 8220],
    [148, 8221],
    [149, 8226],
    [150, 8211],
    [151, 8212],
    [152, 732],
    [153, 8482],
    [154, 353],
    [155, 8250],
    [156, 339],
    [158, 382],
    [159, 376]
  ]);
  var fromCodePoint = (_a2 = String.fromCodePoint) !== null && _a2 !== void 0 ? _a2 : function(codePoint) {
    let output = "";
    if (codePoint > 65535) {
      codePoint -= 65536;
      output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    output += String.fromCharCode(codePoint);
    return output;
  };
  function replaceCodePoint(codePoint) {
    var _a3;
    if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
      return 65533;
    }
    return (_a3 = decodeMap.get(codePoint)) !== null && _a3 !== void 0 ? _a3 : codePoint;
  }
  function decodeCodePoint(codePoint) {
    return fromCodePoint(replaceCodePoint(codePoint));
  }

  // node_modules/entities/lib/esm/decode.js
  var CharCodes;
  (function(CharCodes2) {
    CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
    CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
    CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
    CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
    CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
    CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
    CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
    CharCodes2[CharCodes2["To_LOWER_BIT"] = 32] = "To_LOWER_BIT";
  })(CharCodes || (CharCodes = {}));
  var BinTrieFlags;
  (function(BinTrieFlags2) {
    BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
    BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
    BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
  })(BinTrieFlags || (BinTrieFlags = {}));
  function getDecoder(decodeTree) {
    return function decodeHTMLBinary(str, strict) {
      let ret = "";
      let lastIdx = 0;
      let strIdx = 0;
      while ((strIdx = str.indexOf("&", strIdx)) >= 0) {
        ret += str.slice(lastIdx, strIdx);
        lastIdx = strIdx;
        strIdx += 1;
        if (str.charCodeAt(strIdx) === CharCodes.NUM) {
          let start = strIdx + 1;
          let base = 10;
          let cp = str.charCodeAt(start);
          if ((cp | CharCodes.To_LOWER_BIT) === CharCodes.LOWER_X) {
            base = 16;
            strIdx += 1;
            start += 1;
          }
          do
            cp = str.charCodeAt(++strIdx);
          while (cp >= CharCodes.ZERO && cp <= CharCodes.NINE || base === 16 && (cp | CharCodes.To_LOWER_BIT) >= CharCodes.LOWER_A && (cp | CharCodes.To_LOWER_BIT) <= CharCodes.LOWER_F);
          if (start !== strIdx) {
            const entity = str.substring(start, strIdx);
            const parsed = parseInt(entity, base);
            if (str.charCodeAt(strIdx) === CharCodes.SEMI) {
              strIdx += 1;
            } else if (strict) {
              continue;
            }
            ret += decodeCodePoint(parsed);
            lastIdx = strIdx;
          }
          continue;
        }
        let resultIdx = 0;
        let excess = 1;
        let treeIdx = 0;
        let current = decodeTree[treeIdx];
        for (; strIdx < str.length; strIdx++, excess++) {
          treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));
          if (treeIdx < 0)
            break;
          current = decodeTree[treeIdx];
          const masked = current & BinTrieFlags.VALUE_LENGTH;
          if (masked) {
            if (!strict || str.charCodeAt(strIdx) === CharCodes.SEMI) {
              resultIdx = treeIdx;
              excess = 0;
            }
            const valueLength = (masked >> 14) - 1;
            if (valueLength === 0)
              break;
            treeIdx += valueLength;
          }
        }
        if (resultIdx !== 0) {
          const valueLength = (decodeTree[resultIdx] & BinTrieFlags.VALUE_LENGTH) >> 14;
          ret += valueLength === 1 ? String.fromCharCode(decodeTree[resultIdx] & ~BinTrieFlags.VALUE_LENGTH) : valueLength === 2 ? String.fromCharCode(decodeTree[resultIdx + 1]) : String.fromCharCode(decodeTree[resultIdx + 1], decodeTree[resultIdx + 2]);
          lastIdx = strIdx - excess + 1;
        }
      }
      return ret + str.slice(lastIdx);
    };
  }
  function determineBranch(decodeTree, current, nodeIdx, char) {
    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
    if (branchCount === 0) {
      return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
    }
    if (jumpOffset) {
      const value = char - jumpOffset;
      return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
    }
    let lo = nodeIdx;
    let hi = lo + branchCount - 1;
    while (lo <= hi) {
      const mid = lo + hi >>> 1;
      const midVal = decodeTree[mid];
      if (midVal < char) {
        lo = mid + 1;
      } else if (midVal > char) {
        hi = mid - 1;
      } else {
        return decodeTree[mid + branchCount];
      }
    }
    return -1;
  }
  var htmlDecoder = getDecoder(decode_data_html_default);
  var xmlDecoder = getDecoder(decode_data_xml_default);

  // node_modules/parse5/dist/common/html.js
  var html_exports = {};
  __export(html_exports, {
    ATTRS: () => ATTRS,
    DOCUMENT_MODE: () => DOCUMENT_MODE,
    NS: () => NS,
    SPECIAL_ELEMENTS: () => SPECIAL_ELEMENTS,
    TAG_ID: () => TAG_ID,
    TAG_NAMES: () => TAG_NAMES,
    getTagID: () => getTagID,
    hasUnescapedText: () => hasUnescapedText,
    isNumberedHeader: () => isNumberedHeader
  });
  init_globals();
  var NS;
  (function(NS2) {
    NS2["HTML"] = "http://www.w3.org/1999/xhtml";
    NS2["MATHML"] = "http://www.w3.org/1998/Math/MathML";
    NS2["SVG"] = "http://www.w3.org/2000/svg";
    NS2["XLINK"] = "http://www.w3.org/1999/xlink";
    NS2["XML"] = "http://www.w3.org/XML/1998/namespace";
    NS2["XMLNS"] = "http://www.w3.org/2000/xmlns/";
  })(NS = NS || (NS = {}));
  var ATTRS;
  (function(ATTRS2) {
    ATTRS2["TYPE"] = "type";
    ATTRS2["ACTION"] = "action";
    ATTRS2["ENCODING"] = "encoding";
    ATTRS2["PROMPT"] = "prompt";
    ATTRS2["NAME"] = "name";
    ATTRS2["COLOR"] = "color";
    ATTRS2["FACE"] = "face";
    ATTRS2["SIZE"] = "size";
  })(ATTRS = ATTRS || (ATTRS = {}));
  var DOCUMENT_MODE;
  (function(DOCUMENT_MODE2) {
    DOCUMENT_MODE2["NO_QUIRKS"] = "no-quirks";
    DOCUMENT_MODE2["QUIRKS"] = "quirks";
    DOCUMENT_MODE2["LIMITED_QUIRKS"] = "limited-quirks";
  })(DOCUMENT_MODE = DOCUMENT_MODE || (DOCUMENT_MODE = {}));
  var TAG_NAMES;
  (function(TAG_NAMES2) {
    TAG_NAMES2["A"] = "a";
    TAG_NAMES2["ADDRESS"] = "address";
    TAG_NAMES2["ANNOTATION_XML"] = "annotation-xml";
    TAG_NAMES2["APPLET"] = "applet";
    TAG_NAMES2["AREA"] = "area";
    TAG_NAMES2["ARTICLE"] = "article";
    TAG_NAMES2["ASIDE"] = "aside";
    TAG_NAMES2["B"] = "b";
    TAG_NAMES2["BASE"] = "base";
    TAG_NAMES2["BASEFONT"] = "basefont";
    TAG_NAMES2["BGSOUND"] = "bgsound";
    TAG_NAMES2["BIG"] = "big";
    TAG_NAMES2["BLOCKQUOTE"] = "blockquote";
    TAG_NAMES2["BODY"] = "body";
    TAG_NAMES2["BR"] = "br";
    TAG_NAMES2["BUTTON"] = "button";
    TAG_NAMES2["CAPTION"] = "caption";
    TAG_NAMES2["CENTER"] = "center";
    TAG_NAMES2["CODE"] = "code";
    TAG_NAMES2["COL"] = "col";
    TAG_NAMES2["COLGROUP"] = "colgroup";
    TAG_NAMES2["DD"] = "dd";
    TAG_NAMES2["DESC"] = "desc";
    TAG_NAMES2["DETAILS"] = "details";
    TAG_NAMES2["DIALOG"] = "dialog";
    TAG_NAMES2["DIR"] = "dir";
    TAG_NAMES2["DIV"] = "div";
    TAG_NAMES2["DL"] = "dl";
    TAG_NAMES2["DT"] = "dt";
    TAG_NAMES2["EM"] = "em";
    TAG_NAMES2["EMBED"] = "embed";
    TAG_NAMES2["FIELDSET"] = "fieldset";
    TAG_NAMES2["FIGCAPTION"] = "figcaption";
    TAG_NAMES2["FIGURE"] = "figure";
    TAG_NAMES2["FONT"] = "font";
    TAG_NAMES2["FOOTER"] = "footer";
    TAG_NAMES2["FOREIGN_OBJECT"] = "foreignObject";
    TAG_NAMES2["FORM"] = "form";
    TAG_NAMES2["FRAME"] = "frame";
    TAG_NAMES2["FRAMESET"] = "frameset";
    TAG_NAMES2["H1"] = "h1";
    TAG_NAMES2["H2"] = "h2";
    TAG_NAMES2["H3"] = "h3";
    TAG_NAMES2["H4"] = "h4";
    TAG_NAMES2["H5"] = "h5";
    TAG_NAMES2["H6"] = "h6";
    TAG_NAMES2["HEAD"] = "head";
    TAG_NAMES2["HEADER"] = "header";
    TAG_NAMES2["HGROUP"] = "hgroup";
    TAG_NAMES2["HR"] = "hr";
    TAG_NAMES2["HTML"] = "html";
    TAG_NAMES2["I"] = "i";
    TAG_NAMES2["IMG"] = "img";
    TAG_NAMES2["IMAGE"] = "image";
    TAG_NAMES2["INPUT"] = "input";
    TAG_NAMES2["IFRAME"] = "iframe";
    TAG_NAMES2["KEYGEN"] = "keygen";
    TAG_NAMES2["LABEL"] = "label";
    TAG_NAMES2["LI"] = "li";
    TAG_NAMES2["LINK"] = "link";
    TAG_NAMES2["LISTING"] = "listing";
    TAG_NAMES2["MAIN"] = "main";
    TAG_NAMES2["MALIGNMARK"] = "malignmark";
    TAG_NAMES2["MARQUEE"] = "marquee";
    TAG_NAMES2["MATH"] = "math";
    TAG_NAMES2["MENU"] = "menu";
    TAG_NAMES2["META"] = "meta";
    TAG_NAMES2["MGLYPH"] = "mglyph";
    TAG_NAMES2["MI"] = "mi";
    TAG_NAMES2["MO"] = "mo";
    TAG_NAMES2["MN"] = "mn";
    TAG_NAMES2["MS"] = "ms";
    TAG_NAMES2["MTEXT"] = "mtext";
    TAG_NAMES2["NAV"] = "nav";
    TAG_NAMES2["NOBR"] = "nobr";
    TAG_NAMES2["NOFRAMES"] = "noframes";
    TAG_NAMES2["NOEMBED"] = "noembed";
    TAG_NAMES2["NOSCRIPT"] = "noscript";
    TAG_NAMES2["OBJECT"] = "object";
    TAG_NAMES2["OL"] = "ol";
    TAG_NAMES2["OPTGROUP"] = "optgroup";
    TAG_NAMES2["OPTION"] = "option";
    TAG_NAMES2["P"] = "p";
    TAG_NAMES2["PARAM"] = "param";
    TAG_NAMES2["PLAINTEXT"] = "plaintext";
    TAG_NAMES2["PRE"] = "pre";
    TAG_NAMES2["RB"] = "rb";
    TAG_NAMES2["RP"] = "rp";
    TAG_NAMES2["RT"] = "rt";
    TAG_NAMES2["RTC"] = "rtc";
    TAG_NAMES2["RUBY"] = "ruby";
    TAG_NAMES2["S"] = "s";
    TAG_NAMES2["SCRIPT"] = "script";
    TAG_NAMES2["SECTION"] = "section";
    TAG_NAMES2["SELECT"] = "select";
    TAG_NAMES2["SOURCE"] = "source";
    TAG_NAMES2["SMALL"] = "small";
    TAG_NAMES2["SPAN"] = "span";
    TAG_NAMES2["STRIKE"] = "strike";
    TAG_NAMES2["STRONG"] = "strong";
    TAG_NAMES2["STYLE"] = "style";
    TAG_NAMES2["SUB"] = "sub";
    TAG_NAMES2["SUMMARY"] = "summary";
    TAG_NAMES2["SUP"] = "sup";
    TAG_NAMES2["TABLE"] = "table";
    TAG_NAMES2["TBODY"] = "tbody";
    TAG_NAMES2["TEMPLATE"] = "template";
    TAG_NAMES2["TEXTAREA"] = "textarea";
    TAG_NAMES2["TFOOT"] = "tfoot";
    TAG_NAMES2["TD"] = "td";
    TAG_NAMES2["TH"] = "th";
    TAG_NAMES2["THEAD"] = "thead";
    TAG_NAMES2["TITLE"] = "title";
    TAG_NAMES2["TR"] = "tr";
    TAG_NAMES2["TRACK"] = "track";
    TAG_NAMES2["TT"] = "tt";
    TAG_NAMES2["U"] = "u";
    TAG_NAMES2["UL"] = "ul";
    TAG_NAMES2["SVG"] = "svg";
    TAG_NAMES2["VAR"] = "var";
    TAG_NAMES2["WBR"] = "wbr";
    TAG_NAMES2["XMP"] = "xmp";
  })(TAG_NAMES = TAG_NAMES || (TAG_NAMES = {}));
  var TAG_ID;
  (function(TAG_ID2) {
    TAG_ID2[TAG_ID2["UNKNOWN"] = 0] = "UNKNOWN";
    TAG_ID2[TAG_ID2["A"] = 1] = "A";
    TAG_ID2[TAG_ID2["ADDRESS"] = 2] = "ADDRESS";
    TAG_ID2[TAG_ID2["ANNOTATION_XML"] = 3] = "ANNOTATION_XML";
    TAG_ID2[TAG_ID2["APPLET"] = 4] = "APPLET";
    TAG_ID2[TAG_ID2["AREA"] = 5] = "AREA";
    TAG_ID2[TAG_ID2["ARTICLE"] = 6] = "ARTICLE";
    TAG_ID2[TAG_ID2["ASIDE"] = 7] = "ASIDE";
    TAG_ID2[TAG_ID2["B"] = 8] = "B";
    TAG_ID2[TAG_ID2["BASE"] = 9] = "BASE";
    TAG_ID2[TAG_ID2["BASEFONT"] = 10] = "BASEFONT";
    TAG_ID2[TAG_ID2["BGSOUND"] = 11] = "BGSOUND";
    TAG_ID2[TAG_ID2["BIG"] = 12] = "BIG";
    TAG_ID2[TAG_ID2["BLOCKQUOTE"] = 13] = "BLOCKQUOTE";
    TAG_ID2[TAG_ID2["BODY"] = 14] = "BODY";
    TAG_ID2[TAG_ID2["BR"] = 15] = "BR";
    TAG_ID2[TAG_ID2["BUTTON"] = 16] = "BUTTON";
    TAG_ID2[TAG_ID2["CAPTION"] = 17] = "CAPTION";
    TAG_ID2[TAG_ID2["CENTER"] = 18] = "CENTER";
    TAG_ID2[TAG_ID2["CODE"] = 19] = "CODE";
    TAG_ID2[TAG_ID2["COL"] = 20] = "COL";
    TAG_ID2[TAG_ID2["COLGROUP"] = 21] = "COLGROUP";
    TAG_ID2[TAG_ID2["DD"] = 22] = "DD";
    TAG_ID2[TAG_ID2["DESC"] = 23] = "DESC";
    TAG_ID2[TAG_ID2["DETAILS"] = 24] = "DETAILS";
    TAG_ID2[TAG_ID2["DIALOG"] = 25] = "DIALOG";
    TAG_ID2[TAG_ID2["DIR"] = 26] = "DIR";
    TAG_ID2[TAG_ID2["DIV"] = 27] = "DIV";
    TAG_ID2[TAG_ID2["DL"] = 28] = "DL";
    TAG_ID2[TAG_ID2["DT"] = 29] = "DT";
    TAG_ID2[TAG_ID2["EM"] = 30] = "EM";
    TAG_ID2[TAG_ID2["EMBED"] = 31] = "EMBED";
    TAG_ID2[TAG_ID2["FIELDSET"] = 32] = "FIELDSET";
    TAG_ID2[TAG_ID2["FIGCAPTION"] = 33] = "FIGCAPTION";
    TAG_ID2[TAG_ID2["FIGURE"] = 34] = "FIGURE";
    TAG_ID2[TAG_ID2["FONT"] = 35] = "FONT";
    TAG_ID2[TAG_ID2["FOOTER"] = 36] = "FOOTER";
    TAG_ID2[TAG_ID2["FOREIGN_OBJECT"] = 37] = "FOREIGN_OBJECT";
    TAG_ID2[TAG_ID2["FORM"] = 38] = "FORM";
    TAG_ID2[TAG_ID2["FRAME"] = 39] = "FRAME";
    TAG_ID2[TAG_ID2["FRAMESET"] = 40] = "FRAMESET";
    TAG_ID2[TAG_ID2["H1"] = 41] = "H1";
    TAG_ID2[TAG_ID2["H2"] = 42] = "H2";
    TAG_ID2[TAG_ID2["H3"] = 43] = "H3";
    TAG_ID2[TAG_ID2["H4"] = 44] = "H4";
    TAG_ID2[TAG_ID2["H5"] = 45] = "H5";
    TAG_ID2[TAG_ID2["H6"] = 46] = "H6";
    TAG_ID2[TAG_ID2["HEAD"] = 47] = "HEAD";
    TAG_ID2[TAG_ID2["HEADER"] = 48] = "HEADER";
    TAG_ID2[TAG_ID2["HGROUP"] = 49] = "HGROUP";
    TAG_ID2[TAG_ID2["HR"] = 50] = "HR";
    TAG_ID2[TAG_ID2["HTML"] = 51] = "HTML";
    TAG_ID2[TAG_ID2["I"] = 52] = "I";
    TAG_ID2[TAG_ID2["IMG"] = 53] = "IMG";
    TAG_ID2[TAG_ID2["IMAGE"] = 54] = "IMAGE";
    TAG_ID2[TAG_ID2["INPUT"] = 55] = "INPUT";
    TAG_ID2[TAG_ID2["IFRAME"] = 56] = "IFRAME";
    TAG_ID2[TAG_ID2["KEYGEN"] = 57] = "KEYGEN";
    TAG_ID2[TAG_ID2["LABEL"] = 58] = "LABEL";
    TAG_ID2[TAG_ID2["LI"] = 59] = "LI";
    TAG_ID2[TAG_ID2["LINK"] = 60] = "LINK";
    TAG_ID2[TAG_ID2["LISTING"] = 61] = "LISTING";
    TAG_ID2[TAG_ID2["MAIN"] = 62] = "MAIN";
    TAG_ID2[TAG_ID2["MALIGNMARK"] = 63] = "MALIGNMARK";
    TAG_ID2[TAG_ID2["MARQUEE"] = 64] = "MARQUEE";
    TAG_ID2[TAG_ID2["MATH"] = 65] = "MATH";
    TAG_ID2[TAG_ID2["MENU"] = 66] = "MENU";
    TAG_ID2[TAG_ID2["META"] = 67] = "META";
    TAG_ID2[TAG_ID2["MGLYPH"] = 68] = "MGLYPH";
    TAG_ID2[TAG_ID2["MI"] = 69] = "MI";
    TAG_ID2[TAG_ID2["MO"] = 70] = "MO";
    TAG_ID2[TAG_ID2["MN"] = 71] = "MN";
    TAG_ID2[TAG_ID2["MS"] = 72] = "MS";
    TAG_ID2[TAG_ID2["MTEXT"] = 73] = "MTEXT";
    TAG_ID2[TAG_ID2["NAV"] = 74] = "NAV";
    TAG_ID2[TAG_ID2["NOBR"] = 75] = "NOBR";
    TAG_ID2[TAG_ID2["NOFRAMES"] = 76] = "NOFRAMES";
    TAG_ID2[TAG_ID2["NOEMBED"] = 77] = "NOEMBED";
    TAG_ID2[TAG_ID2["NOSCRIPT"] = 78] = "NOSCRIPT";
    TAG_ID2[TAG_ID2["OBJECT"] = 79] = "OBJECT";
    TAG_ID2[TAG_ID2["OL"] = 80] = "OL";
    TAG_ID2[TAG_ID2["OPTGROUP"] = 81] = "OPTGROUP";
    TAG_ID2[TAG_ID2["OPTION"] = 82] = "OPTION";
    TAG_ID2[TAG_ID2["P"] = 83] = "P";
    TAG_ID2[TAG_ID2["PARAM"] = 84] = "PARAM";
    TAG_ID2[TAG_ID2["PLAINTEXT"] = 85] = "PLAINTEXT";
    TAG_ID2[TAG_ID2["PRE"] = 86] = "PRE";
    TAG_ID2[TAG_ID2["RB"] = 87] = "RB";
    TAG_ID2[TAG_ID2["RP"] = 88] = "RP";
    TAG_ID2[TAG_ID2["RT"] = 89] = "RT";
    TAG_ID2[TAG_ID2["RTC"] = 90] = "RTC";
    TAG_ID2[TAG_ID2["RUBY"] = 91] = "RUBY";
    TAG_ID2[TAG_ID2["S"] = 92] = "S";
    TAG_ID2[TAG_ID2["SCRIPT"] = 93] = "SCRIPT";
    TAG_ID2[TAG_ID2["SECTION"] = 94] = "SECTION";
    TAG_ID2[TAG_ID2["SELECT"] = 95] = "SELECT";
    TAG_ID2[TAG_ID2["SOURCE"] = 96] = "SOURCE";
    TAG_ID2[TAG_ID2["SMALL"] = 97] = "SMALL";
    TAG_ID2[TAG_ID2["SPAN"] = 98] = "SPAN";
    TAG_ID2[TAG_ID2["STRIKE"] = 99] = "STRIKE";
    TAG_ID2[TAG_ID2["STRONG"] = 100] = "STRONG";
    TAG_ID2[TAG_ID2["STYLE"] = 101] = "STYLE";
    TAG_ID2[TAG_ID2["SUB"] = 102] = "SUB";
    TAG_ID2[TAG_ID2["SUMMARY"] = 103] = "SUMMARY";
    TAG_ID2[TAG_ID2["SUP"] = 104] = "SUP";
    TAG_ID2[TAG_ID2["TABLE"] = 105] = "TABLE";
    TAG_ID2[TAG_ID2["TBODY"] = 106] = "TBODY";
    TAG_ID2[TAG_ID2["TEMPLATE"] = 107] = "TEMPLATE";
    TAG_ID2[TAG_ID2["TEXTAREA"] = 108] = "TEXTAREA";
    TAG_ID2[TAG_ID2["TFOOT"] = 109] = "TFOOT";
    TAG_ID2[TAG_ID2["TD"] = 110] = "TD";
    TAG_ID2[TAG_ID2["TH"] = 111] = "TH";
    TAG_ID2[TAG_ID2["THEAD"] = 112] = "THEAD";
    TAG_ID2[TAG_ID2["TITLE"] = 113] = "TITLE";
    TAG_ID2[TAG_ID2["TR"] = 114] = "TR";
    TAG_ID2[TAG_ID2["TRACK"] = 115] = "TRACK";
    TAG_ID2[TAG_ID2["TT"] = 116] = "TT";
    TAG_ID2[TAG_ID2["U"] = 117] = "U";
    TAG_ID2[TAG_ID2["UL"] = 118] = "UL";
    TAG_ID2[TAG_ID2["SVG"] = 119] = "SVG";
    TAG_ID2[TAG_ID2["VAR"] = 120] = "VAR";
    TAG_ID2[TAG_ID2["WBR"] = 121] = "WBR";
    TAG_ID2[TAG_ID2["XMP"] = 122] = "XMP";
  })(TAG_ID = TAG_ID || (TAG_ID = {}));
  var TAG_NAME_TO_ID = /* @__PURE__ */ new Map([
    [TAG_NAMES.A, TAG_ID.A],
    [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],
    [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],
    [TAG_NAMES.APPLET, TAG_ID.APPLET],
    [TAG_NAMES.AREA, TAG_ID.AREA],
    [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],
    [TAG_NAMES.ASIDE, TAG_ID.ASIDE],
    [TAG_NAMES.B, TAG_ID.B],
    [TAG_NAMES.BASE, TAG_ID.BASE],
    [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],
    [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],
    [TAG_NAMES.BIG, TAG_ID.BIG],
    [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],
    [TAG_NAMES.BODY, TAG_ID.BODY],
    [TAG_NAMES.BR, TAG_ID.BR],
    [TAG_NAMES.BUTTON, TAG_ID.BUTTON],
    [TAG_NAMES.CAPTION, TAG_ID.CAPTION],
    [TAG_NAMES.CENTER, TAG_ID.CENTER],
    [TAG_NAMES.CODE, TAG_ID.CODE],
    [TAG_NAMES.COL, TAG_ID.COL],
    [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],
    [TAG_NAMES.DD, TAG_ID.DD],
    [TAG_NAMES.DESC, TAG_ID.DESC],
    [TAG_NAMES.DETAILS, TAG_ID.DETAILS],
    [TAG_NAMES.DIALOG, TAG_ID.DIALOG],
    [TAG_NAMES.DIR, TAG_ID.DIR],
    [TAG_NAMES.DIV, TAG_ID.DIV],
    [TAG_NAMES.DL, TAG_ID.DL],
    [TAG_NAMES.DT, TAG_ID.DT],
    [TAG_NAMES.EM, TAG_ID.EM],
    [TAG_NAMES.EMBED, TAG_ID.EMBED],
    [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],
    [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],
    [TAG_NAMES.FIGURE, TAG_ID.FIGURE],
    [TAG_NAMES.FONT, TAG_ID.FONT],
    [TAG_NAMES.FOOTER, TAG_ID.FOOTER],
    [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],
    [TAG_NAMES.FORM, TAG_ID.FORM],
    [TAG_NAMES.FRAME, TAG_ID.FRAME],
    [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],
    [TAG_NAMES.H1, TAG_ID.H1],
    [TAG_NAMES.H2, TAG_ID.H2],
    [TAG_NAMES.H3, TAG_ID.H3],
    [TAG_NAMES.H4, TAG_ID.H4],
    [TAG_NAMES.H5, TAG_ID.H5],
    [TAG_NAMES.H6, TAG_ID.H6],
    [TAG_NAMES.HEAD, TAG_ID.HEAD],
    [TAG_NAMES.HEADER, TAG_ID.HEADER],
    [TAG_NAMES.HGROUP, TAG_ID.HGROUP],
    [TAG_NAMES.HR, TAG_ID.HR],
    [TAG_NAMES.HTML, TAG_ID.HTML],
    [TAG_NAMES.I, TAG_ID.I],
    [TAG_NAMES.IMG, TAG_ID.IMG],
    [TAG_NAMES.IMAGE, TAG_ID.IMAGE],
    [TAG_NAMES.INPUT, TAG_ID.INPUT],
    [TAG_NAMES.IFRAME, TAG_ID.IFRAME],
    [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],
    [TAG_NAMES.LABEL, TAG_ID.LABEL],
    [TAG_NAMES.LI, TAG_ID.LI],
    [TAG_NAMES.LINK, TAG_ID.LINK],
    [TAG_NAMES.LISTING, TAG_ID.LISTING],
    [TAG_NAMES.MAIN, TAG_ID.MAIN],
    [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],
    [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],
    [TAG_NAMES.MATH, TAG_ID.MATH],
    [TAG_NAMES.MENU, TAG_ID.MENU],
    [TAG_NAMES.META, TAG_ID.META],
    [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],
    [TAG_NAMES.MI, TAG_ID.MI],
    [TAG_NAMES.MO, TAG_ID.MO],
    [TAG_NAMES.MN, TAG_ID.MN],
    [TAG_NAMES.MS, TAG_ID.MS],
    [TAG_NAMES.MTEXT, TAG_ID.MTEXT],
    [TAG_NAMES.NAV, TAG_ID.NAV],
    [TAG_NAMES.NOBR, TAG_ID.NOBR],
    [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],
    [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],
    [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],
    [TAG_NAMES.OBJECT, TAG_ID.OBJECT],
    [TAG_NAMES.OL, TAG_ID.OL],
    [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],
    [TAG_NAMES.OPTION, TAG_ID.OPTION],
    [TAG_NAMES.P, TAG_ID.P],
    [TAG_NAMES.PARAM, TAG_ID.PARAM],
    [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],
    [TAG_NAMES.PRE, TAG_ID.PRE],
    [TAG_NAMES.RB, TAG_ID.RB],
    [TAG_NAMES.RP, TAG_ID.RP],
    [TAG_NAMES.RT, TAG_ID.RT],
    [TAG_NAMES.RTC, TAG_ID.RTC],
    [TAG_NAMES.RUBY, TAG_ID.RUBY],
    [TAG_NAMES.S, TAG_ID.S],
    [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],
    [TAG_NAMES.SECTION, TAG_ID.SECTION],
    [TAG_NAMES.SELECT, TAG_ID.SELECT],
    [TAG_NAMES.SOURCE, TAG_ID.SOURCE],
    [TAG_NAMES.SMALL, TAG_ID.SMALL],
    [TAG_NAMES.SPAN, TAG_ID.SPAN],
    [TAG_NAMES.STRIKE, TAG_ID.STRIKE],
    [TAG_NAMES.STRONG, TAG_ID.STRONG],
    [TAG_NAMES.STYLE, TAG_ID.STYLE],
    [TAG_NAMES.SUB, TAG_ID.SUB],
    [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],
    [TAG_NAMES.SUP, TAG_ID.SUP],
    [TAG_NAMES.TABLE, TAG_ID.TABLE],
    [TAG_NAMES.TBODY, TAG_ID.TBODY],
    [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],
    [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],
    [TAG_NAMES.TFOOT, TAG_ID.TFOOT],
    [TAG_NAMES.TD, TAG_ID.TD],
    [TAG_NAMES.TH, TAG_ID.TH],
    [TAG_NAMES.THEAD, TAG_ID.THEAD],
    [TAG_NAMES.TITLE, TAG_ID.TITLE],
    [TAG_NAMES.TR, TAG_ID.TR],
    [TAG_NAMES.TRACK, TAG_ID.TRACK],
    [TAG_NAMES.TT, TAG_ID.TT],
    [TAG_NAMES.U, TAG_ID.U],
    [TAG_NAMES.UL, TAG_ID.UL],
    [TAG_NAMES.SVG, TAG_ID.SVG],
    [TAG_NAMES.VAR, TAG_ID.VAR],
    [TAG_NAMES.WBR, TAG_ID.WBR],
    [TAG_NAMES.XMP, TAG_ID.XMP]
  ]);
  function getTagID(tagName) {
    var _a3;
    return (_a3 = TAG_NAME_TO_ID.get(tagName)) !== null && _a3 !== void 0 ? _a3 : TAG_ID.UNKNOWN;
  }
  var $ = TAG_ID;
  var SPECIAL_ELEMENTS = {
    [NS.HTML]: /* @__PURE__ */ new Set([
      $.ADDRESS,
      $.APPLET,
      $.AREA,
      $.ARTICLE,
      $.ASIDE,
      $.BASE,
      $.BASEFONT,
      $.BGSOUND,
      $.BLOCKQUOTE,
      $.BODY,
      $.BR,
      $.BUTTON,
      $.CAPTION,
      $.CENTER,
      $.COL,
      $.COLGROUP,
      $.DD,
      $.DETAILS,
      $.DIR,
      $.DIV,
      $.DL,
      $.DT,
      $.EMBED,
      $.FIELDSET,
      $.FIGCAPTION,
      $.FIGURE,
      $.FOOTER,
      $.FORM,
      $.FRAME,
      $.FRAMESET,
      $.H1,
      $.H2,
      $.H3,
      $.H4,
      $.H5,
      $.H6,
      $.HEAD,
      $.HEADER,
      $.HGROUP,
      $.HR,
      $.HTML,
      $.IFRAME,
      $.IMG,
      $.INPUT,
      $.LI,
      $.LINK,
      $.LISTING,
      $.MAIN,
      $.MARQUEE,
      $.MENU,
      $.META,
      $.NAV,
      $.NOEMBED,
      $.NOFRAMES,
      $.NOSCRIPT,
      $.OBJECT,
      $.OL,
      $.P,
      $.PARAM,
      $.PLAINTEXT,
      $.PRE,
      $.SCRIPT,
      $.SECTION,
      $.SELECT,
      $.SOURCE,
      $.STYLE,
      $.SUMMARY,
      $.TABLE,
      $.TBODY,
      $.TD,
      $.TEMPLATE,
      $.TEXTAREA,
      $.TFOOT,
      $.TH,
      $.THEAD,
      $.TITLE,
      $.TR,
      $.TRACK,
      $.UL,
      $.WBR,
      $.XMP
    ]),
    [NS.MATHML]: /* @__PURE__ */ new Set([$.MI, $.MO, $.MN, $.MS, $.MTEXT, $.ANNOTATION_XML]),
    [NS.SVG]: /* @__PURE__ */ new Set([$.TITLE, $.FOREIGN_OBJECT, $.DESC]),
    [NS.XLINK]: /* @__PURE__ */ new Set(),
    [NS.XML]: /* @__PURE__ */ new Set(),
    [NS.XMLNS]: /* @__PURE__ */ new Set()
  };
  function isNumberedHeader(tn) {
    return tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6;
  }
  var UNESCAPED_TEXT = /* @__PURE__ */ new Set([
    TAG_NAMES.STYLE,
    TAG_NAMES.SCRIPT,
    TAG_NAMES.XMP,
    TAG_NAMES.IFRAME,
    TAG_NAMES.NOEMBED,
    TAG_NAMES.NOFRAMES,
    TAG_NAMES.PLAINTEXT
  ]);
  function hasUnescapedText(tn, scriptingEnabled) {
    return UNESCAPED_TEXT.has(tn) || scriptingEnabled && tn === TAG_NAMES.NOSCRIPT;
  }

  // node_modules/parse5/dist/tokenizer/index.js
  var C1_CONTROLS_REFERENCE_REPLACEMENTS = /* @__PURE__ */ new Map([
    [128, 8364],
    [130, 8218],
    [131, 402],
    [132, 8222],
    [133, 8230],
    [134, 8224],
    [135, 8225],
    [136, 710],
    [137, 8240],
    [138, 352],
    [139, 8249],
    [140, 338],
    [142, 381],
    [145, 8216],
    [146, 8217],
    [147, 8220],
    [148, 8221],
    [149, 8226],
    [150, 8211],
    [151, 8212],
    [152, 732],
    [153, 8482],
    [154, 353],
    [155, 8250],
    [156, 339],
    [158, 382],
    [159, 376]
  ]);
  var State2;
  (function(State3) {
    State3[State3["DATA"] = 0] = "DATA";
    State3[State3["RCDATA"] = 1] = "RCDATA";
    State3[State3["RAWTEXT"] = 2] = "RAWTEXT";
    State3[State3["SCRIPT_DATA"] = 3] = "SCRIPT_DATA";
    State3[State3["PLAINTEXT"] = 4] = "PLAINTEXT";
    State3[State3["TAG_OPEN"] = 5] = "TAG_OPEN";
    State3[State3["END_TAG_OPEN"] = 6] = "END_TAG_OPEN";
    State3[State3["TAG_NAME"] = 7] = "TAG_NAME";
    State3[State3["RCDATA_LESS_THAN_SIGN"] = 8] = "RCDATA_LESS_THAN_SIGN";
    State3[State3["RCDATA_END_TAG_OPEN"] = 9] = "RCDATA_END_TAG_OPEN";
    State3[State3["RCDATA_END_TAG_NAME"] = 10] = "RCDATA_END_TAG_NAME";
    State3[State3["RAWTEXT_LESS_THAN_SIGN"] = 11] = "RAWTEXT_LESS_THAN_SIGN";
    State3[State3["RAWTEXT_END_TAG_OPEN"] = 12] = "RAWTEXT_END_TAG_OPEN";
    State3[State3["RAWTEXT_END_TAG_NAME"] = 13] = "RAWTEXT_END_TAG_NAME";
    State3[State3["SCRIPT_DATA_LESS_THAN_SIGN"] = 14] = "SCRIPT_DATA_LESS_THAN_SIGN";
    State3[State3["SCRIPT_DATA_END_TAG_OPEN"] = 15] = "SCRIPT_DATA_END_TAG_OPEN";
    State3[State3["SCRIPT_DATA_END_TAG_NAME"] = 16] = "SCRIPT_DATA_END_TAG_NAME";
    State3[State3["SCRIPT_DATA_ESCAPE_START"] = 17] = "SCRIPT_DATA_ESCAPE_START";
    State3[State3["SCRIPT_DATA_ESCAPE_START_DASH"] = 18] = "SCRIPT_DATA_ESCAPE_START_DASH";
    State3[State3["SCRIPT_DATA_ESCAPED"] = 19] = "SCRIPT_DATA_ESCAPED";
    State3[State3["SCRIPT_DATA_ESCAPED_DASH"] = 20] = "SCRIPT_DATA_ESCAPED_DASH";
    State3[State3["SCRIPT_DATA_ESCAPED_DASH_DASH"] = 21] = "SCRIPT_DATA_ESCAPED_DASH_DASH";
    State3[State3["SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN"] = 22] = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN";
    State3[State3["SCRIPT_DATA_ESCAPED_END_TAG_OPEN"] = 23] = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN";
    State3[State3["SCRIPT_DATA_ESCAPED_END_TAG_NAME"] = 24] = "SCRIPT_DATA_ESCAPED_END_TAG_NAME";
    State3[State3["SCRIPT_DATA_DOUBLE_ESCAPE_START"] = 25] = "SCRIPT_DATA_DOUBLE_ESCAPE_START";
    State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED"] = 26] = "SCRIPT_DATA_DOUBLE_ESCAPED";
    State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED_DASH"] = 27] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH";
    State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH"] = 28] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH";
    State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN"] = 29] = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN";
    State3[State3["SCRIPT_DATA_DOUBLE_ESCAPE_END"] = 30] = "SCRIPT_DATA_DOUBLE_ESCAPE_END";
    State3[State3["BEFORE_ATTRIBUTE_NAME"] = 31] = "BEFORE_ATTRIBUTE_NAME";
    State3[State3["ATTRIBUTE_NAME"] = 32] = "ATTRIBUTE_NAME";
    State3[State3["AFTER_ATTRIBUTE_NAME"] = 33] = "AFTER_ATTRIBUTE_NAME";
    State3[State3["BEFORE_ATTRIBUTE_VALUE"] = 34] = "BEFORE_ATTRIBUTE_VALUE";
    State3[State3["ATTRIBUTE_VALUE_DOUBLE_QUOTED"] = 35] = "ATTRIBUTE_VALUE_DOUBLE_QUOTED";
    State3[State3["ATTRIBUTE_VALUE_SINGLE_QUOTED"] = 36] = "ATTRIBUTE_VALUE_SINGLE_QUOTED";
    State3[State3["ATTRIBUTE_VALUE_UNQUOTED"] = 37] = "ATTRIBUTE_VALUE_UNQUOTED";
    State3[State3["AFTER_ATTRIBUTE_VALUE_QUOTED"] = 38] = "AFTER_ATTRIBUTE_VALUE_QUOTED";
    State3[State3["SELF_CLOSING_START_TAG"] = 39] = "SELF_CLOSING_START_TAG";
    State3[State3["BOGUS_COMMENT"] = 40] = "BOGUS_COMMENT";
    State3[State3["MARKUP_DECLARATION_OPEN"] = 41] = "MARKUP_DECLARATION_OPEN";
    State3[State3["COMMENT_START"] = 42] = "COMMENT_START";
    State3[State3["COMMENT_START_DASH"] = 43] = "COMMENT_START_DASH";
    State3[State3["COMMENT"] = 44] = "COMMENT";
    State3[State3["COMMENT_LESS_THAN_SIGN"] = 45] = "COMMENT_LESS_THAN_SIGN";
    State3[State3["COMMENT_LESS_THAN_SIGN_BANG"] = 46] = "COMMENT_LESS_THAN_SIGN_BANG";
    State3[State3["COMMENT_LESS_THAN_SIGN_BANG_DASH"] = 47] = "COMMENT_LESS_THAN_SIGN_BANG_DASH";
    State3[State3["COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH"] = 48] = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH";
    State3[State3["COMMENT_END_DASH"] = 49] = "COMMENT_END_DASH";
    State3[State3["COMMENT_END"] = 50] = "COMMENT_END";
    State3[State3["COMMENT_END_BANG"] = 51] = "COMMENT_END_BANG";
    State3[State3["DOCTYPE"] = 52] = "DOCTYPE";
    State3[State3["BEFORE_DOCTYPE_NAME"] = 53] = "BEFORE_DOCTYPE_NAME";
    State3[State3["DOCTYPE_NAME"] = 54] = "DOCTYPE_NAME";
    State3[State3["AFTER_DOCTYPE_NAME"] = 55] = "AFTER_DOCTYPE_NAME";
    State3[State3["AFTER_DOCTYPE_PUBLIC_KEYWORD"] = 56] = "AFTER_DOCTYPE_PUBLIC_KEYWORD";
    State3[State3["BEFORE_DOCTYPE_PUBLIC_IDENTIFIER"] = 57] = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER";
    State3[State3["DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED"] = 58] = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED";
    State3[State3["DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED"] = 59] = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED";
    State3[State3["AFTER_DOCTYPE_PUBLIC_IDENTIFIER"] = 60] = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER";
    State3[State3["BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS"] = 61] = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS";
    State3[State3["AFTER_DOCTYPE_SYSTEM_KEYWORD"] = 62] = "AFTER_DOCTYPE_SYSTEM_KEYWORD";
    State3[State3["BEFORE_DOCTYPE_SYSTEM_IDENTIFIER"] = 63] = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER";
    State3[State3["DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED"] = 64] = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED";
    State3[State3["DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED"] = 65] = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED";
    State3[State3["AFTER_DOCTYPE_SYSTEM_IDENTIFIER"] = 66] = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER";
    State3[State3["BOGUS_DOCTYPE"] = 67] = "BOGUS_DOCTYPE";
    State3[State3["CDATA_SECTION"] = 68] = "CDATA_SECTION";
    State3[State3["CDATA_SECTION_BRACKET"] = 69] = "CDATA_SECTION_BRACKET";
    State3[State3["CDATA_SECTION_END"] = 70] = "CDATA_SECTION_END";
    State3[State3["CHARACTER_REFERENCE"] = 71] = "CHARACTER_REFERENCE";
    State3[State3["NAMED_CHARACTER_REFERENCE"] = 72] = "NAMED_CHARACTER_REFERENCE";
    State3[State3["AMBIGUOUS_AMPERSAND"] = 73] = "AMBIGUOUS_AMPERSAND";
    State3[State3["NUMERIC_CHARACTER_REFERENCE"] = 74] = "NUMERIC_CHARACTER_REFERENCE";
    State3[State3["HEXADEMICAL_CHARACTER_REFERENCE_START"] = 75] = "HEXADEMICAL_CHARACTER_REFERENCE_START";
    State3[State3["HEXADEMICAL_CHARACTER_REFERENCE"] = 76] = "HEXADEMICAL_CHARACTER_REFERENCE";
    State3[State3["DECIMAL_CHARACTER_REFERENCE"] = 77] = "DECIMAL_CHARACTER_REFERENCE";
    State3[State3["NUMERIC_CHARACTER_REFERENCE_END"] = 78] = "NUMERIC_CHARACTER_REFERENCE_END";
  })(State2 || (State2 = {}));
  var TokenizerMode = {
    DATA: State2.DATA,
    RCDATA: State2.RCDATA,
    RAWTEXT: State2.RAWTEXT,
    SCRIPT_DATA: State2.SCRIPT_DATA,
    PLAINTEXT: State2.PLAINTEXT,
    CDATA_SECTION: State2.CDATA_SECTION
  };
  function isAsciiDigit(cp) {
    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;
  }
  function isAsciiUpper(cp) {
    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;
  }
  function isAsciiLower(cp) {
    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;
  }
  function isAsciiLetter(cp) {
    return isAsciiLower(cp) || isAsciiUpper(cp);
  }
  function isAsciiAlphaNumeric(cp) {
    return isAsciiLetter(cp) || isAsciiDigit(cp);
  }
  function isAsciiUpperHexDigit(cp) {
    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;
  }
  function isAsciiLowerHexDigit(cp) {
    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;
  }
  function isAsciiHexDigit(cp) {
    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
  }
  function toAsciiLower(cp) {
    return cp + 32;
  }
  function isWhitespace(cp) {
    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;
  }
  function isEntityInAttributeInvalidEnd(nextCp) {
    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
  }
  function isScriptDataDoubleEscapeSequenceEnd(cp) {
    return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;
  }
  var Tokenizer = class {
    constructor(options2, handler) {
      this.options = options2;
      this.handler = handler;
      this.paused = false;
      this.inLoop = false;
      this.inForeignNode = false;
      this.lastStartTagName = "";
      this.active = false;
      this.state = State2.DATA;
      this.returnState = State2.DATA;
      this.charRefCode = -1;
      this.consumedAfterSnapshot = -1;
      this.currentCharacterToken = null;
      this.currentToken = null;
      this.currentAttr = { name: "", value: "" };
      this.preprocessor = new Preprocessor(handler);
      this.currentLocation = this.getCurrentLocation(-1);
    }
    _err(code2) {
      var _a3, _b;
      (_b = (_a3 = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a3, this.preprocessor.getError(code2));
    }
    getCurrentLocation(offset) {
      if (!this.options.sourceCodeLocationInfo) {
        return null;
      }
      return {
        startLine: this.preprocessor.line,
        startCol: this.preprocessor.col - offset,
        startOffset: this.preprocessor.offset - offset,
        endLine: -1,
        endCol: -1,
        endOffset: -1
      };
    }
    _runParsingLoop() {
      if (this.inLoop)
        return;
      this.inLoop = true;
      while (this.active && !this.paused) {
        this.consumedAfterSnapshot = 0;
        const cp = this._consume();
        if (!this._ensureHibernation()) {
          this._callState(cp);
        }
      }
      this.inLoop = false;
    }
    pause() {
      this.paused = true;
    }
    resume(writeCallback) {
      if (!this.paused) {
        throw new Error("Parser was already resumed");
      }
      this.paused = false;
      if (this.inLoop)
        return;
      this._runParsingLoop();
      if (!this.paused) {
        writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
      }
    }
    write(chunk, isLastChunk, writeCallback) {
      this.active = true;
      this.preprocessor.write(chunk, isLastChunk);
      this._runParsingLoop();
      if (!this.paused) {
        writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
      }
    }
    insertHtmlAtCurrentPos(chunk) {
      this.active = true;
      this.preprocessor.insertHtmlAtCurrentPos(chunk);
      this._runParsingLoop();
    }
    _ensureHibernation() {
      if (this.preprocessor.endOfChunkHit) {
        this._unconsume(this.consumedAfterSnapshot);
        this.active = false;
        return true;
      }
      return false;
    }
    _consume() {
      this.consumedAfterSnapshot++;
      return this.preprocessor.advance();
    }
    _unconsume(count) {
      this.consumedAfterSnapshot -= count;
      this.preprocessor.retreat(count);
    }
    _reconsumeInState(state, cp) {
      this.state = state;
      this._callState(cp);
    }
    _advanceBy(count) {
      this.consumedAfterSnapshot += count;
      for (let i = 0; i < count; i++) {
        this.preprocessor.advance();
      }
    }
    _consumeSequenceIfMatch(pattern, caseSensitive) {
      if (this.preprocessor.startsWith(pattern, caseSensitive)) {
        this._advanceBy(pattern.length - 1);
        return true;
      }
      return false;
    }
    _createStartTagToken() {
      this.currentToken = {
        type: TokenType.START_TAG,
        tagName: "",
        tagID: TAG_ID.UNKNOWN,
        selfClosing: false,
        ackSelfClosing: false,
        attrs: [],
        location: this.getCurrentLocation(1)
      };
    }
    _createEndTagToken() {
      this.currentToken = {
        type: TokenType.END_TAG,
        tagName: "",
        tagID: TAG_ID.UNKNOWN,
        selfClosing: false,
        ackSelfClosing: false,
        attrs: [],
        location: this.getCurrentLocation(2)
      };
    }
    _createCommentToken(offset) {
      this.currentToken = {
        type: TokenType.COMMENT,
        data: "",
        location: this.getCurrentLocation(offset)
      };
    }
    _createDoctypeToken(initialName) {
      this.currentToken = {
        type: TokenType.DOCTYPE,
        name: initialName,
        forceQuirks: false,
        publicId: null,
        systemId: null,
        location: this.currentLocation
      };
    }
    _createCharacterToken(type2, chars) {
      this.currentCharacterToken = {
        type: type2,
        chars,
        location: this.currentLocation
      };
    }
    _createAttr(attrNameFirstCh) {
      this.currentAttr = {
        name: attrNameFirstCh,
        value: ""
      };
      this.currentLocation = this.getCurrentLocation(0);
    }
    _leaveAttrName() {
      var _a3;
      var _b;
      const token = this.currentToken;
      if (getTokenAttr(token, this.currentAttr.name) === null) {
        token.attrs.push(this.currentAttr);
        if (token.location && this.currentLocation) {
          const attrLocations = (_a3 = (_b = token.location).attrs) !== null && _a3 !== void 0 ? _a3 : _b.attrs = /* @__PURE__ */ Object.create(null);
          attrLocations[this.currentAttr.name] = this.currentLocation;
          this._leaveAttrValue();
        }
      } else {
        this._err(ERR.duplicateAttribute);
      }
    }
    _leaveAttrValue() {
      if (this.currentLocation) {
        this.currentLocation.endLine = this.preprocessor.line;
        this.currentLocation.endCol = this.preprocessor.col;
        this.currentLocation.endOffset = this.preprocessor.offset;
      }
    }
    prepareToken(ct) {
      this._emitCurrentCharacterToken(ct.location);
      this.currentToken = null;
      if (ct.location) {
        ct.location.endLine = this.preprocessor.line;
        ct.location.endCol = this.preprocessor.col + 1;
        ct.location.endOffset = this.preprocessor.offset + 1;
      }
      this.currentLocation = this.getCurrentLocation(-1);
    }
    emitCurrentTagToken() {
      const ct = this.currentToken;
      this.prepareToken(ct);
      ct.tagID = getTagID(ct.tagName);
      if (ct.type === TokenType.START_TAG) {
        this.lastStartTagName = ct.tagName;
        this.handler.onStartTag(ct);
      } else {
        if (ct.attrs.length > 0) {
          this._err(ERR.endTagWithAttributes);
        }
        if (ct.selfClosing) {
          this._err(ERR.endTagWithTrailingSolidus);
        }
        this.handler.onEndTag(ct);
      }
      this.preprocessor.dropParsedChunk();
    }
    emitCurrentComment(ct) {
      this.prepareToken(ct);
      this.handler.onComment(ct);
      this.preprocessor.dropParsedChunk();
    }
    emitCurrentDoctype(ct) {
      this.prepareToken(ct);
      this.handler.onDoctype(ct);
      this.preprocessor.dropParsedChunk();
    }
    _emitCurrentCharacterToken(nextLocation) {
      if (this.currentCharacterToken) {
        if (nextLocation && this.currentCharacterToken.location) {
          this.currentCharacterToken.location.endLine = nextLocation.startLine;
          this.currentCharacterToken.location.endCol = nextLocation.startCol;
          this.currentCharacterToken.location.endOffset = nextLocation.startOffset;
        }
        switch (this.currentCharacterToken.type) {
          case TokenType.CHARACTER: {
            this.handler.onCharacter(this.currentCharacterToken);
            break;
          }
          case TokenType.NULL_CHARACTER: {
            this.handler.onNullCharacter(this.currentCharacterToken);
            break;
          }
          case TokenType.WHITESPACE_CHARACTER: {
            this.handler.onWhitespaceCharacter(this.currentCharacterToken);
            break;
          }
        }
        this.currentCharacterToken = null;
      }
    }
    _emitEOFToken() {
      const location = this.getCurrentLocation(0);
      if (location) {
        location.endLine = location.startLine;
        location.endCol = location.startCol;
        location.endOffset = location.startOffset;
      }
      this._emitCurrentCharacterToken(location);
      this.handler.onEof({ type: TokenType.EOF, location });
      this.active = false;
    }
    _appendCharToCurrentCharacterToken(type2, ch) {
      if (this.currentCharacterToken) {
        if (this.currentCharacterToken.type !== type2) {
          this.currentLocation = this.getCurrentLocation(0);
          this._emitCurrentCharacterToken(this.currentLocation);
          this.preprocessor.dropParsedChunk();
        } else {
          this.currentCharacterToken.chars += ch;
          return;
        }
      }
      this._createCharacterToken(type2, ch);
    }
    _emitCodePoint(cp) {
      const type2 = isWhitespace(cp) ? TokenType.WHITESPACE_CHARACTER : cp === CODE_POINTS.NULL ? TokenType.NULL_CHARACTER : TokenType.CHARACTER;
      this._appendCharToCurrentCharacterToken(type2, String.fromCodePoint(cp));
    }
    _emitChars(ch) {
      this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);
    }
    _matchNamedCharacterReference(cp) {
      let result = null;
      let excess = 0;
      let withoutSemicolon = false;
      for (let i = 0, current = decode_data_html_default[0]; i >= 0; cp = this._consume()) {
        i = determineBranch(decode_data_html_default, current, i + 1, cp);
        if (i < 0)
          break;
        excess += 1;
        current = decode_data_html_default[i];
        const masked = current & BinTrieFlags.VALUE_LENGTH;
        if (masked) {
          const valueLength = (masked >> 14) - 1;
          if (cp !== CODE_POINTS.SEMICOLON && this._isCharacterReferenceInAttribute() && isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {
            result = [CODE_POINTS.AMPERSAND];
            i += valueLength;
          } else {
            result = valueLength === 0 ? [decode_data_html_default[i] & ~BinTrieFlags.VALUE_LENGTH] : valueLength === 1 ? [decode_data_html_default[++i]] : [decode_data_html_default[++i], decode_data_html_default[++i]];
            excess = 0;
            withoutSemicolon = cp !== CODE_POINTS.SEMICOLON;
          }
          if (valueLength === 0) {
            this._consume();
            break;
          }
        }
      }
      this._unconsume(excess);
      if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {
        this._err(ERR.missingSemicolonAfterCharacterReference);
      }
      this._unconsume(1);
      return result;
    }
    _isCharacterReferenceInAttribute() {
      return this.returnState === State2.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State2.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State2.ATTRIBUTE_VALUE_UNQUOTED;
    }
    _flushCodePointConsumedAsCharacterReference(cp) {
      if (this._isCharacterReferenceInAttribute()) {
        this.currentAttr.value += String.fromCodePoint(cp);
      } else {
        this._emitCodePoint(cp);
      }
    }
    _callState(cp) {
      switch (this.state) {
        case State2.DATA: {
          this._stateData(cp);
          break;
        }
        case State2.RCDATA: {
          this._stateRcdata(cp);
          break;
        }
        case State2.RAWTEXT: {
          this._stateRawtext(cp);
          break;
        }
        case State2.SCRIPT_DATA: {
          this._stateScriptData(cp);
          break;
        }
        case State2.PLAINTEXT: {
          this._statePlaintext(cp);
          break;
        }
        case State2.TAG_OPEN: {
          this._stateTagOpen(cp);
          break;
        }
        case State2.END_TAG_OPEN: {
          this._stateEndTagOpen(cp);
          break;
        }
        case State2.TAG_NAME: {
          this._stateTagName(cp);
          break;
        }
        case State2.RCDATA_LESS_THAN_SIGN: {
          this._stateRcdataLessThanSign(cp);
          break;
        }
        case State2.RCDATA_END_TAG_OPEN: {
          this._stateRcdataEndTagOpen(cp);
          break;
        }
        case State2.RCDATA_END_TAG_NAME: {
          this._stateRcdataEndTagName(cp);
          break;
        }
        case State2.RAWTEXT_LESS_THAN_SIGN: {
          this._stateRawtextLessThanSign(cp);
          break;
        }
        case State2.RAWTEXT_END_TAG_OPEN: {
          this._stateRawtextEndTagOpen(cp);
          break;
        }
        case State2.RAWTEXT_END_TAG_NAME: {
          this._stateRawtextEndTagName(cp);
          break;
        }
        case State2.SCRIPT_DATA_LESS_THAN_SIGN: {
          this._stateScriptDataLessThanSign(cp);
          break;
        }
        case State2.SCRIPT_DATA_END_TAG_OPEN: {
          this._stateScriptDataEndTagOpen(cp);
          break;
        }
        case State2.SCRIPT_DATA_END_TAG_NAME: {
          this._stateScriptDataEndTagName(cp);
          break;
        }
        case State2.SCRIPT_DATA_ESCAPE_START: {
          this._stateScriptDataEscapeStart(cp);
          break;
        }
        case State2.SCRIPT_DATA_ESCAPE_START_DASH: {
          this._stateScriptDataEscapeStartDash(cp);
          break;
        }
        case State2.SCRIPT_DATA_ESCAPED: {
          this._stateScriptDataEscaped(cp);
          break;
        }
        case State2.SCRIPT_DATA_ESCAPED_DASH: {
          this._stateScriptDataEscapedDash(cp);
          break;
        }
        case State2.SCRIPT_DATA_ESCAPED_DASH_DASH: {
          this._stateScriptDataEscapedDashDash(cp);
          break;
        }
        case State2.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {
          this._stateScriptDataEscapedLessThanSign(cp);
          break;
        }
        case State2.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {
          this._stateScriptDataEscapedEndTagOpen(cp);
          break;
        }
        case State2.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {
          this._stateScriptDataEscapedEndTagName(cp);
          break;
        }
        case State2.SCRIPT_DATA_DOUBLE_ESCAPE_START: {
          this._stateScriptDataDoubleEscapeStart(cp);
          break;
        }
        case State2.SCRIPT_DATA_DOUBLE_ESCAPED: {
          this._stateScriptDataDoubleEscaped(cp);
          break;
        }
        case State2.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {
          this._stateScriptDataDoubleEscapedDash(cp);
          break;
        }
        case State2.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {
          this._stateScriptDataDoubleEscapedDashDash(cp);
          break;
        }
        case State2.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {
          this._stateScriptDataDoubleEscapedLessThanSign(cp);
          break;
        }
        case State2.SCRIPT_DATA_DOUBLE_ESCAPE_END: {
          this._stateScriptDataDoubleEscapeEnd(cp);
          break;
        }
        case State2.BEFORE_ATTRIBUTE_NAME: {
          this._stateBeforeAttributeName(cp);
          break;
        }
        case State2.ATTRIBUTE_NAME: {
          this._stateAttributeName(cp);
          break;
        }
        case State2.AFTER_ATTRIBUTE_NAME: {
          this._stateAfterAttributeName(cp);
          break;
        }
        case State2.BEFORE_ATTRIBUTE_VALUE: {
          this._stateBeforeAttributeValue(cp);
          break;
        }
        case State2.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
          this._stateAttributeValueDoubleQuoted(cp);
          break;
        }
        case State2.ATTRIBUTE_VALUE_SINGLE_QUOTED: {
          this._stateAttributeValueSingleQuoted(cp);
          break;
        }
        case State2.ATTRIBUTE_VALUE_UNQUOTED: {
          this._stateAttributeValueUnquoted(cp);
          break;
        }
        case State2.AFTER_ATTRIBUTE_VALUE_QUOTED: {
          this._stateAfterAttributeValueQuoted(cp);
          break;
        }
        case State2.SELF_CLOSING_START_TAG: {
          this._stateSelfClosingStartTag(cp);
          break;
        }
        case State2.BOGUS_COMMENT: {
          this._stateBogusComment(cp);
          break;
        }
        case State2.MARKUP_DECLARATION_OPEN: {
          this._stateMarkupDeclarationOpen(cp);
          break;
        }
        case State2.COMMENT_START: {
          this._stateCommentStart(cp);
          break;
        }
        case State2.COMMENT_START_DASH: {
          this._stateCommentStartDash(cp);
          break;
        }
        case State2.COMMENT: {
          this._stateComment(cp);
          break;
        }
        case State2.COMMENT_LESS_THAN_SIGN: {
          this._stateCommentLessThanSign(cp);
          break;
        }
        case State2.COMMENT_LESS_THAN_SIGN_BANG: {
          this._stateCommentLessThanSignBang(cp);
          break;
        }
        case State2.COMMENT_LESS_THAN_SIGN_BANG_DASH: {
          this._stateCommentLessThanSignBangDash(cp);
          break;
        }
        case State2.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
          this._stateCommentLessThanSignBangDashDash(cp);
          break;
        }
        case State2.COMMENT_END_DASH: {
          this._stateCommentEndDash(cp);
          break;
        }
        case State2.COMMENT_END: {
          this._stateCommentEnd(cp);
          break;
        }
        case State2.COMMENT_END_BANG: {
          this._stateCommentEndBang(cp);
          break;
        }
        case State2.DOCTYPE: {
          this._stateDoctype(cp);
          break;
        }
        case State2.BEFORE_DOCTYPE_NAME: {
          this._stateBeforeDoctypeName(cp);
          break;
        }
        case State2.DOCTYPE_NAME: {
          this._stateDoctypeName(cp);
          break;
        }
        case State2.AFTER_DOCTYPE_NAME: {
          this._stateAfterDoctypeName(cp);
          break;
        }
        case State2.AFTER_DOCTYPE_PUBLIC_KEYWORD: {
          this._stateAfterDoctypePublicKeyword(cp);
          break;
        }
        case State2.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {
          this._stateBeforeDoctypePublicIdentifier(cp);
          break;
        }
        case State2.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {
          this._stateDoctypePublicIdentifierDoubleQuoted(cp);
          break;
        }
        case State2.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {
          this._stateDoctypePublicIdentifierSingleQuoted(cp);
          break;
        }
        case State2.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {
          this._stateAfterDoctypePublicIdentifier(cp);
          break;
        }
        case State2.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {
          this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);
          break;
        }
        case State2.AFTER_DOCTYPE_SYSTEM_KEYWORD: {
          this._stateAfterDoctypeSystemKeyword(cp);
          break;
        }
        case State2.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {
          this._stateBeforeDoctypeSystemIdentifier(cp);
          break;
        }
        case State2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {
          this._stateDoctypeSystemIdentifierDoubleQuoted(cp);
          break;
        }
        case State2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {
          this._stateDoctypeSystemIdentifierSingleQuoted(cp);
          break;
        }
        case State2.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {
          this._stateAfterDoctypeSystemIdentifier(cp);
          break;
        }
        case State2.BOGUS_DOCTYPE: {
          this._stateBogusDoctype(cp);
          break;
        }
        case State2.CDATA_SECTION: {
          this._stateCdataSection(cp);
          break;
        }
        case State2.CDATA_SECTION_BRACKET: {
          this._stateCdataSectionBracket(cp);
          break;
        }
        case State2.CDATA_SECTION_END: {
          this._stateCdataSectionEnd(cp);
          break;
        }
        case State2.CHARACTER_REFERENCE: {
          this._stateCharacterReference(cp);
          break;
        }
        case State2.NAMED_CHARACTER_REFERENCE: {
          this._stateNamedCharacterReference(cp);
          break;
        }
        case State2.AMBIGUOUS_AMPERSAND: {
          this._stateAmbiguousAmpersand(cp);
          break;
        }
        case State2.NUMERIC_CHARACTER_REFERENCE: {
          this._stateNumericCharacterReference(cp);
          break;
        }
        case State2.HEXADEMICAL_CHARACTER_REFERENCE_START: {
          this._stateHexademicalCharacterReferenceStart(cp);
          break;
        }
        case State2.HEXADEMICAL_CHARACTER_REFERENCE: {
          this._stateHexademicalCharacterReference(cp);
          break;
        }
        case State2.DECIMAL_CHARACTER_REFERENCE: {
          this._stateDecimalCharacterReference(cp);
          break;
        }
        case State2.NUMERIC_CHARACTER_REFERENCE_END: {
          this._stateNumericCharacterReferenceEnd(cp);
          break;
        }
        default: {
          throw new Error("Unknown state");
        }
      }
    }
    _stateData(cp) {
      switch (cp) {
        case CODE_POINTS.LESS_THAN_SIGN: {
          this.state = State2.TAG_OPEN;
          break;
        }
        case CODE_POINTS.AMPERSAND: {
          this.returnState = State2.DATA;
          this.state = State2.CHARACTER_REFERENCE;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this._emitCodePoint(cp);
          break;
        }
        case CODE_POINTS.EOF: {
          this._emitEOFToken();
          break;
        }
        default: {
          this._emitCodePoint(cp);
        }
      }
    }
    _stateRcdata(cp) {
      switch (cp) {
        case CODE_POINTS.AMPERSAND: {
          this.returnState = State2.RCDATA;
          this.state = State2.CHARACTER_REFERENCE;
          break;
        }
        case CODE_POINTS.LESS_THAN_SIGN: {
          this.state = State2.RCDATA_LESS_THAN_SIGN;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(REPLACEMENT_CHARACTER);
          break;
        }
        case CODE_POINTS.EOF: {
          this._emitEOFToken();
          break;
        }
        default: {
          this._emitCodePoint(cp);
        }
      }
    }
    _stateRawtext(cp) {
      switch (cp) {
        case CODE_POINTS.LESS_THAN_SIGN: {
          this.state = State2.RAWTEXT_LESS_THAN_SIGN;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(REPLACEMENT_CHARACTER);
          break;
        }
        case CODE_POINTS.EOF: {
          this._emitEOFToken();
          break;
        }
        default: {
          this._emitCodePoint(cp);
        }
      }
    }
    _stateScriptData(cp) {
      switch (cp) {
        case CODE_POINTS.LESS_THAN_SIGN: {
          this.state = State2.SCRIPT_DATA_LESS_THAN_SIGN;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(REPLACEMENT_CHARACTER);
          break;
        }
        case CODE_POINTS.EOF: {
          this._emitEOFToken();
          break;
        }
        default: {
          this._emitCodePoint(cp);
        }
      }
    }
    _statePlaintext(cp) {
      switch (cp) {
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(REPLACEMENT_CHARACTER);
          break;
        }
        case CODE_POINTS.EOF: {
          this._emitEOFToken();
          break;
        }
        default: {
          this._emitCodePoint(cp);
        }
      }
    }
    _stateTagOpen(cp) {
      if (isAsciiLetter(cp)) {
        this._createStartTagToken();
        this.state = State2.TAG_NAME;
        this._stateTagName(cp);
      } else
        switch (cp) {
          case CODE_POINTS.EXCLAMATION_MARK: {
            this.state = State2.MARKUP_DECLARATION_OPEN;
            break;
          }
          case CODE_POINTS.SOLIDUS: {
            this.state = State2.END_TAG_OPEN;
            break;
          }
          case CODE_POINTS.QUESTION_MARK: {
            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
            this._createCommentToken(1);
            this.state = State2.BOGUS_COMMENT;
            this._stateBogusComment(cp);
            break;
          }
          case CODE_POINTS.EOF: {
            this._err(ERR.eofBeforeTagName);
            this._emitChars("<");
            this._emitEOFToken();
            break;
          }
          default: {
            this._err(ERR.invalidFirstCharacterOfTagName);
            this._emitChars("<");
            this.state = State2.DATA;
            this._stateData(cp);
          }
        }
    }
    _stateEndTagOpen(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();
        this.state = State2.TAG_NAME;
        this._stateTagName(cp);
      } else
        switch (cp) {
          case CODE_POINTS.GREATER_THAN_SIGN: {
            this._err(ERR.missingEndTagName);
            this.state = State2.DATA;
            break;
          }
          case CODE_POINTS.EOF: {
            this._err(ERR.eofBeforeTagName);
            this._emitChars("</");
            this._emitEOFToken();
            break;
          }
          default: {
            this._err(ERR.invalidFirstCharacterOfTagName);
            this._createCommentToken(2);
            this.state = State2.BOGUS_COMMENT;
            this._stateBogusComment(cp);
          }
        }
    }
    _stateTagName(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          this.state = State2.BEFORE_ATTRIBUTE_NAME;
          break;
        }
        case CODE_POINTS.SOLIDUS: {
          this.state = State2.SELF_CLOSING_START_TAG;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.DATA;
          this.emitCurrentTagToken();
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          token.tagName += REPLACEMENT_CHARACTER;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
          break;
        }
        default: {
          token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
        }
      }
    }
    _stateRcdataLessThanSign(cp) {
      if (cp === CODE_POINTS.SOLIDUS) {
        this.state = State2.RCDATA_END_TAG_OPEN;
      } else {
        this._emitChars("<");
        this.state = State2.RCDATA;
        this._stateRcdata(cp);
      }
    }
    _stateRcdataEndTagOpen(cp) {
      if (isAsciiLetter(cp)) {
        this.state = State2.RCDATA_END_TAG_NAME;
        this._stateRcdataEndTagName(cp);
      } else {
        this._emitChars("</");
        this.state = State2.RCDATA;
        this._stateRcdata(cp);
      }
    }
    handleSpecialEndTag(_cp) {
      if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {
        return !this._ensureHibernation();
      }
      this._createEndTagToken();
      const token = this.currentToken;
      token.tagName = this.lastStartTagName;
      const cp = this.preprocessor.peek(this.lastStartTagName.length);
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          this._advanceBy(this.lastStartTagName.length);
          this.state = State2.BEFORE_ATTRIBUTE_NAME;
          return false;
        }
        case CODE_POINTS.SOLIDUS: {
          this._advanceBy(this.lastStartTagName.length);
          this.state = State2.SELF_CLOSING_START_TAG;
          return false;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._advanceBy(this.lastStartTagName.length);
          this.emitCurrentTagToken();
          this.state = State2.DATA;
          return false;
        }
        default: {
          return !this._ensureHibernation();
        }
      }
    }
    _stateRcdataEndTagName(cp) {
      if (this.handleSpecialEndTag(cp)) {
        this._emitChars("</");
        this.state = State2.RCDATA;
        this._stateRcdata(cp);
      }
    }
    _stateRawtextLessThanSign(cp) {
      if (cp === CODE_POINTS.SOLIDUS) {
        this.state = State2.RAWTEXT_END_TAG_OPEN;
      } else {
        this._emitChars("<");
        this.state = State2.RAWTEXT;
        this._stateRawtext(cp);
      }
    }
    _stateRawtextEndTagOpen(cp) {
      if (isAsciiLetter(cp)) {
        this.state = State2.RAWTEXT_END_TAG_NAME;
        this._stateRawtextEndTagName(cp);
      } else {
        this._emitChars("</");
        this.state = State2.RAWTEXT;
        this._stateRawtext(cp);
      }
    }
    _stateRawtextEndTagName(cp) {
      if (this.handleSpecialEndTag(cp)) {
        this._emitChars("</");
        this.state = State2.RAWTEXT;
        this._stateRawtext(cp);
      }
    }
    _stateScriptDataLessThanSign(cp) {
      switch (cp) {
        case CODE_POINTS.SOLIDUS: {
          this.state = State2.SCRIPT_DATA_END_TAG_OPEN;
          break;
        }
        case CODE_POINTS.EXCLAMATION_MARK: {
          this.state = State2.SCRIPT_DATA_ESCAPE_START;
          this._emitChars("<!");
          break;
        }
        default: {
          this._emitChars("<");
          this.state = State2.SCRIPT_DATA;
          this._stateScriptData(cp);
        }
      }
    }
    _stateScriptDataEndTagOpen(cp) {
      if (isAsciiLetter(cp)) {
        this.state = State2.SCRIPT_DATA_END_TAG_NAME;
        this._stateScriptDataEndTagName(cp);
      } else {
        this._emitChars("</");
        this.state = State2.SCRIPT_DATA;
        this._stateScriptData(cp);
      }
    }
    _stateScriptDataEndTagName(cp) {
      if (this.handleSpecialEndTag(cp)) {
        this._emitChars("</");
        this.state = State2.SCRIPT_DATA;
        this._stateScriptData(cp);
      }
    }
    _stateScriptDataEscapeStart(cp) {
      if (cp === CODE_POINTS.HYPHEN_MINUS) {
        this.state = State2.SCRIPT_DATA_ESCAPE_START_DASH;
        this._emitChars("-");
      } else {
        this.state = State2.SCRIPT_DATA;
        this._stateScriptData(cp);
      }
    }
    _stateScriptDataEscapeStartDash(cp) {
      if (cp === CODE_POINTS.HYPHEN_MINUS) {
        this.state = State2.SCRIPT_DATA_ESCAPED_DASH_DASH;
        this._emitChars("-");
      } else {
        this.state = State2.SCRIPT_DATA;
        this._stateScriptData(cp);
      }
    }
    _stateScriptDataEscaped(cp) {
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          this.state = State2.SCRIPT_DATA_ESCAPED_DASH;
          this._emitChars("-");
          break;
        }
        case CODE_POINTS.LESS_THAN_SIGN: {
          this.state = State2.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(REPLACEMENT_CHARACTER);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
          break;
        }
        default: {
          this._emitCodePoint(cp);
        }
      }
    }
    _stateScriptDataEscapedDash(cp) {
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          this.state = State2.SCRIPT_DATA_ESCAPED_DASH_DASH;
          this._emitChars("-");
          break;
        }
        case CODE_POINTS.LESS_THAN_SIGN: {
          this.state = State2.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this.state = State2.SCRIPT_DATA_ESCAPED;
          this._emitChars(REPLACEMENT_CHARACTER);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
          break;
        }
        default: {
          this.state = State2.SCRIPT_DATA_ESCAPED;
          this._emitCodePoint(cp);
        }
      }
    }
    _stateScriptDataEscapedDashDash(cp) {
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          this._emitChars("-");
          break;
        }
        case CODE_POINTS.LESS_THAN_SIGN: {
          this.state = State2.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.SCRIPT_DATA;
          this._emitChars(">");
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this.state = State2.SCRIPT_DATA_ESCAPED;
          this._emitChars(REPLACEMENT_CHARACTER);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
          break;
        }
        default: {
          this.state = State2.SCRIPT_DATA_ESCAPED;
          this._emitCodePoint(cp);
        }
      }
    }
    _stateScriptDataEscapedLessThanSign(cp) {
      if (cp === CODE_POINTS.SOLIDUS) {
        this.state = State2.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;
      } else if (isAsciiLetter(cp)) {
        this._emitChars("<");
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPE_START;
        this._stateScriptDataDoubleEscapeStart(cp);
      } else {
        this._emitChars("<");
        this.state = State2.SCRIPT_DATA_ESCAPED;
        this._stateScriptDataEscaped(cp);
      }
    }
    _stateScriptDataEscapedEndTagOpen(cp) {
      if (isAsciiLetter(cp)) {
        this.state = State2.SCRIPT_DATA_ESCAPED_END_TAG_NAME;
        this._stateScriptDataEscapedEndTagName(cp);
      } else {
        this._emitChars("</");
        this.state = State2.SCRIPT_DATA_ESCAPED;
        this._stateScriptDataEscaped(cp);
      }
    }
    _stateScriptDataEscapedEndTagName(cp) {
      if (this.handleSpecialEndTag(cp)) {
        this._emitChars("</");
        this.state = State2.SCRIPT_DATA_ESCAPED;
        this._stateScriptDataEscaped(cp);
      }
    }
    _stateScriptDataDoubleEscapeStart(cp) {
      if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
        this._emitCodePoint(cp);
        for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
          this._emitCodePoint(this._consume());
        }
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
      } else if (!this._ensureHibernation()) {
        this.state = State2.SCRIPT_DATA_ESCAPED;
        this._stateScriptDataEscaped(cp);
      }
    }
    _stateScriptDataDoubleEscaped(cp) {
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;
          this._emitChars("-");
          break;
        }
        case CODE_POINTS.LESS_THAN_SIGN: {
          this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
          this._emitChars("<");
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(REPLACEMENT_CHARACTER);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
          break;
        }
        default: {
          this._emitCodePoint(cp);
        }
      }
    }
    _stateScriptDataDoubleEscapedDash(cp) {
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;
          this._emitChars("-");
          break;
        }
        case CODE_POINTS.LESS_THAN_SIGN: {
          this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
          this._emitChars("<");
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
          this._emitChars(REPLACEMENT_CHARACTER);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
          break;
        }
        default: {
          this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
          this._emitCodePoint(cp);
        }
      }
    }
    _stateScriptDataDoubleEscapedDashDash(cp) {
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          this._emitChars("-");
          break;
        }
        case CODE_POINTS.LESS_THAN_SIGN: {
          this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
          this._emitChars("<");
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.SCRIPT_DATA;
          this._emitChars(">");
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
          this._emitChars(REPLACEMENT_CHARACTER);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
          break;
        }
        default: {
          this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
          this._emitCodePoint(cp);
        }
      }
    }
    _stateScriptDataDoubleEscapedLessThanSign(cp) {
      if (cp === CODE_POINTS.SOLIDUS) {
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPE_END;
        this._emitChars("/");
      } else {
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._stateScriptDataDoubleEscaped(cp);
      }
    }
    _stateScriptDataDoubleEscapeEnd(cp) {
      if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
        this._emitCodePoint(cp);
        for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
          this._emitCodePoint(this._consume());
        }
        this.state = State2.SCRIPT_DATA_ESCAPED;
      } else if (!this._ensureHibernation()) {
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._stateScriptDataDoubleEscaped(cp);
      }
    }
    _stateBeforeAttributeName(cp) {
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.SOLIDUS:
        case CODE_POINTS.GREATER_THAN_SIGN:
        case CODE_POINTS.EOF: {
          this.state = State2.AFTER_ATTRIBUTE_NAME;
          this._stateAfterAttributeName(cp);
          break;
        }
        case CODE_POINTS.EQUALS_SIGN: {
          this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
          this._createAttr("=");
          this.state = State2.ATTRIBUTE_NAME;
          break;
        }
        default: {
          this._createAttr("");
          this.state = State2.ATTRIBUTE_NAME;
          this._stateAttributeName(cp);
        }
      }
    }
    _stateAttributeName(cp) {
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED:
        case CODE_POINTS.SOLIDUS:
        case CODE_POINTS.GREATER_THAN_SIGN:
        case CODE_POINTS.EOF: {
          this._leaveAttrName();
          this.state = State2.AFTER_ATTRIBUTE_NAME;
          this._stateAfterAttributeName(cp);
          break;
        }
        case CODE_POINTS.EQUALS_SIGN: {
          this._leaveAttrName();
          this.state = State2.BEFORE_ATTRIBUTE_VALUE;
          break;
        }
        case CODE_POINTS.QUOTATION_MARK:
        case CODE_POINTS.APOSTROPHE:
        case CODE_POINTS.LESS_THAN_SIGN: {
          this._err(ERR.unexpectedCharacterInAttributeName);
          this.currentAttr.name += String.fromCodePoint(cp);
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this.currentAttr.name += REPLACEMENT_CHARACTER;
          break;
        }
        default: {
          this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
        }
      }
    }
    _stateAfterAttributeName(cp) {
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.SOLIDUS: {
          this.state = State2.SELF_CLOSING_START_TAG;
          break;
        }
        case CODE_POINTS.EQUALS_SIGN: {
          this.state = State2.BEFORE_ATTRIBUTE_VALUE;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.DATA;
          this.emitCurrentTagToken();
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
          break;
        }
        default: {
          this._createAttr("");
          this.state = State2.ATTRIBUTE_NAME;
          this._stateAttributeName(cp);
        }
      }
    }
    _stateBeforeAttributeValue(cp) {
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.QUOTATION_MARK: {
          this.state = State2.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
          break;
        }
        case CODE_POINTS.APOSTROPHE: {
          this.state = State2.ATTRIBUTE_VALUE_SINGLE_QUOTED;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingAttributeValue);
          this.state = State2.DATA;
          this.emitCurrentTagToken();
          break;
        }
        default: {
          this.state = State2.ATTRIBUTE_VALUE_UNQUOTED;
          this._stateAttributeValueUnquoted(cp);
        }
      }
    }
    _stateAttributeValueDoubleQuoted(cp) {
      switch (cp) {
        case CODE_POINTS.QUOTATION_MARK: {
          this.state = State2.AFTER_ATTRIBUTE_VALUE_QUOTED;
          break;
        }
        case CODE_POINTS.AMPERSAND: {
          this.returnState = State2.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
          this.state = State2.CHARACTER_REFERENCE;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this.currentAttr.value += REPLACEMENT_CHARACTER;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
          break;
        }
        default: {
          this.currentAttr.value += String.fromCodePoint(cp);
        }
      }
    }
    _stateAttributeValueSingleQuoted(cp) {
      switch (cp) {
        case CODE_POINTS.APOSTROPHE: {
          this.state = State2.AFTER_ATTRIBUTE_VALUE_QUOTED;
          break;
        }
        case CODE_POINTS.AMPERSAND: {
          this.returnState = State2.ATTRIBUTE_VALUE_SINGLE_QUOTED;
          this.state = State2.CHARACTER_REFERENCE;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this.currentAttr.value += REPLACEMENT_CHARACTER;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
          break;
        }
        default: {
          this.currentAttr.value += String.fromCodePoint(cp);
        }
      }
    }
    _stateAttributeValueUnquoted(cp) {
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          this._leaveAttrValue();
          this.state = State2.BEFORE_ATTRIBUTE_NAME;
          break;
        }
        case CODE_POINTS.AMPERSAND: {
          this.returnState = State2.ATTRIBUTE_VALUE_UNQUOTED;
          this.state = State2.CHARACTER_REFERENCE;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._leaveAttrValue();
          this.state = State2.DATA;
          this.emitCurrentTagToken();
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this.currentAttr.value += REPLACEMENT_CHARACTER;
          break;
        }
        case CODE_POINTS.QUOTATION_MARK:
        case CODE_POINTS.APOSTROPHE:
        case CODE_POINTS.LESS_THAN_SIGN:
        case CODE_POINTS.EQUALS_SIGN:
        case CODE_POINTS.GRAVE_ACCENT: {
          this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
          this.currentAttr.value += String.fromCodePoint(cp);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
          break;
        }
        default: {
          this.currentAttr.value += String.fromCodePoint(cp);
        }
      }
    }
    _stateAfterAttributeValueQuoted(cp) {
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          this._leaveAttrValue();
          this.state = State2.BEFORE_ATTRIBUTE_NAME;
          break;
        }
        case CODE_POINTS.SOLIDUS: {
          this._leaveAttrValue();
          this.state = State2.SELF_CLOSING_START_TAG;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._leaveAttrValue();
          this.state = State2.DATA;
          this.emitCurrentTagToken();
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.missingWhitespaceBetweenAttributes);
          this.state = State2.BEFORE_ATTRIBUTE_NAME;
          this._stateBeforeAttributeName(cp);
        }
      }
    }
    _stateSelfClosingStartTag(cp) {
      switch (cp) {
        case CODE_POINTS.GREATER_THAN_SIGN: {
          const token = this.currentToken;
          token.selfClosing = true;
          this.state = State2.DATA;
          this.emitCurrentTagToken();
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.unexpectedSolidusInTag);
          this.state = State2.BEFORE_ATTRIBUTE_NAME;
          this._stateBeforeAttributeName(cp);
        }
      }
    }
    _stateBogusComment(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.DATA;
          this.emitCurrentComment(token);
          break;
        }
        case CODE_POINTS.EOF: {
          this.emitCurrentComment(token);
          this._emitEOFToken();
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          token.data += REPLACEMENT_CHARACTER;
          break;
        }
        default: {
          token.data += String.fromCodePoint(cp);
        }
      }
    }
    _stateMarkupDeclarationOpen(cp) {
      if (this._consumeSequenceIfMatch(SEQUENCES.DASH_DASH, true)) {
        this._createCommentToken(SEQUENCES.DASH_DASH.length + 1);
        this.state = State2.COMMENT_START;
      } else if (this._consumeSequenceIfMatch(SEQUENCES.DOCTYPE, false)) {
        this.currentLocation = this.getCurrentLocation(SEQUENCES.DOCTYPE.length + 1);
        this.state = State2.DOCTYPE;
      } else if (this._consumeSequenceIfMatch(SEQUENCES.CDATA_START, true)) {
        if (this.inForeignNode) {
          this.state = State2.CDATA_SECTION;
        } else {
          this._err(ERR.cdataInHtmlContent);
          this._createCommentToken(SEQUENCES.CDATA_START.length + 1);
          this.currentToken.data = "[CDATA[";
          this.state = State2.BOGUS_COMMENT;
        }
      } else if (!this._ensureHibernation()) {
        this._err(ERR.incorrectlyOpenedComment);
        this._createCommentToken(2);
        this.state = State2.BOGUS_COMMENT;
        this._stateBogusComment(cp);
      }
    }
    _stateCommentStart(cp) {
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          this.state = State2.COMMENT_START_DASH;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.abruptClosingOfEmptyComment);
          this.state = State2.DATA;
          const token = this.currentToken;
          this.emitCurrentComment(token);
          break;
        }
        default: {
          this.state = State2.COMMENT;
          this._stateComment(cp);
        }
      }
    }
    _stateCommentStartDash(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          this.state = State2.COMMENT_END;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.abruptClosingOfEmptyComment);
          this.state = State2.DATA;
          this.emitCurrentComment(token);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInComment);
          this.emitCurrentComment(token);
          this._emitEOFToken();
          break;
        }
        default: {
          token.data += "-";
          this.state = State2.COMMENT;
          this._stateComment(cp);
        }
      }
    }
    _stateComment(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          this.state = State2.COMMENT_END_DASH;
          break;
        }
        case CODE_POINTS.LESS_THAN_SIGN: {
          token.data += "<";
          this.state = State2.COMMENT_LESS_THAN_SIGN;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          token.data += REPLACEMENT_CHARACTER;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInComment);
          this.emitCurrentComment(token);
          this._emitEOFToken();
          break;
        }
        default: {
          token.data += String.fromCodePoint(cp);
        }
      }
    }
    _stateCommentLessThanSign(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.EXCLAMATION_MARK: {
          token.data += "!";
          this.state = State2.COMMENT_LESS_THAN_SIGN_BANG;
          break;
        }
        case CODE_POINTS.LESS_THAN_SIGN: {
          token.data += "<";
          break;
        }
        default: {
          this.state = State2.COMMENT;
          this._stateComment(cp);
        }
      }
    }
    _stateCommentLessThanSignBang(cp) {
      if (cp === CODE_POINTS.HYPHEN_MINUS) {
        this.state = State2.COMMENT_LESS_THAN_SIGN_BANG_DASH;
      } else {
        this.state = State2.COMMENT;
        this._stateComment(cp);
      }
    }
    _stateCommentLessThanSignBangDash(cp) {
      if (cp === CODE_POINTS.HYPHEN_MINUS) {
        this.state = State2.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;
      } else {
        this.state = State2.COMMENT_END_DASH;
        this._stateCommentEndDash(cp);
      }
    }
    _stateCommentLessThanSignBangDashDash(cp) {
      if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {
        this._err(ERR.nestedComment);
      }
      this.state = State2.COMMENT_END;
      this._stateCommentEnd(cp);
    }
    _stateCommentEndDash(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          this.state = State2.COMMENT_END;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInComment);
          this.emitCurrentComment(token);
          this._emitEOFToken();
          break;
        }
        default: {
          token.data += "-";
          this.state = State2.COMMENT;
          this._stateComment(cp);
        }
      }
    }
    _stateCommentEnd(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.DATA;
          this.emitCurrentComment(token);
          break;
        }
        case CODE_POINTS.EXCLAMATION_MARK: {
          this.state = State2.COMMENT_END_BANG;
          break;
        }
        case CODE_POINTS.HYPHEN_MINUS: {
          token.data += "-";
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInComment);
          this.emitCurrentComment(token);
          this._emitEOFToken();
          break;
        }
        default: {
          token.data += "--";
          this.state = State2.COMMENT;
          this._stateComment(cp);
        }
      }
    }
    _stateCommentEndBang(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.HYPHEN_MINUS: {
          token.data += "--!";
          this.state = State2.COMMENT_END_DASH;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.incorrectlyClosedComment);
          this.state = State2.DATA;
          this.emitCurrentComment(token);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInComment);
          this.emitCurrentComment(token);
          this._emitEOFToken();
          break;
        }
        default: {
          token.data += "--!";
          this.state = State2.COMMENT;
          this._stateComment(cp);
        }
      }
    }
    _stateDoctype(cp) {
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          this.state = State2.BEFORE_DOCTYPE_NAME;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.BEFORE_DOCTYPE_NAME;
          this._stateBeforeDoctypeName(cp);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          this._createDoctypeToken(null);
          const token = this.currentToken;
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.missingWhitespaceBeforeDoctypeName);
          this.state = State2.BEFORE_DOCTYPE_NAME;
          this._stateBeforeDoctypeName(cp);
        }
      }
    }
    _stateBeforeDoctypeName(cp) {
      if (isAsciiUpper(cp)) {
        this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));
        this.state = State2.DOCTYPE_NAME;
      } else
        switch (cp) {
          case CODE_POINTS.SPACE:
          case CODE_POINTS.LINE_FEED:
          case CODE_POINTS.TABULATION:
          case CODE_POINTS.FORM_FEED: {
            break;
          }
          case CODE_POINTS.NULL: {
            this._err(ERR.unexpectedNullCharacter);
            this._createDoctypeToken(REPLACEMENT_CHARACTER);
            this.state = State2.DOCTYPE_NAME;
            break;
          }
          case CODE_POINTS.GREATER_THAN_SIGN: {
            this._err(ERR.missingDoctypeName);
            this._createDoctypeToken(null);
            const token = this.currentToken;
            token.forceQuirks = true;
            this.emitCurrentDoctype(token);
            this.state = State2.DATA;
            break;
          }
          case CODE_POINTS.EOF: {
            this._err(ERR.eofInDoctype);
            this._createDoctypeToken(null);
            const token = this.currentToken;
            token.forceQuirks = true;
            this.emitCurrentDoctype(token);
            this._emitEOFToken();
            break;
          }
          default: {
            this._createDoctypeToken(String.fromCodePoint(cp));
            this.state = State2.DOCTYPE_NAME;
          }
        }
    }
    _stateDoctypeName(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          this.state = State2.AFTER_DOCTYPE_NAME;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.DATA;
          this.emitCurrentDoctype(token);
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          token.name += REPLACEMENT_CHARACTER;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
        }
      }
    }
    _stateAfterDoctypeName(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.DATA;
          this.emitCurrentDoctype(token);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default:
          if (this._consumeSequenceIfMatch(SEQUENCES.PUBLIC, false)) {
            this.state = State2.AFTER_DOCTYPE_PUBLIC_KEYWORD;
          } else if (this._consumeSequenceIfMatch(SEQUENCES.SYSTEM, false)) {
            this.state = State2.AFTER_DOCTYPE_SYSTEM_KEYWORD;
          } else if (!this._ensureHibernation()) {
            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
            token.forceQuirks = true;
            this.state = State2.BOGUS_DOCTYPE;
            this._stateBogusDoctype(cp);
          }
      }
    }
    _stateAfterDoctypePublicKeyword(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          this.state = State2.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
          break;
        }
        case CODE_POINTS.QUOTATION_MARK: {
          this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
          token.publicId = "";
          this.state = State2.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
          break;
        }
        case CODE_POINTS.APOSTROPHE: {
          this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
          token.publicId = "";
          this.state = State2.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingDoctypePublicIdentifier);
          token.forceQuirks = true;
          this.state = State2.DATA;
          this.emitCurrentDoctype(token);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
          token.forceQuirks = true;
          this.state = State2.BOGUS_DOCTYPE;
          this._stateBogusDoctype(cp);
        }
      }
    }
    _stateBeforeDoctypePublicIdentifier(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.QUOTATION_MARK: {
          token.publicId = "";
          this.state = State2.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
          break;
        }
        case CODE_POINTS.APOSTROPHE: {
          token.publicId = "";
          this.state = State2.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingDoctypePublicIdentifier);
          token.forceQuirks = true;
          this.state = State2.DATA;
          this.emitCurrentDoctype(token);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
          token.forceQuirks = true;
          this.state = State2.BOGUS_DOCTYPE;
          this._stateBogusDoctype(cp);
        }
      }
    }
    _stateDoctypePublicIdentifierDoubleQuoted(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.QUOTATION_MARK: {
          this.state = State2.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          token.publicId += REPLACEMENT_CHARACTER;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.abruptDoctypePublicIdentifier);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this.state = State2.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          token.publicId += String.fromCodePoint(cp);
        }
      }
    }
    _stateDoctypePublicIdentifierSingleQuoted(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.APOSTROPHE: {
          this.state = State2.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          token.publicId += REPLACEMENT_CHARACTER;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.abruptDoctypePublicIdentifier);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this.state = State2.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          token.publicId += String.fromCodePoint(cp);
        }
      }
    }
    _stateAfterDoctypePublicIdentifier(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          this.state = State2.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.DATA;
          this.emitCurrentDoctype(token);
          break;
        }
        case CODE_POINTS.QUOTATION_MARK: {
          this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
          token.systemId = "";
          this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
          break;
        }
        case CODE_POINTS.APOSTROPHE: {
          this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
          token.systemId = "";
          this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
          token.forceQuirks = true;
          this.state = State2.BOGUS_DOCTYPE;
          this._stateBogusDoctype(cp);
        }
      }
    }
    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.emitCurrentDoctype(token);
          this.state = State2.DATA;
          break;
        }
        case CODE_POINTS.QUOTATION_MARK: {
          token.systemId = "";
          this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
          break;
        }
        case CODE_POINTS.APOSTROPHE: {
          token.systemId = "";
          this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
          token.forceQuirks = true;
          this.state = State2.BOGUS_DOCTYPE;
          this._stateBogusDoctype(cp);
        }
      }
    }
    _stateAfterDoctypeSystemKeyword(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          this.state = State2.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
          break;
        }
        case CODE_POINTS.QUOTATION_MARK: {
          this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
          token.systemId = "";
          this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
          break;
        }
        case CODE_POINTS.APOSTROPHE: {
          this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
          token.systemId = "";
          this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingDoctypeSystemIdentifier);
          token.forceQuirks = true;
          this.state = State2.DATA;
          this.emitCurrentDoctype(token);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
          token.forceQuirks = true;
          this.state = State2.BOGUS_DOCTYPE;
          this._stateBogusDoctype(cp);
        }
      }
    }
    _stateBeforeDoctypeSystemIdentifier(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.QUOTATION_MARK: {
          token.systemId = "";
          this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
          break;
        }
        case CODE_POINTS.APOSTROPHE: {
          token.systemId = "";
          this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingDoctypeSystemIdentifier);
          token.forceQuirks = true;
          this.state = State2.DATA;
          this.emitCurrentDoctype(token);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
          token.forceQuirks = true;
          this.state = State2.BOGUS_DOCTYPE;
          this._stateBogusDoctype(cp);
        }
      }
    }
    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.QUOTATION_MARK: {
          this.state = State2.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          token.systemId += REPLACEMENT_CHARACTER;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.abruptDoctypeSystemIdentifier);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this.state = State2.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          token.systemId += String.fromCodePoint(cp);
        }
      }
    }
    _stateDoctypeSystemIdentifierSingleQuoted(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.APOSTROPHE: {
          this.state = State2.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          token.systemId += REPLACEMENT_CHARACTER;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.abruptDoctypeSystemIdentifier);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this.state = State2.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          token.systemId += String.fromCodePoint(cp);
        }
      }
    }
    _stateAfterDoctypeSystemIdentifier(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.emitCurrentDoctype(token);
          this.state = State2.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
          this.state = State2.BOGUS_DOCTYPE;
          this._stateBogusDoctype(cp);
        }
      }
    }
    _stateBogusDoctype(cp) {
      const token = this.currentToken;
      switch (cp) {
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.emitCurrentDoctype(token);
          this.state = State2.DATA;
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          break;
        }
        case CODE_POINTS.EOF: {
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default:
      }
    }
    _stateCdataSection(cp) {
      switch (cp) {
        case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
          this.state = State2.CDATA_SECTION_BRACKET;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInCdata);
          this._emitEOFToken();
          break;
        }
        default: {
          this._emitCodePoint(cp);
        }
      }
    }
    _stateCdataSectionBracket(cp) {
      if (cp === CODE_POINTS.RIGHT_SQUARE_BRACKET) {
        this.state = State2.CDATA_SECTION_END;
      } else {
        this._emitChars("]");
        this.state = State2.CDATA_SECTION;
        this._stateCdataSection(cp);
      }
    }
    _stateCdataSectionEnd(cp) {
      switch (cp) {
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this.state = State2.DATA;
          break;
        }
        case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
          this._emitChars("]");
          break;
        }
        default: {
          this._emitChars("]]");
          this.state = State2.CDATA_SECTION;
          this._stateCdataSection(cp);
        }
      }
    }
    _stateCharacterReference(cp) {
      if (cp === CODE_POINTS.NUMBER_SIGN) {
        this.state = State2.NUMERIC_CHARACTER_REFERENCE;
      } else if (isAsciiAlphaNumeric(cp)) {
        this.state = State2.NAMED_CHARACTER_REFERENCE;
        this._stateNamedCharacterReference(cp);
      } else {
        this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
        this._reconsumeInState(this.returnState, cp);
      }
    }
    _stateNamedCharacterReference(cp) {
      const matchResult = this._matchNamedCharacterReference(cp);
      if (this._ensureHibernation()) {
      } else if (matchResult) {
        for (let i = 0; i < matchResult.length; i++) {
          this._flushCodePointConsumedAsCharacterReference(matchResult[i]);
        }
        this.state = this.returnState;
      } else {
        this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
        this.state = State2.AMBIGUOUS_AMPERSAND;
      }
    }
    _stateAmbiguousAmpersand(cp) {
      if (isAsciiAlphaNumeric(cp)) {
        this._flushCodePointConsumedAsCharacterReference(cp);
      } else {
        if (cp === CODE_POINTS.SEMICOLON) {
          this._err(ERR.unknownNamedCharacterReference);
        }
        this._reconsumeInState(this.returnState, cp);
      }
    }
    _stateNumericCharacterReference(cp) {
      this.charRefCode = 0;
      if (cp === CODE_POINTS.LATIN_SMALL_X || cp === CODE_POINTS.LATIN_CAPITAL_X) {
        this.state = State2.HEXADEMICAL_CHARACTER_REFERENCE_START;
      } else if (isAsciiDigit(cp)) {
        this.state = State2.DECIMAL_CHARACTER_REFERENCE;
        this._stateDecimalCharacterReference(cp);
      } else {
        this._err(ERR.absenceOfDigitsInNumericCharacterReference);
        this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
        this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
        this._reconsumeInState(this.returnState, cp);
      }
    }
    _stateHexademicalCharacterReferenceStart(cp) {
      if (isAsciiHexDigit(cp)) {
        this.state = State2.HEXADEMICAL_CHARACTER_REFERENCE;
        this._stateHexademicalCharacterReference(cp);
      } else {
        this._err(ERR.absenceOfDigitsInNumericCharacterReference);
        this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
        this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
        this._unconsume(2);
        this.state = this.returnState;
      }
    }
    _stateHexademicalCharacterReference(cp) {
      if (isAsciiUpperHexDigit(cp)) {
        this.charRefCode = this.charRefCode * 16 + cp - 55;
      } else if (isAsciiLowerHexDigit(cp)) {
        this.charRefCode = this.charRefCode * 16 + cp - 87;
      } else if (isAsciiDigit(cp)) {
        this.charRefCode = this.charRefCode * 16 + cp - 48;
      } else if (cp === CODE_POINTS.SEMICOLON) {
        this.state = State2.NUMERIC_CHARACTER_REFERENCE_END;
      } else {
        this._err(ERR.missingSemicolonAfterCharacterReference);
        this.state = State2.NUMERIC_CHARACTER_REFERENCE_END;
        this._stateNumericCharacterReferenceEnd(cp);
      }
    }
    _stateDecimalCharacterReference(cp) {
      if (isAsciiDigit(cp)) {
        this.charRefCode = this.charRefCode * 10 + cp - 48;
      } else if (cp === CODE_POINTS.SEMICOLON) {
        this.state = State2.NUMERIC_CHARACTER_REFERENCE_END;
      } else {
        this._err(ERR.missingSemicolonAfterCharacterReference);
        this.state = State2.NUMERIC_CHARACTER_REFERENCE_END;
        this._stateNumericCharacterReferenceEnd(cp);
      }
    }
    _stateNumericCharacterReferenceEnd(cp) {
      if (this.charRefCode === CODE_POINTS.NULL) {
        this._err(ERR.nullCharacterReference);
        this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
      } else if (this.charRefCode > 1114111) {
        this._err(ERR.characterReferenceOutsideUnicodeRange);
        this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
      } else if (isSurrogate(this.charRefCode)) {
        this._err(ERR.surrogateCharacterReference);
        this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
      } else if (isUndefinedCodePoint(this.charRefCode)) {
        this._err(ERR.noncharacterCharacterReference);
      } else if (isControlCodePoint(this.charRefCode) || this.charRefCode === CODE_POINTS.CARRIAGE_RETURN) {
        this._err(ERR.controlCharacterReference);
        const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);
        if (replacement !== void 0) {
          this.charRefCode = replacement;
        }
      }
      this._flushCodePointConsumedAsCharacterReference(this.charRefCode);
      this._reconsumeInState(this.returnState, cp);
    }
  };

  // node_modules/parse5/dist/parser/open-element-stack.js
  init_globals();
  var IMPLICIT_END_TAG_REQUIRED = /* @__PURE__ */ new Set([TAG_ID.DD, TAG_ID.DT, TAG_ID.LI, TAG_ID.OPTGROUP, TAG_ID.OPTION, TAG_ID.P, TAG_ID.RB, TAG_ID.RP, TAG_ID.RT, TAG_ID.RTC]);
  var IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = /* @__PURE__ */ new Set([
    ...IMPLICIT_END_TAG_REQUIRED,
    TAG_ID.CAPTION,
    TAG_ID.COLGROUP,
    TAG_ID.TBODY,
    TAG_ID.TD,
    TAG_ID.TFOOT,
    TAG_ID.TH,
    TAG_ID.THEAD,
    TAG_ID.TR
  ]);
  var SCOPING_ELEMENT_NS = /* @__PURE__ */ new Map([
    [TAG_ID.APPLET, NS.HTML],
    [TAG_ID.CAPTION, NS.HTML],
    [TAG_ID.HTML, NS.HTML],
    [TAG_ID.MARQUEE, NS.HTML],
    [TAG_ID.OBJECT, NS.HTML],
    [TAG_ID.TABLE, NS.HTML],
    [TAG_ID.TD, NS.HTML],
    [TAG_ID.TEMPLATE, NS.HTML],
    [TAG_ID.TH, NS.HTML],
    [TAG_ID.ANNOTATION_XML, NS.MATHML],
    [TAG_ID.MI, NS.MATHML],
    [TAG_ID.MN, NS.MATHML],
    [TAG_ID.MO, NS.MATHML],
    [TAG_ID.MS, NS.MATHML],
    [TAG_ID.MTEXT, NS.MATHML],
    [TAG_ID.DESC, NS.SVG],
    [TAG_ID.FOREIGN_OBJECT, NS.SVG],
    [TAG_ID.TITLE, NS.SVG]
  ]);
  var NAMED_HEADERS = [TAG_ID.H1, TAG_ID.H2, TAG_ID.H3, TAG_ID.H4, TAG_ID.H5, TAG_ID.H6];
  var TABLE_ROW_CONTEXT = [TAG_ID.TR, TAG_ID.TEMPLATE, TAG_ID.HTML];
  var TABLE_BODY_CONTEXT = [TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TEMPLATE, TAG_ID.HTML];
  var TABLE_CONTEXT = [TAG_ID.TABLE, TAG_ID.TEMPLATE, TAG_ID.HTML];
  var TABLE_CELLS = [TAG_ID.TD, TAG_ID.TH];
  var OpenElementStack = class {
    constructor(document2, treeAdapter, handler) {
      this.treeAdapter = treeAdapter;
      this.handler = handler;
      this.items = [];
      this.tagIDs = [];
      this.stackTop = -1;
      this.tmplCount = 0;
      this.currentTagId = TAG_ID.UNKNOWN;
      this.current = document2;
    }
    get currentTmplContentOrNode() {
      return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;
    }
    _indexOf(element) {
      return this.items.lastIndexOf(element, this.stackTop);
    }
    _isInTemplate() {
      return this.currentTagId === TAG_ID.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
    }
    _updateCurrentElement() {
      this.current = this.items[this.stackTop];
      this.currentTagId = this.tagIDs[this.stackTop];
    }
    push(element, tagID) {
      this.stackTop++;
      this.items[this.stackTop] = element;
      this.current = element;
      this.tagIDs[this.stackTop] = tagID;
      this.currentTagId = tagID;
      if (this._isInTemplate()) {
        this.tmplCount++;
      }
      this.handler.onItemPush(element, tagID, true);
    }
    pop() {
      const popped = this.current;
      if (this.tmplCount > 0 && this._isInTemplate()) {
        this.tmplCount--;
      }
      this.stackTop--;
      this._updateCurrentElement();
      this.handler.onItemPop(popped, true);
    }
    replace(oldElement, newElement) {
      const idx = this._indexOf(oldElement);
      this.items[idx] = newElement;
      if (idx === this.stackTop) {
        this.current = newElement;
      }
    }
    insertAfter(referenceElement, newElement, newElementID) {
      const insertionIdx = this._indexOf(referenceElement) + 1;
      this.items.splice(insertionIdx, 0, newElement);
      this.tagIDs.splice(insertionIdx, 0, newElementID);
      this.stackTop++;
      if (insertionIdx === this.stackTop) {
        this._updateCurrentElement();
      }
      this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);
    }
    popUntilTagNamePopped(tagName) {
      let targetIdx = this.stackTop + 1;
      do {
        targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);
      } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);
      this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);
    }
    shortenToLength(idx) {
      while (this.stackTop >= idx) {
        const popped = this.current;
        if (this.tmplCount > 0 && this._isInTemplate()) {
          this.tmplCount -= 1;
        }
        this.stackTop--;
        this._updateCurrentElement();
        this.handler.onItemPop(popped, this.stackTop < idx);
      }
    }
    popUntilElementPopped(element) {
      const idx = this._indexOf(element);
      this.shortenToLength(idx < 0 ? 0 : idx);
    }
    popUntilPopped(tagNames, targetNS) {
      const idx = this._indexOfTagNames(tagNames, targetNS);
      this.shortenToLength(idx < 0 ? 0 : idx);
    }
    popUntilNumberedHeaderPopped() {
      this.popUntilPopped(NAMED_HEADERS, NS.HTML);
    }
    popUntilTableCellPopped() {
      this.popUntilPopped(TABLE_CELLS, NS.HTML);
    }
    popAllUpToHtmlElement() {
      this.tmplCount = 0;
      this.shortenToLength(1);
    }
    _indexOfTagNames(tagNames, namespace) {
      for (let i = this.stackTop; i >= 0; i--) {
        if (tagNames.includes(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {
          return i;
        }
      }
      return -1;
    }
    clearBackTo(tagNames, targetNS) {
      const idx = this._indexOfTagNames(tagNames, targetNS);
      this.shortenToLength(idx + 1);
    }
    clearBackToTableContext() {
      this.clearBackTo(TABLE_CONTEXT, NS.HTML);
    }
    clearBackToTableBodyContext() {
      this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);
    }
    clearBackToTableRowContext() {
      this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);
    }
    remove(element) {
      const idx = this._indexOf(element);
      if (idx >= 0) {
        if (idx === this.stackTop) {
          this.pop();
        } else {
          this.items.splice(idx, 1);
          this.tagIDs.splice(idx, 1);
          this.stackTop--;
          this._updateCurrentElement();
          this.handler.onItemPop(element, false);
        }
      }
    }
    tryPeekProperlyNestedBodyElement() {
      return this.stackTop >= 1 && this.tagIDs[1] === TAG_ID.BODY ? this.items[1] : null;
    }
    contains(element) {
      return this._indexOf(element) > -1;
    }
    getCommonAncestor(element) {
      const elementIdx = this._indexOf(element) - 1;
      return elementIdx >= 0 ? this.items[elementIdx] : null;
    }
    isRootHtmlElementCurrent() {
      return this.stackTop === 0 && this.tagIDs[0] === TAG_ID.HTML;
    }
    hasInScope(tagName) {
      for (let i = this.stackTop; i >= 0; i--) {
        const tn = this.tagIDs[i];
        const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
        if (tn === tagName && ns === NS.HTML) {
          return true;
        }
        if (SCOPING_ELEMENT_NS.get(tn) === ns) {
          return false;
        }
      }
      return true;
    }
    hasNumberedHeaderInScope() {
      for (let i = this.stackTop; i >= 0; i--) {
        const tn = this.tagIDs[i];
        const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
        if (isNumberedHeader(tn) && ns === NS.HTML) {
          return true;
        }
        if (SCOPING_ELEMENT_NS.get(tn) === ns) {
          return false;
        }
      }
      return true;
    }
    hasInListItemScope(tagName) {
      for (let i = this.stackTop; i >= 0; i--) {
        const tn = this.tagIDs[i];
        const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
        if (tn === tagName && ns === NS.HTML) {
          return true;
        }
        if ((tn === TAG_ID.UL || tn === TAG_ID.OL) && ns === NS.HTML || SCOPING_ELEMENT_NS.get(tn) === ns) {
          return false;
        }
      }
      return true;
    }
    hasInButtonScope(tagName) {
      for (let i = this.stackTop; i >= 0; i--) {
        const tn = this.tagIDs[i];
        const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
        if (tn === tagName && ns === NS.HTML) {
          return true;
        }
        if (tn === TAG_ID.BUTTON && ns === NS.HTML || SCOPING_ELEMENT_NS.get(tn) === ns) {
          return false;
        }
      }
      return true;
    }
    hasInTableScope(tagName) {
      for (let i = this.stackTop; i >= 0; i--) {
        const tn = this.tagIDs[i];
        const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
        if (ns !== NS.HTML) {
          continue;
        }
        if (tn === tagName) {
          return true;
        }
        if (tn === TAG_ID.TABLE || tn === TAG_ID.TEMPLATE || tn === TAG_ID.HTML) {
          return false;
        }
      }
      return true;
    }
    hasTableBodyContextInTableScope() {
      for (let i = this.stackTop; i >= 0; i--) {
        const tn = this.tagIDs[i];
        const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
        if (ns !== NS.HTML) {
          continue;
        }
        if (tn === TAG_ID.TBODY || tn === TAG_ID.THEAD || tn === TAG_ID.TFOOT) {
          return true;
        }
        if (tn === TAG_ID.TABLE || tn === TAG_ID.HTML) {
          return false;
        }
      }
      return true;
    }
    hasInSelectScope(tagName) {
      for (let i = this.stackTop; i >= 0; i--) {
        const tn = this.tagIDs[i];
        const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
        if (ns !== NS.HTML) {
          continue;
        }
        if (tn === tagName) {
          return true;
        }
        if (tn !== TAG_ID.OPTION && tn !== TAG_ID.OPTGROUP) {
          return false;
        }
      }
      return true;
    }
    generateImpliedEndTags() {
      while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {
        this.pop();
      }
    }
    generateImpliedEndTagsThoroughly() {
      while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
        this.pop();
      }
    }
    generateImpliedEndTagsWithExclusion(exclusionId) {
      while (this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
        this.pop();
      }
    }
  };

  // node_modules/parse5/dist/parser/formatting-element-list.js
  init_globals();
  var NOAH_ARK_CAPACITY = 3;
  var EntryType;
  (function(EntryType2) {
    EntryType2[EntryType2["Marker"] = 0] = "Marker";
    EntryType2[EntryType2["Element"] = 1] = "Element";
  })(EntryType = EntryType || (EntryType = {}));
  var MARKER = { type: EntryType.Marker };
  var FormattingElementList = class {
    constructor(treeAdapter) {
      this.treeAdapter = treeAdapter;
      this.entries = [];
      this.bookmark = null;
    }
    _getNoahArkConditionCandidates(newElement, neAttrs) {
      const candidates = [];
      const neAttrsLength = neAttrs.length;
      const neTagName = this.treeAdapter.getTagName(newElement);
      const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
      for (let i = 0; i < this.entries.length; i++) {
        const entry = this.entries[i];
        if (entry.type === EntryType.Marker) {
          break;
        }
        const { element } = entry;
        if (this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {
          const elementAttrs = this.treeAdapter.getAttrList(element);
          if (elementAttrs.length === neAttrsLength) {
            candidates.push({ idx: i, attrs: elementAttrs });
          }
        }
      }
      return candidates;
    }
    _ensureNoahArkCondition(newElement) {
      if (this.entries.length < NOAH_ARK_CAPACITY)
        return;
      const neAttrs = this.treeAdapter.getAttrList(newElement);
      const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);
      if (candidates.length < NOAH_ARK_CAPACITY)
        return;
      const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));
      let validCandidates = 0;
      for (let i = 0; i < candidates.length; i++) {
        const candidate = candidates[i];
        if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {
          validCandidates += 1;
          if (validCandidates >= NOAH_ARK_CAPACITY) {
            this.entries.splice(candidate.idx, 1);
          }
        }
      }
    }
    insertMarker() {
      this.entries.unshift(MARKER);
    }
    pushElement(element, token) {
      this._ensureNoahArkCondition(element);
      this.entries.unshift({
        type: EntryType.Element,
        element,
        token
      });
    }
    insertElementAfterBookmark(element, token) {
      const bookmarkIdx = this.entries.indexOf(this.bookmark);
      this.entries.splice(bookmarkIdx, 0, {
        type: EntryType.Element,
        element,
        token
      });
    }
    removeEntry(entry) {
      const entryIndex = this.entries.indexOf(entry);
      if (entryIndex >= 0) {
        this.entries.splice(entryIndex, 1);
      }
    }
    clearToLastMarker() {
      const markerIdx = this.entries.indexOf(MARKER);
      if (markerIdx >= 0) {
        this.entries.splice(0, markerIdx + 1);
      } else {
        this.entries.length = 0;
      }
    }
    getElementEntryInScopeWithTagName(tagName) {
      const entry = this.entries.find((entry2) => entry2.type === EntryType.Marker || this.treeAdapter.getTagName(entry2.element) === tagName);
      return entry && entry.type === EntryType.Element ? entry : null;
    }
    getElementEntry(element) {
      return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);
    }
  };

  // node_modules/parse5/dist/tree-adapters/default.js
  init_globals();
  function createTextNode(value) {
    return {
      nodeName: "#text",
      value,
      parentNode: null
    };
  }
  var defaultTreeAdapter = {
    createDocument() {
      return {
        nodeName: "#document",
        mode: DOCUMENT_MODE.NO_QUIRKS,
        childNodes: []
      };
    },
    createDocumentFragment() {
      return {
        nodeName: "#document-fragment",
        childNodes: []
      };
    },
    createElement(tagName, namespaceURI, attrs) {
      return {
        nodeName: tagName,
        tagName,
        attrs,
        namespaceURI,
        childNodes: [],
        parentNode: null
      };
    },
    createCommentNode(data) {
      return {
        nodeName: "#comment",
        data,
        parentNode: null
      };
    },
    appendChild(parentNode, newNode) {
      parentNode.childNodes.push(newNode);
      newNode.parentNode = parentNode;
    },
    insertBefore(parentNode, newNode, referenceNode) {
      const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
      parentNode.childNodes.splice(insertionIdx, 0, newNode);
      newNode.parentNode = parentNode;
    },
    setTemplateContent(templateElement, contentElement) {
      templateElement.content = contentElement;
    },
    getTemplateContent(templateElement) {
      return templateElement.content;
    },
    setDocumentType(document2, name, publicId, systemId) {
      const doctypeNode = document2.childNodes.find((node) => node.nodeName === "#documentType");
      if (doctypeNode) {
        doctypeNode.name = name;
        doctypeNode.publicId = publicId;
        doctypeNode.systemId = systemId;
      } else {
        const node = {
          nodeName: "#documentType",
          name,
          publicId,
          systemId,
          parentNode: null
        };
        defaultTreeAdapter.appendChild(document2, node);
      }
    },
    setDocumentMode(document2, mode) {
      document2.mode = mode;
    },
    getDocumentMode(document2) {
      return document2.mode;
    },
    detachNode(node) {
      if (node.parentNode) {
        const idx = node.parentNode.childNodes.indexOf(node);
        node.parentNode.childNodes.splice(idx, 1);
        node.parentNode = null;
      }
    },
    insertText(parentNode, text) {
      if (parentNode.childNodes.length > 0) {
        const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
        if (defaultTreeAdapter.isTextNode(prevNode)) {
          prevNode.value += text;
          return;
        }
      }
      defaultTreeAdapter.appendChild(parentNode, createTextNode(text));
    },
    insertTextBefore(parentNode, text, referenceNode) {
      const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
      if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {
        prevNode.value += text;
      } else {
        defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);
      }
    },
    adoptAttributes(recipient2, attrs) {
      const recipientAttrsMap = new Set(recipient2.attrs.map((attr) => attr.name));
      for (let j = 0; j < attrs.length; j++) {
        if (!recipientAttrsMap.has(attrs[j].name)) {
          recipient2.attrs.push(attrs[j]);
        }
      }
    },
    getFirstChild(node) {
      return node.childNodes[0];
    },
    getChildNodes(node) {
      return node.childNodes;
    },
    getParentNode(node) {
      return node.parentNode;
    },
    getAttrList(element) {
      return element.attrs;
    },
    getTagName(element) {
      return element.tagName;
    },
    getNamespaceURI(element) {
      return element.namespaceURI;
    },
    getTextNodeContent(textNode) {
      return textNode.value;
    },
    getCommentNodeContent(commentNode) {
      return commentNode.data;
    },
    getDocumentTypeNodeName(doctypeNode) {
      return doctypeNode.name;
    },
    getDocumentTypeNodePublicId(doctypeNode) {
      return doctypeNode.publicId;
    },
    getDocumentTypeNodeSystemId(doctypeNode) {
      return doctypeNode.systemId;
    },
    isTextNode(node) {
      return node.nodeName === "#text";
    },
    isCommentNode(node) {
      return node.nodeName === "#comment";
    },
    isDocumentTypeNode(node) {
      return node.nodeName === "#documentType";
    },
    isElementNode(node) {
      return Object.prototype.hasOwnProperty.call(node, "tagName");
    },
    setNodeSourceCodeLocation(node, location) {
      node.sourceCodeLocation = location;
    },
    getNodeSourceCodeLocation(node) {
      return node.sourceCodeLocation;
    },
    updateNodeSourceCodeLocation(node, endLocation) {
      node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };
    }
  };

  // node_modules/parse5/dist/common/doctype.js
  init_globals();
  var VALID_DOCTYPE_NAME = "html";
  var VALID_SYSTEM_ID = "about:legacy-compat";
  var QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
  var QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
    "+//silmaril//dtd html pro v0r11 19970101//",
    "-//as//dtd html 3.0 aswedit + extensions//",
    "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
    "-//ietf//dtd html 2.0 level 1//",
    "-//ietf//dtd html 2.0 level 2//",
    "-//ietf//dtd html 2.0 strict level 1//",
    "-//ietf//dtd html 2.0 strict level 2//",
    "-//ietf//dtd html 2.0 strict//",
    "-//ietf//dtd html 2.0//",
    "-//ietf//dtd html 2.1e//",
    "-//ietf//dtd html 3.0//",
    "-//ietf//dtd html 3.2 final//",
    "-//ietf//dtd html 3.2//",
    "-//ietf//dtd html 3//",
    "-//ietf//dtd html level 0//",
    "-//ietf//dtd html level 1//",
    "-//ietf//dtd html level 2//",
    "-//ietf//dtd html level 3//",
    "-//ietf//dtd html strict level 0//",
    "-//ietf//dtd html strict level 1//",
    "-//ietf//dtd html strict level 2//",
    "-//ietf//dtd html strict level 3//",
    "-//ietf//dtd html strict//",
    "-//ietf//dtd html//",
    "-//metrius//dtd metrius presentational//",
    "-//microsoft//dtd internet explorer 2.0 html strict//",
    "-//microsoft//dtd internet explorer 2.0 html//",
    "-//microsoft//dtd internet explorer 2.0 tables//",
    "-//microsoft//dtd internet explorer 3.0 html strict//",
    "-//microsoft//dtd internet explorer 3.0 html//",
    "-//microsoft//dtd internet explorer 3.0 tables//",
    "-//netscape comm. corp.//dtd html//",
    "-//netscape comm. corp.//dtd strict html//",
    "-//o'reilly and associates//dtd html 2.0//",
    "-//o'reilly and associates//dtd html extended 1.0//",
    "-//o'reilly and associates//dtd html extended relaxed 1.0//",
    "-//sq//dtd html 2.0 hotmetal + extensions//",
    "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
    "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
    "-//spyglass//dtd html 2.0 extended//",
    "-//sun microsystems corp.//dtd hotjava html//",
    "-//sun microsystems corp.//dtd hotjava strict html//",
    "-//w3c//dtd html 3 1995-03-24//",
    "-//w3c//dtd html 3.2 draft//",
    "-//w3c//dtd html 3.2 final//",
    "-//w3c//dtd html 3.2//",
    "-//w3c//dtd html 3.2s draft//",
    "-//w3c//dtd html 4.0 frameset//",
    "-//w3c//dtd html 4.0 transitional//",
    "-//w3c//dtd html experimental 19960712//",
    "-//w3c//dtd html experimental 970421//",
    "-//w3c//dtd w3 html//",
    "-//w3o//dtd w3 html 3.0//",
    "-//webtechs//dtd mozilla html 2.0//",
    "-//webtechs//dtd mozilla html//"
  ];
  var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
    ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,
    "-//w3c//dtd html 4.01 frameset//",
    "-//w3c//dtd html 4.01 transitional//"
  ];
  var QUIRKS_MODE_PUBLIC_IDS = /* @__PURE__ */ new Set([
    "-//w3o//dtd w3 html strict 3.0//en//",
    "-/w3c/dtd html 4.0 transitional/en",
    "html"
  ]);
  var LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"];
  var LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
    ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,
    "-//w3c//dtd html 4.01 frameset//",
    "-//w3c//dtd html 4.01 transitional//"
  ];
  function hasPrefix(publicId, prefixes) {
    return prefixes.some((prefix) => publicId.startsWith(prefix));
  }
  function isConforming(token) {
    return token.name === VALID_DOCTYPE_NAME && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID);
  }
  function getDocumentMode(token) {
    if (token.name !== VALID_DOCTYPE_NAME) {
      return DOCUMENT_MODE.QUIRKS;
    }
    const { systemId } = token;
    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
      return DOCUMENT_MODE.QUIRKS;
    }
    let { publicId } = token;
    if (publicId !== null) {
      publicId = publicId.toLowerCase();
      if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {
        return DOCUMENT_MODE.QUIRKS;
      }
      let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
      if (hasPrefix(publicId, prefixes)) {
        return DOCUMENT_MODE.QUIRKS;
      }
      prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
      if (hasPrefix(publicId, prefixes)) {
        return DOCUMENT_MODE.LIMITED_QUIRKS;
      }
    }
    return DOCUMENT_MODE.NO_QUIRKS;
  }

  // node_modules/parse5/dist/common/foreign-content.js
  var foreign_content_exports = {};
  __export(foreign_content_exports, {
    SVG_TAG_NAMES_ADJUSTMENT_MAP: () => SVG_TAG_NAMES_ADJUSTMENT_MAP,
    adjustTokenMathMLAttrs: () => adjustTokenMathMLAttrs,
    adjustTokenSVGAttrs: () => adjustTokenSVGAttrs,
    adjustTokenSVGTagName: () => adjustTokenSVGTagName,
    adjustTokenXMLAttrs: () => adjustTokenXMLAttrs,
    causesExit: () => causesExit,
    isIntegrationPoint: () => isIntegrationPoint
  });
  init_globals();
  var MIME_TYPES = {
    TEXT_HTML: "text/html",
    APPLICATION_XML: "application/xhtml+xml"
  };
  var DEFINITION_URL_ATTR = "definitionurl";
  var ADJUSTED_DEFINITION_URL_ATTR = "definitionURL";
  var SVG_ATTRS_ADJUSTMENT_MAP = new Map([
    "attributeName",
    "attributeType",
    "baseFrequency",
    "baseProfile",
    "calcMode",
    "clipPathUnits",
    "diffuseConstant",
    "edgeMode",
    "filterUnits",
    "glyphRef",
    "gradientTransform",
    "gradientUnits",
    "kernelMatrix",
    "kernelUnitLength",
    "keyPoints",
    "keySplines",
    "keyTimes",
    "lengthAdjust",
    "limitingConeAngle",
    "markerHeight",
    "markerUnits",
    "markerWidth",
    "maskContentUnits",
    "maskUnits",
    "numOctaves",
    "pathLength",
    "patternContentUnits",
    "patternTransform",
    "patternUnits",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "preserveAlpha",
    "preserveAspectRatio",
    "primitiveUnits",
    "refX",
    "refY",
    "repeatCount",
    "repeatDur",
    "requiredExtensions",
    "requiredFeatures",
    "specularConstant",
    "specularExponent",
    "spreadMethod",
    "startOffset",
    "stdDeviation",
    "stitchTiles",
    "surfaceScale",
    "systemLanguage",
    "tableValues",
    "targetX",
    "targetY",
    "textLength",
    "viewBox",
    "viewTarget",
    "xChannelSelector",
    "yChannelSelector",
    "zoomAndPan"
  ].map((attr) => [attr.toLowerCase(), attr]));
  var XML_ATTRS_ADJUSTMENT_MAP = /* @__PURE__ */ new Map([
    ["xlink:actuate", { prefix: "xlink", name: "actuate", namespace: NS.XLINK }],
    ["xlink:arcrole", { prefix: "xlink", name: "arcrole", namespace: NS.XLINK }],
    ["xlink:href", { prefix: "xlink", name: "href", namespace: NS.XLINK }],
    ["xlink:role", { prefix: "xlink", name: "role", namespace: NS.XLINK }],
    ["xlink:show", { prefix: "xlink", name: "show", namespace: NS.XLINK }],
    ["xlink:title", { prefix: "xlink", name: "title", namespace: NS.XLINK }],
    ["xlink:type", { prefix: "xlink", name: "type", namespace: NS.XLINK }],
    ["xml:base", { prefix: "xml", name: "base", namespace: NS.XML }],
    ["xml:lang", { prefix: "xml", name: "lang", namespace: NS.XML }],
    ["xml:space", { prefix: "xml", name: "space", namespace: NS.XML }],
    ["xmlns", { prefix: "", name: "xmlns", namespace: NS.XMLNS }],
    ["xmlns:xlink", { prefix: "xmlns", name: "xlink", namespace: NS.XMLNS }]
  ]);
  var SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([
    "altGlyph",
    "altGlyphDef",
    "altGlyphItem",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "clipPath",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "foreignObject",
    "glyphRef",
    "linearGradient",
    "radialGradient",
    "textPath"
  ].map((tn) => [tn.toLowerCase(), tn]));
  var EXITS_FOREIGN_CONTENT = /* @__PURE__ */ new Set([
    TAG_ID.B,
    TAG_ID.BIG,
    TAG_ID.BLOCKQUOTE,
    TAG_ID.BODY,
    TAG_ID.BR,
    TAG_ID.CENTER,
    TAG_ID.CODE,
    TAG_ID.DD,
    TAG_ID.DIV,
    TAG_ID.DL,
    TAG_ID.DT,
    TAG_ID.EM,
    TAG_ID.EMBED,
    TAG_ID.H1,
    TAG_ID.H2,
    TAG_ID.H3,
    TAG_ID.H4,
    TAG_ID.H5,
    TAG_ID.H6,
    TAG_ID.HEAD,
    TAG_ID.HR,
    TAG_ID.I,
    TAG_ID.IMG,
    TAG_ID.LI,
    TAG_ID.LISTING,
    TAG_ID.MENU,
    TAG_ID.META,
    TAG_ID.NOBR,
    TAG_ID.OL,
    TAG_ID.P,
    TAG_ID.PRE,
    TAG_ID.RUBY,
    TAG_ID.S,
    TAG_ID.SMALL,
    TAG_ID.SPAN,
    TAG_ID.STRONG,
    TAG_ID.STRIKE,
    TAG_ID.SUB,
    TAG_ID.SUP,
    TAG_ID.TABLE,
    TAG_ID.TT,
    TAG_ID.U,
    TAG_ID.UL,
    TAG_ID.VAR
  ]);
  function causesExit(startTagToken) {
    const tn = startTagToken.tagID;
    const isFontWithAttrs = tn === TAG_ID.FONT && startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);
    return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);
  }
  function adjustTokenMathMLAttrs(token) {
    for (let i = 0; i < token.attrs.length; i++) {
      if (token.attrs[i].name === DEFINITION_URL_ATTR) {
        token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
        break;
      }
    }
  }
  function adjustTokenSVGAttrs(token) {
    for (let i = 0; i < token.attrs.length; i++) {
      const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
      if (adjustedAttrName != null) {
        token.attrs[i].name = adjustedAttrName;
      }
    }
  }
  function adjustTokenXMLAttrs(token) {
    for (let i = 0; i < token.attrs.length; i++) {
      const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
      if (adjustedAttrEntry) {
        token.attrs[i].prefix = adjustedAttrEntry.prefix;
        token.attrs[i].name = adjustedAttrEntry.name;
        token.attrs[i].namespace = adjustedAttrEntry.namespace;
      }
    }
  }
  function adjustTokenSVGTagName(token) {
    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);
    if (adjustedTagName != null) {
      token.tagName = adjustedTagName;
      token.tagID = getTagID(token.tagName);
    }
  }
  function isMathMLTextIntegrationPoint(tn, ns) {
    return ns === NS.MATHML && (tn === TAG_ID.MI || tn === TAG_ID.MO || tn === TAG_ID.MN || tn === TAG_ID.MS || tn === TAG_ID.MTEXT);
  }
  function isHtmlIntegrationPoint(tn, ns, attrs) {
    if (ns === NS.MATHML && tn === TAG_ID.ANNOTATION_XML) {
      for (let i = 0; i < attrs.length; i++) {
        if (attrs[i].name === ATTRS.ENCODING) {
          const value = attrs[i].value.toLowerCase();
          return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
        }
      }
    }
    return ns === NS.SVG && (tn === TAG_ID.FOREIGN_OBJECT || tn === TAG_ID.DESC || tn === TAG_ID.TITLE);
  }
  function isIntegrationPoint(tn, ns, attrs, foreignNS) {
    return (!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs) || (!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns);
  }

  // node_modules/parse5/dist/parser/index.js
  var HIDDEN_INPUT_TYPE = "hidden";
  var AA_OUTER_LOOP_ITER = 8;
  var AA_INNER_LOOP_ITER = 3;
  var InsertionMode;
  (function(InsertionMode2) {
    InsertionMode2[InsertionMode2["INITIAL"] = 0] = "INITIAL";
    InsertionMode2[InsertionMode2["BEFORE_HTML"] = 1] = "BEFORE_HTML";
    InsertionMode2[InsertionMode2["BEFORE_HEAD"] = 2] = "BEFORE_HEAD";
    InsertionMode2[InsertionMode2["IN_HEAD"] = 3] = "IN_HEAD";
    InsertionMode2[InsertionMode2["IN_HEAD_NO_SCRIPT"] = 4] = "IN_HEAD_NO_SCRIPT";
    InsertionMode2[InsertionMode2["AFTER_HEAD"] = 5] = "AFTER_HEAD";
    InsertionMode2[InsertionMode2["IN_BODY"] = 6] = "IN_BODY";
    InsertionMode2[InsertionMode2["TEXT"] = 7] = "TEXT";
    InsertionMode2[InsertionMode2["IN_TABLE"] = 8] = "IN_TABLE";
    InsertionMode2[InsertionMode2["IN_TABLE_TEXT"] = 9] = "IN_TABLE_TEXT";
    InsertionMode2[InsertionMode2["IN_CAPTION"] = 10] = "IN_CAPTION";
    InsertionMode2[InsertionMode2["IN_COLUMN_GROUP"] = 11] = "IN_COLUMN_GROUP";
    InsertionMode2[InsertionMode2["IN_TABLE_BODY"] = 12] = "IN_TABLE_BODY";
    InsertionMode2[InsertionMode2["IN_ROW"] = 13] = "IN_ROW";
    InsertionMode2[InsertionMode2["IN_CELL"] = 14] = "IN_CELL";
    InsertionMode2[InsertionMode2["IN_SELECT"] = 15] = "IN_SELECT";
    InsertionMode2[InsertionMode2["IN_SELECT_IN_TABLE"] = 16] = "IN_SELECT_IN_TABLE";
    InsertionMode2[InsertionMode2["IN_TEMPLATE"] = 17] = "IN_TEMPLATE";
    InsertionMode2[InsertionMode2["AFTER_BODY"] = 18] = "AFTER_BODY";
    InsertionMode2[InsertionMode2["IN_FRAMESET"] = 19] = "IN_FRAMESET";
    InsertionMode2[InsertionMode2["AFTER_FRAMESET"] = 20] = "AFTER_FRAMESET";
    InsertionMode2[InsertionMode2["AFTER_AFTER_BODY"] = 21] = "AFTER_AFTER_BODY";
    InsertionMode2[InsertionMode2["AFTER_AFTER_FRAMESET"] = 22] = "AFTER_AFTER_FRAMESET";
  })(InsertionMode || (InsertionMode = {}));
  var BASE_LOC = {
    startLine: -1,
    startCol: -1,
    startOffset: -1,
    endLine: -1,
    endCol: -1,
    endOffset: -1
  };
  var TABLE_STRUCTURE_TAGS = /* @__PURE__ */ new Set([TAG_ID.TABLE, TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TR]);
  var defaultParserOptions = {
    scriptingEnabled: true,
    sourceCodeLocationInfo: false,
    treeAdapter: defaultTreeAdapter,
    onParseError: null
  };
  var Parser = class {
    constructor(options2, document2, fragmentContext = null, scriptHandler = null) {
      this.fragmentContext = fragmentContext;
      this.scriptHandler = scriptHandler;
      this.currentToken = null;
      this.stopped = false;
      this.insertionMode = InsertionMode.INITIAL;
      this.originalInsertionMode = InsertionMode.INITIAL;
      this.headElement = null;
      this.formElement = null;
      this.currentNotInHTML = false;
      this.tmplInsertionModeStack = [];
      this.pendingCharacterTokens = [];
      this.hasNonWhitespacePendingCharacterToken = false;
      this.framesetOk = true;
      this.skipNextNewLine = false;
      this.fosterParentingEnabled = false;
      this.options = {
        ...defaultParserOptions,
        ...options2
      };
      this.treeAdapter = this.options.treeAdapter;
      this.onParseError = this.options.onParseError;
      if (this.onParseError) {
        this.options.sourceCodeLocationInfo = true;
      }
      this.document = document2 !== null && document2 !== void 0 ? document2 : this.treeAdapter.createDocument();
      this.tokenizer = new Tokenizer(this.options, this);
      this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
      this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : TAG_ID.UNKNOWN;
      this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);
      this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);
    }
    static parse(html2, options2) {
      const parser = new this(options2);
      parser.tokenizer.write(html2, true);
      return parser.document;
    }
    static getFragmentParser(fragmentContext, options2) {
      const opts = {
        ...defaultParserOptions,
        ...options2
      };
      fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : fragmentContext = opts.treeAdapter.createElement(TAG_NAMES.TEMPLATE, NS.HTML, []);
      const documentMock = opts.treeAdapter.createElement("documentmock", NS.HTML, []);
      const parser = new this(opts, documentMock, fragmentContext);
      if (parser.fragmentContextID === TAG_ID.TEMPLATE) {
        parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
      }
      parser._initTokenizerForFragmentParsing();
      parser._insertFakeRootElement();
      parser._resetInsertionMode();
      parser._findFormInFragmentContext();
      return parser;
    }
    getFragment() {
      const rootElement = this.treeAdapter.getFirstChild(this.document);
      const fragment = this.treeAdapter.createDocumentFragment();
      this._adoptNodes(rootElement, fragment);
      return fragment;
    }
    _err(token, code2, beforeToken) {
      var _a3;
      if (!this.onParseError)
        return;
      const loc = (_a3 = token.location) !== null && _a3 !== void 0 ? _a3 : BASE_LOC;
      const err = {
        code: code2,
        startLine: loc.startLine,
        startCol: loc.startCol,
        startOffset: loc.startOffset,
        endLine: beforeToken ? loc.startLine : loc.endLine,
        endCol: beforeToken ? loc.startCol : loc.endCol,
        endOffset: beforeToken ? loc.startOffset : loc.endOffset
      };
      this.onParseError(err);
    }
    onItemPush(node, tid, isTop) {
      var _a3, _b;
      (_b = (_a3 = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a3, node);
      if (isTop && this.openElements.stackTop > 0)
        this._setContextModes(node, tid);
    }
    onItemPop(node, isTop) {
      var _a3, _b;
      if (this.options.sourceCodeLocationInfo) {
        this._setEndLocation(node, this.currentToken);
      }
      (_b = (_a3 = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a3, node, this.openElements.current);
      if (isTop) {
        let current;
        let currentTagId;
        if (this.openElements.stackTop === 0 && this.fragmentContext) {
          current = this.fragmentContext;
          currentTagId = this.fragmentContextID;
        } else {
          ({ current, currentTagId } = this.openElements);
        }
        this._setContextModes(current, currentTagId);
      }
    }
    _setContextModes(current, tid) {
      const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;
      this.currentNotInHTML = !isHTML;
      this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);
    }
    _switchToTextParsing(currentToken, nextTokenizerState) {
      this._insertElement(currentToken, NS.HTML);
      this.tokenizer.state = nextTokenizerState;
      this.originalInsertionMode = this.insertionMode;
      this.insertionMode = InsertionMode.TEXT;
    }
    switchToPlaintextParsing() {
      this.insertionMode = InsertionMode.TEXT;
      this.originalInsertionMode = InsertionMode.IN_BODY;
      this.tokenizer.state = TokenizerMode.PLAINTEXT;
    }
    _getAdjustedCurrentElement() {
      return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
    }
    _findFormInFragmentContext() {
      let node = this.fragmentContext;
      while (node) {
        if (this.treeAdapter.getTagName(node) === TAG_NAMES.FORM) {
          this.formElement = node;
          break;
        }
        node = this.treeAdapter.getParentNode(node);
      }
    }
    _initTokenizerForFragmentParsing() {
      if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {
        return;
      }
      switch (this.fragmentContextID) {
        case TAG_ID.TITLE:
        case TAG_ID.TEXTAREA: {
          this.tokenizer.state = TokenizerMode.RCDATA;
          break;
        }
        case TAG_ID.STYLE:
        case TAG_ID.XMP:
        case TAG_ID.IFRAME:
        case TAG_ID.NOEMBED:
        case TAG_ID.NOFRAMES:
        case TAG_ID.NOSCRIPT: {
          this.tokenizer.state = TokenizerMode.RAWTEXT;
          break;
        }
        case TAG_ID.SCRIPT: {
          this.tokenizer.state = TokenizerMode.SCRIPT_DATA;
          break;
        }
        case TAG_ID.PLAINTEXT: {
          this.tokenizer.state = TokenizerMode.PLAINTEXT;
          break;
        }
        default:
      }
    }
    _setDocumentType(token) {
      const name = token.name || "";
      const publicId = token.publicId || "";
      const systemId = token.systemId || "";
      this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
      if (token.location) {
        const documentChildren = this.treeAdapter.getChildNodes(this.document);
        const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));
        if (docTypeNode) {
          this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);
        }
      }
    }
    _attachElementToTree(element, location) {
      if (this.options.sourceCodeLocationInfo) {
        const loc = location && {
          ...location,
          startTag: location
        };
        this.treeAdapter.setNodeSourceCodeLocation(element, loc);
      }
      if (this._shouldFosterParentOnInsertion()) {
        this._fosterParentElement(element);
      } else {
        const parent = this.openElements.currentTmplContentOrNode;
        this.treeAdapter.appendChild(parent, element);
      }
    }
    _appendElement(token, namespaceURI) {
      const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
      this._attachElementToTree(element, token.location);
    }
    _insertElement(token, namespaceURI) {
      const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
      this._attachElementToTree(element, token.location);
      this.openElements.push(element, token.tagID);
    }
    _insertFakeElement(tagName, tagID) {
      const element = this.treeAdapter.createElement(tagName, NS.HTML, []);
      this._attachElementToTree(element, null);
      this.openElements.push(element, tagID);
    }
    _insertTemplate(token) {
      const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
      const content = this.treeAdapter.createDocumentFragment();
      this.treeAdapter.setTemplateContent(tmpl, content);
      this._attachElementToTree(tmpl, token.location);
      this.openElements.push(tmpl, token.tagID);
      if (this.options.sourceCodeLocationInfo)
        this.treeAdapter.setNodeSourceCodeLocation(content, null);
    }
    _insertFakeRootElement() {
      const element = this.treeAdapter.createElement(TAG_NAMES.HTML, NS.HTML, []);
      if (this.options.sourceCodeLocationInfo)
        this.treeAdapter.setNodeSourceCodeLocation(element, null);
      this.treeAdapter.appendChild(this.openElements.current, element);
      this.openElements.push(element, TAG_ID.HTML);
    }
    _appendCommentNode(token, parent) {
      const commentNode = this.treeAdapter.createCommentNode(token.data);
      this.treeAdapter.appendChild(parent, commentNode);
      if (this.options.sourceCodeLocationInfo) {
        this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
      }
    }
    _insertCharacters(token) {
      let parent;
      let beforeElement;
      if (this._shouldFosterParentOnInsertion()) {
        ({ parent, beforeElement } = this._findFosterParentingLocation());
        if (beforeElement) {
          this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);
        } else {
          this.treeAdapter.insertText(parent, token.chars);
        }
      } else {
        parent = this.openElements.currentTmplContentOrNode;
        this.treeAdapter.insertText(parent, token.chars);
      }
      if (!token.location)
        return;
      const siblings = this.treeAdapter.getChildNodes(parent);
      const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;
      const textNode = siblings[textNodeIdx - 1];
      const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
      if (tnLoc) {
        const { endLine, endCol, endOffset } = token.location;
        this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
      } else if (this.options.sourceCodeLocationInfo) {
        this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
      }
    }
    _adoptNodes(donor, recipient2) {
      for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
        this.treeAdapter.detachNode(child);
        this.treeAdapter.appendChild(recipient2, child);
      }
    }
    _setEndLocation(element, closingToken) {
      if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {
        const ctLoc = closingToken.location;
        const tn = this.treeAdapter.getTagName(element);
        const endLoc = closingToken.type === TokenType.END_TAG && tn === closingToken.tagName ? {
          endTag: { ...ctLoc },
          endLine: ctLoc.endLine,
          endCol: ctLoc.endCol,
          endOffset: ctLoc.endOffset
        } : {
          endLine: ctLoc.startLine,
          endCol: ctLoc.startCol,
          endOffset: ctLoc.startOffset
        };
        this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
      }
    }
    shouldProcessStartTagTokenInForeignContent(token) {
      if (!this.currentNotInHTML)
        return false;
      let current;
      let currentTagId;
      if (this.openElements.stackTop === 0 && this.fragmentContext) {
        current = this.fragmentContext;
        currentTagId = this.fragmentContextID;
      } else {
        ({ current, currentTagId } = this.openElements);
      }
      if (token.tagID === TAG_ID.SVG && this.treeAdapter.getTagName(current) === TAG_NAMES.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {
        return false;
      }
      return this.tokenizer.inForeignNode || (token.tagID === TAG_ID.MGLYPH || token.tagID === TAG_ID.MALIGNMARK) && !this._isIntegrationPoint(currentTagId, current, NS.HTML);
    }
    _processToken(token) {
      switch (token.type) {
        case TokenType.CHARACTER: {
          this.onCharacter(token);
          break;
        }
        case TokenType.NULL_CHARACTER: {
          this.onNullCharacter(token);
          break;
        }
        case TokenType.COMMENT: {
          this.onComment(token);
          break;
        }
        case TokenType.DOCTYPE: {
          this.onDoctype(token);
          break;
        }
        case TokenType.START_TAG: {
          this._processStartTag(token);
          break;
        }
        case TokenType.END_TAG: {
          this.onEndTag(token);
          break;
        }
        case TokenType.EOF: {
          this.onEof(token);
          break;
        }
        case TokenType.WHITESPACE_CHARACTER: {
          this.onWhitespaceCharacter(token);
          break;
        }
      }
    }
    _isIntegrationPoint(tid, element, foreignNS) {
      const ns = this.treeAdapter.getNamespaceURI(element);
      const attrs = this.treeAdapter.getAttrList(element);
      return isIntegrationPoint(tid, ns, attrs, foreignNS);
    }
    _reconstructActiveFormattingElements() {
      const listLength = this.activeFormattingElements.entries.length;
      if (listLength) {
        const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));
        const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;
        for (let i = unopenIdx; i >= 0; i--) {
          const entry = this.activeFormattingElements.entries[i];
          this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
          entry.element = this.openElements.current;
        }
      }
    }
    _closeTableCell() {
      this.openElements.generateImpliedEndTags();
      this.openElements.popUntilTableCellPopped();
      this.activeFormattingElements.clearToLastMarker();
      this.insertionMode = InsertionMode.IN_ROW;
    }
    _closePElement() {
      this.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.P);
      this.openElements.popUntilTagNamePopped(TAG_ID.P);
    }
    _resetInsertionMode() {
      for (let i = this.openElements.stackTop; i >= 0; i--) {
        switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {
          case TAG_ID.TR:
            this.insertionMode = InsertionMode.IN_ROW;
            return;
          case TAG_ID.TBODY:
          case TAG_ID.THEAD:
          case TAG_ID.TFOOT:
            this.insertionMode = InsertionMode.IN_TABLE_BODY;
            return;
          case TAG_ID.CAPTION:
            this.insertionMode = InsertionMode.IN_CAPTION;
            return;
          case TAG_ID.COLGROUP:
            this.insertionMode = InsertionMode.IN_COLUMN_GROUP;
            return;
          case TAG_ID.TABLE:
            this.insertionMode = InsertionMode.IN_TABLE;
            return;
          case TAG_ID.BODY:
            this.insertionMode = InsertionMode.IN_BODY;
            return;
          case TAG_ID.FRAMESET:
            this.insertionMode = InsertionMode.IN_FRAMESET;
            return;
          case TAG_ID.SELECT:
            this._resetInsertionModeForSelect(i);
            return;
          case TAG_ID.TEMPLATE:
            this.insertionMode = this.tmplInsertionModeStack[0];
            return;
          case TAG_ID.HTML:
            this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;
            return;
          case TAG_ID.TD:
          case TAG_ID.TH:
            if (i > 0) {
              this.insertionMode = InsertionMode.IN_CELL;
              return;
            }
            break;
          case TAG_ID.HEAD:
            if (i > 0) {
              this.insertionMode = InsertionMode.IN_HEAD;
              return;
            }
            break;
        }
      }
      this.insertionMode = InsertionMode.IN_BODY;
    }
    _resetInsertionModeForSelect(selectIdx) {
      if (selectIdx > 0) {
        for (let i = selectIdx - 1; i > 0; i--) {
          const tn = this.openElements.tagIDs[i];
          if (tn === TAG_ID.TEMPLATE) {
            break;
          } else if (tn === TAG_ID.TABLE) {
            this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;
            return;
          }
        }
      }
      this.insertionMode = InsertionMode.IN_SELECT;
    }
    _isElementCausesFosterParenting(tn) {
      return TABLE_STRUCTURE_TAGS.has(tn);
    }
    _shouldFosterParentOnInsertion() {
      return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);
    }
    _findFosterParentingLocation() {
      for (let i = this.openElements.stackTop; i >= 0; i--) {
        const openElement = this.openElements.items[i];
        switch (this.openElements.tagIDs[i]) {
          case TAG_ID.TEMPLATE:
            if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {
              return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };
            }
            break;
          case TAG_ID.TABLE: {
            const parent = this.treeAdapter.getParentNode(openElement);
            if (parent) {
              return { parent, beforeElement: openElement };
            }
            return { parent: this.openElements.items[i - 1], beforeElement: null };
          }
          default:
        }
      }
      return { parent: this.openElements.items[0], beforeElement: null };
    }
    _fosterParentElement(element) {
      const location = this._findFosterParentingLocation();
      if (location.beforeElement) {
        this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
      } else {
        this.treeAdapter.appendChild(location.parent, element);
      }
    }
    _isSpecialElement(element, id) {
      const ns = this.treeAdapter.getNamespaceURI(element);
      return SPECIAL_ELEMENTS[ns].has(id);
    }
    onCharacter(token) {
      this.skipNextNewLine = false;
      if (this.tokenizer.inForeignNode) {
        characterInForeignContent(this, token);
        return;
      }
      switch (this.insertionMode) {
        case InsertionMode.INITIAL:
          tokenInInitialMode(this, token);
          break;
        case InsertionMode.BEFORE_HTML:
          tokenBeforeHtml(this, token);
          break;
        case InsertionMode.BEFORE_HEAD:
          tokenBeforeHead(this, token);
          break;
        case InsertionMode.IN_HEAD:
          tokenInHead(this, token);
          break;
        case InsertionMode.IN_HEAD_NO_SCRIPT:
          tokenInHeadNoScript(this, token);
          break;
        case InsertionMode.AFTER_HEAD:
          tokenAfterHead(this, token);
          break;
        case InsertionMode.IN_BODY:
        case InsertionMode.IN_CAPTION:
        case InsertionMode.IN_CELL:
        case InsertionMode.IN_TEMPLATE:
          characterInBody(this, token);
          break;
        case InsertionMode.TEXT:
        case InsertionMode.IN_SELECT:
        case InsertionMode.IN_SELECT_IN_TABLE:
          this._insertCharacters(token);
          break;
        case InsertionMode.IN_TABLE:
        case InsertionMode.IN_TABLE_BODY:
        case InsertionMode.IN_ROW:
          characterInTable(this, token);
          break;
        case InsertionMode.IN_TABLE_TEXT:
          characterInTableText(this, token);
          break;
        case InsertionMode.IN_COLUMN_GROUP:
          tokenInColumnGroup(this, token);
          break;
        case InsertionMode.AFTER_BODY:
          tokenAfterBody(this, token);
          break;
        case InsertionMode.AFTER_AFTER_BODY:
          tokenAfterAfterBody(this, token);
          break;
        default:
      }
    }
    onNullCharacter(token) {
      this.skipNextNewLine = false;
      if (this.tokenizer.inForeignNode) {
        nullCharacterInForeignContent(this, token);
        return;
      }
      switch (this.insertionMode) {
        case InsertionMode.INITIAL:
          tokenInInitialMode(this, token);
          break;
        case InsertionMode.BEFORE_HTML:
          tokenBeforeHtml(this, token);
          break;
        case InsertionMode.BEFORE_HEAD:
          tokenBeforeHead(this, token);
          break;
        case InsertionMode.IN_HEAD:
          tokenInHead(this, token);
          break;
        case InsertionMode.IN_HEAD_NO_SCRIPT:
          tokenInHeadNoScript(this, token);
          break;
        case InsertionMode.AFTER_HEAD:
          tokenAfterHead(this, token);
          break;
        case InsertionMode.TEXT:
          this._insertCharacters(token);
          break;
        case InsertionMode.IN_TABLE:
        case InsertionMode.IN_TABLE_BODY:
        case InsertionMode.IN_ROW:
          characterInTable(this, token);
          break;
        case InsertionMode.IN_COLUMN_GROUP:
          tokenInColumnGroup(this, token);
          break;
        case InsertionMode.AFTER_BODY:
          tokenAfterBody(this, token);
          break;
        case InsertionMode.AFTER_AFTER_BODY:
          tokenAfterAfterBody(this, token);
          break;
        default:
      }
    }
    onComment(token) {
      this.skipNextNewLine = false;
      if (this.currentNotInHTML) {
        appendComment(this, token);
        return;
      }
      switch (this.insertionMode) {
        case InsertionMode.INITIAL:
        case InsertionMode.BEFORE_HTML:
        case InsertionMode.BEFORE_HEAD:
        case InsertionMode.IN_HEAD:
        case InsertionMode.IN_HEAD_NO_SCRIPT:
        case InsertionMode.AFTER_HEAD:
        case InsertionMode.IN_BODY:
        case InsertionMode.IN_TABLE:
        case InsertionMode.IN_CAPTION:
        case InsertionMode.IN_COLUMN_GROUP:
        case InsertionMode.IN_TABLE_BODY:
        case InsertionMode.IN_ROW:
        case InsertionMode.IN_CELL:
        case InsertionMode.IN_SELECT:
        case InsertionMode.IN_SELECT_IN_TABLE:
        case InsertionMode.IN_TEMPLATE:
        case InsertionMode.IN_FRAMESET:
        case InsertionMode.AFTER_FRAMESET:
          appendComment(this, token);
          break;
        case InsertionMode.IN_TABLE_TEXT:
          tokenInTableText(this, token);
          break;
        case InsertionMode.AFTER_BODY:
          appendCommentToRootHtmlElement(this, token);
          break;
        case InsertionMode.AFTER_AFTER_BODY:
        case InsertionMode.AFTER_AFTER_FRAMESET:
          appendCommentToDocument(this, token);
          break;
        default:
      }
    }
    onDoctype(token) {
      this.skipNextNewLine = false;
      switch (this.insertionMode) {
        case InsertionMode.INITIAL:
          doctypeInInitialMode(this, token);
          break;
        case InsertionMode.BEFORE_HEAD:
        case InsertionMode.IN_HEAD:
        case InsertionMode.IN_HEAD_NO_SCRIPT:
        case InsertionMode.AFTER_HEAD:
          this._err(token, ERR.misplacedDoctype);
          break;
        case InsertionMode.IN_TABLE_TEXT:
          tokenInTableText(this, token);
          break;
        default:
      }
    }
    onStartTag(token) {
      this.skipNextNewLine = false;
      this.currentToken = token;
      this._processStartTag(token);
      if (token.selfClosing && !token.ackSelfClosing) {
        this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
      }
    }
    _processStartTag(token) {
      if (this.shouldProcessStartTagTokenInForeignContent(token)) {
        startTagInForeignContent(this, token);
      } else {
        this._startTagOutsideForeignContent(token);
      }
    }
    _startTagOutsideForeignContent(token) {
      switch (this.insertionMode) {
        case InsertionMode.INITIAL:
          tokenInInitialMode(this, token);
          break;
        case InsertionMode.BEFORE_HTML:
          startTagBeforeHtml(this, token);
          break;
        case InsertionMode.BEFORE_HEAD:
          startTagBeforeHead(this, token);
          break;
        case InsertionMode.IN_HEAD:
          startTagInHead(this, token);
          break;
        case InsertionMode.IN_HEAD_NO_SCRIPT:
          startTagInHeadNoScript(this, token);
          break;
        case InsertionMode.AFTER_HEAD:
          startTagAfterHead(this, token);
          break;
        case InsertionMode.IN_BODY:
          startTagInBody(this, token);
          break;
        case InsertionMode.IN_TABLE:
          startTagInTable(this, token);
          break;
        case InsertionMode.IN_TABLE_TEXT:
          tokenInTableText(this, token);
          break;
        case InsertionMode.IN_CAPTION:
          startTagInCaption(this, token);
          break;
        case InsertionMode.IN_COLUMN_GROUP:
          startTagInColumnGroup(this, token);
          break;
        case InsertionMode.IN_TABLE_BODY:
          startTagInTableBody(this, token);
          break;
        case InsertionMode.IN_ROW:
          startTagInRow(this, token);
          break;
        case InsertionMode.IN_CELL:
          startTagInCell(this, token);
          break;
        case InsertionMode.IN_SELECT:
          startTagInSelect(this, token);
          break;
        case InsertionMode.IN_SELECT_IN_TABLE:
          startTagInSelectInTable(this, token);
          break;
        case InsertionMode.IN_TEMPLATE:
          startTagInTemplate(this, token);
          break;
        case InsertionMode.AFTER_BODY:
          startTagAfterBody(this, token);
          break;
        case InsertionMode.IN_FRAMESET:
          startTagInFrameset(this, token);
          break;
        case InsertionMode.AFTER_FRAMESET:
          startTagAfterFrameset(this, token);
          break;
        case InsertionMode.AFTER_AFTER_BODY:
          startTagAfterAfterBody(this, token);
          break;
        case InsertionMode.AFTER_AFTER_FRAMESET:
          startTagAfterAfterFrameset(this, token);
          break;
        default:
      }
    }
    onEndTag(token) {
      this.skipNextNewLine = false;
      this.currentToken = token;
      if (this.currentNotInHTML) {
        endTagInForeignContent(this, token);
      } else {
        this._endTagOutsideForeignContent(token);
      }
    }
    _endTagOutsideForeignContent(token) {
      switch (this.insertionMode) {
        case InsertionMode.INITIAL:
          tokenInInitialMode(this, token);
          break;
        case InsertionMode.BEFORE_HTML:
          endTagBeforeHtml(this, token);
          break;
        case InsertionMode.BEFORE_HEAD:
          endTagBeforeHead(this, token);
          break;
        case InsertionMode.IN_HEAD:
          endTagInHead(this, token);
          break;
        case InsertionMode.IN_HEAD_NO_SCRIPT:
          endTagInHeadNoScript(this, token);
          break;
        case InsertionMode.AFTER_HEAD:
          endTagAfterHead(this, token);
          break;
        case InsertionMode.IN_BODY:
          endTagInBody(this, token);
          break;
        case InsertionMode.TEXT:
          endTagInText(this, token);
          break;
        case InsertionMode.IN_TABLE:
          endTagInTable(this, token);
          break;
        case InsertionMode.IN_TABLE_TEXT:
          tokenInTableText(this, token);
          break;
        case InsertionMode.IN_CAPTION:
          endTagInCaption(this, token);
          break;
        case InsertionMode.IN_COLUMN_GROUP:
          endTagInColumnGroup(this, token);
          break;
        case InsertionMode.IN_TABLE_BODY:
          endTagInTableBody(this, token);
          break;
        case InsertionMode.IN_ROW:
          endTagInRow(this, token);
          break;
        case InsertionMode.IN_CELL:
          endTagInCell(this, token);
          break;
        case InsertionMode.IN_SELECT:
          endTagInSelect(this, token);
          break;
        case InsertionMode.IN_SELECT_IN_TABLE:
          endTagInSelectInTable(this, token);
          break;
        case InsertionMode.IN_TEMPLATE:
          endTagInTemplate(this, token);
          break;
        case InsertionMode.AFTER_BODY:
          endTagAfterBody(this, token);
          break;
        case InsertionMode.IN_FRAMESET:
          endTagInFrameset(this, token);
          break;
        case InsertionMode.AFTER_FRAMESET:
          endTagAfterFrameset(this, token);
          break;
        case InsertionMode.AFTER_AFTER_BODY:
          tokenAfterAfterBody(this, token);
          break;
        default:
      }
    }
    onEof(token) {
      switch (this.insertionMode) {
        case InsertionMode.INITIAL:
          tokenInInitialMode(this, token);
          break;
        case InsertionMode.BEFORE_HTML:
          tokenBeforeHtml(this, token);
          break;
        case InsertionMode.BEFORE_HEAD:
          tokenBeforeHead(this, token);
          break;
        case InsertionMode.IN_HEAD:
          tokenInHead(this, token);
          break;
        case InsertionMode.IN_HEAD_NO_SCRIPT:
          tokenInHeadNoScript(this, token);
          break;
        case InsertionMode.AFTER_HEAD:
          tokenAfterHead(this, token);
          break;
        case InsertionMode.IN_BODY:
        case InsertionMode.IN_TABLE:
        case InsertionMode.IN_CAPTION:
        case InsertionMode.IN_COLUMN_GROUP:
        case InsertionMode.IN_TABLE_BODY:
        case InsertionMode.IN_ROW:
        case InsertionMode.IN_CELL:
        case InsertionMode.IN_SELECT:
        case InsertionMode.IN_SELECT_IN_TABLE:
          eofInBody(this, token);
          break;
        case InsertionMode.TEXT:
          eofInText(this, token);
          break;
        case InsertionMode.IN_TABLE_TEXT:
          tokenInTableText(this, token);
          break;
        case InsertionMode.IN_TEMPLATE:
          eofInTemplate(this, token);
          break;
        case InsertionMode.AFTER_BODY:
        case InsertionMode.IN_FRAMESET:
        case InsertionMode.AFTER_FRAMESET:
        case InsertionMode.AFTER_AFTER_BODY:
        case InsertionMode.AFTER_AFTER_FRAMESET:
          stopParsing(this, token);
          break;
        default:
      }
    }
    onWhitespaceCharacter(token) {
      if (this.skipNextNewLine) {
        this.skipNextNewLine = false;
        if (token.chars.charCodeAt(0) === CODE_POINTS.LINE_FEED) {
          if (token.chars.length === 1) {
            return;
          }
          token.chars = token.chars.substr(1);
        }
      }
      if (this.tokenizer.inForeignNode) {
        this._insertCharacters(token);
        return;
      }
      switch (this.insertionMode) {
        case InsertionMode.IN_HEAD:
        case InsertionMode.IN_HEAD_NO_SCRIPT:
        case InsertionMode.AFTER_HEAD:
        case InsertionMode.TEXT:
        case InsertionMode.IN_COLUMN_GROUP:
        case InsertionMode.IN_SELECT:
        case InsertionMode.IN_SELECT_IN_TABLE:
        case InsertionMode.IN_FRAMESET:
        case InsertionMode.AFTER_FRAMESET:
          this._insertCharacters(token);
          break;
        case InsertionMode.IN_BODY:
        case InsertionMode.IN_CAPTION:
        case InsertionMode.IN_CELL:
        case InsertionMode.IN_TEMPLATE:
        case InsertionMode.AFTER_BODY:
        case InsertionMode.AFTER_AFTER_BODY:
        case InsertionMode.AFTER_AFTER_FRAMESET:
          whitespaceCharacterInBody(this, token);
          break;
        case InsertionMode.IN_TABLE:
        case InsertionMode.IN_TABLE_BODY:
        case InsertionMode.IN_ROW:
          characterInTable(this, token);
          break;
        case InsertionMode.IN_TABLE_TEXT:
          whitespaceCharacterInTableText(this, token);
          break;
        default:
      }
    }
  };
  function aaObtainFormattingElementEntry(p, token) {
    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
    if (formattingElementEntry) {
      if (!p.openElements.contains(formattingElementEntry.element)) {
        p.activeFormattingElements.removeEntry(formattingElementEntry);
        formattingElementEntry = null;
      } else if (!p.openElements.hasInScope(token.tagID)) {
        formattingElementEntry = null;
      }
    } else {
      genericEndTagInBody(p, token);
    }
    return formattingElementEntry;
  }
  function aaObtainFurthestBlock(p, formattingElementEntry) {
    let furthestBlock = null;
    let idx = p.openElements.stackTop;
    for (; idx >= 0; idx--) {
      const element = p.openElements.items[idx];
      if (element === formattingElementEntry.element) {
        break;
      }
      if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {
        furthestBlock = element;
      }
    }
    if (!furthestBlock) {
      p.openElements.shortenToLength(idx < 0 ? 0 : idx);
      p.activeFormattingElements.removeEntry(formattingElementEntry);
    }
    return furthestBlock;
  }
  function aaInnerLoop(p, furthestBlock, formattingElement) {
    let lastElement = furthestBlock;
    let nextElement = p.openElements.getCommonAncestor(furthestBlock);
    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
      nextElement = p.openElements.getCommonAncestor(element);
      const elementEntry = p.activeFormattingElements.getElementEntry(element);
      const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
      const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
      if (shouldRemoveFromOpenElements) {
        if (counterOverflow) {
          p.activeFormattingElements.removeEntry(elementEntry);
        }
        p.openElements.remove(element);
      } else {
        element = aaRecreateElementFromEntry(p, elementEntry);
        if (lastElement === furthestBlock) {
          p.activeFormattingElements.bookmark = elementEntry;
        }
        p.treeAdapter.detachNode(lastElement);
        p.treeAdapter.appendChild(element, lastElement);
        lastElement = element;
      }
    }
    return lastElement;
  }
  function aaRecreateElementFromEntry(p, elementEntry) {
    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
    p.openElements.replace(elementEntry.element, newElement);
    elementEntry.element = newElement;
    return newElement;
  }
  function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
    const tn = p.treeAdapter.getTagName(commonAncestor);
    const tid = getTagID(tn);
    if (p._isElementCausesFosterParenting(tid)) {
      p._fosterParentElement(lastElement);
    } else {
      const ns = p.treeAdapter.getNamespaceURI(commonAncestor);
      if (tid === TAG_ID.TEMPLATE && ns === NS.HTML) {
        commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
      }
      p.treeAdapter.appendChild(commonAncestor, lastElement);
    }
  }
  function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
    const { token } = formattingElementEntry;
    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
    p._adoptNodes(furthestBlock, newElement);
    p.treeAdapter.appendChild(furthestBlock, newElement);
    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);
    p.activeFormattingElements.removeEntry(formattingElementEntry);
    p.openElements.remove(formattingElementEntry.element);
    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);
  }
  function callAdoptionAgency(p, token) {
    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
      const formattingElementEntry = aaObtainFormattingElementEntry(p, token);
      if (!formattingElementEntry) {
        break;
      }
      const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
      if (!furthestBlock) {
        break;
      }
      p.activeFormattingElements.bookmark = formattingElementEntry;
      const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
      const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
      p.treeAdapter.detachNode(lastElement);
      if (commonAncestor)
        aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
      aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
    }
  }
  function appendComment(p, token) {
    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);
  }
  function appendCommentToRootHtmlElement(p, token) {
    p._appendCommentNode(token, p.openElements.items[0]);
  }
  function appendCommentToDocument(p, token) {
    p._appendCommentNode(token, p.document);
  }
  function stopParsing(p, token) {
    p.stopped = true;
    if (token.location) {
      const target = p.fragmentContext ? 0 : 2;
      for (let i = p.openElements.stackTop; i >= target; i--) {
        p._setEndLocation(p.openElements.items[i], token);
      }
      if (!p.fragmentContext && p.openElements.stackTop >= 0) {
        const htmlElement = p.openElements.items[0];
        const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);
        if (htmlLocation && !htmlLocation.endTag) {
          p._setEndLocation(htmlElement, token);
          if (p.openElements.stackTop >= 1) {
            const bodyElement = p.openElements.items[1];
            const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);
            if (bodyLocation && !bodyLocation.endTag) {
              p._setEndLocation(bodyElement, token);
            }
          }
        }
      }
    }
  }
  function doctypeInInitialMode(p, token) {
    p._setDocumentType(token);
    const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : getDocumentMode(token);
    if (!isConforming(token)) {
      p._err(token, ERR.nonConformingDoctype);
    }
    p.treeAdapter.setDocumentMode(p.document, mode);
    p.insertionMode = InsertionMode.BEFORE_HTML;
  }
  function tokenInInitialMode(p, token) {
    p._err(token, ERR.missingDoctype, true);
    p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);
    p.insertionMode = InsertionMode.BEFORE_HTML;
    p._processToken(token);
  }
  function startTagBeforeHtml(p, token) {
    if (token.tagID === TAG_ID.HTML) {
      p._insertElement(token, NS.HTML);
      p.insertionMode = InsertionMode.BEFORE_HEAD;
    } else {
      tokenBeforeHtml(p, token);
    }
  }
  function endTagBeforeHtml(p, token) {
    const tn = token.tagID;
    if (tn === TAG_ID.HTML || tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.BR) {
      tokenBeforeHtml(p, token);
    }
  }
  function tokenBeforeHtml(p, token) {
    p._insertFakeRootElement();
    p.insertionMode = InsertionMode.BEFORE_HEAD;
    p._processToken(token);
  }
  function startTagBeforeHead(p, token) {
    switch (token.tagID) {
      case TAG_ID.HTML: {
        startTagInBody(p, token);
        break;
      }
      case TAG_ID.HEAD: {
        p._insertElement(token, NS.HTML);
        p.headElement = p.openElements.current;
        p.insertionMode = InsertionMode.IN_HEAD;
        break;
      }
      default: {
        tokenBeforeHead(p, token);
      }
    }
  }
  function endTagBeforeHead(p, token) {
    const tn = token.tagID;
    if (tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.HTML || tn === TAG_ID.BR) {
      tokenBeforeHead(p, token);
    } else {
      p._err(token, ERR.endTagWithoutMatchingOpenElement);
    }
  }
  function tokenBeforeHead(p, token) {
    p._insertFakeElement(TAG_NAMES.HEAD, TAG_ID.HEAD);
    p.headElement = p.openElements.current;
    p.insertionMode = InsertionMode.IN_HEAD;
    p._processToken(token);
  }
  function startTagInHead(p, token) {
    switch (token.tagID) {
      case TAG_ID.HTML: {
        startTagInBody(p, token);
        break;
      }
      case TAG_ID.BASE:
      case TAG_ID.BASEFONT:
      case TAG_ID.BGSOUND:
      case TAG_ID.LINK:
      case TAG_ID.META: {
        p._appendElement(token, NS.HTML);
        token.ackSelfClosing = true;
        break;
      }
      case TAG_ID.TITLE: {
        p._switchToTextParsing(token, TokenizerMode.RCDATA);
        break;
      }
      case TAG_ID.NOSCRIPT: {
        if (p.options.scriptingEnabled) {
          p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
        } else {
          p._insertElement(token, NS.HTML);
          p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;
        }
        break;
      }
      case TAG_ID.NOFRAMES:
      case TAG_ID.STYLE: {
        p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
        break;
      }
      case TAG_ID.SCRIPT: {
        p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);
        break;
      }
      case TAG_ID.TEMPLATE: {
        p._insertTemplate(token);
        p.activeFormattingElements.insertMarker();
        p.framesetOk = false;
        p.insertionMode = InsertionMode.IN_TEMPLATE;
        p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
        break;
      }
      case TAG_ID.HEAD: {
        p._err(token, ERR.misplacedStartTagForHeadElement);
        break;
      }
      default: {
        tokenInHead(p, token);
      }
    }
  }
  function endTagInHead(p, token) {
    switch (token.tagID) {
      case TAG_ID.HEAD: {
        p.openElements.pop();
        p.insertionMode = InsertionMode.AFTER_HEAD;
        break;
      }
      case TAG_ID.BODY:
      case TAG_ID.BR:
      case TAG_ID.HTML: {
        tokenInHead(p, token);
        break;
      }
      case TAG_ID.TEMPLATE: {
        templateEndTagInHead(p, token);
        break;
      }
      default: {
        p._err(token, ERR.endTagWithoutMatchingOpenElement);
      }
    }
  }
  function templateEndTagInHead(p, token) {
    if (p.openElements.tmplCount > 0) {
      p.openElements.generateImpliedEndTagsThoroughly();
      if (p.openElements.currentTagId !== TAG_ID.TEMPLATE) {
        p._err(token, ERR.closingOfElementWithOpenChildElements);
      }
      p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
      p.activeFormattingElements.clearToLastMarker();
      p.tmplInsertionModeStack.shift();
      p._resetInsertionMode();
    } else {
      p._err(token, ERR.endTagWithoutMatchingOpenElement);
    }
  }
  function tokenInHead(p, token) {
    p.openElements.pop();
    p.insertionMode = InsertionMode.AFTER_HEAD;
    p._processToken(token);
  }
  function startTagInHeadNoScript(p, token) {
    switch (token.tagID) {
      case TAG_ID.HTML: {
        startTagInBody(p, token);
        break;
      }
      case TAG_ID.BASEFONT:
      case TAG_ID.BGSOUND:
      case TAG_ID.HEAD:
      case TAG_ID.LINK:
      case TAG_ID.META:
      case TAG_ID.NOFRAMES:
      case TAG_ID.STYLE: {
        startTagInHead(p, token);
        break;
      }
      case TAG_ID.NOSCRIPT: {
        p._err(token, ERR.nestedNoscriptInHead);
        break;
      }
      default: {
        tokenInHeadNoScript(p, token);
      }
    }
  }
  function endTagInHeadNoScript(p, token) {
    switch (token.tagID) {
      case TAG_ID.NOSCRIPT: {
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_HEAD;
        break;
      }
      case TAG_ID.BR: {
        tokenInHeadNoScript(p, token);
        break;
      }
      default: {
        p._err(token, ERR.endTagWithoutMatchingOpenElement);
      }
    }
  }
  function tokenInHeadNoScript(p, token) {
    const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
    p._err(token, errCode);
    p.openElements.pop();
    p.insertionMode = InsertionMode.IN_HEAD;
    p._processToken(token);
  }
  function startTagAfterHead(p, token) {
    switch (token.tagID) {
      case TAG_ID.HTML: {
        startTagInBody(p, token);
        break;
      }
      case TAG_ID.BODY: {
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        p.insertionMode = InsertionMode.IN_BODY;
        break;
      }
      case TAG_ID.FRAMESET: {
        p._insertElement(token, NS.HTML);
        p.insertionMode = InsertionMode.IN_FRAMESET;
        break;
      }
      case TAG_ID.BASE:
      case TAG_ID.BASEFONT:
      case TAG_ID.BGSOUND:
      case TAG_ID.LINK:
      case TAG_ID.META:
      case TAG_ID.NOFRAMES:
      case TAG_ID.SCRIPT:
      case TAG_ID.STYLE:
      case TAG_ID.TEMPLATE:
      case TAG_ID.TITLE: {
        p._err(token, ERR.abandonedHeadElementChild);
        p.openElements.push(p.headElement, TAG_ID.HEAD);
        startTagInHead(p, token);
        p.openElements.remove(p.headElement);
        break;
      }
      case TAG_ID.HEAD: {
        p._err(token, ERR.misplacedStartTagForHeadElement);
        break;
      }
      default: {
        tokenAfterHead(p, token);
      }
    }
  }
  function endTagAfterHead(p, token) {
    switch (token.tagID) {
      case TAG_ID.BODY:
      case TAG_ID.HTML:
      case TAG_ID.BR: {
        tokenAfterHead(p, token);
        break;
      }
      case TAG_ID.TEMPLATE: {
        templateEndTagInHead(p, token);
        break;
      }
      default: {
        p._err(token, ERR.endTagWithoutMatchingOpenElement);
      }
    }
  }
  function tokenAfterHead(p, token) {
    p._insertFakeElement(TAG_NAMES.BODY, TAG_ID.BODY);
    p.insertionMode = InsertionMode.IN_BODY;
    modeInBody(p, token);
  }
  function modeInBody(p, token) {
    switch (token.type) {
      case TokenType.CHARACTER: {
        characterInBody(p, token);
        break;
      }
      case TokenType.WHITESPACE_CHARACTER: {
        whitespaceCharacterInBody(p, token);
        break;
      }
      case TokenType.COMMENT: {
        appendComment(p, token);
        break;
      }
      case TokenType.START_TAG: {
        startTagInBody(p, token);
        break;
      }
      case TokenType.END_TAG: {
        endTagInBody(p, token);
        break;
      }
      case TokenType.EOF: {
        eofInBody(p, token);
        break;
      }
      default:
    }
  }
  function whitespaceCharacterInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertCharacters(token);
  }
  function characterInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertCharacters(token);
    p.framesetOk = false;
  }
  function htmlStartTagInBody(p, token) {
    if (p.openElements.tmplCount === 0) {
      p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
    }
  }
  function bodyStartTagInBody(p, token) {
    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
    if (bodyElement && p.openElements.tmplCount === 0) {
      p.framesetOk = false;
      p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
    }
  }
  function framesetStartTagInBody(p, token) {
    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
    if (p.framesetOk && bodyElement) {
      p.treeAdapter.detachNode(bodyElement);
      p.openElements.popAllUpToHtmlElement();
      p._insertElement(token, NS.HTML);
      p.insertionMode = InsertionMode.IN_FRAMESET;
    }
  }
  function addressStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._closePElement();
    }
    p._insertElement(token, NS.HTML);
  }
  function numberedHeaderStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._closePElement();
    }
    if (isNumberedHeader(p.openElements.currentTagId)) {
      p.openElements.pop();
    }
    p._insertElement(token, NS.HTML);
  }
  function preStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._closePElement();
    }
    p._insertElement(token, NS.HTML);
    p.skipNextNewLine = true;
    p.framesetOk = false;
  }
  function formStartTagInBody(p, token) {
    const inTemplate = p.openElements.tmplCount > 0;
    if (!p.formElement || inTemplate) {
      if (p.openElements.hasInButtonScope(TAG_ID.P)) {
        p._closePElement();
      }
      p._insertElement(token, NS.HTML);
      if (!inTemplate) {
        p.formElement = p.openElements.current;
      }
    }
  }
  function listItemStartTagInBody(p, token) {
    p.framesetOk = false;
    const tn = token.tagID;
    for (let i = p.openElements.stackTop; i >= 0; i--) {
      const elementId = p.openElements.tagIDs[i];
      if (tn === TAG_ID.LI && elementId === TAG_ID.LI || (tn === TAG_ID.DD || tn === TAG_ID.DT) && (elementId === TAG_ID.DD || elementId === TAG_ID.DT)) {
        p.openElements.generateImpliedEndTagsWithExclusion(elementId);
        p.openElements.popUntilTagNamePopped(elementId);
        break;
      }
      if (elementId !== TAG_ID.ADDRESS && elementId !== TAG_ID.DIV && elementId !== TAG_ID.P && p._isSpecialElement(p.openElements.items[i], elementId)) {
        break;
      }
    }
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._closePElement();
    }
    p._insertElement(token, NS.HTML);
  }
  function plaintextStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._closePElement();
    }
    p._insertElement(token, NS.HTML);
    p.tokenizer.state = TokenizerMode.PLAINTEXT;
  }
  function buttonStartTagInBody(p, token) {
    if (p.openElements.hasInScope(TAG_ID.BUTTON)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped(TAG_ID.BUTTON);
    }
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
  }
  function aStartTagInBody(p, token) {
    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TAG_NAMES.A);
    if (activeElementEntry) {
      callAdoptionAgency(p, token);
      p.openElements.remove(activeElementEntry.element);
      p.activeFormattingElements.removeEntry(activeElementEntry);
    }
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
  }
  function bStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
  }
  function nobrStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    if (p.openElements.hasInScope(TAG_ID.NOBR)) {
      callAdoptionAgency(p, token);
      p._reconstructActiveFormattingElements();
    }
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
  }
  function appletStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.insertMarker();
    p.framesetOk = false;
  }
  function tableStartTagInBody(p, token) {
    if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._closePElement();
    }
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
    p.insertionMode = InsertionMode.IN_TABLE;
  }
  function areaStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._appendElement(token, NS.HTML);
    p.framesetOk = false;
    token.ackSelfClosing = true;
  }
  function isHiddenInput(token) {
    const inputType = getTokenAttr(token, ATTRS.TYPE);
    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;
  }
  function inputStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._appendElement(token, NS.HTML);
    if (!isHiddenInput(token)) {
      p.framesetOk = false;
    }
    token.ackSelfClosing = true;
  }
  function paramStartTagInBody(p, token) {
    p._appendElement(token, NS.HTML);
    token.ackSelfClosing = true;
  }
  function hrStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._closePElement();
    }
    p._appendElement(token, NS.HTML);
    p.framesetOk = false;
    token.ackSelfClosing = true;
  }
  function imageStartTagInBody(p, token) {
    token.tagName = TAG_NAMES.IMG;
    token.tagID = TAG_ID.IMG;
    areaStartTagInBody(p, token);
  }
  function textareaStartTagInBody(p, token) {
    p._insertElement(token, NS.HTML);
    p.skipNextNewLine = true;
    p.tokenizer.state = TokenizerMode.RCDATA;
    p.originalInsertionMode = p.insertionMode;
    p.framesetOk = false;
    p.insertionMode = InsertionMode.TEXT;
  }
  function xmpStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._closePElement();
    }
    p._reconstructActiveFormattingElements();
    p.framesetOk = false;
    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
  }
  function iframeStartTagInBody(p, token) {
    p.framesetOk = false;
    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
  }
  function noembedStartTagInBody(p, token) {
    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
  }
  function selectStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
    p.insertionMode = p.insertionMode === InsertionMode.IN_TABLE || p.insertionMode === InsertionMode.IN_CAPTION || p.insertionMode === InsertionMode.IN_TABLE_BODY || p.insertionMode === InsertionMode.IN_ROW || p.insertionMode === InsertionMode.IN_CELL ? InsertionMode.IN_SELECT_IN_TABLE : InsertionMode.IN_SELECT;
  }
  function optgroupStartTagInBody(p, token) {
    if (p.openElements.currentTagId === TAG_ID.OPTION) {
      p.openElements.pop();
    }
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
  }
  function rbStartTagInBody(p, token) {
    if (p.openElements.hasInScope(TAG_ID.RUBY)) {
      p.openElements.generateImpliedEndTags();
    }
    p._insertElement(token, NS.HTML);
  }
  function rtStartTagInBody(p, token) {
    if (p.openElements.hasInScope(TAG_ID.RUBY)) {
      p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.RTC);
    }
    p._insertElement(token, NS.HTML);
  }
  function mathStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    adjustTokenMathMLAttrs(token);
    adjustTokenXMLAttrs(token);
    if (token.selfClosing) {
      p._appendElement(token, NS.MATHML);
    } else {
      p._insertElement(token, NS.MATHML);
    }
    token.ackSelfClosing = true;
  }
  function svgStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    adjustTokenSVGAttrs(token);
    adjustTokenXMLAttrs(token);
    if (token.selfClosing) {
      p._appendElement(token, NS.SVG);
    } else {
      p._insertElement(token, NS.SVG);
    }
    token.ackSelfClosing = true;
  }
  function genericStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
  }
  function startTagInBody(p, token) {
    switch (token.tagID) {
      case TAG_ID.I:
      case TAG_ID.S:
      case TAG_ID.B:
      case TAG_ID.U:
      case TAG_ID.EM:
      case TAG_ID.TT:
      case TAG_ID.BIG:
      case TAG_ID.CODE:
      case TAG_ID.FONT:
      case TAG_ID.SMALL:
      case TAG_ID.STRIKE:
      case TAG_ID.STRONG: {
        bStartTagInBody(p, token);
        break;
      }
      case TAG_ID.A: {
        aStartTagInBody(p, token);
        break;
      }
      case TAG_ID.H1:
      case TAG_ID.H2:
      case TAG_ID.H3:
      case TAG_ID.H4:
      case TAG_ID.H5:
      case TAG_ID.H6: {
        numberedHeaderStartTagInBody(p, token);
        break;
      }
      case TAG_ID.P:
      case TAG_ID.DL:
      case TAG_ID.OL:
      case TAG_ID.UL:
      case TAG_ID.DIV:
      case TAG_ID.DIR:
      case TAG_ID.NAV:
      case TAG_ID.MAIN:
      case TAG_ID.MENU:
      case TAG_ID.ASIDE:
      case TAG_ID.CENTER:
      case TAG_ID.FIGURE:
      case TAG_ID.FOOTER:
      case TAG_ID.HEADER:
      case TAG_ID.HGROUP:
      case TAG_ID.DIALOG:
      case TAG_ID.DETAILS:
      case TAG_ID.ADDRESS:
      case TAG_ID.ARTICLE:
      case TAG_ID.SECTION:
      case TAG_ID.SUMMARY:
      case TAG_ID.FIELDSET:
      case TAG_ID.BLOCKQUOTE:
      case TAG_ID.FIGCAPTION: {
        addressStartTagInBody(p, token);
        break;
      }
      case TAG_ID.LI:
      case TAG_ID.DD:
      case TAG_ID.DT: {
        listItemStartTagInBody(p, token);
        break;
      }
      case TAG_ID.BR:
      case TAG_ID.IMG:
      case TAG_ID.WBR:
      case TAG_ID.AREA:
      case TAG_ID.EMBED:
      case TAG_ID.KEYGEN: {
        areaStartTagInBody(p, token);
        break;
      }
      case TAG_ID.HR: {
        hrStartTagInBody(p, token);
        break;
      }
      case TAG_ID.RB:
      case TAG_ID.RTC: {
        rbStartTagInBody(p, token);
        break;
      }
      case TAG_ID.RT:
      case TAG_ID.RP: {
        rtStartTagInBody(p, token);
        break;
      }
      case TAG_ID.PRE:
      case TAG_ID.LISTING: {
        preStartTagInBody(p, token);
        break;
      }
      case TAG_ID.XMP: {
        xmpStartTagInBody(p, token);
        break;
      }
      case TAG_ID.SVG: {
        svgStartTagInBody(p, token);
        break;
      }
      case TAG_ID.HTML: {
        htmlStartTagInBody(p, token);
        break;
      }
      case TAG_ID.BASE:
      case TAG_ID.LINK:
      case TAG_ID.META:
      case TAG_ID.STYLE:
      case TAG_ID.TITLE:
      case TAG_ID.SCRIPT:
      case TAG_ID.BGSOUND:
      case TAG_ID.BASEFONT:
      case TAG_ID.TEMPLATE: {
        startTagInHead(p, token);
        break;
      }
      case TAG_ID.BODY: {
        bodyStartTagInBody(p, token);
        break;
      }
      case TAG_ID.FORM: {
        formStartTagInBody(p, token);
        break;
      }
      case TAG_ID.NOBR: {
        nobrStartTagInBody(p, token);
        break;
      }
      case TAG_ID.MATH: {
        mathStartTagInBody(p, token);
        break;
      }
      case TAG_ID.TABLE: {
        tableStartTagInBody(p, token);
        break;
      }
      case TAG_ID.INPUT: {
        inputStartTagInBody(p, token);
        break;
      }
      case TAG_ID.PARAM:
      case TAG_ID.TRACK:
      case TAG_ID.SOURCE: {
        paramStartTagInBody(p, token);
        break;
      }
      case TAG_ID.IMAGE: {
        imageStartTagInBody(p, token);
        break;
      }
      case TAG_ID.BUTTON: {
        buttonStartTagInBody(p, token);
        break;
      }
      case TAG_ID.APPLET:
      case TAG_ID.OBJECT:
      case TAG_ID.MARQUEE: {
        appletStartTagInBody(p, token);
        break;
      }
      case TAG_ID.IFRAME: {
        iframeStartTagInBody(p, token);
        break;
      }
      case TAG_ID.SELECT: {
        selectStartTagInBody(p, token);
        break;
      }
      case TAG_ID.OPTION:
      case TAG_ID.OPTGROUP: {
        optgroupStartTagInBody(p, token);
        break;
      }
      case TAG_ID.NOEMBED: {
        noembedStartTagInBody(p, token);
        break;
      }
      case TAG_ID.FRAMESET: {
        framesetStartTagInBody(p, token);
        break;
      }
      case TAG_ID.TEXTAREA: {
        textareaStartTagInBody(p, token);
        break;
      }
      case TAG_ID.NOSCRIPT: {
        if (p.options.scriptingEnabled) {
          noembedStartTagInBody(p, token);
        } else {
          genericStartTagInBody(p, token);
        }
        break;
      }
      case TAG_ID.PLAINTEXT: {
        plaintextStartTagInBody(p, token);
        break;
      }
      case TAG_ID.COL:
      case TAG_ID.TH:
      case TAG_ID.TD:
      case TAG_ID.TR:
      case TAG_ID.HEAD:
      case TAG_ID.FRAME:
      case TAG_ID.TBODY:
      case TAG_ID.TFOOT:
      case TAG_ID.THEAD:
      case TAG_ID.CAPTION:
      case TAG_ID.COLGROUP: {
        break;
      }
      default: {
        genericStartTagInBody(p, token);
      }
    }
  }
  function bodyEndTagInBody(p, token) {
    if (p.openElements.hasInScope(TAG_ID.BODY)) {
      p.insertionMode = InsertionMode.AFTER_BODY;
      if (p.options.sourceCodeLocationInfo) {
        const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
        if (bodyElement) {
          p._setEndLocation(bodyElement, token);
        }
      }
    }
  }
  function htmlEndTagInBody(p, token) {
    if (p.openElements.hasInScope(TAG_ID.BODY)) {
      p.insertionMode = InsertionMode.AFTER_BODY;
      endTagAfterBody(p, token);
    }
  }
  function addressEndTagInBody(p, token) {
    const tn = token.tagID;
    if (p.openElements.hasInScope(tn)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped(tn);
    }
  }
  function formEndTagInBody(p) {
    const inTemplate = p.openElements.tmplCount > 0;
    const { formElement } = p;
    if (!inTemplate) {
      p.formElement = null;
    }
    if ((formElement || inTemplate) && p.openElements.hasInScope(TAG_ID.FORM)) {
      p.openElements.generateImpliedEndTags();
      if (inTemplate) {
        p.openElements.popUntilTagNamePopped(TAG_ID.FORM);
      } else if (formElement) {
        p.openElements.remove(formElement);
      }
    }
  }
  function pEndTagInBody(p) {
    if (!p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._insertFakeElement(TAG_NAMES.P, TAG_ID.P);
    }
    p._closePElement();
  }
  function liEndTagInBody(p) {
    if (p.openElements.hasInListItemScope(TAG_ID.LI)) {
      p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.LI);
      p.openElements.popUntilTagNamePopped(TAG_ID.LI);
    }
  }
  function ddEndTagInBody(p, token) {
    const tn = token.tagID;
    if (p.openElements.hasInScope(tn)) {
      p.openElements.generateImpliedEndTagsWithExclusion(tn);
      p.openElements.popUntilTagNamePopped(tn);
    }
  }
  function numberedHeaderEndTagInBody(p) {
    if (p.openElements.hasNumberedHeaderInScope()) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilNumberedHeaderPopped();
    }
  }
  function appletEndTagInBody(p, token) {
    const tn = token.tagID;
    if (p.openElements.hasInScope(tn)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped(tn);
      p.activeFormattingElements.clearToLastMarker();
    }
  }
  function brEndTagInBody(p) {
    p._reconstructActiveFormattingElements();
    p._insertFakeElement(TAG_NAMES.BR, TAG_ID.BR);
    p.openElements.pop();
    p.framesetOk = false;
  }
  function genericEndTagInBody(p, token) {
    const tn = token.tagName;
    const tid = token.tagID;
    for (let i = p.openElements.stackTop; i > 0; i--) {
      const element = p.openElements.items[i];
      const elementId = p.openElements.tagIDs[i];
      if (tid === elementId && (tid !== TAG_ID.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {
        p.openElements.generateImpliedEndTagsWithExclusion(tid);
        if (p.openElements.stackTop >= i)
          p.openElements.shortenToLength(i);
        break;
      }
      if (p._isSpecialElement(element, elementId)) {
        break;
      }
    }
  }
  function endTagInBody(p, token) {
    switch (token.tagID) {
      case TAG_ID.A:
      case TAG_ID.B:
      case TAG_ID.I:
      case TAG_ID.S:
      case TAG_ID.U:
      case TAG_ID.EM:
      case TAG_ID.TT:
      case TAG_ID.BIG:
      case TAG_ID.CODE:
      case TAG_ID.FONT:
      case TAG_ID.NOBR:
      case TAG_ID.SMALL:
      case TAG_ID.STRIKE:
      case TAG_ID.STRONG: {
        callAdoptionAgency(p, token);
        break;
      }
      case TAG_ID.P: {
        pEndTagInBody(p);
        break;
      }
      case TAG_ID.DL:
      case TAG_ID.UL:
      case TAG_ID.OL:
      case TAG_ID.DIR:
      case TAG_ID.DIV:
      case TAG_ID.NAV:
      case TAG_ID.PRE:
      case TAG_ID.MAIN:
      case TAG_ID.MENU:
      case TAG_ID.ASIDE:
      case TAG_ID.BUTTON:
      case TAG_ID.CENTER:
      case TAG_ID.FIGURE:
      case TAG_ID.FOOTER:
      case TAG_ID.HEADER:
      case TAG_ID.HGROUP:
      case TAG_ID.DIALOG:
      case TAG_ID.ADDRESS:
      case TAG_ID.ARTICLE:
      case TAG_ID.DETAILS:
      case TAG_ID.SECTION:
      case TAG_ID.SUMMARY:
      case TAG_ID.LISTING:
      case TAG_ID.FIELDSET:
      case TAG_ID.BLOCKQUOTE:
      case TAG_ID.FIGCAPTION: {
        addressEndTagInBody(p, token);
        break;
      }
      case TAG_ID.LI: {
        liEndTagInBody(p);
        break;
      }
      case TAG_ID.DD:
      case TAG_ID.DT: {
        ddEndTagInBody(p, token);
        break;
      }
      case TAG_ID.H1:
      case TAG_ID.H2:
      case TAG_ID.H3:
      case TAG_ID.H4:
      case TAG_ID.H5:
      case TAG_ID.H6: {
        numberedHeaderEndTagInBody(p);
        break;
      }
      case TAG_ID.BR: {
        brEndTagInBody(p);
        break;
      }
      case TAG_ID.BODY: {
        bodyEndTagInBody(p, token);
        break;
      }
      case TAG_ID.HTML: {
        htmlEndTagInBody(p, token);
        break;
      }
      case TAG_ID.FORM: {
        formEndTagInBody(p);
        break;
      }
      case TAG_ID.APPLET:
      case TAG_ID.OBJECT:
      case TAG_ID.MARQUEE: {
        appletEndTagInBody(p, token);
        break;
      }
      case TAG_ID.TEMPLATE: {
        templateEndTagInHead(p, token);
        break;
      }
      default: {
        genericEndTagInBody(p, token);
      }
    }
  }
  function eofInBody(p, token) {
    if (p.tmplInsertionModeStack.length > 0) {
      eofInTemplate(p, token);
    } else {
      stopParsing(p, token);
    }
  }
  function endTagInText(p, token) {
    var _a3;
    if (token.tagID === TAG_ID.SCRIPT) {
      (_a3 = p.scriptHandler) === null || _a3 === void 0 ? void 0 : _a3.call(p, p.openElements.current);
    }
    p.openElements.pop();
    p.insertionMode = p.originalInsertionMode;
  }
  function eofInText(p, token) {
    p._err(token, ERR.eofInElementThatCanContainOnlyText);
    p.openElements.pop();
    p.insertionMode = p.originalInsertionMode;
    p.onEof(token);
  }
  function characterInTable(p, token) {
    if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {
      p.pendingCharacterTokens.length = 0;
      p.hasNonWhitespacePendingCharacterToken = false;
      p.originalInsertionMode = p.insertionMode;
      p.insertionMode = InsertionMode.IN_TABLE_TEXT;
      switch (token.type) {
        case TokenType.CHARACTER: {
          characterInTableText(p, token);
          break;
        }
        case TokenType.WHITESPACE_CHARACTER: {
          whitespaceCharacterInTableText(p, token);
          break;
        }
      }
    } else {
      tokenInTable(p, token);
    }
  }
  function captionStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p.activeFormattingElements.insertMarker();
    p._insertElement(token, NS.HTML);
    p.insertionMode = InsertionMode.IN_CAPTION;
  }
  function colgroupStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertElement(token, NS.HTML);
    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
  }
  function colStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertFakeElement(TAG_NAMES.COLGROUP, TAG_ID.COLGROUP);
    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
    startTagInColumnGroup(p, token);
  }
  function tbodyStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertElement(token, NS.HTML);
    p.insertionMode = InsertionMode.IN_TABLE_BODY;
  }
  function tdStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertFakeElement(TAG_NAMES.TBODY, TAG_ID.TBODY);
    p.insertionMode = InsertionMode.IN_TABLE_BODY;
    startTagInTableBody(p, token);
  }
  function tableStartTagInTable(p, token) {
    if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
      p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
      p._resetInsertionMode();
      p._processStartTag(token);
    }
  }
  function inputStartTagInTable(p, token) {
    if (isHiddenInput(token)) {
      p._appendElement(token, NS.HTML);
    } else {
      tokenInTable(p, token);
    }
    token.ackSelfClosing = true;
  }
  function formStartTagInTable(p, token) {
    if (!p.formElement && p.openElements.tmplCount === 0) {
      p._insertElement(token, NS.HTML);
      p.formElement = p.openElements.current;
      p.openElements.pop();
    }
  }
  function startTagInTable(p, token) {
    switch (token.tagID) {
      case TAG_ID.TD:
      case TAG_ID.TH:
      case TAG_ID.TR: {
        tdStartTagInTable(p, token);
        break;
      }
      case TAG_ID.STYLE:
      case TAG_ID.SCRIPT:
      case TAG_ID.TEMPLATE: {
        startTagInHead(p, token);
        break;
      }
      case TAG_ID.COL: {
        colStartTagInTable(p, token);
        break;
      }
      case TAG_ID.FORM: {
        formStartTagInTable(p, token);
        break;
      }
      case TAG_ID.TABLE: {
        tableStartTagInTable(p, token);
        break;
      }
      case TAG_ID.TBODY:
      case TAG_ID.TFOOT:
      case TAG_ID.THEAD: {
        tbodyStartTagInTable(p, token);
        break;
      }
      case TAG_ID.INPUT: {
        inputStartTagInTable(p, token);
        break;
      }
      case TAG_ID.CAPTION: {
        captionStartTagInTable(p, token);
        break;
      }
      case TAG_ID.COLGROUP: {
        colgroupStartTagInTable(p, token);
        break;
      }
      default: {
        tokenInTable(p, token);
      }
    }
  }
  function endTagInTable(p, token) {
    switch (token.tagID) {
      case TAG_ID.TABLE: {
        if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
          p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
          p._resetInsertionMode();
        }
        break;
      }
      case TAG_ID.TEMPLATE: {
        templateEndTagInHead(p, token);
        break;
      }
      case TAG_ID.BODY:
      case TAG_ID.CAPTION:
      case TAG_ID.COL:
      case TAG_ID.COLGROUP:
      case TAG_ID.HTML:
      case TAG_ID.TBODY:
      case TAG_ID.TD:
      case TAG_ID.TFOOT:
      case TAG_ID.TH:
      case TAG_ID.THEAD:
      case TAG_ID.TR: {
        break;
      }
      default: {
        tokenInTable(p, token);
      }
    }
  }
  function tokenInTable(p, token) {
    const savedFosterParentingState = p.fosterParentingEnabled;
    p.fosterParentingEnabled = true;
    modeInBody(p, token);
    p.fosterParentingEnabled = savedFosterParentingState;
  }
  function whitespaceCharacterInTableText(p, token) {
    p.pendingCharacterTokens.push(token);
  }
  function characterInTableText(p, token) {
    p.pendingCharacterTokens.push(token);
    p.hasNonWhitespacePendingCharacterToken = true;
  }
  function tokenInTableText(p, token) {
    let i = 0;
    if (p.hasNonWhitespacePendingCharacterToken) {
      for (; i < p.pendingCharacterTokens.length; i++) {
        tokenInTable(p, p.pendingCharacterTokens[i]);
      }
    } else {
      for (; i < p.pendingCharacterTokens.length; i++) {
        p._insertCharacters(p.pendingCharacterTokens[i]);
      }
    }
    p.insertionMode = p.originalInsertionMode;
    p._processToken(token);
  }
  var TABLE_VOID_ELEMENTS = /* @__PURE__ */ new Set([TAG_ID.CAPTION, TAG_ID.COL, TAG_ID.COLGROUP, TAG_ID.TBODY, TAG_ID.TD, TAG_ID.TFOOT, TAG_ID.TH, TAG_ID.THEAD, TAG_ID.TR]);
  function startTagInCaption(p, token) {
    const tn = token.tagID;
    if (TABLE_VOID_ELEMENTS.has(tn)) {
      if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
        p.activeFormattingElements.clearToLastMarker();
        p.insertionMode = InsertionMode.IN_TABLE;
        startTagInTable(p, token);
      }
    } else {
      startTagInBody(p, token);
    }
  }
  function endTagInCaption(p, token) {
    const tn = token.tagID;
    switch (tn) {
      case TAG_ID.CAPTION:
      case TAG_ID.TABLE: {
        if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
          p.activeFormattingElements.clearToLastMarker();
          p.insertionMode = InsertionMode.IN_TABLE;
          if (tn === TAG_ID.TABLE) {
            endTagInTable(p, token);
          }
        }
        break;
      }
      case TAG_ID.BODY:
      case TAG_ID.COL:
      case TAG_ID.COLGROUP:
      case TAG_ID.HTML:
      case TAG_ID.TBODY:
      case TAG_ID.TD:
      case TAG_ID.TFOOT:
      case TAG_ID.TH:
      case TAG_ID.THEAD:
      case TAG_ID.TR: {
        break;
      }
      default: {
        endTagInBody(p, token);
      }
    }
  }
  function startTagInColumnGroup(p, token) {
    switch (token.tagID) {
      case TAG_ID.HTML: {
        startTagInBody(p, token);
        break;
      }
      case TAG_ID.COL: {
        p._appendElement(token, NS.HTML);
        token.ackSelfClosing = true;
        break;
      }
      case TAG_ID.TEMPLATE: {
        startTagInHead(p, token);
        break;
      }
      default: {
        tokenInColumnGroup(p, token);
      }
    }
  }
  function endTagInColumnGroup(p, token) {
    switch (token.tagID) {
      case TAG_ID.COLGROUP: {
        if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
          p.openElements.pop();
          p.insertionMode = InsertionMode.IN_TABLE;
        }
        break;
      }
      case TAG_ID.TEMPLATE: {
        templateEndTagInHead(p, token);
        break;
      }
      case TAG_ID.COL: {
        break;
      }
      default: {
        tokenInColumnGroup(p, token);
      }
    }
  }
  function tokenInColumnGroup(p, token) {
    if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
      p.openElements.pop();
      p.insertionMode = InsertionMode.IN_TABLE;
      p._processToken(token);
    }
  }
  function startTagInTableBody(p, token) {
    switch (token.tagID) {
      case TAG_ID.TR: {
        p.openElements.clearBackToTableBodyContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = InsertionMode.IN_ROW;
        break;
      }
      case TAG_ID.TH:
      case TAG_ID.TD: {
        p.openElements.clearBackToTableBodyContext();
        p._insertFakeElement(TAG_NAMES.TR, TAG_ID.TR);
        p.insertionMode = InsertionMode.IN_ROW;
        startTagInRow(p, token);
        break;
      }
      case TAG_ID.CAPTION:
      case TAG_ID.COL:
      case TAG_ID.COLGROUP:
      case TAG_ID.TBODY:
      case TAG_ID.TFOOT:
      case TAG_ID.THEAD: {
        if (p.openElements.hasTableBodyContextInTableScope()) {
          p.openElements.clearBackToTableBodyContext();
          p.openElements.pop();
          p.insertionMode = InsertionMode.IN_TABLE;
          startTagInTable(p, token);
        }
        break;
      }
      default: {
        startTagInTable(p, token);
      }
    }
  }
  function endTagInTableBody(p, token) {
    const tn = token.tagID;
    switch (token.tagID) {
      case TAG_ID.TBODY:
      case TAG_ID.TFOOT:
      case TAG_ID.THEAD: {
        if (p.openElements.hasInTableScope(tn)) {
          p.openElements.clearBackToTableBodyContext();
          p.openElements.pop();
          p.insertionMode = InsertionMode.IN_TABLE;
        }
        break;
      }
      case TAG_ID.TABLE: {
        if (p.openElements.hasTableBodyContextInTableScope()) {
          p.openElements.clearBackToTableBodyContext();
          p.openElements.pop();
          p.insertionMode = InsertionMode.IN_TABLE;
          endTagInTable(p, token);
        }
        break;
      }
      case TAG_ID.BODY:
      case TAG_ID.CAPTION:
      case TAG_ID.COL:
      case TAG_ID.COLGROUP:
      case TAG_ID.HTML:
      case TAG_ID.TD:
      case TAG_ID.TH:
      case TAG_ID.TR: {
        break;
      }
      default: {
        endTagInTable(p, token);
      }
    }
  }
  function startTagInRow(p, token) {
    switch (token.tagID) {
      case TAG_ID.TH:
      case TAG_ID.TD: {
        p.openElements.clearBackToTableRowContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = InsertionMode.IN_CELL;
        p.activeFormattingElements.insertMarker();
        break;
      }
      case TAG_ID.CAPTION:
      case TAG_ID.COL:
      case TAG_ID.COLGROUP:
      case TAG_ID.TBODY:
      case TAG_ID.TFOOT:
      case TAG_ID.THEAD:
      case TAG_ID.TR: {
        if (p.openElements.hasInTableScope(TAG_ID.TR)) {
          p.openElements.clearBackToTableRowContext();
          p.openElements.pop();
          p.insertionMode = InsertionMode.IN_TABLE_BODY;
          startTagInTableBody(p, token);
        }
        break;
      }
      default: {
        startTagInTable(p, token);
      }
    }
  }
  function endTagInRow(p, token) {
    switch (token.tagID) {
      case TAG_ID.TR: {
        if (p.openElements.hasInTableScope(TAG_ID.TR)) {
          p.openElements.clearBackToTableRowContext();
          p.openElements.pop();
          p.insertionMode = InsertionMode.IN_TABLE_BODY;
        }
        break;
      }
      case TAG_ID.TABLE: {
        if (p.openElements.hasInTableScope(TAG_ID.TR)) {
          p.openElements.clearBackToTableRowContext();
          p.openElements.pop();
          p.insertionMode = InsertionMode.IN_TABLE_BODY;
          endTagInTableBody(p, token);
        }
        break;
      }
      case TAG_ID.TBODY:
      case TAG_ID.TFOOT:
      case TAG_ID.THEAD: {
        if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope(TAG_ID.TR)) {
          p.openElements.clearBackToTableRowContext();
          p.openElements.pop();
          p.insertionMode = InsertionMode.IN_TABLE_BODY;
          endTagInTableBody(p, token);
        }
        break;
      }
      case TAG_ID.BODY:
      case TAG_ID.CAPTION:
      case TAG_ID.COL:
      case TAG_ID.COLGROUP:
      case TAG_ID.HTML:
      case TAG_ID.TD:
      case TAG_ID.TH: {
        break;
      }
      default:
        endTagInTable(p, token);
    }
  }
  function startTagInCell(p, token) {
    const tn = token.tagID;
    if (TABLE_VOID_ELEMENTS.has(tn)) {
      if (p.openElements.hasInTableScope(TAG_ID.TD) || p.openElements.hasInTableScope(TAG_ID.TH)) {
        p._closeTableCell();
        startTagInRow(p, token);
      }
    } else {
      startTagInBody(p, token);
    }
  }
  function endTagInCell(p, token) {
    const tn = token.tagID;
    switch (tn) {
      case TAG_ID.TD:
      case TAG_ID.TH: {
        if (p.openElements.hasInTableScope(tn)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped(tn);
          p.activeFormattingElements.clearToLastMarker();
          p.insertionMode = InsertionMode.IN_ROW;
        }
        break;
      }
      case TAG_ID.TABLE:
      case TAG_ID.TBODY:
      case TAG_ID.TFOOT:
      case TAG_ID.THEAD:
      case TAG_ID.TR: {
        if (p.openElements.hasInTableScope(tn)) {
          p._closeTableCell();
          endTagInRow(p, token);
        }
        break;
      }
      case TAG_ID.BODY:
      case TAG_ID.CAPTION:
      case TAG_ID.COL:
      case TAG_ID.COLGROUP:
      case TAG_ID.HTML: {
        break;
      }
      default: {
        endTagInBody(p, token);
      }
    }
  }
  function startTagInSelect(p, token) {
    switch (token.tagID) {
      case TAG_ID.HTML: {
        startTagInBody(p, token);
        break;
      }
      case TAG_ID.OPTION: {
        if (p.openElements.currentTagId === TAG_ID.OPTION) {
          p.openElements.pop();
        }
        p._insertElement(token, NS.HTML);
        break;
      }
      case TAG_ID.OPTGROUP: {
        if (p.openElements.currentTagId === TAG_ID.OPTION) {
          p.openElements.pop();
        }
        if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
          p.openElements.pop();
        }
        p._insertElement(token, NS.HTML);
        break;
      }
      case TAG_ID.INPUT:
      case TAG_ID.KEYGEN:
      case TAG_ID.TEXTAREA:
      case TAG_ID.SELECT: {
        if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
          p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
          p._resetInsertionMode();
          if (token.tagID !== TAG_ID.SELECT) {
            p._processStartTag(token);
          }
        }
        break;
      }
      case TAG_ID.SCRIPT:
      case TAG_ID.TEMPLATE: {
        startTagInHead(p, token);
        break;
      }
      default:
    }
  }
  function endTagInSelect(p, token) {
    switch (token.tagID) {
      case TAG_ID.OPTGROUP: {
        if (p.openElements.stackTop > 0 && p.openElements.currentTagId === TAG_ID.OPTION && p.openElements.tagIDs[p.openElements.stackTop - 1] === TAG_ID.OPTGROUP) {
          p.openElements.pop();
        }
        if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
          p.openElements.pop();
        }
        break;
      }
      case TAG_ID.OPTION: {
        if (p.openElements.currentTagId === TAG_ID.OPTION) {
          p.openElements.pop();
        }
        break;
      }
      case TAG_ID.SELECT: {
        if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
          p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
          p._resetInsertionMode();
        }
        break;
      }
      case TAG_ID.TEMPLATE: {
        templateEndTagInHead(p, token);
        break;
      }
      default:
    }
  }
  function startTagInSelectInTable(p, token) {
    const tn = token.tagID;
    if (tn === TAG_ID.CAPTION || tn === TAG_ID.TABLE || tn === TAG_ID.TBODY || tn === TAG_ID.TFOOT || tn === TAG_ID.THEAD || tn === TAG_ID.TR || tn === TAG_ID.TD || tn === TAG_ID.TH) {
      p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
      p._resetInsertionMode();
      p._processStartTag(token);
    } else {
      startTagInSelect(p, token);
    }
  }
  function endTagInSelectInTable(p, token) {
    const tn = token.tagID;
    if (tn === TAG_ID.CAPTION || tn === TAG_ID.TABLE || tn === TAG_ID.TBODY || tn === TAG_ID.TFOOT || tn === TAG_ID.THEAD || tn === TAG_ID.TR || tn === TAG_ID.TD || tn === TAG_ID.TH) {
      if (p.openElements.hasInTableScope(tn)) {
        p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
        p._resetInsertionMode();
        p.onEndTag(token);
      }
    } else {
      endTagInSelect(p, token);
    }
  }
  function startTagInTemplate(p, token) {
    switch (token.tagID) {
      case TAG_ID.BASE:
      case TAG_ID.BASEFONT:
      case TAG_ID.BGSOUND:
      case TAG_ID.LINK:
      case TAG_ID.META:
      case TAG_ID.NOFRAMES:
      case TAG_ID.SCRIPT:
      case TAG_ID.STYLE:
      case TAG_ID.TEMPLATE:
      case TAG_ID.TITLE:
        startTagInHead(p, token);
        break;
      case TAG_ID.CAPTION:
      case TAG_ID.COLGROUP:
      case TAG_ID.TBODY:
      case TAG_ID.TFOOT:
      case TAG_ID.THEAD:
        p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;
        p.insertionMode = InsertionMode.IN_TABLE;
        startTagInTable(p, token);
        break;
      case TAG_ID.COL:
        p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;
        p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
        startTagInColumnGroup(p, token);
        break;
      case TAG_ID.TR:
        p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;
        p.insertionMode = InsertionMode.IN_TABLE_BODY;
        startTagInTableBody(p, token);
        break;
      case TAG_ID.TD:
      case TAG_ID.TH:
        p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;
        p.insertionMode = InsertionMode.IN_ROW;
        startTagInRow(p, token);
        break;
      default:
        p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;
        p.insertionMode = InsertionMode.IN_BODY;
        startTagInBody(p, token);
    }
  }
  function endTagInTemplate(p, token) {
    if (token.tagID === TAG_ID.TEMPLATE) {
      templateEndTagInHead(p, token);
    }
  }
  function eofInTemplate(p, token) {
    if (p.openElements.tmplCount > 0) {
      p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
      p.activeFormattingElements.clearToLastMarker();
      p.tmplInsertionModeStack.shift();
      p._resetInsertionMode();
      p.onEof(token);
    } else {
      stopParsing(p, token);
    }
  }
  function startTagAfterBody(p, token) {
    if (token.tagID === TAG_ID.HTML) {
      startTagInBody(p, token);
    } else {
      tokenAfterBody(p, token);
    }
  }
  function endTagAfterBody(p, token) {
    var _a3;
    if (token.tagID === TAG_ID.HTML) {
      if (!p.fragmentContext) {
        p.insertionMode = InsertionMode.AFTER_AFTER_BODY;
      }
      if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === TAG_ID.HTML) {
        p._setEndLocation(p.openElements.items[0], token);
        const bodyElement = p.openElements.items[1];
        if (bodyElement && !((_a3 = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a3 === void 0 ? void 0 : _a3.endTag)) {
          p._setEndLocation(bodyElement, token);
        }
      }
    } else {
      tokenAfterBody(p, token);
    }
  }
  function tokenAfterBody(p, token) {
    p.insertionMode = InsertionMode.IN_BODY;
    modeInBody(p, token);
  }
  function startTagInFrameset(p, token) {
    switch (token.tagID) {
      case TAG_ID.HTML: {
        startTagInBody(p, token);
        break;
      }
      case TAG_ID.FRAMESET: {
        p._insertElement(token, NS.HTML);
        break;
      }
      case TAG_ID.FRAME: {
        p._appendElement(token, NS.HTML);
        token.ackSelfClosing = true;
        break;
      }
      case TAG_ID.NOFRAMES: {
        startTagInHead(p, token);
        break;
      }
      default:
    }
  }
  function endTagInFrameset(p, token) {
    if (token.tagID === TAG_ID.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
      p.openElements.pop();
      if (!p.fragmentContext && p.openElements.currentTagId !== TAG_ID.FRAMESET) {
        p.insertionMode = InsertionMode.AFTER_FRAMESET;
      }
    }
  }
  function startTagAfterFrameset(p, token) {
    switch (token.tagID) {
      case TAG_ID.HTML: {
        startTagInBody(p, token);
        break;
      }
      case TAG_ID.NOFRAMES: {
        startTagInHead(p, token);
        break;
      }
      default:
    }
  }
  function endTagAfterFrameset(p, token) {
    if (token.tagID === TAG_ID.HTML) {
      p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;
    }
  }
  function startTagAfterAfterBody(p, token) {
    if (token.tagID === TAG_ID.HTML) {
      startTagInBody(p, token);
    } else {
      tokenAfterAfterBody(p, token);
    }
  }
  function tokenAfterAfterBody(p, token) {
    p.insertionMode = InsertionMode.IN_BODY;
    modeInBody(p, token);
  }
  function startTagAfterAfterFrameset(p, token) {
    switch (token.tagID) {
      case TAG_ID.HTML: {
        startTagInBody(p, token);
        break;
      }
      case TAG_ID.NOFRAMES: {
        startTagInHead(p, token);
        break;
      }
      default:
    }
  }
  function nullCharacterInForeignContent(p, token) {
    token.chars = REPLACEMENT_CHARACTER;
    p._insertCharacters(token);
  }
  function characterInForeignContent(p, token) {
    p._insertCharacters(token);
    p.framesetOk = false;
  }
  function popUntilHtmlOrIntegrationPoint(p) {
    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {
      p.openElements.pop();
    }
  }
  function startTagInForeignContent(p, token) {
    if (causesExit(token)) {
      popUntilHtmlOrIntegrationPoint(p);
      p._startTagOutsideForeignContent(token);
    } else {
      const current = p._getAdjustedCurrentElement();
      const currentNs = p.treeAdapter.getNamespaceURI(current);
      if (currentNs === NS.MATHML) {
        adjustTokenMathMLAttrs(token);
      } else if (currentNs === NS.SVG) {
        adjustTokenSVGTagName(token);
        adjustTokenSVGAttrs(token);
      }
      adjustTokenXMLAttrs(token);
      if (token.selfClosing) {
        p._appendElement(token, currentNs);
      } else {
        p._insertElement(token, currentNs);
      }
      token.ackSelfClosing = true;
    }
  }
  function endTagInForeignContent(p, token) {
    if (token.tagID === TAG_ID.P || token.tagID === TAG_ID.BR) {
      popUntilHtmlOrIntegrationPoint(p);
      p._endTagOutsideForeignContent(token);
      return;
    }
    for (let i = p.openElements.stackTop; i > 0; i--) {
      const element = p.openElements.items[i];
      if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
        p._endTagOutsideForeignContent(token);
        break;
      }
      const tagName = p.treeAdapter.getTagName(element);
      if (tagName.toLowerCase() === token.tagName) {
        token.tagName = tagName;
        p.openElements.shortenToLength(i);
        break;
      }
    }
  }

  // node_modules/parse5/dist/serializer/index.js
  init_globals();

  // node_modules/entities/lib/esm/escape.js
  init_globals();
  var xmlCodeMap = /* @__PURE__ */ new Map([
    [34, "&quot;"],
    [38, "&amp;"],
    [39, "&apos;"],
    [60, "&lt;"],
    [62, "&gt;"]
  ]);
  var getCodePoint = String.prototype.codePointAt != null ? (str, index) => str.codePointAt(index) : (c, index) => (c.charCodeAt(index) & 64512) === 55296 ? (c.charCodeAt(index) - 55296) * 1024 + c.charCodeAt(index + 1) - 56320 + 65536 : c.charCodeAt(index);
  function getEscaper(regex, map) {
    return function escape(data) {
      let match;
      let lastIdx = 0;
      let result = "";
      while (match = regex.exec(data)) {
        if (lastIdx !== match.index) {
          result += data.substring(lastIdx, match.index);
        }
        result += map.get(match[0].charCodeAt(0));
        lastIdx = match.index + 1;
      }
      return result + data.substring(lastIdx);
    };
  }
  var escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
  var escapeAttribute = getEscaper(/["&\u00A0]/g, /* @__PURE__ */ new Map([
    [34, "&quot;"],
    [38, "&amp;"],
    [160, "&nbsp;"]
  ]));
  var escapeText = getEscaper(/[&<>\u00A0]/g, /* @__PURE__ */ new Map([
    [38, "&amp;"],
    [60, "&lt;"],
    [62, "&gt;"],
    [160, "&nbsp;"]
  ]));

  // node_modules/parse5/dist/serializer/index.js
  var VOID_ELEMENTS = /* @__PURE__ */ new Set([
    TAG_NAMES.AREA,
    TAG_NAMES.BASE,
    TAG_NAMES.BASEFONT,
    TAG_NAMES.BGSOUND,
    TAG_NAMES.BR,
    TAG_NAMES.COL,
    TAG_NAMES.EMBED,
    TAG_NAMES.FRAME,
    TAG_NAMES.HR,
    TAG_NAMES.IMG,
    TAG_NAMES.INPUT,
    TAG_NAMES.KEYGEN,
    TAG_NAMES.LINK,
    TAG_NAMES.META,
    TAG_NAMES.PARAM,
    TAG_NAMES.SOURCE,
    TAG_NAMES.TRACK,
    TAG_NAMES.WBR
  ]);

  // node_modules/parse5/dist/index.js
  function parseFragment(fragmentContext, html2, options2) {
    if (typeof fragmentContext === "string") {
      options2 = html2;
      html2 = fragmentContext;
      fragmentContext = null;
    }
    const parser = Parser.getFragmentParser(fragmentContext, options2);
    parser.tokenizer.write(html2, true);
    return parser.getFragment();
  }

  // gen/babel/langmap.json
  var langmap_default = {
    af: "afrikaans",
    "af-af": "afrikaans",
    afr: "afrikaans",
    afrikaans: "afrikaans",
    agh: "aghem",
    aghem: "aghem",
    agq: "aghem",
    ak: "akan",
    "ak-ak": "akan",
    aka: "akan",
    akan: "akan",
    alb: "albanian",
    albanian: "albanian",
    am: "amharic",
    "am-am": "amharic",
    ame: "american",
    american: "american",
    "american english": "american",
    americanenglish: "american",
    amh: "amharic",
    amharic: "amharic",
    anar\u00E2\u0161kiel\u00E2: "inarisami",
    "ancient greek": "greek",
    ancientgreek: "greek",
    ar: "arabic",
    "ar-ar": "arabic",
    "ar-dz": "arabic-algeria",
    "ar-eg": "arabic-egypt",
    "ar-iq": "arabic-iraq",
    "ar-jo": "arabic-jordan",
    "ar-lb": "arabic-lebanon",
    "ar-ma": "arabic-morocco",
    "ar-ps": "arabic-palestinianterritories",
    "ar-sa": "arabic-saudiarabia",
    "ar-sy": "arabic-syria",
    "ar-tn": "arabic-tunisia",
    arabic: "arabic",
    "arabic-algeria": "arabic-algeria",
    "arabic-dz": "arabic-algeria",
    "arabic-eg": "arabic-egypt",
    "arabic-egypt": "arabic-egypt",
    "arabic-iq": "arabic-iraq",
    "arabic-iraq": "arabic-iraq",
    "arabic-jo": "arabic-jordan",
    "arabic-jordan": "arabic-jordan",
    "arabic-lb": "arabic-lebanon",
    "arabic-lebanon": "arabic-lebanon",
    "arabic-ma": "arabic-morocco",
    "arabic-morocco": "arabic-morocco",
    "arabic-palestinianterritories": "arabic-palestinianterritories",
    "arabic-ps": "arabic-palestinianterritories",
    "arabic-sa": "arabic-saudiarabia",
    "arabic-saudiarabia": "arabic-saudiarabia",
    "arabic-sy": "arabic-syria",
    "arabic-syria": "arabic-syria",
    "arabic-tn": "arabic-tunisia",
    "arabic-tunisia": "arabic-tunisia",
    arm: "armenian",
    armenian: "armenian",
    as: "assamese",
    "as-as": "assamese",
    asa: "asu",
    ass: "assamese",
    assamese: "assamese",
    ast: "asturian",
    asturian: "asturian",
    asturianu: "asturian",
    asu: "asu",
    australian: "australian",
    "australian english": "australian",
    australianenglish: "australian",
    austrian: "austrian",
    "austrian german": "austrian",
    "austrian-traditional": "austrian",
    austriangerman: "austrian",
    "austriangerman-traditional": "austrian",
    az: "azerbaijani",
    "az-az": "azerbaijani",
    "az-cyrl": "azerbaijani-cyrillic",
    "az-latn": "azerbaijani-latin",
    azerbaijani: "azerbaijani",
    "azerbaijani-cyrillic": "azerbaijani-cyrillic",
    "azerbaijani-cyrl": "azerbaijani-cyrillic",
    "azerbaijani-latin": "azerbaijani-latin",
    "azerbaijani-latn": "azerbaijani-latin",
    az\u0259rbaycan: "azerbaijani",
    baf: "bafia",
    bafia: "bafia",
    "bahasa melayu": "malay",
    bam: "bambara",
    bamanakan: "bambara",
    bambara: "bambara",
    ban: "bangla",
    bangla: "bangla",
    bas: "basaa",
    basaa: "basaa",
    basque: "basque",
    be: "belarusian",
    "be-be": "belarusian",
    bel: "belarusian",
    belarusian: "belarusian",
    bem: "bemba",
    bemba: "bemba",
    ben: "bena",
    bena: "bena",
    bengali: "bangla",
    bez: "bena",
    bg: "bulgarian",
    "bg-bg": "bulgarian",
    bm: "bambara",
    "bm-bm": "bambara",
    bn: "bangla",
    "bn-bn": "bangla",
    bo: "tibetan",
    "bo-bo": "tibetan",
    bod: "bodo",
    bodo: "bodo",
    bosanski: "bosnian",
    bosnian: "bosnian",
    "bosnian-cyrillic": "bosnian-cyrillic",
    "bosnian-cyrl": "bosnian-cyrillic",
    "bosnian-latin": "bosnian-latin",
    "bosnian-latn": "bosnian-latin",
    br: "breton",
    "br-br": "breton",
    bra: "brazilian",
    brazilian: "brazilian",
    bre: "breton",
    breton: "breton",
    brezhoneg: "breton",
    bri: "british",
    british: "british",
    "british english": "british",
    britishenglish: "british",
    brx: "bodo",
    bs: "bosnian",
    "bs-bs": "bosnian",
    "bs-cyrl": "bosnian-cyrillic",
    "bs-latn": "bosnian-latin",
    bul: "bulgarian",
    bulgarian: "bulgarian",
    bur: "burmese",
    burmese: "burmese",
    ca: "catalan",
    "ca-ca": "catalan",
    canadian: "canadian",
    "canadian english": "canadian",
    "canadian french": "canadien",
    canadianenglish: "canadian",
    canadianfrench: "canadien",
    canadien: "canadien",
    cantonese: "cantonese",
    cat: "catalan",
    catalan: "catalan",
    catal\u00E0: "catalan",
    ce: "chechen",
    "ce-ce": "chechen",
    cen: "centralatlastamazight",
    "central atlas tamazight": "centralatlastamazight",
    "central kurdish": "sorani",
    centralatlastamazight: "centralatlastamazight",
    centralkurdish: "sorani",
    "centralkurdish-latin": "sorani",
    cgg: "chiga",
    chechen: "chechen",
    cherokee: "cherokee",
    chiga: "chiga",
    chimakonde: "makonde",
    chinese: "chinese",
    "chinese-hans": "chinese-simplified",
    "chinese-hans-hk": "chinese-simplified-hongkongsarchina",
    "chinese-hans-mo": "chinese-simplified-macausarchina",
    "chinese-hans-sg": "chinese-simplified-singapore",
    "chinese-hant": "chinese-traditional",
    "chinese-hant-hk": "chinese-traditional-hongkongsarchina",
    "chinese-hant-mo": "chinese-traditional-macausarchina",
    "chinese-simplified": "chinese-simplified",
    "chinese-simplified-hongkongsarchina": "chinese-simplified-hongkongsarchina",
    "chinese-simplified-macausarchina": "chinese-simplified-macausarchina",
    "chinese-simplified-singapore": "chinese-simplified-singapore",
    "chinese-traditional": "chinese-traditional",
    "chinese-traditional-hongkongsarchina": "chinese-traditional-hongkongsarchina",
    "chinese-traditional-macausarchina": "chinese-traditional-macausarchina",
    chishona: "shona",
    chr: "cherokee",
    "church slavic": "churchslavic",
    churchslavic: "churchslavic",
    "churchslavic-glagolitic": "churchslavic-glagolitic",
    "churchslavic-oldcyrillic": "churchslavic-oldcyrillic",
    churchslavonic: "churchslavic",
    ckb: "sorani",
    "ckb-arab": "sorani",
    "ckb-latn": "sorani",
    cla: "classiclatin",
    "classic latin": "classiclatin",
    classiclatin: "classiclatin",
    col: "colognian",
    colognian: "colognian",
    cop: "coptic",
    coptic: "coptic",
    cor: "cornish",
    cornish: "cornish",
    cro: "croatian",
    croatian: "croatian",
    cs: "czech",
    "cs-cs": "czech",
    cu: "churchslavic",
    "cu-cu": "churchslavic",
    "cu-cyrs": "churchslavic-oldcyrillic",
    "cu-glag": "churchslavic-glagolitic",
    cy: "welsh",
    "cy-cy": "welsh",
    cymraeg: "welsh",
    cze: "czech",
    czech: "czech",
    da: "danish",
    "da-da": "danish",
    dan: "danish",
    danish: "danish",
    dansk: "danish",
    dav: "taita",
    davvis\u00E1megiella: "samin",
    de: "ngerman",
    "de-1901": "german",
    "de-1996": "ngerman",
    "de-at": "austrian",
    "de-at-1901": "austrian",
    "de-at-1996": "naustrian",
    "de-ch": "nswissgerman",
    "de-ch-1901": "german",
    "de-ch-1996": "nswissgerman",
    "de-de": "ngerman",
    deutsch: "ngerman",
    dholuo: "luo",
    dje: "zarma",
    dolnoserb\u0161\u0107ina: "lowersorbian",
    dsb: "lowersorbian",
    dua: "duala",
    duala: "duala",
    dut: "dutch",
    dutch: "dutch",
    du\u00E1l\u00E1: "duala",
    dyo: "jolafonyi",
    dz: "dzongkha",
    "dz-dz": "dzongkha",
    dzo: "dzongkha",
    dzongkha: "dzongkha",
    ebu: "embu",
    ecc: "ecclesiasticlatin",
    "ecclesiastic latin": "ecclesiasticlatin",
    ecclesiasticlatin: "ecclesiasticlatin",
    ee: "ewe",
    "ee-ee": "ewe",
    eesti: "estonian",
    ekegusii: "gusii",
    el: "greek",
    "el-el": "greek",
    "el-polyton": "greek",
    emb: "embu",
    embu: "embu",
    en: "english",
    "en-au": "australian",
    "en-ca": "canadian",
    "en-en": "english",
    "en-gb": "british",
    "en-nz": "newzealand",
    "en-us": "american",
    eng: "english",
    english: "english",
    "english-au": "australian",
    "english-australia": "australian",
    "english-ca": "canadian",
    "english-canada": "canadian",
    "english-gb": "british",
    "english-newzealand": "newzealand",
    "english-nz": "newzealand",
    "english-unitedkingdom": "british",
    "english-unitedstates": "american",
    "english-us": "american",
    eo: "esperanto",
    "eo-eo": "esperanto",
    es: "spanish",
    "es-es": "spanish",
    "es-mx": "mexican",
    esp: "esperanto",
    espa\u00F1ol: "spanish",
    "espa\xF1ol de m\xE9xico": "mexican",
    esperanto: "esperanto",
    est: "estonian",
    estonian: "estonian",
    et: "estonian",
    "et-et": "estonian",
    eu: "basque",
    "eu-eu": "basque",
    euskara: "basque",
    ewe: "ewe",
    ewo: "ewondo",
    ewondo: "ewondo",
    e\u028Begbe: "ewe",
    fa: "persian",
    "fa-fa": "persian",
    far: "faroese",
    faroese: "faroese",
    ff: "fulah",
    "ff-ff": "fulah",
    fi: "finnish",
    "fi-fi": "finnish",
    fil: "filipino",
    filipino: "filipino",
    fin: "finnish",
    finnish: "finnish",
    fo: "faroese",
    "fo-fo": "faroese",
    fr: "french",
    "fr-be": "french",
    "fr-ca": "canadien",
    "fr-ch": "french-switzerland",
    "fr-fr": "french",
    "fr-lu": "french",
    fran\u00E7ais: "french",
    "fran\xE7ais canadien": "canadien",
    "fran\xE7ais suisse": "french-switzerland",
    french: "french",
    "french-be": "french",
    "french-belgium": "french",
    "french-ca": "canadien",
    "french-canada": "canadien",
    "french-ch": "french-switzerland",
    "french-lu": "french",
    "french-luxembourg": "french",
    "french-switzerland": "french-switzerland",
    fri: "friulian",
    friulian: "friulian",
    frysk: "westernfrisian",
    ful: "fulah",
    fulah: "fulah",
    fur: "friulian",
    furlan: "friulian",
    fy: "westernfrisian",
    "fy-fy": "westernfrisian",
    f\u00F8royskt: "faroese",
    ga: "irish",
    "ga-ga": "irish",
    gaeilge: "irish",
    gaelg: "manx",
    gaelic: "scottishgaelic",
    gal: "galician",
    galego: "galician",
    galician: "galician",
    gan: "ganda",
    ganda: "ganda",
    gd: "scottishgaelic",
    "gd-gd": "scottishgaelic",
    geo: "georgian",
    georgian: "georgian",
    ger: "german",
    german: "german",
    "german-at": "austrian",
    "german-at-traditional": "austrian",
    "german-austria": "austrian",
    "german-austria-traditional": "austrian",
    "german-ch": "nswissgerman",
    "german-ch-traditional": "german",
    "german-switzerland": "nswissgerman",
    "german-switzerland-traditional": "german",
    "german-traditional": "german",
    gikuyu: "kikuyu",
    gl: "galician",
    "gl-gl": "galician",
    grc: "greek",
    gre: "greek",
    greek: "greek",
    gsw: "swissgerman",
    gu: "gujarati",
    "gu-gu": "gujarati",
    guj: "gujarati",
    gujarati: "gujarati",
    gus: "gusii",
    gusii: "gusii",
    guz: "gusii",
    gv: "manx",
    "gv-gv": "manx",
    g\u00E0idhlig: "scottishgaelic",
    ha: "hausa",
    "ha-gh": "hausa-ghana",
    "ha-ha": "hausa",
    "ha-ne": "hausa-niger",
    hausa: "hausa",
    "hausa-gh": "hausa-ghana",
    "hausa-ghana": "hausa-ghana",
    "hausa-ne": "hausa-niger",
    "hausa-niger": "hausa-niger",
    haw: "hawaiian",
    hawaiian: "hawaiian",
    he: "hebrew",
    "he-he": "hebrew",
    heb: "hebrew",
    hebrew: "hebrew",
    hi: "hindi",
    "hi-hi": "hindi",
    hibena: "bena",
    hin: "hindi",
    hindi: "hindi",
    hornjoserb\u0161\u0107ina: "uppersorbian",
    hr: "croatian",
    "hr-hr": "croatian",
    hrvatski: "croatian",
    hsb: "uppersorbian",
    hu: "hungarian",
    "hu-hu": "hungarian",
    hun: "hungarian",
    hungarian: "hungarian",
    hy: "armenian",
    "hy-hy": "armenian",
    ia: "interlingua",
    "ia-ia": "interlingua",
    ice: "icelandic",
    icelandic: "icelandic",
    ichibemba: "bemba",
    id: "indonesian",
    "id-id": "indonesian",
    ig: "igbo",
    "ig-ig": "igbo",
    igb: "igbo",
    igbo: "igbo",
    ii: "sichuanyi",
    "ii-ii": "sichuanyi",
    ikirundi: "rundi",
    ina: "inarisami",
    "inari sami": "inarisami",
    inarisami: "inarisami",
    ind: "indonesian",
    indonesia: "indonesian",
    indonesian: "indonesian",
    int: "interlingua",
    interlingua: "interlingua",
    iri: "irish",
    irish: "irish",
    is: "icelandic",
    "is-is": "icelandic",
    ishisangu: "sangu",
    isindebele: "northndebele",
    isizulu: "zulu",
    it: "italian",
    "it-it": "italian",
    ita: "italian",
    italian: "italian",
    italiano: "italian",
    ja: "japanese",
    "ja-ja": "japanese",
    jap: "japanese",
    japanese: "japanese",
    jgo: "ngomba",
    jmc: "machame",
    jol: "jolafonyi",
    "jola-fonyi": "jolafonyi",
    jolafonyi: "jolafonyi",
    joola: "jolafonyi",
    ka: "georgian",
    "ka-ka": "georgian",
    kab: "kabyle",
    kabuverdianu: "kabuverdianu",
    kabyle: "kabyle",
    kak: "kako",
    kako: "kako",
    kak\u0254: "kako",
    kalaallisut: "kalaallisut",
    kalenjin: "kalenjin",
    kam: "kamba",
    kamba: "kamba",
    kan: "kannada",
    kannada: "kannada",
    kas: "kashmiri",
    kashmiri: "kashmiri",
    kaz: "kazakh",
    kazakh: "kazakh",
    kde: "makonde",
    kea: "kabuverdianu",
    kernewek: "cornish",
    khm: "khmer",
    khmer: "khmer",
    khoekhoegowab: "nama",
    khq: "koyrachiini",
    ki: "kikuyu",
    "ki-ki": "kikuyu",
    kihorombo: "rombo",
    kik: "kikuyu",
    kikamba: "kamba",
    kikuyu: "kikuyu",
    kimachame: "machame",
    kin: "kinyarwanda",
    kinyarwanda: "kinyarwanda",
    kipare: "asu",
    kiruwa: "rwa",
    kisampur: "samburu",
    kishambaa: "shambala",
    kiswahili: "swahili",
    kitaita: "taita",
    kiteso: "teso",
    kk: "kazakh",
    "kk-kk": "kazakh",
    kkj: "kako",
    kl: "kalaallisut",
    "kl-kl": "kalaallisut",
    kln: "kalenjin",
    km: "khmer",
    "km-km": "khmer",
    kmr: "kurmanji",
    "kmr-arab": "kurmanji",
    "kmr-latn": "kurmanji",
    kn: "kannada",
    "kn-kn": "kannada",
    ko: "korean-han",
    "ko-ko": "korean-han",
    kok: "konkani",
    kon: "konkani",
    konkani: "konkani",
    kor: "korean-han",
    korean: "korean-han",
    "korean-han": "korean-han",
    "korean-hani": "korean-han",
    "koyra chiini": "koyrachiini",
    "koyra ciini": "koyrachiini",
    "koyraboro senni": "koyraborosenni",
    koyraborosenni: "koyraborosenni",
    koyrachiini: "koyrachiini",
    "kreol morisien": "morisyen",
    ks: "kashmiri",
    "ks-ks": "kashmiri",
    ksb: "shambala",
    ksf: "bafia",
    ksh: "colognian",
    kur: "kurmanji",
    "kurd\xEEy nawend\xEE": "sorani",
    kurmanc\u00EE: "kurmanji",
    kurmanji: "kurmanji",
    kw: "cornish",
    "kw-kw": "cornish",
    kwa: "kwasio",
    kwasio: "kwasio",
    ky: "kyrgyz",
    "ky-ky": "kyrgyz",
    kyivunjo: "vunjo",
    kyr: "kyrgyz",
    kyrgyz: "kyrgyz",
    k\u00F6lsch: "colognian",
    k\u0129embu: "embu",
    k\u0129m\u0129r\u0169: "meru",
    k\u0268laangi: "langi",
    la: "latin",
    "la-la": "latin",
    "la-x-classic": "classiclatin",
    "la-x-ecclesia": "ecclesiasticlatin",
    "la-x-medieval": "medievallatin",
    lag: "langi",
    lak: "lakota",
    lakota: "lakota",
    lak\u021F\u00F3l\u02BCiyapi: "lakota",
    lan: "langi",
    langi: "langi",
    lao: "lao",
    latin: "latin",
    latvian: "latvian",
    latvie\u0161u: "latvian",
    lb: "luxembourgish",
    "lb-lb": "luxembourgish",
    "lea fakatonga": "tongan",
    lg: "ganda",
    "lg-lg": "ganda",
    lietuvi\u0173: "lithuanian",
    lin: "lingala",
    lingala: "lingala",
    ling\u00E1la: "lingala",
    lit: "lithuanian",
    lithuanian: "lithuanian",
    lkt: "lakota",
    ln: "lingala",
    "ln-ln": "lingala",
    lo: "lao",
    "lo-lo": "lao",
    low: "lowersorbian",
    "lower sorbian": "lowersorbian",
    lowersorbian: "lowersorbian",
    lrc: "northernluri",
    lsorbian: "lowersorbian",
    lt: "lithuanian",
    "lt-lt": "lithuanian",
    lu: "lubakatanga",
    "lu-lu": "lubakatanga",
    lub: "lubakatanga",
    "luba-katanga": "lubakatanga",
    lubakatanga: "lubakatanga",
    luganda: "ganda",
    luluhia: "luyia",
    luo: "luo",
    lux: "luxembourgish",
    luxembourgish: "luxembourgish",
    luy: "luyia",
    luyia: "luyia",
    lv: "latvian",
    "lv-lv": "latvian",
    l\u00EBtzebuergesch: "luxembourgish",
    maa: "masai",
    macedonian: "macedonian",
    machame: "machame",
    magyar: "hungarian",
    "makhuwa-meetto": "makhuwameetto",
    makhuwameetto: "makhuwameetto",
    makonde: "makonde",
    makua: "makhuwameetto",
    malagasy: "malagasy",
    malay: "malay",
    "malay-bn": "malay-brunei",
    "malay-brunei": "malay-brunei",
    "malay-sg": "malay-singapore",
    "malay-singapore": "malay-singapore",
    malayalam: "malayalam",
    maltese: "maltese",
    malti: "maltese",
    man: "manx",
    manx: "manx",
    mar: "marathi",
    marathi: "marathi",
    mas: "masai",
    masai: "masai",
    maz: "mazanderani",
    mazanderani: "mazanderani",
    med: "medievallatin",
    "medieval latin": "medievallatin",
    medievallatin: "medievallatin",
    mer: "meru",
    meru: "meru",
    met: "meta",
    meta: "meta",
    meta\u02BC: "meta",
    mex: "mexican",
    mexican: "mexican",
    "mexican spanish": "mexican",
    mexicanspanish: "mexican",
    mfe: "morisyen",
    mg: "malagasy",
    "mg-mg": "malagasy",
    mgh: "makhuwameetto",
    mgo: "meta",
    mk: "macedonian",
    "mk-mk": "macedonian",
    ml: "malayalam",
    "ml-ml": "malayalam",
    mn: "mongolian",
    "mn-mn": "mongolian",
    mol: "moldavian",
    moldavian: "moldavian",
    mon: "mongolian",
    mongolian: "mongolian",
    monotonicgreek: "greek",
    mor: "morisyen",
    morisyen: "morisyen",
    mr: "marathi",
    "mr-mr": "marathi",
    ms: "malay",
    "ms-bn": "malay-brunei",
    "ms-ms": "malay",
    "ms-sg": "malay-singapore",
    mt: "maltese",
    "mt-mt": "maltese",
    mua: "mundang",
    mun: "mundang",
    mundang: "mundang",
    munda\u014B: "mundang",
    my: "burmese",
    "my-my": "burmese",
    mzn: "mazanderani",
    nam: "nama",
    nama: "nama",
    naq: "nama",
    nau: "naustrian",
    naustrian: "naustrian",
    nb: "norwegianbokmal",
    "nb-nb": "norwegianbokmal",
    nd: "northndebele",
    "nd-nd": "northndebele",
    "nda\uA78Ca": "ngomba",
    ne: "nepali",
    "ne-ne": "nepali",
    nederlands: "dutch",
    nep: "nepali",
    nepali: "nepali",
    new: "newzealand",
    newzealand: "newzealand",
    nge: "ngerman",
    ngerman: "ngerman",
    ngi: "ngiemboon",
    ngiemboon: "ngiemboon",
    ngo: "ngomba",
    ngomba: "ngomba",
    nl: "dutch",
    "nl-nl": "dutch",
    nmg: "kwasio",
    nn: "nynorsk",
    "nn-nn": "nynorsk",
    nnh: "ngiemboon",
    no: "norsk",
    "no-no": "norsk",
    norsk: "norsk",
    "norsk bokm\xE5l": "norwegianbokmal",
    "north ndebele": "northndebele",
    "northern kurdish": "kurmanji",
    "northern luri": "northernluri",
    "northern sami": "samin",
    northernkurdish: "kurmanji",
    "northernkurdish-arabic": "kurmanji",
    northernluri: "northernluri",
    northernsami: "samin",
    northndebele: "northndebele",
    norwegian: "norsk",
    "norwegian bokm\xE5l": "norwegianbokmal",
    "norwegian nynorsk": "nynorsk",
    norwegianbokmal: "norwegianbokmal",
    norwegiannynorsk: "nynorsk",
    nsw: "nswissgerman",
    nswissgerman: "nswissgerman",
    nuasue: "yangben",
    nue: "nuer",
    nuer: "nuer",
    nus: "nuer",
    nya: "nyankole",
    nyankole: "nyankole",
    nyn: "nyankole",
    nynorsk: "nynorsk",
    oc: "occitan",
    "oc-oc": "occitan",
    occ: "occitan",
    occitan: "occitan",
    odi: "odia",
    odia: "odia",
    olusoga: "soga",
    om: "oromo",
    "om-om": "oromo",
    or: "odia",
    "or-or": "odia",
    oriya: "odia",
    oro: "oromo",
    oromo: "oromo",
    oromoo: "oromo",
    os: "ossetic",
    "os-os": "ossetic",
    oss: "ossetic",
    ossetic: "ossetic",
    "o\u2018zbek": "uzbek",
    pa: "punjabi",
    "pa-arab": "punjabi-arabic",
    "pa-guru": "punjabi-gurmukhi",
    "pa-pa": "punjabi",
    pas: "pashto",
    pashto: "pashto",
    per: "persian",
    persian: "persian",
    pie: "piedmontese",
    piedmontese: "piedmontese",
    pl: "polish",
    "pl-pl": "polish",
    pms: "piedmontese",
    pol: "polish",
    polish: "polish",
    polski: "polish",
    "polytonic greek": "greek",
    polytonicgreek: "greek",
    por: "portuguese",
    portuguese: "portuguese",
    "portuguese-br": "brazilian",
    "portuguese-brazil": "brazilian",
    "portuguese-portugal": "portuguese",
    "portuguese-pt": "portuguese",
    portugu\u00EAs: "portuguese",
    ps: "pashto",
    "ps-ps": "pashto",
    pt: "portuguese",
    "pt-br": "brazilian",
    "pt-pt": "portuguese",
    pulaar: "fulah",
    punjabi: "punjabi",
    "punjabi-arab": "punjabi-arabic",
    "punjabi-arabic": "punjabi-arabic",
    "punjabi-gurmukhi": "punjabi-gurmukhi",
    "punjabi-guru": "punjabi-gurmukhi",
    qu: "quechua",
    "qu-qu": "quechua",
    que: "quechua",
    quechua: "quechua",
    rikpa: "bafia",
    rm: "romansh",
    "rm-rm": "romansh",
    rn: "rundi",
    "rn-rn": "rundi",
    ro: "romanian",
    "ro-md": "moldavian",
    "ro-ro": "romanian",
    rof: "rombo",
    romanian: "romanian",
    "romanian-md": "moldavian",
    "romanian-moldova": "moldavian",
    romansh: "romansh",
    rombo: "rombo",
    rom\u00E2n\u0103: "romanian",
    ru: "russian",
    "ru-ru": "russian",
    rukiga: "chiga",
    rumantsch: "romansh",
    run: "rundi",
    runasimi: "quechua",
    rundi: "rundi",
    runyankore: "nyankole",
    rus: "russian",
    russian: "russian",
    rw: "kinyarwanda",
    "rw-rw": "kinyarwanda",
    rwa: "rwa",
    rwk: "rwa",
    sa: "sanskrit",
    "sa-beng": "sanskrit",
    "sa-deva": "sanskrit",
    "sa-gujr": "sanskrit",
    "sa-knda": "sanskrit",
    "sa-mlym": "sanskrit",
    "sa-sa": "sanskrit",
    "sa-telu": "sanskrit",
    sah: "sakha",
    sak: "sakha",
    sakha: "sakha",
    samburu: "samburu",
    sami: "samin",
    samin: "samin",
    sango: "sango",
    sangu: "sangu",
    sanskrit: "sanskrit",
    saq: "samburu",
    sbp: "sangu",
    "schweizer hochdeutsch": "nswissgerman",
    schwiizert\u00FC\u00FCtsch: "swissgerman",
    sco: "scottishgaelic",
    "scottish gaelic": "scottishgaelic",
    scottishgaelic: "scottishgaelic",
    se: "samin",
    "se-se": "samin",
    seh: "sena",
    sen: "sena",
    sena: "sena",
    ser: "serbian",
    serbian: "serbian",
    "serbian-cyrillic": "serbian",
    "serbian-cyrillic-bosniaherzegovina": "serbian",
    "serbian-cyrillic-kosovo": "serbian",
    "serbian-cyrillic-montenegro": "serbian",
    "serbian-cyrl": "serbian",
    "serbian-cyrl-ba": "serbian",
    "serbian-cyrl-me": "serbian",
    "serbian-cyrl-xk": "serbian",
    "serbian-latin": "serbian",
    "serbian-latin-bosniaherzegovina": "serbian",
    "serbian-latin-kosovo": "serbian",
    "serbian-latin-montenegro": "serbian",
    "serbian-latn": "serbian",
    "serbian-latn-ba": "serbian",
    "serbian-latn-me": "serbian",
    "serbian-latn-xk": "serbian",
    ses: "koyraborosenni",
    sg: "sango",
    "sg-sg": "sango",
    sha: "shambala",
    shambala: "shambala",
    shi: "tachelhit",
    "shi-latn": "tachelhit-latin",
    "shi-tfng": "tachelhit-tifinagh",
    sho: "shona",
    shona: "shona",
    shqip: "albanian",
    "shw\xF3\u014B\xF2 ngiemb\u0254\u0254n": "ngiemboon",
    si: "sinhala",
    "si-si": "sinhala",
    sic: "sichuanyi",
    "sichuan yi": "sichuanyi",
    sichuanyi: "sichuanyi",
    sin: "sinhala",
    sinhala: "sinhala",
    sk: "slovak",
    "sk-sk": "slovak",
    sl: "slovene",
    "sl-sl": "slovene",
    slovak: "slovak",
    slovene: "slovene",
    slovenian: "slovene",
    sloven\u010Dina: "slovak",
    sloven\u0161\u010Dina: "slovene",
    smn: "inarisami",
    sn: "shona",
    "sn-sn": "shona",
    so: "somali",
    "so-so": "somali",
    sog: "soga",
    soga: "soga",
    som: "somali",
    somali: "somali",
    soomaali: "somali",
    sor: "sorani",
    sorani: "sorani",
    spa: "spanish",
    spanish: "spanish",
    "spanish-mexico": "mexican",
    "spanish-mx": "mexican",
    sq: "albanian",
    "sq-sq": "albanian",
    sr: "serbian",
    "sr-cyrl": "serbian",
    "sr-cyrl-ba": "serbian",
    "sr-cyrl-me": "serbian",
    "sr-cyrl-xk": "serbian",
    "sr-latn": "serbian",
    "sr-latn-ba": "serbian",
    "sr-latn-me": "serbian",
    "sr-latn-xk": "serbian",
    "sr-sr": "serbian",
    srpski: "serbian",
    sta: "standardmoroccantamazight",
    "standard moroccan tamazight": "standardmoroccantamazight",
    standardmoroccantamazight: "standardmoroccantamazight",
    suomi: "finnish",
    sv: "swedish",
    "sv-sv": "swedish",
    svenska: "swedish",
    sw: "swahili",
    "sw-sw": "swahili",
    swa: "swahili",
    swahili: "swahili",
    swe: "swedish",
    swedish: "swedish",
    swi: "swissgerman",
    "swiss french": "french-switzerland",
    "swiss german": "swissgerman",
    "swiss high german": "nswissgerman",
    swissfrench: "french-switzerland",
    swissgerman: "swissgerman",
    swisshighgerman: "nswissgerman",
    "swisshighgerman-traditional": "german",
    syr: "syriac",
    syriac: "syriac",
    s\u00E4ng\u00F6: "sango",
    ta: "tamil",
    "ta-ta": "tamil",
    tachelhit: "tachelhit",
    "tachelhit-latin": "tachelhit-latin",
    "tachelhit-latn": "tachelhit-latin",
    "tachelhit-tfng": "tachelhit-tifinagh",
    "tachelhit-tifinagh": "tachelhit-tifinagh",
    tai: "taita",
    taita: "taita",
    tam: "tamil",
    "tamazi\u0263t n la\u1E6Dla\u1E63": "centralatlastamazight",
    tamil: "tamil",
    taqbaylit: "kabyle",
    tas: "tasawaq",
    tasawaq: "tasawaq",
    "tasawaq senni": "tasawaq",
    tashel\u1E25iyt: "tachelhit-latin",
    te: "telugu",
    "te-te": "telugu",
    tel: "telugu",
    telugu: "telugu",
    teo: "teso",
    tes: "teso",
    teso: "teso",
    th: "thai",
    "th-th": "thai",
    tha: "thai",
    thai: "thai",
    "thok nath": "nuer",
    ti: "tigrinya",
    "ti-ti": "tigrinya",
    tib: "tibetan",
    tibetan: "tibetan",
    tig: "tigrinya",
    tigrinya: "tigrinya",
    "ti\u1EBFng vi\u1EC7t": "vietnamese",
    tk: "turkmen",
    "tk-tk": "turkmen",
    to: "tongan",
    "to-to": "tongan",
    ton: "tongan",
    tongan: "tongan",
    tr: "turkish",
    "tr-tr": "turkish",
    tshiluba: "lubakatanga",
    turkish: "turkish",
    turkmen: "turkmen",
    twq: "tasawaq",
    tzm: "centralatlastamazight",
    t\u00FCrk\u00E7e: "turkish",
    ug: "uyghur",
    "ug-ug": "uyghur",
    uk: "ukrainian",
    "uk-uk": "ukrainian",
    ukenglish: "british",
    ukr: "ukrainian",
    ukrainian: "ukrainian",
    upp: "uppersorbian",
    "upper sorbian": "uppersorbian",
    uppersorbian: "uppersorbian",
    ur: "urdu",
    "ur-ur": "urdu",
    urd: "urdu",
    urdu: "urdu",
    usenglish: "american",
    usorbian: "uppersorbian",
    uyg: "uyghur",
    uyghur: "uyghur",
    uz: "uzbek",
    "uz-arab": "uzbek-arabic",
    "uz-cyrl": "uzbek-cyrillic",
    "uz-latn": "uzbek-latin",
    "uz-uz": "uzbek",
    uzbek: "uzbek",
    "uzbek-arab": "uzbek-arabic",
    "uzbek-arabic": "uzbek-arabic",
    "uzbek-cyrillic": "uzbek-cyrillic",
    "uzbek-cyrl": "uzbek-cyrillic",
    "uzbek-latin": "uzbek-latin",
    "uzbek-latn": "uzbek-latin",
    vai: "vai",
    "vai-latin": "vai-latin",
    "vai-latn": "vai-latin",
    "vai-vai": "vai-vai",
    "vai-vaii": "vai-vai",
    vi: "vietnamese",
    "vi-vi": "vietnamese",
    vie: "vietnamese",
    vietnam: "vietnamese",
    vietnamese: "vietnamese",
    vun: "vunjo",
    vunjo: "vunjo",
    wae: "walser",
    wal: "walser",
    walser: "walser",
    wel: "welsh",
    welsh: "welsh",
    wes: "westernfrisian",
    "western frisian": "westernfrisian",
    westernfrisian: "westernfrisian",
    xog: "soga",
    yan: "yangben",
    yangben: "yangben",
    yav: "yangben",
    yi: "yiddish",
    "yi-yi": "yiddish",
    yid: "yiddish",
    yiddish: "yiddish",
    yo: "yoruba",
    "yo-yo": "yoruba",
    yor: "yoruba",
    yoruba: "yoruba",
    yue: "cantonese",
    zar: "zarma",
    zarma: "zarma",
    zarmaciine: "zarma",
    zgh: "standardmoroccantamazight",
    zh: "chinese",
    "zh-hans": "chinese-simplified",
    "zh-hans-hk": "chinese-simplified-hongkongsarchina",
    "zh-hans-mo": "chinese-simplified-macausarchina",
    "zh-hans-sg": "chinese-simplified-singapore",
    "zh-hant": "chinese-traditional",
    "zh-hant-hk": "chinese-traditional-hongkongsarchina",
    "zh-hant-mo": "chinese-traditional-macausarchina",
    "zh-zh": "chinese",
    zu: "zulu",
    "zu-zu": "zulu",
    zul: "zulu",
    zulu: "zulu",
    "\xE8d\xE8 yor\xF9b\xE1": "yoruba",
    \u00EDslenska: "icelandic",
    "\xF6sterreichisches deutsch": "austrian",
    \u010De\u0161tina: "czech",
    \u0253\u00E0s\u00E0a: "basaa",
    "\u02BB\u014Dlelo hawai\u02BBi": "hawaiian",
    "\u03B1\u03C1\u03C7\u03B1\u03AF\u03B1 \u03B5\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC": "greek",
    \u03B5\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC: "greek",
    "\u03EF\u2C99\u2C89\u2CA7\u2CA3\u2C89\u2C99\u2C9B\u0300\u2CAD\u2C8F\u2C99\u2C93": "coptic",
    \u0430\u0437\u04D9\u0440\u0431\u0430\u0458\u04B9\u0430\u043D: "azerbaijani-cyrillic",
    \u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F: "belarusian",
    \u0431\u043E\u0441\u0430\u043D\u0441\u043A\u0438: "bosnian-cyrillic",
    \u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438: "bulgarian",
    \u0438\u0440\u043E\u043D: "ossetic",
    \u043A\u044B\u0440\u0433\u044B\u0437\u0447\u0430: "kyrgyz",
    \u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438: "macedonian",
    \u043C\u043E\u043D\u0433\u043E\u043B: "mongolian",
    \u043D\u043E\u0445\u0447\u0438\u0439\u043D: "chechen",
    \u0440\u0443\u0441\u0441\u043A\u0438\u0439: "russian",
    "\u0441\u0430\u0445\u0430 \u0442\u044B\u043B\u0430": "sakha",
    "\u0441\u043B\u043E\u0432\u0463\u0301\u043D\u044C\u0441\u043A\u044A \u0469\uA641\uA651\u0301\u043A\u044A": "churchslavic-oldcyrillic",
    \u0441\u0440\u043F\u0441\u043A\u0438: "serbian",
    \u0443\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430: "ukrainian",
    "\u0446\u0440\u044C\u043A\u044A\u0432\u044C\u043D\u043E\u0441\u043B\u043E\u0432\u0463\u043D\u044C\u0441\u043A\u044A \u0469\u0437\u044B\u043A\u044A": "churchslavic",
    \u045E\u0437\u0431\u0435\u043A\u0447\u0430: "uzbek-cyrillic",
    "\u049B\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456": "kazakh",
    \u0570\u0561\u0575\u0565\u0580\u0565\u0576: "armenian",
    \u05D9\u05D9\u05B4\u05D3\u05D9\u05E9: "yiddish",
    \u05E2\u05D1\u05E8\u05D9\u05EA: "hebrew",
    \u0626\u06C7\u064A\u063A\u06C7\u0631\u0686\u06D5: "uyghur",
    \u0627\u0631\u062F\u0648: "urdu",
    \u0627\u0644\u0639\u0631\u0628\u064A\u0629: "arabic",
    \u0627\u0648\u0632\u0628\u06CC\u06A9: "uzbek-arabic",
    \u0641\u0627\u0631\u0633\u06CC: "persian",
    "\u0644\u06CA\u0631\u06CC \u0634\u0648\u0645\u0627\u0644\u06CC": "northernluri",
    \u0645\u0627\u0632\u0631\u0648\u0646\u06CC: "mazanderani",
    \u067E\u0646\u062C\u0627\u0628\u06CC: "punjabi-arabic",
    \u067E\u069A\u062A\u0648: "pashto",
    "\u06A9\u0648\u0631\u062F\u06CC\u06CC \u0646\u0627\u0648\u06D5\u0646\u062F\u06CC": "sorani",
    \u06A9\u0648\u0631\u0645\u0627\u0646\u062C\u06CC: "kurmanji",
    \u06A9\u0672\u0634\u064F\u0631: "kashmiri",
    "\u0720\u072B\u0722\u0710 \u0723\u0718\u072A\u071D\u071D\u0710": "syriac",
    \u0915\u094B\u0902\u0915\u0923\u0940: "konkani",
    \u0928\u0947\u092A\u093E\u0932\u0940: "nepali",
    "\u092C\u0930\u2019": "bodo",
    \u092E\u0930\u093E\u0920\u0940: "marathi",
    \u0938\u0902\u0938\u094D\u0915\u0943\u0924: "sanskrit",
    \u0939\u093F\u0928\u094D\u0926\u0940: "hindi",
    \u0985\u09B8\u09AE\u09C0\u09AF\u09BC\u09BE: "assamese",
    \u09AC\u09BE\u0982\u09B2\u09BE: "bangla",
    \u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40: "punjabi",
    \u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0: "gujarati",
    \u0B13\u0B21\u0B3C\u0B3F\u0B06: "odia",
    \u0BA4\u0BAE\u0BBF\u0BB4\u0BCD: "tamil",
    \u0C24\u0C46\u0C32\u0C41\u0C17\u0C41: "telugu",
    \u0C95\u0CA8\u0CCD\u0CA8\u0CA1: "kannada",
    \u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02: "malayalam",
    \u0DC3\u0DD2\u0D82\u0DC4\u0DBD: "sinhala",
    \u0E44\u0E17\u0E22: "thai",
    \u0EA5\u0EB2\u0EA7: "lao",
    "\u0F56\u0F7C\u0F51\u0F0B\u0F66\u0F90\u0F51\u0F0B": "tibetan",
    "\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41": "dzongkha",
    "\u1019\u103C\u1014\u103A\u1019\u102C": "burmese",
    \u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8: "georgian",
    \u1275\u130D\u122D\u129B: "tigrinya",
    \u12A0\u121B\u122D\u129B: "amharic",
    \u1781\u17D2\u1798\u17C2\u179A: "khmer",
    \u1F10\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC: "greek",
    "\u2C44\u2C3E\u2C41\u2C32\u2C51\u2C40\u2C50\u2C44\u2C3D\u2C4F \u2C57\u2C38\u2C4F\u2C3A\u2C3D\u2C4F": "churchslavic-glagolitic",
    "\u2D5C\u2D30\u2D4E\u2D30\u2D63\u2D49\u2D56\u2D5C": "standardmoroccantamazight",
    "\u2D5C\u2D30\u2D5B\u2D4D\u2D43\u2D49\u2D5C": "tachelhit",
    \u4E2D\u6587: "chinese",
    \u65E5\u672C\u8A9E: "japanese",
    \u7CB5\u8A9E: "cantonese",
    "\u7CB5\u8A9E-\u7CB5\u8A9E": "cantonese",
    \uA188\uA320\uA259: "sichuanyi",
    "\uA559\uA524": "vai",
    "\uABB3\uAB83\uAB79": "cherokee",
    \uD55C\uAD6D\uC5B4: "korean-han"
  };

  // content/text.ts
  var LanguagePrefixes = Object.keys(langmap_default).sort().reverse().filter((prefix) => prefix.length > 3);
  var charCategories = require_categories();
  var re2 = {
    Nl: charCategories.find((cat) => cat.alias === "Letter_Number").bmp,
    Nd: charCategories.find((cat) => cat.alias === "Decimal_Number").bmp,
    Mn: charCategories.find((cat) => cat.alias === "Nonspacing_Mark").bmp,
    Mc: charCategories.find((cat) => cat.alias === "Spacing_Mark").bmp,
    Lu: charCategories.find((cat) => cat.alias === "Uppercase_Letter").bmp,
    Lt: charCategories.find((cat) => cat.alias === "Titlecase_Letter").bmp,
    Ll: charCategories.find((cat) => cat.alias === "Lowercase_Letter").bmp,
    Lm: charCategories.find((cat) => cat.alias === "Modifier_Letter").bmp,
    Lo: charCategories.find((cat) => cat.alias === "Other_Letter").bmp,
    P: /\.\u002D\u2000-\u206F\u2E00-\u2E7F\\'!"#\$%&\(\)\*\+,\/:;<=>\?@\[\]^_`{\|}~/.source,
    Whitespace: / \t\n\r\u00A0/.source,
    lcChar: null,
    char: null,
    L: null,
    protectedWord: null,
    leadingUnprotectedWord: null,
    protectedWords: null,
    unprotectedWord: null,
    url: null,
    whitespace: null,
    sentenceEnd: /^[:?]/
  };
  re2.lcChar = re2.Ll + re2.Lt + re2.Lm + re2.Lo + re2.Mn + re2.Mc + re2.Nd + re2.Nl;
  re2.char = re2.Lu + re2.lcChar;
  re2.L = `${re2.Lu}${re2.Ll}${re2.Lt}${re2.Lm}${re2.Lo}`;
  re2.protectedWord = `[${re2.lcChar}]*[${re2.Lu}][-${re2.char}]*`;
  re2.leadingUnprotectedWord = new RegExp(`^([${re2.Lu}][${re2.lcChar}]*)[${re2.Whitespace}${re2.P}]`);
  re2.protectedWords = new RegExp(`^(${re2.protectedWord})(([${re2.Whitespace}])(${re2.protectedWord}))*`);
  re2.unprotectedWord = new RegExp(`^[${re2.char}]+`);
  re2.url = /^(https?|mailto):\/\/[^\s]+/;
  re2.whitespace = new RegExp(`^[${re2.Whitespace}]+`);
  var ligatures = {
    "\u01F1": "DZ",
    "\u01F2": "Dz",
    "\u01F3": "dz",
    "\u01C4": "D\u017D",
    "\u01C5": "D\u017E",
    "\u01C6": "d\u017E",
    "\uFB00": "ff",
    "\uFB01": "fi",
    "\uFB02": "fl",
    "\uFB03": "ffi",
    "\uFB04": "ffl",
    "\uFB05": "\u017Ft",
    "\uFB06": "st",
    "\u0132": "IJ",
    "\u0133": "ij",
    "\u01C7": "LJ",
    "\u01C8": "Lj",
    "\u01C9": "lj",
    "\u01CA": "NJ",
    "\u01CB": "Nj",
    "\u01CC": "nj"
  };
  var titleCaseKeep = new RegExp(`(?:(?:[>:?]?[${re2.Whitespace}]+)[${re2.L}][${re2.P}]?(?:[${re2.Whitespace}]|$))|(?:(?:<span class="nocase">.*?</span>)|(?:<nc>.*?</nc>))`, "gi");
  var singleLetter = new RegExp(`^([>:?])?[${re2.Whitespace}]+(.)`);
  function titleCase(text) {
    let titlecased = titleCased(text);
    text.replace(titleCaseKeep, (match, offset) => {
      if (match[0] !== "<") {
        const [, punc, l] = match.match(singleLetter);
        if (punc && (l === "a" || l === "A")) {
          match = match.toUpperCase();
        }
      }
      titlecased = titlecased.substr(0, offset) + match + titlecased.substr(offset + match.length);
      return match;
    });
    return titlecased;
  }
  var HTMLParser = new class {
    constructor() {
      this.spuriousNode = /* @__PURE__ */ new Set(["#document-fragment", "#document", "div", "span"]);
      this.ligatures = new RegExp(`[${Object.keys(ligatures).join("")}]`, "g");
    }
    parse(html2, options2) {
      this.html = html2;
      let doc;
      this.options = { ...options2, exportBraceProtection: options2.caseConversion && options2.exportBraceProtection };
      this.sentenceStart = true;
      const csquotes = this.options.csquotes;
      if (csquotes) {
        const space = "\\s*";
        for (const close of [0, 1]) {
          const chars = csquotes.replace(/./g, (c, i) => [c, ""][i + close & 1]).replace(/[-[\]/{}()*+?.\\^$|]\s*/g, "\\$&");
          this.html = this.html.replace(new RegExp(`${close ? space : ""}[${chars}]${close ? "" : space}`, "g"), close ? "</span>" : '<span class="enquote">');
        }
      }
      if (!this.options.html) {
        this.html = this.html.replace(/&/g, "&amp;");
        this.html = this.html.replace(/<(\/?)([^<>]*)>/g, (match, close, body) => {
          if (body.match(/^(emphasis|span|nc|sc|i|b|sup|sub|script)($|\n|\s)/i))
            return match;
          if (body.match(/^pre$/i))
            return `<${close || ""}script>`;
          return match.replace(/</g, "&lt;").replace(/>/g, "&gt;");
        });
      }
      doc = this.walk(parseFragment(this.html, { sourceCodeLocationInfo: true }));
      if (this.options.caseConversion) {
        if (this.options.exportTitleCase) {
          this.titleCased = "";
          this.collectText(doc);
          this.titleCased = titleCase(this.titleCased);
          this.titleCase(doc);
        }
        const unwrapped = this.unwrapNocase(doc);
        if (unwrapped.length === 1) {
          doc = unwrapped[0];
        } else {
          doc = { nodeName: "span", attr: {}, class: {}, childNodes: unwrapped };
        }
        this.cleanupNocase(doc);
      }
      doc = this.unwrapSpurious(doc);
      doc.source = this.html;
      return doc;
    }
    titleCase(node) {
      if (node.nodeName === "#text") {
        node.value = this.titleCased.substr(node.titleCased, node.value.length);
        return;
      }
      for (const child of node.childNodes) {
        if (child.nocase || child.nodeName === "sup" || child.nodeName === "sub")
          continue;
        this.titleCase(child);
      }
    }
    unwrapSpurious(node) {
      if (node.nodeName === "#text")
        return node;
      node.childNodes = node.childNodes.map((child) => this.unwrapSpurious(child));
      while (this.spuriousNode.has(node.nodeName) && Object.keys(node.attr).length === 0 && !node.nocase && node.childNodes.length === 1)
        node = node.childNodes[0];
      return node;
    }
    unwrapNocase(node) {
      if (node.nodeName === "#text")
        return [node];
      node.childNodes = [].concat(...node.childNodes.map((child) => this.unwrapNocase(child)));
      if (node.nocase || !node.childNodes.find((child) => child.nocase))
        return [node];
      return node.childNodes.map((child) => {
        if (child.nocase) {
          return {
            ...child,
            childNodes: [{ ...node, childNodes: child.childNodes }]
          };
        }
        return {
          ...node,
          childNodes: [child]
        };
      });
    }
    cleanupNocase(node, nocased = false) {
      if (node.nodeName === "#text")
        return null;
      if (nocased)
        delete node.nocase;
      for (const child of node.childNodes) {
        this.cleanupNocase(child, node.nocase || nocased);
      }
    }
    collectText(node) {
      switch (node.nodeName) {
        case "#text":
          node.titleCased = this.titleCased.length;
          this.titleCased += node.value;
          break;
        case "script":
          this.titleCased += "".padStart(node.value.length, "latex");
          break;
        default:
          for (const child of node.childNodes) {
            this.collectText(child);
          }
      }
    }
    plaintext(childNodes, text, offset) {
      text = text.replace(this.ligatures, (ligature) => ligatures[ligature]);
      const l = childNodes.length;
      if (l === 0 || childNodes[l - 1].nodeName !== "#text") {
        childNodes.push({ nodeName: "#text", offset, value: text, attr: {}, class: {} });
      } else {
        childNodes[l - 1].value += text;
      }
    }
    nocase(childNodes, text, offset) {
      childNodes.push({
        nodeName: "span",
        nocase: true,
        attr: {},
        class: {},
        childNodes: [{
          nodeName: "#text",
          offset,
          value: text,
          attr: {},
          class: {}
        }]
      });
    }
    walk(node, isNocased = false) {
      var _a3;
      const normalized_node = { nodeName: node.nodeName, childNodes: [], attr: {}, class: {} };
      for (const { name, value } of node.attrs || []) {
        normalized_node.attr[name] = value;
      }
      for (const cls of (normalized_node.attr.class || "").trim().split(/\s+/)) {
        if (cls)
          normalized_node.class[cls] = true;
      }
      switch ((_a3 = node.type) == null ? void 0 : _a3.toLowerCase()) {
        case "smallcaps":
          normalized_node.attr.smallcaps = "smallcaps";
          break;
      }
      if (node.type)
        normalized_node.class[node.type] = true;
      switch (node.nodeName) {
        case "#document":
        case "#document-fragment":
        case "pre":
          normalized_node.nodeName = "span";
          break;
        case "nc":
          normalized_node.nodeName = "span";
          normalized_node.attr.nocase = "nocase";
          break;
        case "emphasis":
          normalized_node.nodeName = "i";
          break;
        case "sc":
          normalized_node.nodeName = "span";
          normalized_node.attr.smallcaps = "smallcaps";
          break;
      }
      if (normalized_node.attr.nocase || normalized_node.class.nocase)
        normalized_node.nocase = !isNocased;
      if (normalized_node.attr.relax || normalized_node.class.relax)
        normalized_node.relax = true;
      if (normalized_node.class.enquote || normalized_node.attr.enquote)
        normalized_node.enquote = true;
      if (!normalized_node.attr.smallcaps && (normalized_node.attr.style || "").match(/small-caps/i))
        normalized_node.attr.smallcaps = "smallcaps";
      if (normalized_node.class.smallcaps || normalized_node.attr.smallcaps)
        normalized_node.smallcaps = true;
      if (normalized_node.nodeName === "script") {
        if (!node.childNodes || node.childNodes.length === 0) {
          normalized_node.value = "";
          normalized_node.childNodes = [];
        } else if (node.childNodes.length === 1 && node.childNodes[0].nodeName === "#text") {
          normalized_node.value = node.childNodes[0].value;
          normalized_node.childNodes = [];
        } else {
          throw new Error(`Unexpected script body ${JSON.stringify(node)}`);
        }
      } else if (node.childNodes) {
        let m;
        for (const child of node.childNodes) {
          if (child.nodeName !== "#text") {
            normalized_node.childNodes.push(this.walk(child, isNocased || normalized_node.nocase));
            continue;
          }
          if (!this.options.caseConversion || isNocased) {
            this.plaintext(normalized_node.childNodes, child.value, child.sourceCodeLocation.startOffset);
            continue;
          }
          let text = child.value;
          const length = text.length;
          while (text) {
            if (m = re2.whitespace.exec(text)) {
              this.plaintext(normalized_node.childNodes, m[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[0].length);
              continue;
            }
            if (m = re2.sentenceEnd.exec(text)) {
              this.plaintext(normalized_node.childNodes, m[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[0].length);
              continue;
            }
            if (this.sentenceStart && (m = re2.leadingUnprotectedWord.exec(`${text} `))) {
              this.sentenceStart = false;
              this.plaintext(normalized_node.childNodes, m[1], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[1].length);
              continue;
            }
            this.sentenceStart = false;
            if (!isNocased && this.options.exportBraceProtection && (m = re2.protectedWords.exec(text))) {
              this.nocase(normalized_node.childNodes, m[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[0].length);
            } else if (m = re2.url.exec(text)) {
              this.nocase(normalized_node.childNodes, m[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[0].length);
            } else if (m = re2.unprotectedWord.exec(text)) {
              this.plaintext(normalized_node.childNodes, m[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[0].length);
            } else {
              this.plaintext(normalized_node.childNodes, text[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(1);
            }
          }
        }
      }
      return normalized_node;
    }
  }();
  var notAlphaNum = new RegExp(`[^${re2.L}${re2.Nd}${re2.Nl}]`);
  function babelLanguage(language2) {
    if (!language2)
      return "";
    const lc = language2.toLowerCase();
    return langmap_default[lc] || langmap_default[lc.replace(/[^a-z0-9]/, "-")] || langmap_default[lc.replace(notAlphaNum, "")] || !lc.match(notAlphaNum) && langmap_default[LanguagePrefixes.find((prefix) => lc.startsWith(prefix))] || language2;
  }

  // gen/babel/tag.json
  var tag_default = {
    ame: "en",
    american: "en",
    "american english": "en",
    americanenglish: "en",
    australian: "en",
    "australian english": "en",
    australianenglish: "en",
    bri: "en",
    british: "en",
    "british english": "en",
    britishenglish: "en",
    canadian: "en",
    "canadian english": "en",
    canadianenglish: "en",
    en: "en",
    "en-au": "en",
    "en-ca": "en",
    "en-en": "en",
    "en-gb": "en",
    "en-nz": "en",
    "en-us": "en",
    eng: "en",
    english: "en",
    "english-au": "en",
    "english-australia": "en",
    "english-ca": "en",
    "english-canada": "en",
    "english-gb": "en",
    "english-newzealand": "en",
    "english-nz": "en",
    "english-unitedkingdom": "en",
    "english-unitedstates": "en",
    "english-us": "en",
    new: "en",
    newzealand: "en",
    ukenglish: "en",
    usenglish: "en",
    ja: "ja",
    "ja-ja": "ja",
    jap: "ja",
    japanese: "ja",
    \u65E5\u672C\u8A9E: "ja",
    chinese: "zh",
    "chinese-hans": "zh",
    "chinese-hans-hk": "zh",
    "chinese-hans-mo": "zh",
    "chinese-hans-sg": "zh",
    "chinese-hant": "zh",
    "chinese-hant-hk": "zh",
    "chinese-hant-mo": "zh",
    "chinese-simplified": "zh",
    "chinese-simplified-hongkongsarchina": "zh",
    "chinese-simplified-macausarchina": "zh",
    "chinese-simplified-singapore": "zh",
    "chinese-traditional": "zh",
    "chinese-traditional-hongkongsarchina": "zh",
    "chinese-traditional-macausarchina": "zh",
    zh: "zh",
    "zh-hans": "zh",
    "zh-hans-hk": "zh",
    "zh-hans-mo": "zh",
    "zh-hans-sg": "zh",
    "zh-hant": "zh",
    "zh-hant-hk": "zh",
    "zh-hant-mo": "zh",
    "zh-zh": "zh",
    \u4E2D\u6587: "zh",
    austrian: "de",
    "austrian german": "de",
    "austrian-traditional": "de",
    austriangerman: "de",
    "austriangerman-traditional": "de",
    de: "de",
    "de-1901": "de",
    "de-1996": "de",
    "de-at": "de",
    "de-at-1901": "de",
    "de-at-1996": "de",
    "de-ch": "de",
    "de-ch-1901": "de",
    "de-ch-1996": "de",
    "de-de": "de",
    deutsch: "de",
    ger: "de",
    german: "de",
    "german-at": "de",
    "german-at-traditional": "de",
    "german-austria": "de",
    "german-austria-traditional": "de",
    "german-ch": "de",
    "german-ch-traditional": "de",
    "german-switzerland": "de",
    "german-switzerland-traditional": "de",
    "german-traditional": "de",
    nau: "de",
    naustrian: "de",
    nge: "de",
    ngerman: "de",
    nsw: "de",
    nswissgerman: "de",
    "schweizer hochdeutsch": "de",
    "swiss high german": "de",
    swisshighgerman: "de",
    "swisshighgerman-traditional": "de",
    "\xF6sterreichisches deutsch": "de"
  };

  // content/arXiv.ts
  init_globals();
  var arXiv = new class {
    constructor() {
      this.post2007 = /(?:^|\s|\/)(?:arXiv:\s*)?(\d{4}\.\d{4,5}(?:v\d+)?)(?:\s\[(.*?)\])?(?=$|\s)/i;
      this.pre2007 = /(?:^|\s|\/)(?:arXiv:\s*)?([a-z-]+(?:\.[A-Z]{2})?\/\d{2}(?:0[1-9]|1[012])\d{3}(?:v\d+)?(?=$|\s))/i;
    }
    parse(id) {
      if (!id)
        return { id: null };
      let match;
      if (match = this.post2007.exec(id)) {
        return { id: match[1], category: match[2] && match[2].trim() };
      }
      if (match = this.pre2007.exec(id)) {
        return { id: match[1] };
      }
      return { id: null };
    }
  }();

  // translators/bibtex/entry.ts
  var Path = {
    normalize(path) {
      return Translator.paths.caseSensitive ? path : path.toLowerCase();
    },
    drive(path) {
      if (Translator.preferences.platform !== "win")
        return "";
      return path.match(/^[a-z]:\//) ? path.substring(0, 2) : "";
    },
    relative(path) {
      if (this.drive(Translator.export.dir) !== this.drive(path))
        return path;
      const from = Translator.export.dir.split(Translator.paths.sep);
      const to = path.split(Translator.paths.sep);
      while (from.length && to.length && this.normalize(from[0]) === this.normalize(to[0])) {
        from.shift();
        to.shift();
      }
      return `..${Translator.paths.sep}`.repeat(from.length) + to.join(Translator.paths.sep);
    }
  };
  var fieldOrder = [
    "type",
    "ids",
    "title",
    "shorttitle",
    "booktitle",
    "author",
    "editor",
    "translator",
    "holder",
    "options",
    "date",
    "origdate",
    "year",
    "month",
    "journal",
    "journaltitle",
    "shortjournal",
    "series",
    "edition",
    "volume",
    "number",
    "eprint",
    "eprinttype",
    "primaryclass",
    "pages",
    "publisher",
    "address",
    "institution",
    "location",
    "issn",
    "doi",
    "url",
    "urldate",
    "-keywords",
    "-annotation",
    "-note",
    "-groups",
    "-timestamp",
    "-files",
    "-file"
  ].reduce((acc, field, idx) => {
    if (field[0] === "-") {
      acc[field.substring(1)] = -(idx + 1);
    } else {
      acc[field] = idx + 1;
    }
    return acc;
  }, {});
  function property_sort(a, b) {
    return Translator.stringCompare(a[0], b[0]);
  }
  var re3 = {
    punctuationAtEnd: new Zotero.Utilities.XRegExp("[\\p{Punctuation}]$"),
    startsWithLowercase: new Zotero.Utilities.XRegExp("^[\\p{Ll}]"),
    hasLowercaseWord: new Zotero.Utilities.XRegExp("\\s[\\p{Ll}]"),
    whitespace: new Zotero.Utilities.XRegExp("[\\p{Zs}]+"),
    nonwordish: new Zotero.Utilities.XRegExp("[^\\p{L}\\p{N}]", "g")
  };
  var enc_creators_marker = {
    initials: "\x97",
    relax: "\u200C"
  };
  var isBibString = /^[a-z][-a-z0-9_]*$/i;
  var Entry = class {
    constructor(item) {
      this.has = {};
      this.inPostscript = false;
      this.quality_report = [];
      this.metadata = { DeclarePrefChars: "", noopsort: false, packages: [] };
      this.packages = {};
      var _a3, _b;
      this.item = item;
      this.date = item.date ? Zotero.BetterBibTeX.parseDate(item.date) : { type: "none" };
      if (!this.item.language) {
        this.english = true;
      } else {
        this.language = babelLanguage(this.item.language);
        this.english = tag_default[this.language] === "en";
      }
      this.item.edition = (this.item.edition || "").replace(/^([0-9]+)(nd|th)$/, "$1");
      this.extraFields = JSON.parse(JSON.stringify(this.item.extraFields));
      let entrytype;
      const isPrePrint = Translator.BetterBibTeX && this.item.itemType === "report" && ((_a3 = this.item.extraFields.kv.type) == null ? void 0 : _a3.toLowerCase()) === "article";
      let csl_type3 = this.item.extraFields.kv.type;
      if (!isPrePrint && this.typeMap.csl[csl_type3]) {
        delete this.item.extraFields.kv.type;
      } else {
        csl_type3 = null;
      }
      if (this.item.extraFields.tex.entrytype) {
        entrytype = this.item.extraFields.tex.entrytype.value;
        this.entrytype_source = `tex.${entrytype}`;
        delete this.item.extraFields.tex.referencetype;
      } else if (this.item.extraFields.tex.referencetype) {
        entrytype = this.item.extraFields.tex.referencetype.value;
        this.entrytype_source = `tex.${entrytype}`;
        this.item.extraFields.tex.entrytype = this.item.extraFields.tex.referencetype;
        delete this.item.extraFields.tex.referencetype;
      } else if (csl_type3) {
        entrytype = this.typeMap.csl[csl_type3];
        this.entrytype_source = `csl.${csl_type3}`;
      } else if (isPrePrint) {
        entrytype = "misc";
        delete this.item.extraFields.kv.type;
        this.entrytype_source = `zotero.${this.item.itemType}`;
      } else {
        entrytype = this.typeMap.zotero[this.item.itemType] || "misc";
        this.entrytype_source = `zotero.${this.item.itemType}`;
      }
      if (typeof entrytype === "string") {
        this.entrytype = entrytype;
      } else {
        this.add({ name: "entrysubtype", value: entrytype.subtype });
        this.entrytype = entrytype.type;
      }
      for (const [name, value] of Object.entries(item.extraFields.kv)) {
        const ef = extra_fields_exports[name];
        if (ef.zotero) {
          if (!item[name] || ef.type === "date") {
            item[name] = value;
          }
          delete item.extraFields.kv[name];
        }
      }
      for (const [name, value] of Object.entries(item.extraFields.creator)) {
        if (extra_fields_exports[name].zotero) {
          for (const creator of value) {
            item.creators.push({ ...zoteroCreator(creator, name), source: creator });
          }
          delete item.extraFields.creator[name];
        }
      }
      if (Translator.preferences.jabrefFormat) {
        if (Translator.preferences.testing) {
          this.add({ name: "timestamp", value: "2015-02-24 12:14:36 +0100" });
        } else {
          this.add({ name: "timestamp", value: this.item.dateModified || this.item.dateAdded });
        }
      }
      if ((this.item.arXiv = arXiv.parse(this.item.publicationTitle)) && this.item.arXiv.id) {
        this.item.arXiv.source = "publicationTitle";
        if (Translator.BetterBibLaTeX)
          delete this.item.publicationTitle;
      } else if ((this.item.arXiv = arXiv.parse((_b = this.item.extraFields.tex.arxiv) == null ? void 0 : _b.value)) && this.item.arXiv.id) {
        this.item.arXiv.source = "extra";
      } else {
        this.item.arXiv = null;
      }
      if (this.item.arXiv) {
        delete this.item.extraFields.tex.arxiv;
        this.add({ name: "archiveprefix", value: "arXiv" });
        this.add({ name: "eprinttype", value: "arxiv" });
        this.add({ name: "eprint", value: this.item.arXiv.id });
        this.add({ name: "primaryclass", value: this.item.arXiv.category });
      }
    }
    static installPostscript() {
      try {
        if (Translator.preferences.postscript.trim()) {
          Entry.prototype.postscript = postscript(
            "tex",
            Translator.preferences.postscript,
            "this.inPostscript"
          );
        } else {
          Entry.prototype.postscript = noop;
        }
      } catch (err) {
        Entry.prototype.postscript = noop;
        log.error("failed to install postscript", err, "\n", Translator.preferences.postscript);
      }
    }
    valueish(value) {
      switch (typeof value) {
        case "number":
          return `${value}`;
        case "string":
          return Zotero.Utilities.XRegExp.replace(value, re3.nonwordish, "", "all").toLowerCase();
        default:
          return "";
      }
    }
    normalizeDashes(str) {
      str = (str || "").trim();
      if (this.item.raw)
        return str;
      return str.replace(/\u2053/g, "~").replace(/[\u2014\u2015]/g, "---").replace(/[\u2012\u2013]/g, "--").split(/(,\s*)/).map((range) => {
        if (range.match(/^,\s+/))
          return ", ";
        if (range === ",")
          return range;
        return range.replace(/^([0-9]+)\s*(-+)\s*([0-9]+)\s*$/g, "$1$2$3").replace(/^([0-9]+)-([0-9]+)$/g, "$1--$2").replace(/^([0-9]+)-{4,}([0-9]+)$/g, "$1---$2");
      }).join("");
    }
    add(field) {
      if (Translator.preferences.testing && !this.inPostscript && field.name !== field.name.toLowerCase())
        throw new Error(`Do not add mixed-case field ${field.name}`);
      if (!field.value && !field.bibtex && this.inPostscript) {
        delete this.has[field.name];
        return null;
      }
      if (Translator.skipField[field.name])
        return null;
      field.enc = field.enc || this.fieldEncoding[field.name] || "latex";
      if (field.enc === "date") {
        if (!field.value)
          return null;
        if (field.value === "today") {
          return this.add({
            ...field,
            value: "<pre>\\today</pre>",
            enc: "verbatim"
          });
        }
        if (Translator.BetterBibLaTeX && Translator.preferences.biblatexExtendedDateFormat && Zotero.BetterBibTeX.isEDTF(field.value, true)) {
          return this.add({
            ...field,
            value: field.value.replace(/\.[0-9]{3}[a-z]+$/i, ""),
            enc: "verbatim"
          });
        }
        const date2 = Zotero.BetterBibTeX.parseDate(field.value);
        this.add(datefield(date2, field));
        if (date2.orig) {
          this.add(datefield(date2.orig, {
            ...field,
            name: field.orig && field.orig.inherit ? `orig${field.name}` : field.orig && field.orig.name,
            verbatim: field.orig && field.orig.inherit && field.verbatim ? `orig${field.verbatim}` : field.orig && field.orig.verbatim
          }));
        }
        return field.name;
      }
      if (field.fallback && field.replace)
        throw new Error("pick fallback or replace, buddy");
      if (field.fallback && this.has[field.name]) {
        log.error("add: fallback already filled for", field.name);
        return null;
      }
      if (!field.name) {
        log.error("add: empty legacy object", field.name);
        return null;
      }
      if (!field.bibtex) {
        if (typeof field.value !== "number" && !field.value)
          return null;
        if (typeof field.value === "string" && field.value.trim() === "")
          return null;
        if (Array.isArray(field.value) && field.value.length === 0)
          return null;
      }
      if (this.has[field.name]) {
        if (!Array.isArray(field.value) && this.has[field.name].value === field.value && this.has[field.name].enc === field.enc)
          return null;
        if (!this.inPostscript && !field.replace) {
          const value = field.bibtex ? "bibtex" : "value";
          throw new Error(`duplicate field '${field.name}' for ${this.item.citationKey}: old: ${this.has[field.name][value]}, new: ${field[value]}`);
        }
        if (!field.replace) {
          let v_old = this.has[field.name].value;
          let v_new = field.value;
          if (typeof v_old === "string" && typeof v_new === "string") {
            v_old = v_old.toLowerCase();
            v_new = v_new.toLowerCase();
          }
          if (v_old !== v_new)
            this.quality_report.push(`duplicate "${field.name}" ("${this.has[field.name].value}") ignored`);
        }
        delete this.has[field.name];
      }
      if (!field.bibtex) {
        let bibstring = "";
        if (typeof field.value === "number" || field.bibtexStrings && (bibstring = this.getBibString(field.value))) {
          field.bibtex = `${bibstring || field.value}`;
        } else {
          let value;
          switch (field.enc) {
            case "latex":
              value = this.enc_latex(field, { raw: this.item.raw });
              break;
            case "raw":
              value = this.enc_raw(field);
              break;
            case "url":
              value = this.enc_url(field);
              break;
            case "verbatim":
              value = this.enc_verbatim(field);
              break;
            case "creators":
              value = this.enc_creators(field, this.item.raw);
              break;
            case "literal":
              value = this.enc_literal(field, this.item.raw);
              break;
            case "tags":
              value = this.enc_tags(field);
              break;
            case "attachments":
              value = this.enc_attachments(field);
              break;
            default:
              throw new Error(`Unexpected field encoding: ${JSON.stringify(field.enc)}`);
          }
          if (!value) {
            log.error("add: no value after encoding", field.enc, field.name);
            return null;
          }
          value = value.trim();
          if (!field.bare || field.value.match(/\s/)) {
            value = `{${value}}`;
          }
          field.bibtex = value;
        }
      }
      this.has[field.name] = field;
      return field.name;
    }
    remove(name) {
      const removed = this.has[name] || {};
      delete this.has[name];
      return removed;
    }
    getBibString(value) {
      if (!value || typeof value !== "string")
        return null;
      switch (Translator.preferences.exportBibTeXStrings) {
        case "off":
          return null;
        case "detect":
          return isBibString.test(value) && value;
        case "match":
          return Exporter.strings[value.toUpperCase()] && value;
        case "match+reverse":
          value = value.toUpperCase();
          return Exporter.strings[value] ? value : Exporter.strings_reverse[value];
        default:
          return null;
      }
    }
    hasCreator(type2) {
      return (this.item.creators || []).some((creator) => creator.creatorType === type2);
    }
    override(field) {
      const itemtype_name = field.name.split(".");
      let name;
      if (itemtype_name.length === 2) {
        if (this.entrytype !== itemtype_name[0])
          return;
        name = itemtype_name[1];
      } else {
        name = field.name;
      }
      if (typeof field.value === "string" && field.value.trim() === "") {
        this.remove(name);
        return;
      }
      this.add({ ...field, name, replace: typeof field.replace !== "boolean" && typeof field.fallback !== "boolean" || field.replace });
    }
    complete() {
      var _a3, _b, _c;
      if (Translator.preferences.jabrefFormat >= 4 && ((_a3 = this.item.collections) == null ? void 0 : _a3.length)) {
        const groups = Array.from(new Set(this.item.collections.map((key) => {
          var _a4;
          return (_a4 = Translator.collections[key]) == null ? void 0 : _a4.name;
        }).filter((name) => name))).sort();
        this.add({ name: "groups", value: groups.join(",") });
      }
      if (this.item.extraFields.aliases.length) {
        this.add({ name: "ids", value: this.item.extraFields.aliases.filter((alias) => alias !== this.item.citationKey).join(","), enc: "verbatim" });
      }
      if (Translator.BetterBibLaTeX)
        this.add({ name: "pubstate", value: this.item.status });
      for (const [key, value] of Object.entries(this.item.extraFields.kv)) {
        const type2 = extra_fields_exports[key].type;
        let enc = { name: "creator", text: "latex" }[type2] || type2;
        const replace = type2 === "date";
        if (["PMID", "PMCID"].includes(key) && typeof value === "string") {
          this.item.extraFields.tex[key.toLowerCase()] = { value, line: -1 };
          delete this.item.extraFields.kv[key];
          continue;
        }
        let name = null;
        if (Translator.BetterBibLaTeX) {
          switch (key) {
            case "issuingAuthority":
              name = "institution";
              break;
            case "title":
              name = this.entrytype === "book" ? "maintitle" : null;
              break;
            case "publicationTitle":
              switch (this.entrytype_source) {
                case "zotero.film":
                case "zotero.tvBroadcast":
                case "zotero.videoRecording":
                case "csl.motion_picture":
                  name = "booktitle";
                  break;
                case "zotero.bookSection":
                case "csl.chapter":
                  name = "maintitle";
                  break;
                default:
                  name = "journaltitle";
                  break;
              }
              break;
            case "original-publisher":
              name = "origpublisher";
              enc = "literal";
              break;
            case "original-publisher-place":
              name = "origlocation";
              enc = "literal";
              break;
            case "original-title":
              name = "origtitle";
              break;
            case "original-date":
            case "originalDate":
              name = "origdate";
              enc = "date";
              break;
            case "place":
              name = "location";
              enc = "literal";
              break;
            case "pages":
              name = "pages";
              break;
            case "date":
              name = "date";
              break;
            case "event-place":
              name = "venue";
              break;
            case "accessed":
              name = "urldate";
              break;
            case "number":
            case "volume":
            case "DOI":
            case "ISBN":
            case "ISSN":
              name = key.toLowerCase();
              break;
          }
        }
        if (Translator.BetterBibTeX) {
          switch (key) {
            case "call-number":
              name = "lccn";
              break;
            case "DOI":
            case "ISSN":
              name = key.toLowerCase();
              break;
          }
        }
        if (name) {
          this.override({ name, verbatim: name, orig: { inherit: true }, value, enc, replace, fallback: !replace });
        } else {
          log.error("Unmapped extra field", key, "=", value);
        }
      }
      this.add({ name: "annotation", value: (_b = this.item.extra) == null ? void 0 : _b.replace(/\n+/g, (newlines) => newlines.length > 1 ? "\n\n" : " ").trim() });
      if (Translator.options.exportNotes) {
        if (!(Translator.BetterBibTeX && Translator.preferences.bibtexURL === "note"))
          this.add({ name: "note", value: (_c = this.item.notes) == null ? void 0 : _c.map((note) => note.note).join("</p><p>"), html: true });
      }
      const bibtexStrings = Translator.preferences.exportBibTeXStrings.startsWith("match");
      for (const [name, field] of Object.entries(this.item.extraFields.tex)) {
        if (name === "entrytype" || name === "referencetype") {
          this.entrytype = field.value;
          continue;
        }
        const mode = { raw: { raw: true }, cased: { caseConversion: true } }[field.mode] || {};
        switch (name) {
          case "mr":
            this.override({ name: "mrnumber", value: field.value, ...mode });
            break;
          case "zbl":
            this.override({ name: "zmnumber", value: field.value, ...mode });
            break;
          case "lccn":
          case "pmcid":
            this.override({ name, value: field.value, ...mode });
            break;
          case "pmid":
          case "arxiv":
          case "jstor":
          case "hdl":
            if (Translator.BetterBibLaTeX) {
              this.override({ name: "eprinttype", value: name });
              this.override({ name: "eprint", value: field.value, ...mode });
            } else {
              this.override({ name, value: field.value, ...mode });
            }
            break;
          case "googlebooksid":
            if (Translator.BetterBibLaTeX) {
              this.override({ name: "eprinttype", value: "googlebooks" });
              this.override({ name: "eprint", value: field.value, ...mode });
            } else {
              this.override({ name: "googlebooks", value: field.value, ...mode });
            }
            break;
          case "xref":
            this.override({ name, value: field.value, ...mode });
            break;
          default:
            this.override({ name, value: field.value, bibtexStrings, ...mode });
            break;
        }
      }
      const keys = Object.keys(this.has).sort((a, b) => {
        const fa = fieldOrder[a];
        const fb = fieldOrder[b];
        if (fa && fb)
          return Math.abs(fa) - Math.abs(fb);
        if (fa)
          return -fa;
        if (fb)
          return fb;
        return a.localeCompare(b);
      });
      for (const field of keys) {
        const value = this.has[field];
        delete this.has[field];
        this.has[field] = value;
      }
      let allow = { cache: true, write: true };
      try {
        allow = this.postscript(this, this.item, Translator, Zotero, this.extraFields);
      } catch (err) {
        if (Translator.preferences.testing)
          throw err;
        log.error("Entry.postscript failed:", err);
        allow.cache = false;
      }
      this.item.$cacheable = this.item.$cacheable && allow.cache;
      for (const name of Translator.skipFields) {
        this.remove(name);
      }
      if (this.has.url && this.has.doi) {
        switch (Translator.preferences.DOIandURL) {
          case "url":
            delete this.has.doi;
            break;
          case "doi":
            delete this.has.url;
            break;
        }
      }
      if (!this.has.url)
        this.remove("urldate");
      if (!Object.keys(this.has).length)
        this.add({ name: "type", value: this.entrytype });
      const fields = Object.values(this.has).map((field) => `  ${field.name} = ${field.bibtex}`);
      let ref = `@${this.entrytype}{${this.item.citationKey},
`;
      ref += fields.join(",\n");
      ref += "\n}\n";
      ref += this.qualityReport();
      ref += "\n";
      if (allow.write)
        Zotero.write(ref);
      this.metadata.DeclarePrefChars = Exporter.unique_chars(this.metadata.DeclarePrefChars);
      this.metadata.packages = Object.keys(this.packages);
      if (this.item.$cacheable)
        Zotero.BetterBibTeX.cacheStore(this.item.itemID, Translator.options, Translator.preferences, ref, this.metadata);
      Exporter.postfix.add(this.metadata);
    }
    enc_raw(f) {
      return f.value;
    }
    enc_url(f) {
      if (Translator.BetterBibTeX && Translator.preferences.bibtexURL.endsWith("-ish")) {
        return (f.value || "").replace(/([#\\%&{}])/g, "\\$1");
      } else if (Translator.BetterBibTeX && Translator.preferences.bibtexURL === "note") {
        return `\\url{${this.enc_verbatim(f)}}`;
      } else {
        return this.enc_verbatim(f);
      }
    }
    enc_verbatim(f) {
      let value = f.value || "";
      const braces = [];
      for (let i = 0; i < value.length; i++) {
        if (value[i] === "{") {
          braces.unshift({ c: value[i], pos: i });
        } else if (value[i] === "}") {
          if (braces.length && braces[0].c === "{") {
            braces.shift();
          } else {
            braces.unshift({ c: "", pos: i });
          }
        }
      }
      for (const b of braces) {
        value = value.substring(0, b.pos) + value.substring(b.pos + 1);
      }
      return value;
    }
    _enc_creators_scrub_name(name) {
      name = name.replace(/uFFFC/g, "");
      name = name.replace(/\u00A0/g, "\uFFFC");
      name = Zotero.Utilities.XRegExp.replace(name, re3.whitespace, " ", "all");
      name = name.replace(/\uFFFC/g, "\xA0");
      return name;
    }
    enc_creators(f, raw) {
      if (f.value.length === 0)
        return null;
      const encoded = [];
      for (const creator of f.value) {
        let name;
        if (creator.name || creator.lastName && creator.fieldMode === 1) {
          name = creator.name || creator.lastName;
          if (name !== "others")
            name = raw ? `{${name}}` : this.enc_latex({ value: new String(this._enc_creators_scrub_name(name)) });
        } else if (raw) {
          name = [creator.lastName || "", creator.firstName || ""].join(", ");
        } else if (creator.lastName || creator.firstName) {
          name = {
            family: this._enc_creators_scrub_name(creator.lastName || ""),
            given: this._enc_creators_scrub_name(creator.firstName || "")
          };
          if (Translator.preferences.parseParticles)
            Zotero.BetterBibTeX.CSL().parseParticles(name);
          if (!Translator.BetterBibLaTeX || !Translator.preferences.biblatexExtendedNameFormat) {
            if (!this.useprefix)
              this.useprefix = !!name["non-dropping-particle"];
            if (!this.juniorcomma)
              this.juniorcomma = f.juniorcomma && name["comma-suffix"];
          }
          if (Translator.BetterBibTeX) {
            name = this._enc_creators_bibtex(name);
          } else {
            name = this._enc_creators_biblatex(name);
          }
          name = name.replace(/ and /g, " {and} ");
          if (Translator.and.names.repl !== " {and} ")
            name = name.replace(Translator.and.names.re, Translator.and.names.repl);
        } else {
          continue;
        }
        encoded.push(name.trim());
      }
      return replace_command_spacers(encoded.join(Translator.preferences.separatorNames));
    }
    enc_literal(f, raw = false) {
      if (!f.value)
        return null;
      return this.enc_latex({ ...f, value: Translator.preferences.exportBraceProtection ? new String(f.value) : f.value }, { raw });
    }
    enc_latex(f, options2 = {}) {
      if (typeof f.value === "number")
        return f.value;
      if (!f.value)
        return null;
      if (Array.isArray(f.value)) {
        if (f.value.length === 0)
          return null;
        return f.value.map((elt) => this.enc_latex({ ...f, bibtex: void 0, value: elt }, options2)).join(f.sep || "");
      }
      if (f.raw || options2.raw)
        return f.value;
      const caseConversion = this.caseConversion[f.name] || f.caseConversion;
      const latex = text2latex(f.value, { html: f.html, caseConversion: caseConversion && this.english, creator: options2.creator });
      for (const pkg of latex.packages) {
        this.packages[pkg] = true;
      }
      let value = latex.latex;
      if (caseConversion && Translator.BetterBibTeX && !this.english && Translator.preferences.exportBraceProtection)
        value = `{${value}}`;
      if (f.value instanceof String && !latex.raw)
        value = new String(`{${value}}`);
      return value;
    }
    enc_tags(f) {
      const tags = f.value.map((tag) => typeof tag === "string" ? { tag } : tag).filter((tag) => (Translator.preferences.automaticTags || tag.type !== 1) && tag.tag !== Translator.preferences.rawLaTag);
      if (tags.length === 0)
        return null;
      tags.sort((a, b) => Translator.stringCompare(a.tag, b.tag));
      for (const tag of tags) {
        if (Translator.BetterBibTeX) {
          tag.tag = tag.tag.replace(/([#\\%&])/g, "\\$1");
        } else {
          tag.tag = tag.tag.replace(/([#%\\])/g, "\\$1");
        }
        tag.tag = tag.tag.replace(/,/g, ";");
        let balanced = 0;
        for (const ch of tag.tag) {
          switch (ch) {
            case "{":
              balanced += 1;
              break;
            case "}":
              balanced -= 1;
              break;
          }
          if (balanced < 0)
            break;
        }
        if (balanced !== 0)
          tag.tag = tag.tag.replace(/{/g, "(").replace(/}/g, ")");
      }
      return tags.map((tag) => tag.tag).join(",");
    }
    enc_attachments(f, modify) {
      if (!f.value || f.value.length === 0)
        return null;
      const attachments = [];
      if (modify)
        this.item.$cacheable = false;
      for (const attachment of f.value) {
        const att = {
          title: attachment.title,
          mimetype: attachment.contentType || "",
          path: ""
        };
        if (Translator.options.exportFileData) {
          att.path = attachment.saveFile ? attachment.defaultPath : "";
        } else if (attachment.localPath) {
          att.path = attachment.localPath;
        }
        if (!att.path)
          continue;
        att.path = att.path.replace(/(?:\s*[{}]+)+\s*/g, " ");
        if (Translator.options.exportFileData) {
          attachment.saveFile(att.path, true);
        }
        if (!att.title)
          att.title = att.path.replace(/.*[\\/]/, "") || "attachment";
        if (!att.mimetype && att.path.slice(-4).toLowerCase() === ".pdf")
          att.mimetype = "application/pdf";
        if (Translator.preferences.relativeFilePaths && Translator.export.dir) {
          const relative = Path.relative(att.path);
          if (relative !== att.path) {
            this.item.$cacheable = false;
            att.path = relative;
          }
        }
        if (Translator.preferences.testing)
          att.path = att.path.replace(/.*[.]BBTZ5TEST\/(zotero|jurism)\//, "~/BBTZ5TEST/").replace(/\/storage\/[^/]+\//, "/storage/");
        if (modify)
          att.path = modify(att.path);
        attachments.push(att);
      }
      if (attachments.length === 0)
        return null;
      attachments.sort((a, b) => {
        if (a.mimetype === "text/html" && b.mimetype !== "text/html")
          return 1;
        if (b.mimetype === "text/html" && a.mimetype !== "text/html")
          return -1;
        return Translator.stringCompare(a.path, b.path);
      });
      if (Translator.preferences.jabrefFormat)
        return attachments.map((att) => [att.title, att.path, att.mimetype].map((part) => part.replace(/([\\{}:;])/g, "\\$1")).join(":")).join(";");
      return attachments.map((att) => att.path.replace(/([\\{}:;])/g, "\\$1")).join(";");
    }
    _enc_creators_pad_particle(particle, relax = false) {
      if (particle[particle.length - 1] === " ")
        return particle;
      if (Translator.BetterBibLaTeX) {
        if (Zotero.Utilities.XRegExp.test(particle, re3.punctuationAtEnd))
          this.metadata.DeclarePrefChars += particle[particle.length - 1];
        return `${particle} `;
      }
      if (particle[particle.length - 1] === ".")
        return `${particle} `;
      if (Zotero.Utilities.XRegExp.test(particle, re3.punctuationAtEnd)) {
        if (relax)
          return `${particle}${enc_creators_marker.relax} `;
        return particle;
      }
      return `${particle} `;
    }
    _enc_creator_part(part) {
      const { latex, packages } = text2latex(part, { creator: true, commandspacers: true });
      for (const pkg of packages) {
        this.packages[pkg] = true;
      }
      return part instanceof String ? new String(`{${latex}}`) : latex;
    }
    _enc_creators_biblatex(name) {
      let family;
      if (name.family.length > 1 && name.family[0] === '"' && name.family[name.family.length - 1] === '"') {
        family = new String(name.family.slice(1, -1));
      } else {
        ({ family } = name);
      }
      const initials_marker_pos = (name.given || "").indexOf(enc_creators_marker.initials);
      let initials;
      if (Translator.preferences.biblatexExtendedNameFormat && (name["dropping-particle"] || name["non-dropping-particle"] || name["comma-suffix"])) {
        if (initials_marker_pos >= 0) {
          initials = name.given.substring(0, initials_marker_pos);
          if (initials.length > 1)
            initials = new String(initials);
          name.given = name.given.replace(enc_creators_marker.initials, "");
        } else {
          initials = "";
        }
        const namebuilder = [];
        if (family)
          namebuilder.push(`family=${this._enc_creator_part(family)}`);
        if (name.given)
          namebuilder.push(`given=${this._enc_creator_part(name.given)}`);
        if (initials)
          namebuilder.push(`given-i=${this._enc_creator_part(initials)}`);
        if (name.suffix)
          namebuilder.push(`suffix=${this._enc_creator_part(name.suffix)}`);
        if (name["dropping-particle"] || name["non-dropping-particle"]) {
          namebuilder.push(`prefix=${this._enc_creator_part(name["dropping-particle"] || name["non-dropping-particle"])}`);
          namebuilder.push(`useprefix=${!!name["non-dropping-particle"]}`);
        }
        if (name["comma-suffix"])
          namebuilder.push("juniorcomma=true");
        return namebuilder.join(", ");
      }
      if (family && Zotero.Utilities.XRegExp.test(family, re3.startsWithLowercase))
        family = new String(family);
      if (family)
        family = this._enc_creator_part(family);
      if (initials_marker_pos >= 0)
        name.given = `<span relax="true">${name.given.replace(enc_creators_marker.initials, "</span>")}`;
      let latex = "";
      if (name["dropping-particle"])
        latex += this._enc_creator_part(this._enc_creators_pad_particle(name["dropping-particle"]));
      if (name["non-dropping-particle"])
        latex += this._enc_creator_part(this._enc_creators_pad_particle(name["non-dropping-particle"]));
      if (family)
        latex += family;
      if (name.suffix)
        latex += `, ${this._enc_creator_part(name.suffix)}`;
      if (name.given)
        latex += `, ${this._enc_creator_part(name.given)}`;
      return latex;
    }
    _enc_creators_bibtex(name) {
      let family;
      if (name.family.length > 1 && name.family[0] === '"' && name.family[name.family.length - 1] === '"') {
        family = new String(name.family.slice(1, -1));
      } else {
        family = name.family;
      }
      if (name.given && name.given.indexOf(enc_creators_marker.initials) >= 0) {
        name.given = `<span relax="true">${name.given.replace(enc_creators_marker.initials, "</span>")}`;
      }
      if (name["non-dropping-particle"])
        family = new String(this._enc_creators_pad_particle(name["non-dropping-particle"]) + family);
      if (Zotero.Utilities.XRegExp.test(family, re3.startsWithLowercase) || Zotero.Utilities.XRegExp.test(family, re3.hasLowercaseWord))
        family = new String(family);
      family = family ? this._enc_creator_part(family) : "";
      if (family[0] !== "{" && name.family.match(/[-\u2014\u2015\u2012\u2013]/))
        family = `{${family}}`;
      if (name["dropping-particle"])
        family = `${this._enc_creator_part(this._enc_creators_pad_particle(name["dropping-particle"], true))}${family}`;
      if (Translator.BetterBibTeX && Translator.preferences.bibtexParticleNoOp && (name["non-dropping-particle"] || name["dropping-particle"])) {
        family = `{\\noopsort{${this._enc_creator_part(name.family.toLowerCase())}}}${family}`;
        this.metadata.noopsort = true;
      }
      if (name.given)
        name.given = this._enc_creator_part(name.given);
      if (name.suffix)
        name.suffix = this._enc_creator_part(name.suffix);
      let latex = family;
      if (name.suffix)
        latex += `, ${name.suffix}`;
      if (name.given)
        latex += `, ${name.given}`;
      return latex;
    }
    postscript(_entry, _item, _translator, _zotero, _extra) {
      return { cache: true, write: true };
    }
    thesistype(type2, phdthesis, mastersthesis, bathesis, candthesis) {
      return {
        phd: phdthesis,
        dissertation: phdthesis,
        phddissertation: phdthesis,
        doctoraldissertation: phdthesis,
        ma: mastersthesis,
        master: mastersthesis,
        masters: mastersthesis,
        ba: bathesis,
        bachelor: bathesis,
        bachelors: bathesis,
        undergrad: bathesis,
        undergraduate: bathesis,
        cand: candthesis,
        candidate: candthesis,
        candidates: candthesis
      }[type2 == null ? void 0 : type2.toLowerCase().replace(/[^a-z]/g, "").replace(/thesis$/, "")];
    }
    qualityReport() {
      const $cacheable = this.item.$cacheable;
      try {
        if (!Translator.preferences.qualityReport)
          return "";
        let report = this.lint({
          timestamp: `added because JabRef format is set to ${Translator.preferences.jabrefFormat || "?"}`
        });
        if (report) {
          if (this.has.pages) {
            const dashes = this.has.pages.bibtex.match(/-+/g);
            if (dashes && dashes.includes("---"))
              report.push("? em-dash found in pages field, did you mean to use an en-dash?");
          }
          if (this.has.journal && this.has.journal.value.indexOf(".") >= 0)
            report.push(`? Possibly abbreviated journal title ${this.has.journal.value}`);
          if (this.has.journaltitle && this.has.journaltitle.value.indexOf(".") >= 0)
            report.push(`? Possibly abbreviated journal title ${this.has.journaltitle.value}`);
          if (this.entrytype === "inproceedings" && this.has.booktitle) {
            if (!this.has.booktitle.value.match(/:|Proceedings|Companion| '/) || this.has.booktitle.value.match(/\.|workshop|conference|symposium/)) {
              report.push("? Unsure about the formatting of the booktitle");
            }
          }
          if (this.has.title && Translator.preferences.exportTitleCase) {
            const titleCased2 = Zotero.BetterBibTeX.titleCase(this.has.title.value) === this.has.title.value;
            if (this.has.title.value.match(/\s/)) {
              if (titleCased2)
                report.push("? Title looks like it was stored in title-case in Zotero");
            } else {
              if (!titleCased2)
                report.push("? Title looks like it was stored in lower-case in Zotero");
            }
          }
        } else {
          report = [`I don't know how to quality-check ${this.entrytype} entries`];
        }
        report = report.concat(this.quality_report);
        const used_values = Object.values(this.has).filter((field) => typeof field.value === "string" || typeof field.value === "number").map((field) => this.valueish(field.value)).filter((value) => value !== "");
        const ignore_unused_props = [
          "abstractNote",
          "accessDate",
          "autoJournalAbbreviation",
          "citationKey",
          "citekey",
          "collections",
          "date",
          "dateAdded",
          "dateModified",
          "itemID",
          "itemType",
          "itemKey",
          "key",
          "libraryID",
          "relations",
          "rights",
          "uri",
          "version"
        ];
        const unused_props = Object.entries(this.item.extraFields.kv).map(([p, v]) => [`extra: ${label2[p.toLowerCase()] || p}`, v]).concat(Object.entries(this.item)).map(([p, v]) => [p, v, this.valueish(v)]).filter(([p, v, vi]) => vi !== "" && !ignore_unused_props.includes(p) && !used_values.includes(this.valueish(v))).sort(property_sort);
        for (const [prop, value, valueish] of unused_props) {
          if (prop === "language" && this.has.langid)
            continue;
          if (prop === "libraryCatalog" && valueish.includes("arxiv") && this.item.arXiv)
            continue;
          report.push(`? unused ${label2[prop.toLowerCase()] || prop} ("${value}")`);
        }
        if (!report.length)
          return "";
        report.unshift(`== ${Translator.BetterBibTeX ? "BibTeX" : "BibLateX"} quality report for ${this.item.citationKey}:`);
        return report.map((line) => `% ${line}
`).join("");
      } finally {
        this.item.$cacheable = $cacheable;
      }
    }
  };

  // content/escape.ts
  init_globals();
  function html(str) {
    const entity = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;"
    };
    return str.replace(/[<>&"']/g, (c) => entity[c] || `&#${c.charCodeAt(0)};`);
  }

  // translators/Better BibTeX.ts
  var bibtexParser2 = __toESM(require_bibtex_parser());
  var toWordsOrdinal = require_toWordsOrdinal();
  function edition2(n) {
    if (typeof n === "number" || typeof n === "string" && n.match(/^[0-9]+$/))
      return toWordsOrdinal(n).replace(/^\w/, (c) => c.toUpperCase());
    return n;
  }
  Entry.prototype.caseConversion = {
    title: true,
    series: true,
    shorttitle: true,
    booktitle: true,
    type: true,
    origtitle: true,
    maintitle: true,
    eventtitle: true
  };
  Entry.prototype.fieldEncoding = {
    groups: "verbatim",
    url: "verbatim",
    doi: "verbatim",
    institution: "literal",
    publisher: "literal",
    organization: "literal",
    address: "literal"
  };
  var lint = {
    article: {
      required: ["author", "title", "journal", "year"],
      optional: ["volume", "number", "pages", "month", "note", "key"]
    },
    book: {
      required: ["author/editor", "title", "publisher", "year"],
      optional: ["volume/number", "series", "address", "edition", "month", "note", "key"]
    },
    booklet: {
      required: ["title"],
      optional: ["author", "howpublished", "address", "month", "year", "note", "key"]
    },
    inbook: {
      required: ["author/editor", "title", "chapter/pages", "publisher", "year"],
      optional: ["volume/number", "series", "type", "address", "edition", "month", "note", "key"]
    },
    incollection: {
      required: ["author", "title", "booktitle", "publisher", "year"],
      optional: ["editor", "volume/number", "series", "type", "chapter", "pages", "address", "edition", "month", "note", "key"]
    },
    inproceedings: {
      required: ["author", "title", "booktitle", "year"],
      optional: ["editor", "volume/number", "series", "pages", "address", "month", "organization", "publisher", "note", "key"]
    },
    manual: {
      required: ["title"],
      optional: ["author", "organization", "address", "edition", "month", "year", "note", "key"]
    },
    mastersthesis: {
      required: ["author", "title", "school", "year"],
      optional: ["type", "address", "month", "note", "key"]
    },
    misc: {
      required: [],
      optional: ["author", "title", "howpublished", "month", "year", "note", "key"]
    },
    phdthesis: {
      required: ["author", "title", "school", "year"],
      optional: ["type", "address", "month", "note", "key"]
    },
    proceedings: {
      required: ["title", "year"],
      optional: ["editor", "volume/number", "series", "address", "month", "organization", "publisher", "note", "key"]
    },
    techreport: {
      required: ["author", "title", "institution", "year"],
      optional: ["type", "number", "address", "month", "note", "key"]
    },
    unpublished: {
      required: ["author", "title", "note"],
      optional: ["month", "year", "key"]
    }
  };
  lint.conference = lint.inproceedings;
  Entry.prototype.lint = function(_explanation) {
    const type2 = lint[this.entrytype.toLowerCase()];
    if (!type2)
      return;
    const warnings = [];
    for (const required of type2.required) {
      const match = required.split("/").find((field) => this.has[field]);
      if (match) {
      } else {
        warnings.push(`Missing required field '${required}'`);
      }
    }
    return warnings;
  };
  Entry.prototype.addCreators = function() {
    if (!this.item.creators || !this.item.creators.length)
      return;
    const authors = [];
    const editors = [];
    const translators = [];
    const collaborators = [];
    const primaryCreatorType = Zotero.Utilities.getCreatorsForType(this.item.itemType)[0];
    for (const creator of this.item.creators) {
      switch (creator.creatorType) {
        case "editor":
        case "seriesEditor":
          editors.push(creator);
          break;
        case "translator":
          translators.push(creator);
          break;
        case primaryCreatorType:
          authors.push(creator);
          break;
        default:
          collaborators.push(creator);
          break;
      }
    }
    this.remove("author");
    this.remove("editor");
    this.remove("translator");
    this.remove("collaborator");
    this.add({ name: "author", value: authors, enc: "creators" });
    this.add({ name: "editor", value: editors, enc: "creators" });
    this.add({ name: "translator", value: translators, enc: "creators" });
    this.add({ name: "collaborator", value: collaborators, enc: "creators" });
  };
  Entry.prototype.typeMap = {
    csl: {
      article: "article",
      "article-journal": "article",
      "article-magazine": "article",
      "article-newspaper": "article",
      bill: "misc",
      book: "book",
      broadcast: "misc",
      chapter: "incollection",
      dataset: "misc",
      entry: "incollection",
      "entry-dictionary": "incollection",
      "entry-encyclopedia": "incollection",
      figure: "misc",
      graphic: "misc",
      interview: "misc",
      legal_case: "misc",
      legislation: "misc",
      manuscript: "unpublished",
      map: "misc",
      motion_picture: "misc",
      musical_score: "misc",
      pamphlet: "booklet",
      "paper-conference": "inproceedings",
      patent: "misc",
      personal_communication: "misc",
      post: "misc",
      "post-weblog": "misc",
      report: "techreport",
      review: "article",
      "review-book": "article",
      song: "misc",
      speech: "misc",
      thesis: "phdthesis",
      treaty: "misc",
      webpage: "misc"
    },
    zotero: {
      artwork: "misc",
      audioRecording: "misc",
      bill: "misc",
      blogPost: "misc",
      book: "book",
      bookSection: "incollection",
      case: "misc",
      computerProgram: "misc",
      conferencePaper: "inproceedings",
      dictionaryEntry: "misc",
      document: "misc",
      email: "misc",
      encyclopediaArticle: "article",
      film: "misc",
      forumPost: "misc",
      hearing: "misc",
      instantMessage: "misc",
      interview: "misc",
      journalArticle: "article",
      letter: "misc",
      magazineArticle: "article",
      manuscript: "unpublished",
      map: "misc",
      newspaperArticle: "article",
      patent: "patent",
      podcast: "misc",
      presentation: "misc",
      radioBroadcast: "misc",
      report: "techreport",
      statute: "misc",
      thesis: "phdthesis",
      tvBroadcast: "misc",
      videoRecording: "misc",
      webpage: "misc"
    }
  };
  var months = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"];
  function doExport() {
    var _a3, _b, _c;
    Translator.init("export");
    Entry.installPostscript();
    Exporter.prepare_strings();
    Zotero.write("\n");
    for (const item of Exporter.items) {
      const ref = new Entry(item);
      if (item.itemType === "report" && ((_a3 = item.type) == null ? void 0 : _a3.toLowerCase().includes("manual")))
        ref.entrytype = "manual";
      if (["zotero.bookSection", "csl.chapter", "tex.chapter"].includes(ref.entrytype_source) && ref.hasCreator("bookAuthor"))
        ref.entrytype = "inbook";
      ref.add({ name: "address", value: item.place });
      ref.add({ name: "chapter", value: item.section });
      ref.add({ name: "edition", value: edition2(item.edition) });
      ref.add({ name: "type", value: item.type });
      ref.add({ name: "series", value: item.series, bibtexStrings: true });
      ref.add({ name: "title", value: item.title });
      ref.add({ name: "copyright", value: item.rights });
      ref.add({ name: "isbn", value: item.ISBN });
      ref.add({ name: "issn", value: item.ISSN });
      ref.add({ name: "lccn", value: item.callNumber });
      ref.add({ name: "shorttitle", value: item.shortTitle });
      ref.add({ name: "abstract", value: (_b = item.abstractNote) == null ? void 0 : _b.replace(/\n+/g, " ") });
      ref.add({ name: "nationality", value: item.country });
      ref.add({ name: "assignee", value: item.assignee });
      if (["langid", "both"].includes(Translator.preferences.language))
        ref.add({ name: "langid", value: babelLanguage(item.language) });
      if (["language", "both"].includes(Translator.preferences.language))
        ref.add({ name: "language", value: item.language });
      ref.add({ name: "volume", value: ref.normalizeDashes(item.volume) });
      if (!["book", "inbook", "incollection", "proceedings", "inproceedings"].includes(ref.entrytype) || !ref.has.volume)
        ref.add({ name: "number", value: item.number || item.issue || item.seriesNumber });
      ref.add({ name: "urldate", value: item.accessDate && item.accessDate.replace(/\s*T?\d+:\d+:\d+.*/, "") });
      if (ref.entrytype_source === "zotero.conferencePaper") {
        ref.add({ name: "booktitle", value: Translator.options.useJournalAbbreviation && item.journalAbbreviation || item.publicationTitle || item.conferenceName, bibtexStrings: true });
      } else if (["zotero.bookSection", "tex.chapter", "csl.chapter"].includes(ref.entrytype_source)) {
        ref.add({ name: "booktitle", value: item.publicationTitle || item.conferenceName, bibtexStrings: true });
      } else if (ref.getBibString(item.publicationTitle)) {
        ref.add({ name: "journal", value: item.publicationTitle, bibtexStrings: true });
      } else {
        ref.add({ name: "journal", value: Translator.options.useJournalAbbreviation && item.journalAbbreviation || item.publicationTitle, bibtexStrings: true });
      }
      let reftype = ref.entrytype_source.split(".")[1];
      if (reftype.endsWith("thesis"))
        reftype = "thesis";
      switch (reftype) {
        case "thesis":
          ref.add({ name: "school", value: item.publisher, bibtexStrings: true });
          break;
        case "report":
          ref.add({ name: "institution", value: item.publisher, bibtexStrings: true });
          break;
        case "computerProgram":
          ref.add({ name: "howpublished", value: item.publisher, bibtexStrings: true });
          break;
        default:
          ref.add({ name: "publisher", value: item.publisher, bibtexStrings: true });
          break;
      }
      const doi2 = item.DOI || item.extraFields.kv.DOI;
      let urlfield = null;
      if (Translator.preferences.DOIandURL === "both" || !doi2) {
        switch (Translator.preferences.bibtexURL) {
          case "url":
          case "url-ish":
            urlfield = ref.add({ name: "url", value: item.url || item.extraFields.kv.url, enc: Translator.verbatimFields.includes("url") ? "url" : "latex" });
            break;
          case "note":
          case "note-url-ish":
            urlfield = ref.add({ name: ["misc", "booklet"].includes(ref.entrytype) && !ref.has.howpublished ? "howpublished" : "note", value: item.url || item.extraFields.kv.url, enc: "url" });
            break;
          default:
            if (["csl.webpage", "zotero.webpage", "csl.post", "csl.post-weblog"].includes(ref.entrytype_source))
              urlfield = ref.add({ name: "howpublished", value: item.url || item.extraFields.kv.url });
            break;
        }
      }
      if (Translator.preferences.DOIandURL === "both" || !urlfield)
        ref.add({ name: "doi", value: (doi2 || "").replace(/^https?:\/\/doi.org\//i, "") });
      if (ref.entrytype_source.split(".")[1] === "thesis") {
        const thesistype = ref.thesistype(item.type, "phdthesis", "mastersthesis");
        if (thesistype) {
          ref.entrytype = thesistype;
          ref.remove("type");
        }
      }
      if (ref.entrytype === "inproceedings") {
        const sponsors = [];
        item.creators = item.creators.filter((creator) => {
          if (creator.creatorType !== "sponsor")
            return true;
          let sponsor2 = creator.source;
          sponsor2 = sponsor2.replace(/ and /g, " {and} ");
          if (Translator.and.names.repl !== " {and} ")
            sponsor2 = sponsor2.replace(Translator.and.names.re, Translator.and.names.repl);
          sponsors.push(sponsor2);
          return false;
        });
        ref.add({ name: "organization", value: sponsors.join(Translator.preferences.separatorList) });
      }
      ref.addCreators();
      if (ref.entrytype === "inbook" && ref.has.author && ref.has.editor)
        delete ref.has.editor;
      switch (ref.date.type) {
        case "verbatim":
          ref.add({ name: "year", value: ref.date.verbatim });
          break;
        case "interval":
          if (ref.date.from.month)
            ref.add({ name: "month", value: months[ref.date.from.month - 1], bare: true });
          ref.add({ name: "year", value: `${ref.date.from.year}` });
          break;
        case "date":
          if (ref.date.month)
            ref.add({ name: "month", value: months[ref.date.month - 1], bare: true });
          if (((_c = ref.date.orig) == null ? void 0 : _c.type) === "date") {
            ref.add({ name: "year", value: `[${ref.date.orig.year}] ${ref.date.year}` });
          } else {
            ref.add({ name: "year", value: `${ref.date.year}` });
          }
          break;
        case "season":
          ref.add({ name: "year", value: ref.date.year });
          break;
        default:
          log.error("Unexpected date type", { date: item.date, parsed: ref.date });
      }
      ref.add({ name: "keywords", value: item.tags, enc: "tags" });
      ref.add({ name: "pages", value: ref.normalizeDashes(item.pages) });
      ref.add({ name: "file", value: item.attachments, enc: "attachments" });
      ref.complete();
    }
    Exporter.complete();
    Zotero.write("\n");
  }
  function detectImport() {
    let detected = Zotero.getHiddenPref("better-bibtex.import");
    if (detected) {
      const input = Zotero.read(102400);
      const bib = bibtexParser2.chunker.parse(input, { max_entries: 1 });
      detected = !!bib.find((chunk) => chunk.entry);
    }
    return detected;
  }
  function importGroup(group, itemIDs, root = null) {
    const collection = new Zotero.Collection();
    collection.type = "collection";
    collection.name = group.name;
    collection.children = group.entries.filter((citekey) => itemIDs[citekey]).map((citekey) => ({ type: "item", id: itemIDs[citekey] }));
    for (const subgroup of group.groups || []) {
      collection.children.push(importGroup(subgroup, itemIDs));
    }
    if (root)
      collection.complete();
    return collection;
  }
  var ZoteroItem = class {
    constructor(id, bibtex, jabref, errors) {
      this.id = id;
      this.bibtex = bibtex;
      this.jabref = jabref;
      this.errors = errors;
      this.typeMap = {
        article: "journalArticle",
        book: "book",
        book_section: "bookSection",
        booklet: "book",
        codefragment: "computerProgram",
        collection: "book",
        conference: "conferencePaper",
        film: "film",
        generic: "journalArticle",
        inbook: "bookSection",
        incollection: "bookSection",
        inproceedings: "conferencePaper",
        inreference: "encyclopediaArticle",
        magazine_article: "magazineArticle",
        manual: "report",
        mastersthesis: "thesis",
        movie: "film",
        misc: "document",
        newspaper_article: "newspaperArticle",
        online: "webpage",
        patent: "patent",
        phdthesis: "thesis",
        proceedings: "book",
        report: "report",
        software: "computerProgram",
        softwaremodule: "computerProgram",
        softwareversion: "computerProgram",
        talk: "presentation",
        techreport: "report",
        thesis: "thesis",
        unpublished: "manuscript",
        video: "film",
        web_page: "webpage",
        webpage: "webpage"
      };
      this.hackyFields = [];
      this.eprint = {};
      this.bibtex.type = this.bibtex.type.toLowerCase();
      this.type = this.typeMap[this.bibtex.type];
      if (!this.type) {
        this.errors.push({ message: `Don't know what Zotero type to make of '${this.bibtex.type}' for ${this.bibtex.key ? `@${this.bibtex.key}` : "unnamed item"}, importing as ${this.type = "document"}` });
        this.hackyFields.push(`tex.entrytype: ${this.bibtex.type}`);
      }
      if (this.type === "book" && (this.bibtex.fields.title || []).length && (this.bibtex.fields.booktitle || []).length)
        this.type = "bookSection";
      if (this.type === "journalArticle" && (this.bibtex.fields.booktitle || []).length && this.bibtex.fields.booktitle[0].match(/proceeding/i))
        this.type = "conferencePaper";
      if (!valid.type[this.type])
        this.error(`import error: unexpected item ${this.bibtex.key} of type ${this.type}`);
      this.validFields = valid.field[this.type];
      if (!Object.keys(this.bibtex.fields).length) {
        this.errors.push({ message: `No fields in ${this.bibtex.key ? `@${this.bibtex.key}` : "unnamed item"}` });
        this.item = null;
      } else {
        this.item = new Zotero.Item(this.type);
        this.item.itemID = this.id;
        if (this.type === "report" && this.bibtex.type === "manual")
          this.$type("manual");
        this.import();
        if (Translator.preferences.testing) {
          const err = valid.test(JSON.parse(JSON.stringify(this.item)), true);
          if (err)
            this.error(`import error: ${this.type} ${this.bibtex.key}: ${err}
${JSON.stringify(this.item, null, 2)}`);
        }
      }
    }
    async complete() {
      if (this.item)
        await this.item.complete();
    }
    fallback(fields, value) {
      const field = fields.find((f) => label2[f]);
      if (field) {
        this.hackyFields.push(`${label2[field]}: ${value.replace(/\n+/g, "")}`);
        return true;
      }
      return false;
    }
    $title(_value) {
      let title2 = [];
      if (this.bibtex.fields.title)
        title2 = title2.concat(this.bibtex.fields.title);
      if (this.bibtex.fields.titleaddon)
        title2 = title2.concat(this.bibtex.fields.titleaddon);
      if (this.bibtex.fields.subtitle)
        title2 = title2.concat(this.bibtex.fields.subtitle);
      if (this.type === "encyclopediaArticle") {
        this.item.publicationTitle = title2.join(". ");
      } else {
        this.item.title = title2.join(". ");
      }
      return true;
    }
    $titleaddon(value) {
      return this.$title(value);
    }
    $subtitle(value) {
      return this.$title(value);
    }
    $holder(_value, _field) {
      if (this.item.itemType === "patent") {
        this.item.assignee = this.bibtex.fields.holder.map((name) => name.replace(/"/g, "")).join("; ");
      }
      return true;
    }
    $publisher(value, field) {
      const candidates = [field].concat(["institution", "publisher"]);
      field = candidates.find((f) => this.validFields[f]);
      if (!field)
        return this.fallback(candidates, value);
      this.item[field] = [
        (this.bibtex.fields.publisher || []).join(" and "),
        (this.bibtex.fields.institution || []).join(" and "),
        (this.bibtex.fields.school || []).join(" and ")
      ].filter((v) => v.replace(/[ \t\r\n]+/g, " ").trim()).join(" / ");
      return true;
    }
    $institution(value, field) {
      return this.$publisher(value, field);
    }
    $school(value, field) {
      return this.$publisher(value, field);
    }
    $address(value) {
      return this.set("place", value, ["place"]);
    }
    $location(value) {
      if (this.type === "conferencePaper") {
        this.hackyFields.push(`Place: ${value.replace(/\n+/g, "")}`);
        return true;
      }
      return this.$address(value);
    }
    "$call-number"(value) {
      return this.set("callNumber", value);
    }
    $edition(value) {
      value = value.replace(/^([0-9]+)(nd|th)$/, "$1");
      const numbers = (0, import_words_to_numbers.default)(value);
      if (typeof numbers === "number" || typeof numbers === "string" && numbers && !numbers.match(/\w/))
        value = numbers;
      return this.set("edition", value);
    }
    $isbn(value) {
      return this.set("ISBN", value);
    }
    $booktitle(value) {
      switch (this.type) {
        case "conferencePaper":
        case "bookSection":
          return this.set("publicationTitle", value);
        case "book":
          if ((this.bibtex.fields.title || []).includes(value))
            return true;
          if (!this.item.title)
            return this.set("title", value);
          break;
      }
      return this.fallback(["booktitle"], value);
    }
    $journaltitle() {
      let journal, abbr = null;
      const titles = ["journal-full", "journal", "journaltitle", "shortjournal"].map((field) => {
        var _a3;
        const value = ((_a3 = this.bibtex.fields[field]) == null ? void 0 : _a3[0]) || "";
        delete this.bibtex.fields[field];
        return { field, value };
      }).filter((candidate) => candidate.value).filter((candidate) => {
        if (!abbr && candidate.field === "shortjournal") {
          abbr = candidate;
          return false;
        }
        return true;
      }).filter((candidate) => {
        const assumed_abbrev = candidate.value.match(/[.].+[.]/) && !candidate.value.match(/[.][^ ]/) && !candidate.value.match(/[^.] /);
        if (assumed_abbrev) {
          if (!abbr) {
            abbr = candidate;
            return false;
          }
        } else if (!journal) {
          journal = candidate;
          return false;
        }
        return true;
      }).filter((candidate) => {
        if (!abbr) {
          abbr = candidate;
          return false;
        }
        return true;
      });
      for (const candidate of titles) {
        this.hackyFields.push(`tex.${candidate.field}: ${candidate.value}`);
      }
      if (journal) {
        switch (this.type) {
          case "conferencePaper":
            this.set("series", journal.value);
            break;
          default:
            this.set("publicationTitle", journal.value);
            break;
        }
      }
      if (abbr) {
        if (this.validFields.journalAbbreviation) {
          this.item.journalAbbreviation = abbr.value;
        } else if (!this.hackyFields.find((line) => line.startsWith("Journal abbreviation:"))) {
          this.hackyFields.push(`Journal abbreviation: ${abbr.value}`);
        } else {
          this.hackyFields.push(`tex.${abbr.field}: ${abbr.value}`);
        }
      }
      return true;
    }
    $journal() {
      return this.$journaltitle();
    }
    $shortjournal() {
      return this.$journaltitle();
    }
    "$journal-full"() {
      return this.$journaltitle();
    }
    $pages(value) {
      if (!this.validFields.pages)
        return this.fallback(["pages"], value);
      this.set("pages", value);
      return true;
    }
    $pagetotal(value) {
      if (!this.validFields.numPages)
        return this.fallback(["numPages"], value);
      this.set("numPages", value);
      return true;
    }
    $numpages(value, _field) {
      return this.$pagetotal(value);
    }
    $volume(value) {
      return this.set("volume", value);
    }
    $doi(value) {
      return this.set("DOI", value);
    }
    $abstract(value) {
      return this.set("abstractNote", value);
    }
    $keywords(_value) {
      let tags = this.bibtex.fields.keywords || [];
      tags = tags.concat(this.bibtex.fields.keyword || []);
      for (const mesh of this.bibtex.fields.mesh || []) {
        tags = tags.concat((mesh || "").trim().split(/\s*;\s*/).filter((tag) => tag));
      }
      tags = tags.sort();
      tags = tags.filter((item, pos, ary) => !pos || item !== ary[pos - 1]);
      this.item.tags = tags;
      return true;
    }
    $keyword(value) {
      return this.$keywords(value);
    }
    $mesh(value) {
      return this.$keywords(value);
    }
    $date(_value) {
      if (this.item.date)
        return true;
      const dates = (this.bibtex.fields.date || []).slice();
      const year2 = this.bibtex.fields.year && this.bibtex.fields.year[0] || "";
      let month = this.bibtex.fields.month && this.bibtex.fields.month[0] || "";
      const monthno = months.indexOf(month.toLowerCase());
      if (monthno >= 0)
        month = `0${monthno + 1}`.slice(-2);
      const day = this.bibtex.fields.day && this.bibtex.fields.day[0] || "";
      if (year2 && month.match(/^[0-9]+$/) && day.match(/^[0-9]+$/)) {
        dates.push(`${year2}-${month}-${day}`);
      } else if (year2 && month.match(/^[0-9]+$/)) {
        dates.push(`${year2}-${month}`);
      } else if (year2 && month && day) {
        dates.push(`${day} ${month} ${year2}`);
      } else if (year2 && month) {
        dates.push(`${month} ${year2}`);
      } else if (year2) {
        dates.push(year2);
      }
      this.item.date = Array.from(new Set(dates)).join(", ");
      return true;
    }
    $year(value) {
      return this.$date(value);
    }
    $month(value) {
      return this.$date(value);
    }
    $day(value) {
      return this.$date(value);
    }
    $files(value) {
      return this.$file(value);
    }
    $file(value) {
      const replace = {
        "\\;": "",
        "": ";",
        "\\:": "",
        "": ":",
        "\\\\": "",
        "": "\\"
      };
      for (const record of value.replace(/\\[\\;:]/g, (escaped) => replace[escaped]).split(";")) {
        const att = {
          mimeType: "",
          path: "",
          title: ""
        };
        const parts = record.split(":").map((str) => str.replace(/[\u0011\u0012\u0013]/g, (escaped) => replace[escaped]));
        switch (parts.length) {
          case 1:
            att.path = parts[0];
            break;
          case 3:
            att.title = parts[0];
            att.path = parts[1];
            att.mimeType = parts[2];
            break;
          default:
            log.error(`attachment import: Unexpected number of parts in file record '${record}': ${parts.length}`);
            att.path = parts.join(":");
            break;
        }
        if (!att.path) {
          log.error(`attachment import: file record '${record}' has no file path`);
          continue;
        }
        if (this.jabref.fileDirectory)
          att.path = `${this.jabref.fileDirectory}${Translator.paths.sep}${att.path}`;
        if (att.mimeType.toLowerCase() === "pdf" || !att.mimeType && att.path.toLowerCase().endsWith(".pdf")) {
          att.mimeType = "application/pdf";
        }
        if (!att.mimeType)
          delete att.mimeType;
        att.title = att.title || att.path.split(/[\\/]/).pop().replace(/\.[^.]+$/, "");
        if (!att.title)
          delete att.title;
        this.item.attachments.push(att);
      }
      return true;
    }
    $license(value) {
      if (this.validFields.rights) {
        this.set("rights", value);
        return true;
      } else {
        return this.fallback(["rights"], value);
      }
    }
    $version(value) {
      if (this.validFields.versionNumber) {
        this.set("versionNumber", value);
        return true;
      } else {
        return this.fallback(["versionNumber"], value);
      }
    }
    $urldate(value) {
      return this.set("accessDate", value);
    }
    $lastchecked(value) {
      return this.$urldate(value);
    }
    $number(value, field) {
      if (this.bibtex.fields.number && this.validFields.number && this.bibtex.fields.issue && this.validFields.issue) {
        this.set("issue", this.bibtex.fields.issue);
        this.set("number", this.bibtex.fields.number);
        return true;
      }
      const candidates = [field].concat(["seriesNumber", "number", "issue"]);
      field = candidates.find((f) => this.validFields[f]);
      if (!field)
        return this.fallback(candidates, value);
      this.set(field, value);
      return true;
    }
    $issue(value, field) {
      return this.$number(value, field);
    }
    $issn(value) {
      if (!this.validFields.ISSN)
        return this.fallback(["ISSN"], value);
      return this.set("ISSN", value);
    }
    $url(value, field) {
      let m, url2;
      value = value.replace(/\\/g, "");
      if (m = value.match(/^(\\url{)(https?:\/\/|mailto:)}$/i)) {
        url2 = m[2];
      } else if (field === "url" || /^(https?:\/\/|mailto:)/i.test(value)) {
        url2 = value;
      } else {
        url2 = null;
      }
      if (!url2)
        return false;
      if (this.item.url)
        return this.item.url === url2;
      this.item.url = url2;
      return true;
    }
    $howpublished(value, field) {
      return this.$url(value, field);
    }
    "$remote-url"(value, field) {
      return this.$url(value, field);
    }
    $type(value) {
      if (this.type === "patent") {
        this.numberPrefix = { patent: "", patentus: "US", patenteu: "EP", patentuk: "GB", patentdede: "DE", patentfr: "FR" }[value.toLowerCase()];
        return typeof this.numberPrefix !== "undefined";
      }
      if (!this.validFields.type)
        return this.fallback(["type"], value);
      this.set("type", value);
      return true;
    }
    $lista(value) {
      if (this.type !== "encyclopediaArticle" || !!this.item.title)
        return false;
      this.set("title", value);
      return true;
    }
    $annotation(value, field) {
      if (Translator.importToExtra[field]) {
        let plaintext = value.replace(/<p>/g, "").replace(/<\/p>/g, "\n\n").trim();
        if (Translator.importToExtra[field] === "force")
          plaintext = plaintext.replace(/<[^>]+>/g, "");
        if (!plaintext.includes("<")) {
          this.addToExtra(plaintext);
          return true;
        }
      }
      this.item.notes.push(value);
      return true;
    }
    $comment(value) {
      return this.$annotation(value, "comment");
    }
    $annote(value) {
      return this.$annotation(value, "annote");
    }
    $review(value) {
      return this.$annotation(value, "review");
    }
    $notes(value) {
      return this.$annotation(value, "notes");
    }
    $note(value) {
      return this.$annotation(value, "note");
    }
    $series(value) {
      return this.set("series", value);
    }
    $groups(value) {
      for (const group of value.split(/\s*,\s*/)) {
        if (this.jabref.groups[group] && !this.jabref.groups[group].entries.includes(this.bibtex.key))
          this.jabref.groups[group].entries.push(this.bibtex.key);
      }
      return true;
    }
    $language(_value, _field) {
      var _a3, _b;
      return this.set("language", ((_a3 = this.bibtex.fields.language) == null ? void 0 : _a3[0]) || ((_b = this.bibtex.fields.langid) == null ? void 0 : _b[0]));
    }
    $langid(value, field) {
      return this.$language(value, field);
    }
    $shorttitle(value) {
      return this.set("shortTitle", value);
    }
    $eprinttype(value, field) {
      this.eprint[field] = value.trim();
      this.eprint.eprintType = {
        arxiv: "arXiv",
        jstor: "JSTOR",
        pubmed: "PMID",
        hdl: "HDL",
        googlebooks: "GoogleBooksID"
      }[this.eprint[field].toLowerCase()] || "";
      return true;
    }
    $archiveprefix(value, field) {
      return this.$eprinttype(value, field);
    }
    $eprint(value, field) {
      this.eprint[field] = value;
      return true;
    }
    $eprintclass(value, field) {
      return this.$eprint(value, field);
    }
    $primaryclass(value, _field) {
      return this.$eprint(value, "eprintclass");
    }
    $slaccitation(value, field) {
      return this.$eprint(value, field);
    }
    $nationality(value) {
      return this.set("country", value);
    }
    $chapter(value) {
      const candidates = ["section", "bookSection"];
      const field = candidates.find((f) => this.validFields[f]);
      if (!field)
        return this.fallback(candidates, value);
      return this.set(field, value);
    }
    $origdate(value) {
      if (!this.fallback(["originaldate"], value))
        this.hackyFields.push(`Original Date: ${value}`);
      return true;
    }
    error(err) {
      log.error(err);
      throw new Error(err);
    }
    import() {
      for (const subtitle of ["titleaddon", "subtitle"]) {
        if (!this.bibtex.fields.title && this.bibtex.fields[subtitle]) {
          this.bibtex.fields.title = this.bibtex.fields[subtitle];
          delete this.bibtex.fields[subtitle];
        }
      }
      const creatorTypes = [
        "author",
        "editor",
        "translator"
      ];
      const creatorTypeMap = {
        author: "author",
        "film.author": "director",
        editor: "editor",
        "film.editor": "scriptwriter",
        translator: "translator",
        bookauthor: "bookAuthor",
        collaborator: "contributor",
        commentator: "commenter",
        director: "director",
        editora: "editor",
        editorb: "editor",
        editors: "editor",
        scriptwriter: "scriptwriter"
      };
      const creatorsForType = Zotero.Utilities.getCreatorsForType(this.item.itemType);
      for (const type2 of creatorTypes.concat(Object.keys(this.bibtex.creators).filter((other) => !creatorTypes.includes(other)))) {
        if (type2 === "holder" && this.type === "patent")
          continue;
        if (!this.bibtex.fields[type2])
          continue;
        const creators = this.bibtex.fields[type2].length ? this.bibtex.creators[type2] : [];
        delete this.bibtex.fields[type2];
        let creatorType = creatorTypeMap[`${this.item.itemType}.${type2}`] || creatorTypeMap[type2];
        if (creatorType === "author")
          creatorType = ["director", "inventor", "programmer", "author"].find((t) => creatorsForType.includes(t));
        if (!creatorsForType.includes(creatorType))
          creatorType = null;
        if (!creatorType && type2 === "bookauthor" && creatorsForType.includes("author"))
          creatorType = "author";
        if (!creatorType)
          creatorType = "contributor";
        for (const creator of creators) {
          const name = { creatorType };
          if (creator.literal) {
            name.lastName = creator.literal.replace(/\u00A0/g, " ");
            name.fieldMode = 1;
          } else {
            name.firstName = creator.firstName || "";
            name.lastName = creator.lastName || "";
            if (creator.prefix)
              name.lastName = `${creator.prefix} ${name.lastName}`.trim();
            if (creator.suffix)
              name.lastName = name.lastName ? `${name.lastName}, ${creator.suffix}` : creator.suffix;
            name.firstName = name.firstName.replace(/\u00A0/g, " ").trim();
            name.lastName = name.lastName.replace(/\u00A0/g, " ").trim();
            if (name.lastName && !name.firstName)
              name.fieldMode = 1;
          }
          this.item.creators.push(name);
        }
      }
      for (const [field, values] of Object.entries(this.bibtex.fields)) {
        this.bibtex.fields[field] = values.map((value) => typeof value === "string" ? value.replace(/\u00A0/g, " ").trim() : `${value}`);
      }
      const zoteroField = {
        conference: "conferenceName"
      };
      for (const [field, values] of Object.entries(this.bibtex.fields)) {
        for (const value of values) {
          if (field.match(/^(local-zo-url-[0-9]+)|(file-[0-9]+)$/)) {
            if (this.$file(value))
              continue;
          } else if (field.match(/^bdsk-url-[0-9]+$/)) {
            if (this.$url(value, field))
              continue;
          } else if (field.match(/^note_[0-9]+$/)) {
            if (this.$note(value))
              continue;
          }
          if (this[`$${field}`] && this[`$${field}`](value, field))
            continue;
          switch (field) {
            case "pst":
              this.hackyFields.push(`tex.howpublished: ${value}`);
              break;
            case "doi":
              this.hackyFields.push(`DOI: ${value}`);
              break;
            case "issn":
              this.hackyFields.push(`ISSN: ${value}`);
              break;
            case "pmid":
              this.hackyFields.push(`PMID: ${value}`);
              break;
            case "subject":
              this.hackyFields.push(`tex.${field}: ${value}`);
              break;
            case "origtitle":
              this.hackyFields.push(`Original title: ${value}`);
              break;
            case "origlocation":
              this.hackyFields.push(`Original publisher place: ${value}`);
              break;
            default:
              if (value.indexOf("\n") >= 0) {
                this.item.notes.push(`<p><b>${Zotero.Utilities.text2html(field, false)}</b></p>${Zotero.Utilities.text2html(value, false)}`);
              } else {
                const candidates = [field, zoteroField[field]];
                let name;
                if ((name = candidates.find((f) => this.validFields[f])) && !this.item[field]) {
                  this.item[name] = value;
                } else if (name = candidates.find((f) => label2[f])) {
                  this.hackyFields.push(`${label2[name]}: ${value}`);
                } else {
                  this.hackyFields.push(`tex.${field}: ${value}`);
                }
              }
              break;
          }
        }
      }
      if (Translator.preferences.rawImports && Translator.preferences.rawLaTag !== "*") {
        if (!this.item.tags)
          this.item.tags = [];
        this.item.tags.push({ tag: Translator.preferences.rawLaTag, type: 1 });
      }
      if (this.numberPrefix && this.item.number && !this.item.number.toLowerCase().startsWith(this.numberPrefix.toLowerCase()))
        this.item.number = `${this.numberPrefix}${this.item.number}`;
      if (this.bibtex.key)
        this.hackyFields.push(`Citation Key: ${this.bibtex.key}`);
      if (this.eprint.slaccitation && !this.eprint.eprint) {
        const m = this.eprint.slaccitation.match(/^%%CITATION = (.+);%%$/);
        const arxiv = arXiv.parse(m && m[1].trim());
        if (arxiv.id) {
          this.eprint.eprintType = this.eprint.eprinttype = "arXiv";
          if (!this.eprint.archiveprefix)
            this.eprint.archiveprefix = "arXiv";
          this.eprint.eprint = arxiv.id;
          if (!this.eprint.eprintclass && arxiv.category)
            this.eprint.eprintclass = arxiv.category;
        }
      }
      delete this.eprint.slaccitation;
      if (this.eprint.eprintType && this.eprint.eprint) {
        const eprintclass = this.eprint.eprintType === "arXiv" && this.eprint.eprintclass ? ` [${this.eprint.eprintclass}]` : "";
        this.hackyFields.push(`${this.eprint.eprintType}: ${this.eprint.eprint}${eprintclass}`);
      } else {
        delete this.eprint.eprintType;
        for (const [k, v] of Object.entries(this.eprint)) {
          this.hackyFields.push(`tex.${k.toLowerCase()}: ${v}`);
        }
      }
      this.hackyFields = this.hackyFields.filter((line) => {
        if (line.startsWith("Citation Key:"))
          return Translator.preferences.importCitationKey;
        if (line.startsWith("tex."))
          return Translator.preferences.importExtra;
        return true;
      });
      if (this.hackyFields.length > 0) {
        this.hackyFields.sort((a, b) => {
          a = a.toLowerCase();
          b = b.toLowerCase();
          if (a === b)
            return 0;
          if (a.startsWith("citation key:"))
            return -1;
          if (b.startsWith("citation key:"))
            return 1;
          const ta = a.startsWith("tex.");
          const tb = b.startsWith("tex.");
          if (ta === tb)
            return a.localeCompare(b, void 0, { sensitivity: "base" });
          return ta ? 1 : -1;
        });
        this.item.extra = this.hackyFields.map((line) => line.replace(/\n+/g, " ")).concat(this.item.extra || "").join("\n").trim();
      }
      if (!this.item.publisher && this.item.backupPublisher) {
        this.item.publisher = this.item.backupPublisher;
        delete this.item.backupPublisher;
      }
    }
    addToExtra(str) {
      if (this.item.extra && this.item.extra !== "") {
        this.item.extra += `
${str}`;
      } else {
        this.item.extra = str;
      }
    }
    set(field, value, fallback = null) {
      if (!this.validFields[field])
        return fallback && this.fallback(fallback, value);
      if (Translator.preferences.testing && (this.item[field] || typeof this.item[field] === "number") && (value || typeof value === "number") && this.item[field] !== value) {
        this.error(`import error: duplicate ${field} on ${this.type} ${this.bibtex.key} (old: ${this.item[field]}, new: ${value})`);
      }
      this.item[field] = value;
      return true;
    }
  };
  async function fetch_polyfill(url2) {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.open("GET", url2);
      xhr.onload = function() {
        if (this.status >= 200 && this.status < 300) {
          resolve({
            json: () => JSON.parse(xhr.response),
            text: () => xhr.response
          });
        } else {
          reject({
            status: this.status,
            statusText: xhr.statusText
          });
        }
      };
      xhr.onerror = function() {
        reject({
          status: this.status,
          statusText: xhr.statusText
        });
      };
      xhr.send();
    });
  }
  async function doImport() {
    Translator.init("import");
    const unabbreviate = Translator.preferences.importJabRefAbbreviations ? await (await fetch_polyfill("resource://zotero-better-bibtex/unabbrev/unabbrev.json")).json() : void 0;
    const strings = Translator.preferences.importJabRefStrings ? await (await fetch_polyfill("resource://zotero-better-bibtex/unabbrev/strings.bib")).text() : void 0;
    let read;
    let input = "";
    while ((read = Zotero.read(1048576)) !== false) {
      input += read;
    }
    if (Translator.preferences.strings && Translator.preferences.importBibTeXStrings)
      input = `${Translator.preferences.strings}
${input}`;
    const bib = await bibtexParser2.promises.parse(input, {
      caseProtection: Translator.preferences.importCaseProtection,
      errorHandler: Translator.preferences.testing ? void 0 : function(err) {
        log.error(err);
      },
      unknownCommandHandler: function(node) {
        switch (Translator.preferences.importUnknownTexCommand) {
          case "tex":
            return this.text(`<script>${node.source}<\/script>`);
          case "text":
            return this.text(node.source);
          case "ignore":
            return this.text("");
          default:
            throw new Error(`Unexpected unknownCommandHandler ${JSON.stringify(Translator.preferences.importUnknownTexCommand)}`);
        }
      },
      markup: Translator.csquotes ? { enquote: Translator.csquotes } : {},
      sentenceCase: Translator.preferences.importSentenceCase !== "off",
      guessAlreadySentenceCased: Translator.preferences.importSentenceCase === "on+guess",
      verbatimFields: Translator.verbatimFields,
      raw: Translator.preferences.rawImports,
      unabbreviate,
      strings
    });
    const errors = bib.errors;
    const whitelist = bib.comments.filter((comment) => comment.startsWith("zotero-better-bibtex:whitelist:")).map((comment) => comment.toLowerCase().replace(/\s/g, "").split(":").pop().split(",").filter((key) => key))[0];
    const itemIDS = {};
    let imported = 0;
    let id = 0;
    for (const bibtex of bib.entries) {
      if (bibtex.key && whitelist && !whitelist.includes(bibtex.key.toLowerCase()))
        continue;
      id++;
      if (bibtex.key)
        itemIDS[bibtex.key] = id;
      try {
        await new ZoteroItem(id, bibtex, bib.jabref, errors).complete();
      } catch (err) {
        log.error("bbt import error:", err);
        errors.push({ message: err.message });
      }
      imported += 1;
      Zotero.setProgress(imported / bib.entries.length * 100);
    }
    for (const group of bib.jabref.root || []) {
      importGroup(group, itemIDS, true);
    }
    if (errors.length) {
      const item = new Zotero.Item("note");
      item.note = "Import errors found: <ul>";
      for (const err of errors) {
        item.note += "<li>";
        if (err.line) {
          item.note += `line ${err.line}`;
          if (err.column)
            item.note += `, column ${err.column}`;
          item.note += ": ";
        }
        item.note += html(err.message);
        if (err.source)
          item.note += `<pre>${html(err.source)}</pre>`;
        item.note += "</li>";
      }
      item.note += "</ul>";
      item.tags = [{ tag: "#Better BibTeX import error", type: 1 }];
      await item.complete();
    }
    Zotero.setProgress(100);
  }
  return __toCommonJS(Better_BibTeX_exports);
})();
/*!
 * XRegExp 5.1.1
 * <xregexp.com>
 * Steven Levithan (c) 2007-present MIT License
 */
/*!
 * XRegExp Unicode Base 5.1.1
 * <xregexp.com>
 * Steven Levithan (c) 2008-present MIT License
 */
/*!
 * XRegExp Unicode Categories 5.1.1
 * <xregexp.com>
 * Steven Levithan (c) 2010-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
/*!
 * XRegExp Unicode Properties 5.1.1
 * <xregexp.com>
 * Steven Levithan (c) 2012-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
/*!
 * XRegExp Unicode Scripts 5.1.1
 * <xregexp.com>
 * Steven Levithan (c) 2010-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
/*!
 * XRegExp.build 5.1.1
 * <xregexp.com>
 * Steven Levithan (c) 2012-present MIT License
 */
/*!
 * XRegExp.matchRecursive 5.1.1
 * <xregexp.com>
 * Steven Levithan (c) 2009-present MIT License
 */
/*! https://mths.be/he v1.2.0 by @mathias | MIT license */
/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
var { Translator, detectImport, doExport, doImport } = Translator___detectImport___doExport___doImport;
